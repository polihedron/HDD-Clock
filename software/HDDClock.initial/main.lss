
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000420e  000042a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000420e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  00800100  00800100  000042a2  2**0
                  ALLOC
  3 .noinit       00000000  00800137  00800137  000042a2  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  000042a2  2**0
                  CONTENTS
  5 .stab         00000408  00000000  00000000  000042a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  000046ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 0000003c  00000000  00000000  00004730  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000003b5  00000000  00000000  0000476c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000020ea  00000000  00000000  00004b21  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000388  00000000  00000000  00006c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000100b  00000000  00000000  00006f93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000445  00000000  00000000  00007f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fa 14 	jmp	0x29f4 <__init>
       4:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
       8:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
       c:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      10:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      14:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      18:	0c 94 1a 1e 	jmp	0x3c34 <__vector_6>
      1c:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      20:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      24:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      28:	0c 94 91 1d 	jmp	0x3b22 <__vector_10>
      2c:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      30:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      34:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      38:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      3c:	0c 94 82 17 	jmp	0x2f04 <__vector_15>
      40:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      44:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      48:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      4c:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      50:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      54:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      58:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      5c:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      60:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      64:	0c 94 26 17 	jmp	0x2e4c <__vector_25>
      68:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      6c:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      70:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      74:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      78:	0c 94 e5 16 	jmp	0x2dca <__vector_30>
      7c:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      80:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      84:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>
      88:	0c 94 17 15 	jmp	0x2a2e <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	ba 1c       	adc	r11, r10
      8e:	91 1c       	adc	r9, r1
      90:	77 1c       	adc	r7, r7
      92:	5d 1c       	adc	r5, r13
      94:	43 1c       	adc	r4, r3
      96:	29 1c       	adc	r2, r9
      98:	0f 1c       	adc	r0, r15
      9a:	f5 1b       	sub	r31, r21
      9c:	db 1b       	sub	r29, r27
      9e:	c1 1b       	sub	r28, r17
      a0:	a7 1b       	sub	r26, r23
      a2:	8d 1b       	sub	r24, r29
      a4:	73 1b       	sub	r23, r19
      a6:	59 1b       	sub	r21, r25
      a8:	3f 1b       	sub	r19, r31
      aa:	25 1b       	sub	r18, r21
      ac:	0c 1b       	sub	r16, r28

000000ae <g_hour_hand>:
      ae:	28 28 27 27 27 27 27 28 28 28 28 27 27 27 27 27     (('''''(((('''''
      be:	28 28 27 27 00 00 00 00 00 27 27 27 27 27 27 27     ((''.....'''''''
      ce:	27 27 27 27 27 27 14 14 14 14 14 27 27 27 27 00     ''''''.....''''.
      de:	00 00 00 00 27 27 27 27 27 27 27 27 27 27 27 27     ....''''''''''''
      ee:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 27     ''''''''''.....'
      fe:	27 27 27 00 00 00 00 00 27 27 27 27 00 00 00 00     '''.....''''....
     10e:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     .'''''''''''''..
     11e:	00 00 00 27 27 27 27 00 00 00 00 00 27 27 27 27     ...''''.....''''
     12e:	00 00 00 00 00 27 27 28 27 27 27 27 27 27 27 28     .....''('''''''(
     13e:	28 27 27 27 27 27 27 27 28 28 27 27 27 27 27 27     ('''''''((''''''
     14e:	27 28                                               '(

00000150 <g_minute_hand>:
     150:	28 28 27 27 27 27 27 28 28 28 27 27 00 00 00 27     (('''''(((''...'
     160:	27 28 28 28 27 27 27 27 27 28 28 28 27 27 00 00     '((('''''(((''..
     170:	00 27 27 28 28 28 27 27 27 27 27 28 28 28 27 27     .''((('''''(((''
     180:	14 14 14 27 27 28 28 27 27 00 00 00 27 27 28 28     ...''((''...''((
     190:	27 27 00 00 00 27 27 28 28 28 27 27 27 27 27 28     ''...''((('''''(
     1a0:	28 28 28 27 27 27 27 27 28 28 28 27 27 00 00 00     ((('''''(((''...
     1b0:	27 27 28 28 28 27 27 27 27 27 28 28 28 28 27 00     ''((('''''(((('.
     1c0:	00 00 27 28 28 28 27 27 00 00 00 27 27 28 28 28     ..'(((''...''(((
     1d0:	27 00 00 00 27 28 28 28 28 28 27 27 27 28 28 28     '...'((((('''(((
     1e0:	28 28 28 27 27 27 28 28 28 28 28 28 27 27 27 28     ((('''(((((('''(
     1f0:	28 28                                               ((

000001f2 <g_second_hand>:
     1f2:	28 28 27 27 00 27 27 28 28 28 28 28 27 27 27 28     ((''.''((((('''(
     202:	28 28 28 28 28 27 27 27 28 28 28 28 28 27 27 00     ((((('''(((((''.
     212:	27 27 28 28 28 28 28 27 27 27 28 28 28 28 28 28     ''((((('''((((((
     222:	27 27 27 28 28 28 28 28 27 27 00 27 27 28 28 28     '''(((((''.''(((
     232:	28 28 27 27 27 28 28 28 28 28 28 27 27 27 28 28     (('''(((((('''((
     242:	28 28 28 27 27 00 27 27 28 28 28 28 28 27 27 27     (((''.''((((('''
     252:	28 28 28 28 28 28 27 27 27 28 28 28 28 28 27 27     (((((('''(((((''
     262:	00 27 27 28 28 28 28 28 27 27 27 28 28 28 28 28     .''((((('''(((((
     272:	28 27 27 27 28 28 28 28 28 28 00 00 00 28 28 28     ('''((((((...(((
     282:	28 28 28 27 27 27 28 28 28 28 28 28 27 27 27 28     ((('''(((((('''(
     292:	28 28                                               ((

00000294 <gc_background>:
	...
     2bc:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
     2cc:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
     2dc:	20 21 22 23 24 25 26 27 27 27 27 27 27 27 27 27      !"#$%&'''''''''
     2ec:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     2fc:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     30c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     31c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     32c:	27 27 27 27 27 27 27 27 27 26 25 24 23 22 21 20     '''''''''&%$#"! 
     33c:	1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10     ................
     34c:	0f 0e 0d 0c 0b 0a 09 08 07 06 05 04 03 02 01 00     ................
	...
     3ac:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
     3bc:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
     3cc:	20 21 22 23 24 25 26 27 27 27 27 27 27 27 27 27      !"#$%&'''''''''
     3dc:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     3ec:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     3fc:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     40c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     41c:	27 27 27 27 27 27 27 27 27 26 25 24 23 22 21 20     '''''''''&%$#"! 
     42c:	1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10     ................
     43c:	0f 0e 0d 0c 0b 0a 09 08 07 06 05 04 03 02 01 00     ................
	...
     474:	27 26 25 24 23 22 21 20 1f 1e 1d 1c 1b 1a 19 18     '&%$#"! ........
     484:	17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a 09 08     ................
     494:	07 06 05 04 03 02 01 00 00 00 00 00 00 00 00 00     ................
	...
     4ec:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
     4fc:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
     50c:	20 21 22 23 24 25 26 27 27 27 27 27 27 27 27 27      !"#$%&'''''''''
     51c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     52c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     53c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     54c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     55c:	27 27 27 27 27 27 27 27 27 26 25 24 23 22 21 20     '''''''''&%$#"! 
     56c:	1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10     ................
     57c:	0f 0e 0d 0c 0b 0a 09 08 07 06 05 04 03 02 01 00     ................
	...
     5dc:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
     5ec:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
     5fc:	20 21 22 23 24 25 26 27 27 27 27 27 27 27 27 27      !"#$%&'''''''''
     60c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     61c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     62c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     63c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     64c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     65c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     66c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     67c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     68c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     69c:	27 27 27 27 27 27 27 27 27 26 25 24 23 22 21 20     '''''''''&%$#"! 
     6ac:	1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10     ................
     6bc:	0f 0e 0d 0c 0b 0a 09 08 07 06 05 04 03 02 01 00     ................
	...
     71c:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
     72c:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
     73c:	20 21 22 23 24 25 26 27 27 27 27 27 27 27 27 27      !"#$%&'''''''''
     74c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     75c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     76c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     77c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     78c:	27 27 27 27 27 27 27 27 27 26 25 24 23 22 21 20     '''''''''&%$#"! 
     79c:	1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10     ................
     7ac:	0f 0e 0d 0c 0b 0a 09 08 07 06 05 04 03 02 01 00     ................
	...
     80c:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
     81c:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
     82c:	20 21 22 23 24 25 26 27 00 00 00 00 00 00 00 00      !"#$%&'........
	...
     85c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     86c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     87c:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
     8ac:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     8bc:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     8cc:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
     8fc:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     90c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     91c:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
     94c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     95c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     96c:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
     99c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     9ac:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     9bc:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
     9ec:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     9fc:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     a0c:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
     a3c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     a4c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     a5c:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
     a8c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     a9c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     aac:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
     adc:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     aec:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     afc:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
     b2c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     b3c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     b4c:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
     b7c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     b8c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     b9c:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
     bcc:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     bdc:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     bec:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     bfc:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     c0c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     c1c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     c2c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     c3c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     c4c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     c5c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     c6c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     c7c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     c8c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     c9c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     cac:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     cbc:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     ccc:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     cdc:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     cec:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     cfc:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     d0c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     d1c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     d2c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     d3c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     d4c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     d5c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     d6c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     d7c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     d8c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     d9c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     dac:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     dbc:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     dcc:	27 27 27 27 27 27 27 27 0c 0c 0c 0d 0d 0e 0e 0f     ''''''''........
     ddc:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
     dec:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
     dfc:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
     e0c:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
     e1c:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
     e2c:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
     e3c:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
     e4c:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
     e5c:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
     e6c:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
     e7c:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
     e8c:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
     e9c:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
     eac:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
     ebc:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
     ecc:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
     edc:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
     eec:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
     efc:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
     f0c:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
     f1c:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
     f2c:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
     f3c:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
     f4c:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
     f5c:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
     f6c:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
     f7c:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
     f8c:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
     f9c:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
     fac:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
     fbc:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
     fcc:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
     fdc:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
     fec:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
     ffc:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    100c:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    101c:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    102c:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    103c:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    104c:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    105c:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    106c:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    107c:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    108c:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    109c:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    10ac:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    10bc:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    10cc:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    10dc:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    10ec:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    10fc:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    110c:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    111c:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    112c:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    113c:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    114c:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    115c:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    116c:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    117c:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    118c:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    119c:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    11ac:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    11bc:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    11cc:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    11dc:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    11ec:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    11fc:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    120c:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    121c:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    122c:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    123c:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    124c:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    125c:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    126c:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    127c:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    128c:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    129c:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    12ac:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    12bc:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    12cc:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    12dc:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    12ec:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    12fc:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    130c:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    131c:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    132c:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    133c:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    134c:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    135c:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    136c:	0f 0e 0e 0d 0d 0c 0c 0c 25 24 24 23 23 22 22 21     ........%$$##""!
    137c:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    138c:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    139c:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    13ac:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    13bc:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    13cc:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    13dc:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    13ec:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    13fc:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    140c:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    141c:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    142c:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    143c:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    144c:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    145c:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    146c:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    147c:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    148c:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    149c:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    14ac:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    14bc:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    14cc:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    14dc:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    14ec:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    14fc:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    150c:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    151c:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    152c:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    153c:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    154c:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    155c:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    156c:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    157c:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    158c:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    159c:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    15ac:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    15bc:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    15cc:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    15dc:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    15ec:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    15fc:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    160c:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    161c:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    162c:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    163c:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    164c:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    165c:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    166c:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    167c:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    168c:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    169c:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    16ac:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    16bc:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    16cc:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    16dc:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    16ec:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    16fc:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    170c:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    171c:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    172c:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    173c:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    174c:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    175c:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    176c:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    177c:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    178c:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    179c:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    17ac:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    17bc:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    17cc:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    17dc:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    17ec:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    17fc:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    180c:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    181c:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    182c:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    183c:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    184c:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    185c:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    186c:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    187c:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    188c:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    189c:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    18ac:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    18bc:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    18cc:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    18dc:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    18ec:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    18fc:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    190c:	21 22 22 23 23 24 24 25                             !""##$$%

00001914 <g_background>:
    1914:	27 26 25 24 23 22 21 20 1f 1e 1d 1c 1b 1a 19 18     '&%$#"! ........
    1924:	17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a 09 08     ................
    1934:	07 06 05 04 03 02 01 00 00 00 00 00 00 00 00 00     ................
	...
    198c:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
    199c:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
    19ac:	20 21 22 23 24 25 26 27 27 27 27 27 27 27 27 27      !"#$%&'''''''''
    19bc:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    19cc:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    19dc:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    19ec:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    19fc:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    1a2c:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
    1a3c:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
    1a4c:	20 21 22 23 24 25 26 27 27 27 27 27 27 27 27 27      !"#$%&'''''''''
    1a5c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1a6c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1a7c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1a8c:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1a9c:	27 27 27 27 27 27 27 27 27 26 25 24 23 22 21 20     '''''''''&%$#"! 
    1aac:	1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10     ................
    1abc:	0f 0e 0d 0c 0b 0a 09 08 07 06 05 04 03 02 01 00     ................
	...
    1af4:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1b04:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1b14:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1b24:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1b34:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1b44:	27 26 25 24 23 22 21 20 1f 1e 1d 1c 1b 1a 19 18     '&%$#"! ........
    1b54:	17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a 09 08     ................
    1b64:	07 06 05 04 03 02 01 00 00 00 00 00 00 00 00 00     ................
	...
    1bbc:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
    1bcc:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
    1bdc:	20 21 22 23 24 25 26 27 27 00 00 00 00 00 00 00      !"#$%&''.......
	...
    1bf8:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     '...............
    1c08:	00 00 00 00 27 01 02 03 04 05 06 07 08 09 0a 0b     ....'...........
    1c18:	0c 0d 0e 0f 10 11 12 13 27 15 16 17 18 19 1a 1b     ........'.......
    1c28:	1c 1d 1e 1f 20 21 22 23 24 25 26 27 27 27 27 27     .... !"#$%&'''''
    1c38:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1c48:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1c58:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1c68:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1c78:	27 27 27 27 27 27 27 27 27 27 27 27 27 26 25 24     '''''''''''''&%$
    1c88:	23 22 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14     #"! ............
    1c98:	27 12 11 10 0f 0e 0d 0c 0b 0a 09 08 07 06 05 04     '...............
    1ca8:	03 02 01 00 27 00 00 00 00 00 00 00 00 00 00 00     ....'...........
	...
    1cc0:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     '...............
    1cd0:	00 00 00 00 27 26 25 24 23 22 21 20 1f 1e 1d 1c     ....'&%$#"! ....
    1ce0:	1b 1a 19 18 17 16 15 14 27 12 11 10 0f 0e 0d 0c     ........'.......
    1cf0:	0b 0a 09 08 07 06 05 04 03 02 01 00 27 00 00 00     ............'...
	...
    1d10:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     '...............
    1d20:	00 00 00 00 27 00 00 00 00 00 00 00 00 00 00 00     ....'...........
	...
    1d38:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     '...............
    1d48:	00 00 00 00 27 01 02 03 04 05 06 07 08 09 0a 0b     ....'...........
    1d58:	0c 0d 0e 0f 10 11 12 13 27 15 16 17 18 19 1a 1b     ........'.......
    1d68:	1c 1d 1e 1f 20 21 22 23 24 25 26 27 27 27 27 27     .... !"#$%&'''''
    1d78:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1d88:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1d98:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1da8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1db8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1dc8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1dd8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1de8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1df8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1e08:	27 27 27 27 27 27 27 27 27 27 27 27 27 26 25 24     '''''''''''''&%$
    1e18:	23 22 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14     #"! ............
    1e28:	27 12 11 10 0f 0e 0d 0c 0b 0a 09 08 07 06 05 04     '...............
    1e38:	03 02 01 00 27 00 00 00 00 00 00 00 00 00 00 00     ....'...........
	...
    1e50:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     '...............
    1e60:	00 00 00 00 27 00 00 00 00 00 00 00 00 00 00 00     ....'...........
	...
    1e78:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     '...............
    1e88:	00 00 00 00 27 01 02 03 04 05 06 07 08 09 0a 0b     ....'...........
    1e98:	0c 0d 0e 0f 10 11 12 13 27 15 16 17 18 19 1a 1b     ........'.......
    1ea8:	1c 1d 1e 1f 20 21 22 23 24 25 26 27 00 27 27 27     .... !"#$%&'.'''
    1eb8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1ec8:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    1ed8:	27 27 27 27 00 27 27 27 27 27 27 27 27 27 27 27     ''''.'''''''''''
    1ee8:	27 27 27 27 27 27 27 27 00 27 27 27 27 27 27 27     ''''''''.'''''''
    1ef8:	27 27 27 27 27 27 27 27 27 27 27 27 00 27 27 27     ''''''''''''.'''
    1f08:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1f18:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    1f28:	27 27 27 27 00 27 27 27 27 27 27 27 27 27 27 27     ''''.'''''''''''
    1f38:	27 27 27 27 27 27 27 27 00 27 27 27 27 27 27 27     ''''''''.'''''''
    1f48:	27 27 27 27 27 27 27 27 27 27 27 27 00 27 27 27     ''''''''''''.'''
    1f58:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1f68:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    1f78:	27 27 27 27 00 27 27 27 27 27 27 27 27 27 27 27     ''''.'''''''''''
    1f88:	27 27 27 27 27 27 27 27 00 27 27 27 27 27 27 27     ''''''''.'''''''
    1f98:	27 27 27 27 27 27 27 27 27 27 27 27 00 27 27 27     ''''''''''''.'''
    1fa8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1fb8:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    1fc8:	27 27 27 27 00 27 27 27 27 27 27 27 27 27 27 27     ''''.'''''''''''
    1fd8:	27 27 27 27 27 27 27 27 00 27 27 27 27 27 27 27     ''''''''.'''''''
    1fe8:	27 27 27 27 27 27 27 27 27 27 27 27 00 27 27 27     ''''''''''''.'''
    1ff8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2008:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    2018:	27 27 27 27 00 27 27 27 27 27 27 27 27 27 27 27     ''''.'''''''''''
    2028:	27 27 27 27 27 27 27 27 00 27 27 27 27 27 27 27     ''''''''.'''''''
    2038:	27 27 27 27 27 27 27 27 27 27 27 27 00 27 27 27     ''''''''''''.'''
    2048:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2058:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    2068:	27 27 27 27 00 27 27 27 27 27 27 27 27 27 27 27     ''''.'''''''''''
    2078:	27 27 27 27 27 27 27 27 00 27 27 27 27 27 27 27     ''''''''.'''''''
    2088:	27 27 27 27 27 27 27 27 27 27 27 27 00 27 27 27     ''''''''''''.'''
    2098:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    20a8:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    20b8:	27 27 27 27 00 27 27 27 27 27 27 27 27 27 27 27     ''''.'''''''''''
    20c8:	27 27 27 27 27 27 27 27 00 27 27 27 27 27 27 27     ''''''''.'''''''
    20d8:	27 27 27 27 27 27 27 27 27 27 27 27 00 27 27 27     ''''''''''''.'''
    20e8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    20f8:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    2108:	27 27 27 27 00 27 27 27 27 27 27 27 27 27 27 27     ''''.'''''''''''
    2118:	27 27 27 27 27 27 27 27 00 27 27 27 27 27 27 27     ''''''''.'''''''
    2128:	27 27 27 27 27 27 27 27 27 27 27 27 00 27 27 27     ''''''''''''.'''
    2138:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2148:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    2158:	27 27 27 27 00 27 27 27 27 27 27 27 27 27 27 27     ''''.'''''''''''
    2168:	27 27 27 27 27 27 27 27 00 27 27 27 27 27 27 27     ''''''''.'''''''
    2178:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2188:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2198:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    21a8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    21b8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    21c8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    21d8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    21e8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    21f8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2208:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2218:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2228:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2238:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2248:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2258:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2268:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2278:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2288:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2298:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    22a8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    22b8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    22c8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    22d8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    22e8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    22f8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2308:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2318:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2328:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2338:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2348:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2358:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2368:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2378:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2388:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2398:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    23a8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    23b8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    23c8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    23d8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    23e8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    23f8:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2408:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2418:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2428:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2438:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2448:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     ''''''''''''''..
	...
    2464:	00 00 00 27 27 27 00 00 00 00 00 00 00 00 00 00     ...'''..........
    2474:	00 00 00 00 00 00 00 27 27 27 00 00 00 00 00 00     .......'''......
	...
    248c:	00 00 00 27 27 27 00 00 00 00 00 00 00 00 00 00     ...'''..........
    249c:	00 00 00 00 00 00 00 27 27 27 00 00 00 00 00 00     .......'''......
	...
    24b4:	00 00 00 27 27 27 00 00 00 00 00 00 00 00 00 00     ...'''..........
    24c4:	00 00 00 00 00 00 00 27 27 27 00 00 00 00 00 00     .......'''......
	...
    24dc:	00 00 00 27 27 27 00 00 00 00 00 00 00 00 00 00     ...'''..........
    24ec:	00 00 00 00 00 00 00 27 27 27 00 00 00 00 00 00     .......'''......
	...
    2504:	00 00 00 27 27 27 00 00 00 00 00 00 00 00 00 00     ...'''..........
    2514:	00 00 00 00 00 00 00 27 27 27 00 00 00 00 00 00     .......'''......
	...
    252c:	00 00 00 27 27 27 00 00 00 00 00 00 00 00 00 00     ...'''..........
    253c:	00 00 00 00 00 00 00 27 27 27 00 00 00 00 00 00     .......'''......
	...
    2554:	00 00 00 27 27 27 00 00 00 00 00 00 00 00 00 00     ...'''..........
    2564:	00 00 00 00 00 00 00 27 27 27 00 00 00 00 00 00     .......'''......
	...
    257c:	00 00 00 27 27 27 00 00 00 00 00 00 00 00 00 00     ...'''..........
    258c:	00 00 00 00 00 00 00 27 27 27 00 00 00 00 00 00     .......'''......
	...
    25a4:	00 00 00 27 27 27 00 00 00 00 00 00 00 00 00 00     ...'''..........
    25b4:	00 00 00 00 00 00 00 27 27 27 00 00 00 00 00 00     .......'''......
	...
    25cc:	00 00 00 27 27 27 00 00 00 00 00 00 00 00 00 00     ...'''..........
    25dc:	00 00 00 00 00 00 00 27 27 27 00 00 00 00 00 00     .......'''......
	...
    25f4:	00 00 00 27 27 27 00 00 00 00 00 00 00 00 00 00     ...'''..........
    2604:	00 00 00 00 00 00 00 27 27 27 00 00 00 00 00 00     .......'''......
	...
    261c:	00 00 00 27 27 27 00 00 00 00 00 00 00 00 00 00     ...'''..........
    262c:	00 00 00 00 00 00 00 27 27 27 00 00 00 00 00 00     .......'''......
	...
    2644:	00 00 00 27 27 27 00 00 00 00 00 00 00 00 00 00     ...'''..........
    2654:	00 00 00 00 00 00 00 27 27 27 00 00 00 00 00 00     .......'''......
	...
    266c:	00 00 00 27 27 27 00 00 00 00 00 00 00 00 00 00     ...'''..........
    267c:	00 00 00 00 00 00 00 27 27 27 00 00 00 00 00 00     .......'''......
	...
    2694:	00 00 00 27 27 27 00 00 00 00 00 00 00 00 00 00     ...'''..........
    26a4:	00 00 00 00 00 00 00 27 27 27 00 00 00 00 00 00     .......'''......
	...
    26bc:	00 00 00 27 27 27 00 00 00 00 00 00 00 00 00 00     ...'''..........
    26cc:	00 00 00 00 00 00 00 27 27 27 00 00 00 00 00 00     .......'''......
	...
    26e4:	00 00 00 27 27 27 00 00 00 00 00 00 00 00 00 00     ...'''..........
    26f4:	00 00 00 00 00 00 00 27 27 27 00 00 00 00 00 00     .......'''......
	...
    270c:	00 00 00 27 27 27 00 00 00 00 00 00 00 00 00 00     ...'''..........
    271c:	00 00 00 00 00 00 00 27 00 00 00 00 00 00 00 00     .......'........
	...

000029f4 <__init>:
    29f4:	11 24       	eor	r1, r1
    29f6:	1f be       	out	0x3f, r1	; 63
    29f8:	cf ef       	ldi	r28, 0xFF	; 255
    29fa:	d0 e1       	ldi	r29, 0x10	; 16
    29fc:	de bf       	out	0x3e, r29	; 62
    29fe:	cd bf       	out	0x3d, r28	; 61

00002a00 <__do_copy_data>:
    2a00:	11 e0       	ldi	r17, 0x01	; 1
    2a02:	a0 e0       	ldi	r26, 0x00	; 0
    2a04:	b1 e0       	ldi	r27, 0x01	; 1
    2a06:	ee e0       	ldi	r30, 0x0E	; 14
    2a08:	f2 e4       	ldi	r31, 0x42	; 66
    2a0a:	00 e0       	ldi	r16, 0x00	; 0
    2a0c:	0b bf       	out	0x3b, r16	; 59
    2a0e:	02 c0       	rjmp	.+4      	; 0x2a14 <__do_copy_data+0x14>
    2a10:	07 90       	elpm	r0, Z+
    2a12:	0d 92       	st	X+, r0
    2a14:	a0 30       	cpi	r26, 0x00	; 0
    2a16:	b1 07       	cpc	r27, r17
    2a18:	d9 f7       	brne	.-10     	; 0x2a10 <__do_copy_data+0x10>

00002a1a <__do_clear_bss>:
    2a1a:	11 e0       	ldi	r17, 0x01	; 1
    2a1c:	a0 e0       	ldi	r26, 0x00	; 0
    2a1e:	b1 e0       	ldi	r27, 0x01	; 1
    2a20:	01 c0       	rjmp	.+2      	; 0x2a24 <.do_clear_bss_start>

00002a22 <.do_clear_bss_loop>:
    2a22:	1d 92       	st	X+, r1

00002a24 <.do_clear_bss_start>:
    2a24:	a7 33       	cpi	r26, 0x37	; 55
    2a26:	b1 07       	cpc	r27, r17
    2a28:	e1 f7       	brne	.-8      	; 0x2a22 <.do_clear_bss_loop>
    2a2a:	0c 94 eb 1e 	jmp	0x3dd6 <main>

00002a2e <__bad_interrupt>:
    2a2e:	0c 94 00 00 	jmp	0x0 <__vectors>

00002a32 <USART1_Init>:
void rc_process_command(uint8_t command);

//############# UART functions, useful for debugging ##########
void USART1_Init( unsigned int ubrr )
{
    2a32:	9c 01       	movw	r18, r24
	/* Set baud rate */
	UBRR1H = (unsigned char)(ubrr>>8);
    2a34:	83 2f       	mov	r24, r19
    2a36:	99 27       	eor	r25, r25
    2a38:	80 93 98 00 	sts	0x0098, r24
	UBRR1L = (unsigned char)ubrr;
    2a3c:	20 93 99 00 	sts	0x0099, r18
	/* Enable receiver and transmitter */
	UCSR1B = (1<<RXEN1) | (1<<TXEN1) | _BV(RXCIE1);
    2a40:	88 e9       	ldi	r24, 0x98	; 152
    2a42:	80 93 9a 00 	sts	0x009A, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR1C =  (1<<UCSZ11) | (1<<UCSZ10);
    2a46:	86 e0       	ldi	r24, 0x06	; 6
    2a48:	80 93 9d 00 	sts	0x009D, r24
    2a4c:	08 95       	ret

00002a4e <USART1_Receive>:
}

unsigned char USART1_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR1A & (1<<RXC1)) )
    2a4e:	80 91 9b 00 	lds	r24, 0x009B
    2a52:	88 23       	and	r24, r24
    2a54:	e4 f7       	brge	.-8      	; 0x2a4e <USART1_Receive>
	;
	/* Get and return received data from buffer */
	return UDR1;
    2a56:	80 91 9c 00 	lds	r24, 0x009C
}
    2a5a:	99 27       	eor	r25, r25
    2a5c:	08 95       	ret

00002a5e <USART1_Transmit>:

void USART1_Transmit( unsigned char data )
{
    2a5e:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) )
    2a60:	80 91 9b 00 	lds	r24, 0x009B
    2a64:	85 ff       	sbrs	r24, 5
    2a66:	fc cf       	rjmp	.-8      	; 0x2a60 <USART1_Transmit+0x2>
	;
	/* Put data into buffer, sends the data */
	UDR1 = data;
    2a68:	90 93 9c 00 	sts	0x009C, r25
    2a6c:	08 95       	ret

00002a6e <send_str>:
}

void send_str( unsigned char *str )
{
    2a6e:	cf 93       	push	r28
    2a70:	df 93       	push	r29
    2a72:	ec 01       	movw	r28, r24
	while(*str)
	{
		USART1_Transmit(*str);
		str++;
    2a74:	88 81       	ld	r24, Y
    2a76:	88 23       	and	r24, r24
    2a78:	31 f0       	breq	.+12     	; 0x2a86 <send_str+0x18>
    2a7a:	89 91       	ld	r24, Y+
    2a7c:	0e 94 2f 15 	call	0x2a5e <USART1_Transmit>
    2a80:	88 81       	ld	r24, Y
    2a82:	88 23       	and	r24, r24
    2a84:	d1 f7       	brne	.-12     	; 0x2a7a <send_str+0xc>
    2a86:	df 91       	pop	r29
    2a88:	cf 91       	pop	r28
    2a8a:	08 95       	ret

00002a8c <rc_process_command>:
	}
}


//######################## RC command processing function ############
void rc_process_command(uint8_t command)
{
    2a8c:	1f 93       	push	r17
    2a8e:	cf 93       	push	r28
    2a90:	df 93       	push	r29
    2a92:	98 2f       	mov	r25, r24
	static uint8_t last_command = 0;
	uint8_t i;
	
	if(last_command == command)		//if last command was the same
    2a94:	80 91 02 01 	lds	r24, 0x0102
    2a98:	89 17       	cp	r24, r25
    2a9a:	59 f4       	brne	.+22     	; 0x2ab2 <rc_process_command+0x26>
	{
		g_rc_hold_counter++;			//increase the counter
    2a9c:	80 91 0a 01 	lds	r24, 0x010A
    2aa0:	8f 5f       	subi	r24, 0xFF	; 255
    2aa2:	80 93 0a 01 	sts	0x010A, r24
		
		if(g_rc_hold_counter > 20)		//and don't let it overflow
    2aa6:	85 31       	cpi	r24, 0x15	; 21
    2aa8:	30 f0       	brcs	.+12     	; 0x2ab6 <rc_process_command+0x2a>
			g_rc_hold_counter = 20;
    2aaa:	84 e1       	ldi	r24, 0x14	; 20
    2aac:	80 93 0a 01 	sts	0x010A, r24
    2ab0:	02 c0       	rjmp	.+4      	; 0x2ab6 <rc_process_command+0x2a>
	}
	else
		g_rc_hold_counter = 0;
    2ab2:	10 92 0a 01 	sts	0x010A, r1
	
	last_command = command;	
    2ab6:	90 93 02 01 	sts	0x0102, r25
		
	switch(command & 0b01111111)		//mask the toggle bit
    2aba:	89 2f       	mov	r24, r25
    2abc:	99 27       	eor	r25, r25
    2abe:	8f 77       	andi	r24, 0x7F	; 127
    2ac0:	90 70       	andi	r25, 0x00	; 0
    2ac2:	81 31       	cpi	r24, 0x11	; 17
    2ac4:	91 05       	cpc	r25, r1
    2ac6:	09 f4       	brne	.+2      	; 0x2aca <rc_process_command+0x3e>
    2ac8:	69 c1       	rjmp	.+722    	; 0x2d9c <rc_process_command+0x310>
    2aca:	82 31       	cpi	r24, 0x12	; 18
    2acc:	91 05       	cpc	r25, r1
    2ace:	6c f4       	brge	.+26     	; 0x2aea <rc_process_command+0x5e>
    2ad0:	8d 30       	cpi	r24, 0x0D	; 13
    2ad2:	91 05       	cpc	r25, r1
    2ad4:	51 f1       	breq	.+84     	; 0x2b2a <rc_process_command+0x9e>
    2ad6:	8e 30       	cpi	r24, 0x0E	; 14
    2ad8:	91 05       	cpc	r25, r1
    2ada:	1c f4       	brge	.+6      	; 0x2ae2 <rc_process_command+0x56>
    2adc:	0c 97       	sbiw	r24, 0x0c	; 12
    2ade:	a1 f0       	breq	.+40     	; 0x2b08 <rc_process_command+0x7c>
    2ae0:	70 c1       	rjmp	.+736    	; 0x2dc2 <rc_process_command+0x336>
    2ae2:	40 97       	sbiw	r24, 0x10	; 16
    2ae4:	09 f4       	brne	.+2      	; 0x2ae8 <rc_process_command+0x5c>
    2ae6:	4d c1       	rjmp	.+666    	; 0x2d82 <rc_process_command+0x2f6>
    2ae8:	6c c1       	rjmp	.+728    	; 0x2dc2 <rc_process_command+0x336>
    2aea:	81 32       	cpi	r24, 0x21	; 33
    2aec:	91 05       	cpc	r25, r1
    2aee:	09 f4       	brne	.+2      	; 0x2af2 <rc_process_command+0x66>
    2af0:	e2 c0       	rjmp	.+452    	; 0x2cb6 <rc_process_command+0x22a>
    2af2:	82 32       	cpi	r24, 0x22	; 34
    2af4:	91 05       	cpc	r25, r1
    2af6:	24 f4       	brge	.+8      	; 0x2b00 <rc_process_command+0x74>
    2af8:	80 97       	sbiw	r24, 0x20	; 32
    2afa:	09 f4       	brne	.+2      	; 0x2afe <rc_process_command+0x72>
    2afc:	75 c0       	rjmp	.+234    	; 0x2be8 <rc_process_command+0x15c>
    2afe:	61 c1       	rjmp	.+706    	; 0x2dc2 <rc_process_command+0x336>
    2b00:	c8 97       	sbiw	r24, 0x38	; 56
    2b02:	09 f4       	brne	.+2      	; 0x2b06 <rc_process_command+0x7a>
    2b04:	5c c0       	rjmp	.+184    	; 0x2bbe <rc_process_command+0x132>
    2b06:	5d c1       	rjmp	.+698    	; 0x2dc2 <rc_process_command+0x336>
	{
	case RC_POWER:						//POWER button is pressed
		if(g_power_on == 1)
    2b08:	80 91 19 01 	lds	r24, 0x0119
    2b0c:	81 30       	cpi	r24, 0x01	; 1
    2b0e:	21 f4       	brne	.+8      	; 0x2b18 <rc_process_command+0x8c>
		{
			g_power_on = 0;			
    2b10:	10 92 19 01 	sts	0x0119, r1
			MOT_OFF();					//stop the motor
    2b14:	d8 98       	cbi	0x1b, 0	; 27
    2b16:	04 c0       	rjmp	.+8      	; 0x2b20 <rc_process_command+0x94>
		}
		else
		{
			g_power_on = 1;
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	80 93 19 01 	sts	0x0119, r24
			MOT_ON();					//start the motor
    2b1e:	d8 9a       	sbi	0x1b, 0	; 27
		}
		g_rc_state = STATE_NORMAL;		//set state as NORMAL
    2b20:	10 92 01 01 	sts	0x0101, r1
		g_s_rc_state = STATE_NORMAL;		//set state as NORMAL
    2b24:	10 92 00 01 	sts	0x0100, r1
    2b28:	49 c1       	rjmp	.+658    	; 0x2dbc <rc_process_command+0x330>
		EIMSK &= ~_BV(RC_IN);			//disable RC feature for a while
		break;
	
	case RC_SET:						//SET button is pressed
		if(g_power_on)					//react only if power is on (motor spins)
    2b2a:	80 91 19 01 	lds	r24, 0x0119
    2b2e:	88 23       	and	r24, r24
    2b30:	09 f4       	brne	.+2      	; 0x2b34 <rc_process_command+0xa8>
    2b32:	45 c0       	rjmp	.+138    	; 0x2bbe <rc_process_command+0x132>
		{
			switch(g_rc_state)			//reaction depends on current state
    2b34:	80 91 01 01 	lds	r24, 0x0101
    2b38:	99 27       	eor	r25, r25
    2b3a:	00 97       	sbiw	r24, 0x00	; 0
    2b3c:	19 f0       	breq	.+6      	; 0x2b44 <rc_process_command+0xb8>
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	91 f0       	breq	.+36     	; 0x2b66 <rc_process_command+0xda>
    2b42:	3c c1       	rjmp	.+632    	; 0x2dbc <rc_process_command+0x330>
			{
			case STATE_NORMAL:						//in normal state
				g_rc_state = STATE_SETTING;			
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	80 93 01 01 	sts	0x0101, r24
				g_seconds = 0;						//clear seconds register
    2b4a:	10 92 2b 01 	sts	0x012B, r1
				g_minutes = (g_minutes / 4) * 4; 	//adjust minute hand
    2b4e:	80 91 1a 01 	lds	r24, 0x011A
    2b52:	86 95       	lsr	r24
    2b54:	86 95       	lsr	r24
    2b56:	99 27       	eor	r25, r25
    2b58:	88 0f       	add	r24, r24
    2b5a:	99 1f       	adc	r25, r25
    2b5c:	88 0f       	add	r24, r24
    2b5e:	99 1f       	adc	r25, r25
    2b60:	80 93 1a 01 	sts	0x011A, r24
				break;
    2b64:	2b c1       	rjmp	.+598    	; 0x2dbc <rc_process_command+0x330>
			case STATE_SETTING:						//in time setting state
				g_rc_state = STATE_NORMAL;
    2b66:	10 92 01 01 	sts	0x0101, r1
				g_data_rtc[SECONDS_ADDR] = 0;				//prepare
    2b6a:	10 92 2d 01 	sts	0x012D, r1
				g_data_rtc[MINUTES_ADDR] = g_minutes / 4;	//data before
    2b6e:	80 91 1a 01 	lds	r24, 0x011A
    2b72:	86 95       	lsr	r24
    2b74:	86 95       	lsr	r24
    2b76:	80 93 2e 01 	sts	0x012E, r24
				g_data_rtc[HOURS_ADDR] = g_hours / 20;		//sending it to RTC
    2b7a:	80 91 36 01 	lds	r24, 0x0136
    2b7e:	64 e1       	ldi	r22, 0x14	; 20
    2b80:	0e 94 e7 20 	call	0x41ce <__udivmodqi4>
    2b84:	80 93 2f 01 	sts	0x012F, r24
				
				if(g_data_rtc[HOURS_ADDR] == 0)			//RTC is working in 1-12 am/pm
    2b88:	88 23       	and	r24, r24
    2b8a:	19 f4       	brne	.+6      	; 0x2b92 <rc_process_command+0x106>
					g_data_rtc[HOURS_ADDR] = 12;
    2b8c:	8c e0       	ldi	r24, 0x0C	; 12
    2b8e:	80 93 2f 01 	sts	0x012F, r24
    2b92:	cd e2       	ldi	r28, 0x2D	; 45
    2b94:	d1 e0       	ldi	r29, 0x01	; 1
    2b96:	12 e0       	ldi	r17, 0x02	; 2

				for(i = 0; i < 3; i++)
					g_data_rtc[i] = DECtoBCD(g_data_rtc[i]);	//convert to RCD format
    2b98:	88 81       	ld	r24, Y
    2b9a:	0e 94 d4 20 	call	0x41a8 <DECtoBCD>
    2b9e:	89 93       	st	Y+, r24
    2ba0:	11 50       	subi	r17, 0x01	; 1
    2ba2:	17 ff       	sbrs	r17, 7
    2ba4:	f9 cf       	rjmp	.-14     	; 0x2b98 <rc_process_command+0x10c>
				
				g_data_rtc[HOURS_ADDR] |= 0b00100000;		//set am/pm mode bit
    2ba6:	80 91 2f 01 	lds	r24, 0x012F
    2baa:	80 62       	ori	r24, 0x20	; 32
    2bac:	80 93 2f 01 	sts	0x012F, r24
	
				WriteBufI2C(0x00, g_data_rtc, 7);			//send it to RTC
    2bb0:	47 e0       	ldi	r20, 0x07	; 7
    2bb2:	6d e2       	ldi	r22, 0x2D	; 45
    2bb4:	71 e0       	ldi	r23, 0x01	; 1
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	0e 94 ea 1f 	call	0x3fd4 <WriteBufI2C>
    2bbc:	ff c0       	rjmp	.+510    	; 0x2dbc <rc_process_command+0x330>
				break;
			}	
			EIMSK &= ~_BV(RC_IN);							//disable RC feature for a while
			break;
		}
	
	case RC_SET2:						//SET button is pressed
		if(g_power_on)					//react only if power is on (motor spins)
    2bbe:	80 91 19 01 	lds	r24, 0x0119
    2bc2:	88 23       	and	r24, r24
    2bc4:	89 f0       	breq	.+34     	; 0x2be8 <rc_process_command+0x15c>
		{
			switch(g_s_rc_state)			//reaction depends on current state
    2bc6:	80 91 00 01 	lds	r24, 0x0100
    2bca:	99 27       	eor	r25, r25
    2bcc:	00 97       	sbiw	r24, 0x00	; 0
    2bce:	19 f0       	breq	.+6      	; 0x2bd6 <rc_process_command+0x14a>
    2bd0:	01 97       	sbiw	r24, 0x01	; 1
    2bd2:	29 f0       	breq	.+10     	; 0x2bde <rc_process_command+0x152>
    2bd4:	f3 c0       	rjmp	.+486    	; 0x2dbc <rc_process_command+0x330>
			{
			case STATE_NORMAL:						//in normal state
				g_s_rc_state = STATE_SETTING;
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	80 93 00 01 	sts	0x0100, r24
    2bdc:	02 c0       	rjmp	.+4      	; 0x2be2 <rc_process_command+0x156>
				g_seconds=0;			
				break;
			case STATE_SETTING:						//in time setting state
				g_s_rc_state = STATE_NORMAL;
    2bde:	10 92 00 01 	sts	0x0100, r1
				g_seconds=0;
    2be2:	10 92 2b 01 	sts	0x012B, r1
    2be6:	ea c0       	rjmp	.+468    	; 0x2dbc <rc_process_command+0x330>
				break;
			}	
			EIMSK &= ~_BV(RC_IN);							//disable RC feature for a while
			break;
		}
	
	case RC_PLUS:						//PLUS button is pressed
		if(g_power_on)					//react only if power is on (motor spins)
    2be8:	80 91 19 01 	lds	r24, 0x0119
    2bec:	88 23       	and	r24, r24
    2bee:	09 f4       	brne	.+2      	; 0x2bf2 <rc_process_command+0x166>
    2bf0:	e8 c0       	rjmp	.+464    	; 0x2dc2 <rc_process_command+0x336>
		{
			switch(g_rc_state)			//reaction depends on current state
    2bf2:	80 91 01 01 	lds	r24, 0x0101
    2bf6:	99 27       	eor	r25, r25
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	19 f0       	breq	.+6      	; 0x2c02 <rc_process_command+0x176>
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	51 f0       	breq	.+20     	; 0x2c14 <rc_process_command+0x188>
    2c00:	e0 c0       	rjmp	.+448    	; 0x2dc2 <rc_process_command+0x336>
			{
			case STATE_NORMAL:			//in normal state change displaying mode
				if(g_mode == NUMBER_OF_MODES - 1)
    2c02:	80 91 18 01 	lds	r24, 0x0118
    2c06:	86 31       	cpi	r24, 0x16	; 22
    2c08:	19 f4       	brne	.+6      	; 0x2c10 <rc_process_command+0x184>
					g_mode = 0;
    2c0a:	10 92 18 01 	sts	0x0118, r1
    2c0e:	d3 c0       	rjmp	.+422    	; 0x2db6 <rc_process_command+0x32a>
				else
					g_mode++;
    2c10:	8f 5f       	subi	r24, 0xFF	; 255
    2c12:	65 c0       	rjmp	.+202    	; 0x2cde <rc_process_command+0x252>
				g_rc_idle_counter = 2;	
				EIMSK &= ~_BV(RC_IN);			//disable RC feature for a while	
				break;
			case STATE_SETTING:				//in time setting mode
				if(g_rc_hold_counter < 20)	//if PLUS button is not held for a long time
    2c14:	80 91 0a 01 	lds	r24, 0x010A
    2c18:	20 91 1a 01 	lds	r18, 0x011A
    2c1c:	84 31       	cpi	r24, 0x14	; 20
    2c1e:	c8 f4       	brcc	.+50     	; 0x2c52 <rc_process_command+0x1c6>
				{
					g_minutes += 4;			//move second hand 4 steps forward
    2c20:	82 2f       	mov	r24, r18
    2c22:	8c 5f       	subi	r24, 0xFC	; 252
    2c24:	80 93 1a 01 	sts	0x011A, r24
					
					if(g_minutes == RESOLUTION)	
    2c28:	80 3f       	cpi	r24, 0xF0	; 240
    2c2a:	11 f4       	brne	.+4      	; 0x2c30 <rc_process_command+0x1a4>
						g_minutes = 0;
    2c2c:	10 92 1a 01 	sts	0x011A, r1
					
						
					if(g_minutes % 12 == 0) //if divisible
    2c30:	80 91 1a 01 	lds	r24, 0x011A
    2c34:	6c e0       	ldi	r22, 0x0C	; 12
    2c36:	0e 94 e7 20 	call	0x41ce <__udivmodqi4>
    2c3a:	99 23       	and	r25, r25
    2c3c:	09 f0       	breq	.+2      	; 0x2c40 <rc_process_command+0x1b4>
    2c3e:	c1 c0       	rjmp	.+386    	; 0x2dc2 <rc_process_command+0x336>
					{
						g_hours++;			//move hour hand one step forward
    2c40:	80 91 36 01 	lds	r24, 0x0136
    2c44:	8f 5f       	subi	r24, 0xFF	; 255
    2c46:	80 93 36 01 	sts	0x0136, r24
		
						if(g_hours == RESOLUTION)
    2c4a:	80 3f       	cpi	r24, 0xF0	; 240
    2c4c:	09 f0       	breq	.+2      	; 0x2c50 <rc_process_command+0x1c4>
    2c4e:	b9 c0       	rjmp	.+370    	; 0x2dc2 <rc_process_command+0x336>
    2c50:	2f c0       	rjmp	.+94     	; 0x2cb0 <rc_process_command+0x224>
							g_hours = 0;
					}
				}
				else		//PLUS button is held for a long time
				{
					if(g_minutes % 24)		//while not divisible do the same as above
    2c52:	82 2f       	mov	r24, r18
    2c54:	68 e1       	ldi	r22, 0x18	; 24
    2c56:	0e 94 e7 20 	call	0x41ce <__udivmodqi4>
    2c5a:	99 23       	and	r25, r25
    2c5c:	c9 f0       	breq	.+50     	; 0x2c90 <rc_process_command+0x204>
					{
						g_minutes += 4;
    2c5e:	82 2f       	mov	r24, r18
    2c60:	8c 5f       	subi	r24, 0xFC	; 252
    2c62:	80 93 1a 01 	sts	0x011A, r24
							
						if(g_minutes == 240)
    2c66:	80 3f       	cpi	r24, 0xF0	; 240
    2c68:	11 f4       	brne	.+4      	; 0x2c6e <rc_process_command+0x1e2>
							g_minutes = 0;
    2c6a:	10 92 1a 01 	sts	0x011A, r1
						
							
						if(g_minutes % 12 == 0)
    2c6e:	80 91 1a 01 	lds	r24, 0x011A
    2c72:	6c e0       	ldi	r22, 0x0C	; 12
    2c74:	0e 94 e7 20 	call	0x41ce <__udivmodqi4>
    2c78:	99 23       	and	r25, r25
    2c7a:	09 f0       	breq	.+2      	; 0x2c7e <rc_process_command+0x1f2>
    2c7c:	a2 c0       	rjmp	.+324    	; 0x2dc2 <rc_process_command+0x336>
						{
							g_hours++;
    2c7e:	80 91 36 01 	lds	r24, 0x0136
    2c82:	8f 5f       	subi	r24, 0xFF	; 255
    2c84:	80 93 36 01 	sts	0x0136, r24
		
							if(g_hours == 240)
    2c88:	80 3f       	cpi	r24, 0xF0	; 240
    2c8a:	09 f0       	breq	.+2      	; 0x2c8e <rc_process_command+0x202>
    2c8c:	9a c0       	rjmp	.+308    	; 0x2dc2 <rc_process_command+0x336>
    2c8e:	10 c0       	rjmp	.+32     	; 0x2cb0 <rc_process_command+0x224>
								g_hours = 0;
						}					
					}
					else
					{
						g_minutes += 24;		//move minute hand 24 step forward
    2c90:	82 2f       	mov	r24, r18
    2c92:	88 5e       	subi	r24, 0xE8	; 232
    2c94:	80 93 1a 01 	sts	0x011A, r24
						 	
						if(g_minutes == 240)
    2c98:	80 3f       	cpi	r24, 0xF0	; 240
    2c9a:	11 f4       	brne	.+4      	; 0x2ca0 <rc_process_command+0x214>
							g_minutes = 0;
    2c9c:	90 93 1a 01 	sts	0x011A, r25
						
						g_hours += 2;			//move hour hand 
    2ca0:	80 91 36 01 	lds	r24, 0x0136
    2ca4:	8e 5f       	subi	r24, 0xFE	; 254
    2ca6:	80 93 36 01 	sts	0x0136, r24
								
						if(g_hours == 240)
    2caa:	80 3f       	cpi	r24, 0xF0	; 240
    2cac:	09 f0       	breq	.+2      	; 0x2cb0 <rc_process_command+0x224>
    2cae:	89 c0       	rjmp	.+274    	; 0x2dc2 <rc_process_command+0x336>
							g_hours = 0;						
    2cb0:	90 93 36 01 	sts	0x0136, r25
					}
				}
				break;
			}
		}
		break;
    2cb4:	86 c0       	rjmp	.+268    	; 0x2dc2 <rc_process_command+0x336>
	
	case RC_MINUS:						//MINUS button is pressed
		if(g_power_on)					//react only if power is on (motor spins)
    2cb6:	80 91 19 01 	lds	r24, 0x0119
    2cba:	88 23       	and	r24, r24
    2cbc:	09 f4       	brne	.+2      	; 0x2cc0 <rc_process_command+0x234>
    2cbe:	61 c0       	rjmp	.+194    	; 0x2d82 <rc_process_command+0x2f6>
		{
			switch(g_rc_state)
    2cc0:	80 91 01 01 	lds	r24, 0x0101
    2cc4:	99 27       	eor	r25, r25
    2cc6:	00 97       	sbiw	r24, 0x00	; 0
    2cc8:	19 f0       	breq	.+6      	; 0x2cd0 <rc_process_command+0x244>
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	59 f0       	breq	.+22     	; 0x2ce4 <rc_process_command+0x258>
    2cce:	79 c0       	rjmp	.+242    	; 0x2dc2 <rc_process_command+0x336>
			{
			case STATE_NORMAL:			//in normal state change displaying mode
				if(g_mode == 0)
    2cd0:	80 91 18 01 	lds	r24, 0x0118
    2cd4:	88 23       	and	r24, r24
    2cd6:	11 f4       	brne	.+4      	; 0x2cdc <rc_process_command+0x250>
					g_mode = NUMBER_OF_MODES - 1;
    2cd8:	86 e1       	ldi	r24, 0x16	; 22
    2cda:	01 c0       	rjmp	.+2      	; 0x2cde <rc_process_command+0x252>
				else
					g_mode--;
    2cdc:	81 50       	subi	r24, 0x01	; 1
    2cde:	80 93 18 01 	sts	0x0118, r24
    2ce2:	69 c0       	rjmp	.+210    	; 0x2db6 <rc_process_command+0x32a>
				g_rc_idle_counter = 2;
				EIMSK &= ~_BV(RC_IN);		//disable RC feature for a while
				break;
			case STATE_SETTING:				//in time setting mode
				if(g_rc_hold_counter < 20)	//if MINUS button is not held for a long time
    2ce4:	80 91 0a 01 	lds	r24, 0x010A
    2ce8:	20 91 1a 01 	lds	r18, 0x011A
    2cec:	84 31       	cpi	r24, 0x14	; 20
    2cee:	88 f4       	brcc	.+34     	; 0x2d12 <rc_process_command+0x286>
				{
					if(g_minutes == 0)
    2cf0:	22 23       	and	r18, r18
    2cf2:	19 f4       	brne	.+6      	; 0x2cfa <rc_process_command+0x26e>
						g_minutes = 240;
    2cf4:	80 ef       	ldi	r24, 0xF0	; 240
    2cf6:	80 93 1a 01 	sts	0x011A, r24
						
					g_minutes -= 4;				//move minute hand 4 steps back
    2cfa:	80 91 1a 01 	lds	r24, 0x011A
    2cfe:	84 50       	subi	r24, 0x04	; 4
    2d00:	80 93 1a 01 	sts	0x011A, r24
						
					if(g_minutes % 12 == 0)	//if divisible
    2d04:	6c e0       	ldi	r22, 0x0C	; 12
    2d06:	0e 94 e7 20 	call	0x41ce <__udivmodqi4>
    2d0a:	99 23       	and	r25, r25
    2d0c:	09 f0       	breq	.+2      	; 0x2d10 <rc_process_command+0x284>
    2d0e:	59 c0       	rjmp	.+178    	; 0x2dc2 <rc_process_command+0x336>
    2d10:	16 c0       	rjmp	.+44     	; 0x2d3e <rc_process_command+0x2b2>
					{
						if(g_hours == 0)
							g_hours = 240;
						g_hours--;				//move hour hand one step back
					}
				}
				else			//MINUS button is held for a long time
				{
					if(g_minutes % 24)	//while not divisible do the same as above
    2d12:	82 2f       	mov	r24, r18
    2d14:	68 e1       	ldi	r22, 0x18	; 24
    2d16:	0e 94 e7 20 	call	0x41ce <__udivmodqi4>
    2d1a:	99 23       	and	r25, r25
    2d1c:	d9 f0       	breq	.+54     	; 0x2d54 <rc_process_command+0x2c8>
					{
						if(g_minutes == 0)
    2d1e:	22 23       	and	r18, r18
    2d20:	19 f4       	brne	.+6      	; 0x2d28 <rc_process_command+0x29c>
							g_minutes = 240;
    2d22:	80 ef       	ldi	r24, 0xF0	; 240
    2d24:	80 93 1a 01 	sts	0x011A, r24
						g_minutes -= 4;
    2d28:	80 91 1a 01 	lds	r24, 0x011A
    2d2c:	84 50       	subi	r24, 0x04	; 4
    2d2e:	80 93 1a 01 	sts	0x011A, r24
							
						if(g_minutes % 12 == 0)
    2d32:	6c e0       	ldi	r22, 0x0C	; 12
    2d34:	0e 94 e7 20 	call	0x41ce <__udivmodqi4>
    2d38:	99 23       	and	r25, r25
    2d3a:	09 f0       	breq	.+2      	; 0x2d3e <rc_process_command+0x2b2>
    2d3c:	42 c0       	rjmp	.+132    	; 0x2dc2 <rc_process_command+0x336>
						{
							if(g_hours == 0)
    2d3e:	80 91 36 01 	lds	r24, 0x0136
    2d42:	88 23       	and	r24, r24
    2d44:	19 f4       	brne	.+6      	; 0x2d4c <rc_process_command+0x2c0>
								g_hours = 240;	
    2d46:	80 ef       	ldi	r24, 0xF0	; 240
    2d48:	80 93 36 01 	sts	0x0136, r24
							g_hours--;		
    2d4c:	80 91 36 01 	lds	r24, 0x0136
    2d50:	81 50       	subi	r24, 0x01	; 1
    2d52:	14 c0       	rjmp	.+40     	; 0x2d7c <rc_process_command+0x2f0>
						}					
					}
					else
					{
						if(g_minutes == 0)
    2d54:	22 23       	and	r18, r18
    2d56:	19 f4       	brne	.+6      	; 0x2d5e <rc_process_command+0x2d2>
							g_minutes = 240;
    2d58:	80 ef       	ldi	r24, 0xF0	; 240
    2d5a:	80 93 1a 01 	sts	0x011A, r24
						g_minutes -= 24;	//move minute hand 24 steps back
    2d5e:	80 91 1a 01 	lds	r24, 0x011A
    2d62:	88 51       	subi	r24, 0x18	; 24
    2d64:	80 93 1a 01 	sts	0x011A, r24
						
						if(g_hours == 0)
    2d68:	80 91 36 01 	lds	r24, 0x0136
    2d6c:	88 23       	and	r24, r24
    2d6e:	19 f4       	brne	.+6      	; 0x2d76 <rc_process_command+0x2ea>
							g_hours = 240;	
    2d70:	80 ef       	ldi	r24, 0xF0	; 240
    2d72:	80 93 36 01 	sts	0x0136, r24
					 	
						g_hours -= 2;		//move hour hand 2 steps back
    2d76:	80 91 36 01 	lds	r24, 0x0136
    2d7a:	82 50       	subi	r24, 0x02	; 2
    2d7c:	80 93 36 01 	sts	0x0136, r24
					}
				}			
				break;
			}	
			break;
    2d80:	20 c0       	rjmp	.+64     	; 0x2dc2 <rc_process_command+0x336>
		}
	
	case RC_VPLUS:						//PLUS button is pressed
		if(g_power_on)					//react only if power is on (motor spins)
    2d82:	80 91 19 01 	lds	r24, 0x0119
    2d86:	88 23       	and	r24, r24
    2d88:	e1 f0       	breq	.+56     	; 0x2dc2 <rc_process_command+0x336>
		{
				if(g_h_mode == NUMBER_OF_H_MODES - 1)
    2d8a:	80 91 26 01 	lds	r24, 0x0126
    2d8e:	85 30       	cpi	r24, 0x05	; 5
    2d90:	19 f4       	brne	.+6      	; 0x2d98 <rc_process_command+0x30c>
					g_h_mode = 0;
    2d92:	10 92 26 01 	sts	0x0126, r1
    2d96:	0f c0       	rjmp	.+30     	; 0x2db6 <rc_process_command+0x32a>
				else
					g_h_mode++;
    2d98:	8f 5f       	subi	r24, 0xFF	; 255
    2d9a:	0b c0       	rjmp	.+22     	; 0x2db2 <rc_process_command+0x326>
				g_rc_idle_counter = 2;	
				EIMSK &= ~_BV(RC_IN);			//disable RC feature for a while	
		}
		break;
	
	case RC_VMINUS:						//MINUS button is pressed
		if(g_power_on)					//react only if power is on (motor spins)
    2d9c:	80 91 19 01 	lds	r24, 0x0119
    2da0:	88 23       	and	r24, r24
    2da2:	79 f0       	breq	.+30     	; 0x2dc2 <rc_process_command+0x336>
		{
				if(g_h_mode == 0)
    2da4:	80 91 26 01 	lds	r24, 0x0126
    2da8:	88 23       	and	r24, r24
    2daa:	11 f4       	brne	.+4      	; 0x2db0 <rc_process_command+0x324>
					g_h_mode = NUMBER_OF_H_MODES - 1;
    2dac:	85 e0       	ldi	r24, 0x05	; 5
    2dae:	01 c0       	rjmp	.+2      	; 0x2db2 <rc_process_command+0x326>
				else
					g_h_mode--;
    2db0:	81 50       	subi	r24, 0x01	; 1
    2db2:	80 93 26 01 	sts	0x0126, r24
				g_rc_idle_counter = 2;
    2db6:	82 e0       	ldi	r24, 0x02	; 2
    2db8:	80 93 25 01 	sts	0x0125, r24
				EIMSK &= ~_BV(RC_IN);		//disable RC feature for a while
    2dbc:	89 b7       	in	r24, 0x39	; 57
    2dbe:	8f 7d       	andi	r24, 0xDF	; 223
    2dc0:	89 bf       	out	0x39, r24	; 57
    2dc2:	df 91       	pop	r29
    2dc4:	cf 91       	pop	r28
    2dc6:	1f 91       	pop	r17
    2dc8:	08 95       	ret

00002dca <__vector_30>:
		}
		break;
	}
}

//################## UART receive completed interrupt routine ###############
ISR(USART1_RX_vect)
{
    2dca:	1f 92       	push	r1
    2dcc:	0f 92       	push	r0
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	0f 92       	push	r0
    2dd2:	11 24       	eor	r1, r1
    2dd4:	2f 93       	push	r18
    2dd6:	8f 93       	push	r24
    2dd8:	9f 93       	push	r25
    2dda:	ef 93       	push	r30
    2ddc:	ff 93       	push	r31
	g_uart_buffer[g_uart_counter] = UDR1;
    2dde:	90 91 27 01 	lds	r25, 0x0127
    2de2:	e9 2f       	mov	r30, r25
    2de4:	ff 27       	eor	r31, r31
    2de6:	e2 5f       	subi	r30, 0xF2	; 242
    2de8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dea:	80 91 9c 00 	lds	r24, 0x009C
    2dee:	80 83       	st	Z, r24
	g_uart_counter++;
    2df0:	89 2f       	mov	r24, r25
    2df2:	8f 5f       	subi	r24, 0xFF	; 255
    2df4:	80 93 27 01 	sts	0x0127, r24
	
	//if string 'RESET' is received enable the watchdog and wait for the chip reset
	//this feature is used to programm ATMEGA via bootloader
	//bootloader used in this project (MegaLoad) can be downloaded from http://www.microsyl.com/
	if(g_uart_counter == 5)
    2df8:	85 30       	cpi	r24, 0x05	; 5
    2dfa:	f1 f4       	brne	.+60     	; 0x2e38 <__vector_30+0x6e>
	{
		if( g_uart_buffer[0] == 'R' &&
    2dfc:	80 91 0e 01 	lds	r24, 0x010E
    2e00:	82 35       	cpi	r24, 0x52	; 82
    2e02:	d1 f4       	brne	.+52     	; 0x2e38 <__vector_30+0x6e>
    2e04:	80 91 0f 01 	lds	r24, 0x010F
    2e08:	85 34       	cpi	r24, 0x45	; 69
    2e0a:	b1 f4       	brne	.+44     	; 0x2e38 <__vector_30+0x6e>
    2e0c:	80 91 10 01 	lds	r24, 0x0110
    2e10:	83 35       	cpi	r24, 0x53	; 83
    2e12:	91 f4       	brne	.+36     	; 0x2e38 <__vector_30+0x6e>
    2e14:	80 91 11 01 	lds	r24, 0x0111
    2e18:	85 34       	cpi	r24, 0x45	; 69
    2e1a:	71 f4       	brne	.+28     	; 0x2e38 <__vector_30+0x6e>
    2e1c:	80 91 12 01 	lds	r24, 0x0112
    2e20:	84 35       	cpi	r24, 0x54	; 84
    2e22:	51 f4       	brne	.+20     	; 0x2e38 <__vector_30+0x6e>
			g_uart_buffer[1] == 'E' &&
			g_uart_buffer[2] == 'S' &&
			g_uart_buffer[3] == 'E' &&
			g_uart_buffer[4] == 'T')
		{
			wdt_enable(WDTO_120MS);
    2e24:	88 e1       	ldi	r24, 0x18	; 24
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	2b e0       	ldi	r18, 0x0B	; 11
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	a8 95       	wdr
    2e30:	81 bd       	out	0x21, r24	; 33
    2e32:	0f be       	out	0x3f, r0	; 63
    2e34:	21 bd       	out	0x21, r18	; 33
			while(1);
    2e36:	ff cf       	rjmp	.-2      	; 0x2e36 <__vector_30+0x6c>
    2e38:	ff 91       	pop	r31
    2e3a:	ef 91       	pop	r30
    2e3c:	9f 91       	pop	r25
    2e3e:	8f 91       	pop	r24
    2e40:	2f 91       	pop	r18
    2e42:	0f 90       	pop	r0
    2e44:	0f be       	out	0x3f, r0	; 63
    2e46:	0f 90       	pop	r0
    2e48:	1f 90       	pop	r1
    2e4a:	18 95       	reti

00002e4c <__vector_25>:
		}
	}
}
 

//################# TIMER3 input capture interrupt routine #######################
//when the slit in the disc comes next to the detector this interrupt is called
ISR(TIMER3_CAPT_vect)
{
    2e4c:	1f 92       	push	r1
    2e4e:	0f 92       	push	r0
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	0f 92       	push	r0
    2e54:	11 24       	eor	r1, r1
    2e56:	2f 93       	push	r18
    2e58:	5f 93       	push	r21
    2e5a:	6f 93       	push	r22
    2e5c:	7f 93       	push	r23
    2e5e:	8f 93       	push	r24
    2e60:	9f 93       	push	r25
    2e62:	af 93       	push	r26
    2e64:	bf 93       	push	r27
	TCNT3 = 0;	//clear timer
    2e66:	10 92 89 00 	sts	0x0089, r1
    2e6a:	10 92 88 00 	sts	0x0088, r1
	
	if(((ICR3 > 33900) || (ETIFR & _BV(TOV3))) || !g_power_on) //if the disc spins to slow 
    2e6e:	80 91 80 00 	lds	r24, 0x0080
    2e72:	90 91 81 00 	lds	r25, 0x0081
    2e76:	8d 56       	subi	r24, 0x6D	; 109
    2e78:	94 48       	sbci	r25, 0x84	; 132
    2e7a:	40 f4       	brcc	.+16     	; 0x2e8c <__vector_25+0x40>
    2e7c:	80 91 7c 00 	lds	r24, 0x007C
    2e80:	82 fd       	sbrc	r24, 2
    2e82:	04 c0       	rjmp	.+8      	; 0x2e8c <__vector_25+0x40>
    2e84:	80 91 19 01 	lds	r24, 0x0119
    2e88:	88 23       	and	r24, r24
    2e8a:	81 f4       	brne	.+32     	; 0x2eac <__vector_25+0x60>
	{
		ETIFR |= _BV(TOV3);						//clear overflow flag
    2e8c:	80 91 7c 00 	lds	r24, 0x007C
    2e90:	84 60       	ori	r24, 0x04	; 4
    2e92:	80 93 7c 00 	sts	0x007C, r24
		
		PWM_RED = PWM_TOP;						//}
    2e96:	87 e2       	ldi	r24, 0x27	; 39
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	9b bd       	out	0x2b, r25	; 43
    2e9c:	8a bd       	out	0x2a, r24	; 42
		PWM_GREEN = PWM_TOP;					//}	and turn off all of the diodes
    2e9e:	99 bd       	out	0x29, r25	; 41
    2ea0:	88 bd       	out	0x28, r24	; 40
		PWM_BLUE = PWM_TOP;						//}
    2ea2:	90 93 79 00 	sts	0x0079, r25
    2ea6:	80 93 78 00 	sts	0x0078, r24
		return;								//leave this routine
    2eaa:	1f c0       	rjmp	.+62     	; 0x2eea <__vector_25+0x9e>
	}
	
	OCR0 = ICR3/RESOLUTION;						//compute time for one step
    2eac:	80 91 80 00 	lds	r24, 0x0080
    2eb0:	90 91 81 00 	lds	r25, 0x0081
    2eb4:	60 ef       	ldi	r22, 0xF0	; 240
    2eb6:	70 e0       	ldi	r23, 0x00	; 0
    2eb8:	0e 94 f3 20 	call	0x41e6 <__udivmodhi4>
    2ebc:	61 bf       	out	0x31, r22	; 49
	g_reminder = ICR3 - (OCR0*RESOLUTION);		//compute reminder
    2ebe:	80 91 80 00 	lds	r24, 0x0080
    2ec2:	90 91 81 00 	lds	r25, 0x0081
    2ec6:	28 2f       	mov	r18, r24
    2ec8:	91 b7       	in	r25, 0x31	; 49
    2eca:	80 ef       	ldi	r24, 0xF0	; 240
    2ecc:	98 9f       	mul	r25, r24
    2ece:	c0 01       	movw	r24, r0
    2ed0:	11 24       	eor	r1, r1
    2ed2:	28 1b       	sub	r18, r24
    2ed4:	20 93 1b 01 	sts	0x011B, r18
	g_pos = 3*RESOLUTION/4;						//set proper position (12 o'clock=0, 6 o'clock = RESOLUTION/2)
    2ed8:	84 eb       	ldi	r24, 0xB4	; 180
    2eda:	80 93 1e 01 	sts	0x011E, r24
	TCNT0 = OCR0 - 2;							//timer0 compare interrupt must be called as soon as possible
    2ede:	81 b7       	in	r24, 0x31	; 49
    2ee0:	82 50       	subi	r24, 0x02	; 2
    2ee2:	82 bf       	out	0x32, r24	; 50
	TIMSK |= _BV(OCIE0);						//enable timer0 compare interrupt
    2ee4:	87 b7       	in	r24, 0x37	; 55
    2ee6:	82 60       	ori	r24, 0x02	; 2
    2ee8:	87 bf       	out	0x37, r24	; 55
    2eea:	bf 91       	pop	r27
    2eec:	af 91       	pop	r26
    2eee:	9f 91       	pop	r25
    2ef0:	8f 91       	pop	r24
    2ef2:	7f 91       	pop	r23
    2ef4:	6f 91       	pop	r22
    2ef6:	5f 91       	pop	r21
    2ef8:	2f 91       	pop	r18
    2efa:	0f 90       	pop	r0
    2efc:	0f be       	out	0x3f, r0	; 63
    2efe:	0f 90       	pop	r0
    2f00:	1f 90       	pop	r1
    2f02:	18 95       	reti

00002f04 <__vector_15>:
}

//################# TIMER0 compare interupt routine #######################
//this routine is used to display all of the patterns you see
ISR(TIMER0_COMP_vect)
{
    2f04:	1f 92       	push	r1
    2f06:	0f 92       	push	r0
    2f08:	0f b6       	in	r0, 0x3f	; 63
    2f0a:	0f 92       	push	r0
    2f0c:	11 24       	eor	r1, r1
    2f0e:	2f 93       	push	r18
    2f10:	3f 93       	push	r19
    2f12:	4f 93       	push	r20
    2f14:	5f 93       	push	r21
    2f16:	6f 93       	push	r22
    2f18:	7f 93       	push	r23
    2f1a:	8f 93       	push	r24
    2f1c:	9f 93       	push	r25
    2f1e:	af 93       	push	r26
    2f20:	bf 93       	push	r27
    2f22:	ef 93       	push	r30
    2f24:	ff 93       	push	r31
	uint8_t tmp_red = PWM_TOP + 1,
			tmp_green = PWM_TOP + 1,
			tmp_blue = PWM_TOP + 1;		//temporary color registers
			
	if(g_pos == 3*RESOLUTION/4 - 1)	  	//if it's last interrupt in the cycle
    2f26:	90 91 1e 01 	lds	r25, 0x011E
    2f2a:	93 3b       	cpi	r25, 0xB3	; 179
    2f2c:	19 f4       	brne	.+6      	; 0x2f34 <__vector_15+0x30>
		TIMSK &= ~_BV(OCIE0);			//disable this interrupt
    2f2e:	87 b7       	in	r24, 0x37	; 55
    2f30:	8d 7f       	andi	r24, 0xFD	; 253
    2f32:	87 bf       	out	0x37, r24	; 55
	
	if(g_reminder == 0)	//if reminder becomes zero, decrease output compare register
    2f34:	50 91 1b 01 	lds	r21, 0x011B
    2f38:	55 23       	and	r21, r21
    2f3a:	19 f4       	brne	.+6      	; 0x2f42 <__vector_15+0x3e>
		OCR0--;				//with this trick image becomes more solid, no jitter can be seen
    2f3c:	81 b7       	in	r24, 0x31	; 49
    2f3e:	81 50       	subi	r24, 0x01	; 1
    2f40:	81 bf       	out	0x31, r24	; 49
		
	if(g_pos == RESOLUTION) //clear if overflow	
    2f42:	90 3f       	cpi	r25, 0xF0	; 240
    2f44:	11 f4       	brne	.+4      	; 0x2f4a <__vector_15+0x46>
		g_pos = 0;
    2f46:	10 92 1e 01 	sts	0x011E, r1
		


		if(g_rc_state != STATE_SETTING) //do not display second hand if time is being set
    2f4a:	60 91 01 01 	lds	r22, 0x0101
    2f4e:	61 30       	cpi	r22, 0x01	; 1
    2f50:	09 f4       	brne	.+2      	; 0x2f54 <__vector_15+0x50>
    2f52:	13 c1       	rjmp	.+550    	; 0x317a <__vector_15+0x276>
			{ 
				switch(g_pos - g_seconds) 	//compute which part of second hand should be now displayed
    2f54:	80 91 1e 01 	lds	r24, 0x011E
    2f58:	28 2f       	mov	r18, r24
    2f5a:	33 27       	eor	r19, r19
    2f5c:	80 91 2b 01 	lds	r24, 0x012B
    2f60:	28 1b       	sub	r18, r24
    2f62:	31 09       	sbc	r19, r1
    2f64:	21 15       	cp	r18, r1
    2f66:	31 05       	cpc	r19, r1
    2f68:	09 f4       	brne	.+2      	; 0x2f6c <__vector_15+0x68>
    2f6a:	a0 c0       	rjmp	.+320    	; 0x30ac <__vector_15+0x1a8>
    2f6c:	12 16       	cp	r1, r18
    2f6e:	13 06       	cpc	r1, r19
    2f70:	7c f1       	brlt	.+94     	; 0x2fd0 <__vector_15+0xcc>
    2f72:	7f ef       	ldi	r23, 0xFF	; 255
    2f74:	24 31       	cpi	r18, 0x14	; 20
    2f76:	37 07       	cpc	r19, r23
    2f78:	09 f4       	brne	.+2      	; 0x2f7c <__vector_15+0x78>
    2f7a:	e4 c0       	rjmp	.+456    	; 0x3144 <__vector_15+0x240>
    2f7c:	8f ef       	ldi	r24, 0xFF	; 255
    2f7e:	25 31       	cpi	r18, 0x15	; 21
    2f80:	38 07       	cpc	r19, r24
    2f82:	7c f4       	brge	.+30     	; 0x2fa2 <__vector_15+0x9e>
    2f84:	ef ef       	ldi	r30, 0xFF	; 255
    2f86:	22 31       	cpi	r18, 0x12	; 18
    2f88:	3e 07       	cpc	r19, r30
    2f8a:	09 f4       	brne	.+2      	; 0x2f8e <__vector_15+0x8a>
    2f8c:	b5 c0       	rjmp	.+362    	; 0x30f8 <__vector_15+0x1f4>
    2f8e:	ff ef       	ldi	r31, 0xFF	; 255
    2f90:	23 31       	cpi	r18, 0x13	; 19
    2f92:	3f 07       	cpc	r19, r31
    2f94:	0c f0       	brlt	.+2      	; 0x2f98 <__vector_15+0x94>
    2f96:	c3 c0       	rjmp	.+390    	; 0x311e <__vector_15+0x21a>
    2f98:	21 51       	subi	r18, 0x11	; 17
    2f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f9c:	09 f4       	brne	.+2      	; 0x2fa0 <__vector_15+0x9c>
    2f9e:	99 c0       	rjmp	.+306    	; 0x30d2 <__vector_15+0x1ce>
    2fa0:	ec c0       	rjmp	.+472    	; 0x317a <__vector_15+0x276>
    2fa2:	8f ef       	ldi	r24, 0xFF	; 255
    2fa4:	2d 3f       	cpi	r18, 0xFD	; 253
    2fa6:	38 07       	cpc	r19, r24
    2fa8:	09 f4       	brne	.+2      	; 0x2fac <__vector_15+0xa8>
    2faa:	47 c0       	rjmp	.+142    	; 0x303a <__vector_15+0x136>
    2fac:	ef ef       	ldi	r30, 0xFF	; 255
    2fae:	2e 3f       	cpi	r18, 0xFE	; 254
    2fb0:	3e 07       	cpc	r19, r30
    2fb2:	24 f4       	brge	.+8      	; 0x2fbc <__vector_15+0xb8>
    2fb4:	2c 5f       	subi	r18, 0xFC	; 252
    2fb6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb8:	69 f1       	breq	.+90     	; 0x3014 <__vector_15+0x110>
    2fba:	df c0       	rjmp	.+446    	; 0x317a <__vector_15+0x276>
    2fbc:	7f ef       	ldi	r23, 0xFF	; 255
    2fbe:	2e 3f       	cpi	r18, 0xFE	; 254
    2fc0:	37 07       	cpc	r19, r23
    2fc2:	09 f4       	brne	.+2      	; 0x2fc6 <__vector_15+0xc2>
    2fc4:	4d c0       	rjmp	.+154    	; 0x3060 <__vector_15+0x15c>
    2fc6:	2f 5f       	subi	r18, 0xFF	; 255
    2fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2fca:	09 f4       	brne	.+2      	; 0x2fce <__vector_15+0xca>
    2fcc:	5c c0       	rjmp	.+184    	; 0x3086 <__vector_15+0x182>
    2fce:	d5 c0       	rjmp	.+426    	; 0x317a <__vector_15+0x276>
    2fd0:	24 30       	cpi	r18, 0x04	; 4
    2fd2:	31 05       	cpc	r19, r1
    2fd4:	09 f4       	brne	.+2      	; 0x2fd8 <__vector_15+0xd4>
    2fd6:	b6 c0       	rjmp	.+364    	; 0x3144 <__vector_15+0x240>
    2fd8:	25 30       	cpi	r18, 0x05	; 5
    2fda:	31 05       	cpc	r19, r1
    2fdc:	4c f4       	brge	.+18     	; 0x2ff0 <__vector_15+0xec>
    2fde:	22 30       	cpi	r18, 0x02	; 2
    2fe0:	31 05       	cpc	r19, r1
    2fe2:	09 f4       	brne	.+2      	; 0x2fe6 <__vector_15+0xe2>
    2fe4:	89 c0       	rjmp	.+274    	; 0x30f8 <__vector_15+0x1f4>
    2fe6:	23 30       	cpi	r18, 0x03	; 3
    2fe8:	31 05       	cpc	r19, r1
    2fea:	0c f0       	brlt	.+2      	; 0x2fee <__vector_15+0xea>
    2fec:	98 c0       	rjmp	.+304    	; 0x311e <__vector_15+0x21a>
    2fee:	71 c0       	rjmp	.+226    	; 0x30d2 <__vector_15+0x1ce>
    2ff0:	2d 3e       	cpi	r18, 0xED	; 237
    2ff2:	31 05       	cpc	r19, r1
    2ff4:	11 f1       	breq	.+68     	; 0x303a <__vector_15+0x136>
    2ff6:	2e 3e       	cpi	r18, 0xEE	; 238
    2ff8:	31 05       	cpc	r19, r1
    2ffa:	24 f4       	brge	.+8      	; 0x3004 <__vector_15+0x100>
    2ffc:	2c 3e       	cpi	r18, 0xEC	; 236
    2ffe:	31 05       	cpc	r19, r1
    3000:	49 f0       	breq	.+18     	; 0x3014 <__vector_15+0x110>
    3002:	bb c0       	rjmp	.+374    	; 0x317a <__vector_15+0x276>
    3004:	2e 3e       	cpi	r18, 0xEE	; 238
    3006:	31 05       	cpc	r19, r1
    3008:	59 f1       	breq	.+86     	; 0x3060 <__vector_15+0x15c>
    300a:	2f 3e       	cpi	r18, 0xEF	; 239
    300c:	31 05       	cpc	r19, r1
    300e:	09 f4       	brne	.+2      	; 0x3012 <__vector_15+0x10e>
    3010:	3a c0       	rjmp	.+116    	; 0x3086 <__vector_15+0x182>
    3012:	b3 c0       	rjmp	.+358    	; 0x317a <__vector_15+0x276>
				{							//and read color value from flash memory
				case -4:
					case RESOLUTION - 4:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_h_mode][RED][0]);
    3014:	90 91 26 01 	lds	r25, 0x0126
    3018:	8b e1       	ldi	r24, 0x1B	; 27
    301a:	98 9f       	mul	r25, r24
    301c:	c0 01       	movw	r24, r0
    301e:	11 24       	eor	r1, r1
    3020:	fc 01       	movw	r30, r24
    3022:	ee 50       	subi	r30, 0x0E	; 14
    3024:	fe 4f       	sbci	r31, 0xFE	; 254
    3026:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_h_mode][GREEN][0]);
    3028:	fc 01       	movw	r30, r24
    302a:	e5 50       	subi	r30, 0x05	; 5
    302c:	fe 4f       	sbci	r31, 0xFE	; 254
    302e:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_h_mode][BLUE][0]);
    3030:	fc 01       	movw	r30, r24
    3032:	ec 5f       	subi	r30, 0xFC	; 252
    3034:	fd 4f       	sbci	r31, 0xFD	; 253
    3036:	24 91       	lpm	r18, Z
					break;
    3038:	97 c0       	rjmp	.+302    	; 0x3168 <__vector_15+0x264>
				case -3:
					case RESOLUTION - 3:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_h_mode][RED][1]);
    303a:	90 91 26 01 	lds	r25, 0x0126
    303e:	8b e1       	ldi	r24, 0x1B	; 27
    3040:	98 9f       	mul	r25, r24
    3042:	c0 01       	movw	r24, r0
    3044:	11 24       	eor	r1, r1
    3046:	fc 01       	movw	r30, r24
    3048:	ed 50       	subi	r30, 0x0D	; 13
    304a:	fe 4f       	sbci	r31, 0xFE	; 254
    304c:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_h_mode][GREEN][1]);
    304e:	fc 01       	movw	r30, r24
    3050:	e4 50       	subi	r30, 0x04	; 4
    3052:	fe 4f       	sbci	r31, 0xFE	; 254
    3054:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_h_mode][BLUE][1]);
    3056:	fc 01       	movw	r30, r24
    3058:	eb 5f       	subi	r30, 0xFB	; 251
    305a:	fd 4f       	sbci	r31, 0xFD	; 253
    305c:	24 91       	lpm	r18, Z
					break;
    305e:	84 c0       	rjmp	.+264    	; 0x3168 <__vector_15+0x264>
				case -2:
					case RESOLUTION - 2:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_h_mode][RED][2]);
    3060:	90 91 26 01 	lds	r25, 0x0126
    3064:	8b e1       	ldi	r24, 0x1B	; 27
    3066:	98 9f       	mul	r25, r24
    3068:	c0 01       	movw	r24, r0
    306a:	11 24       	eor	r1, r1
    306c:	fc 01       	movw	r30, r24
    306e:	ec 50       	subi	r30, 0x0C	; 12
    3070:	fe 4f       	sbci	r31, 0xFE	; 254
    3072:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_h_mode][GREEN][2]);
    3074:	fc 01       	movw	r30, r24
    3076:	e3 50       	subi	r30, 0x03	; 3
    3078:	fe 4f       	sbci	r31, 0xFE	; 254
    307a:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_h_mode][BLUE][2]);
    307c:	fc 01       	movw	r30, r24
    307e:	ea 5f       	subi	r30, 0xFA	; 250
    3080:	fd 4f       	sbci	r31, 0xFD	; 253
    3082:	24 91       	lpm	r18, Z
					break;
    3084:	71 c0       	rjmp	.+226    	; 0x3168 <__vector_15+0x264>
				case -1:
					case RESOLUTION - 1:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_h_mode][RED][3]);
    3086:	90 91 26 01 	lds	r25, 0x0126
    308a:	8b e1       	ldi	r24, 0x1B	; 27
    308c:	98 9f       	mul	r25, r24
    308e:	c0 01       	movw	r24, r0
    3090:	11 24       	eor	r1, r1
    3092:	fc 01       	movw	r30, r24
    3094:	eb 50       	subi	r30, 0x0B	; 11
    3096:	fe 4f       	sbci	r31, 0xFE	; 254
    3098:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_h_mode][GREEN][3]);
    309a:	fc 01       	movw	r30, r24
    309c:	e2 50       	subi	r30, 0x02	; 2
    309e:	fe 4f       	sbci	r31, 0xFE	; 254
    30a0:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_h_mode][BLUE][3]);
    30a2:	fc 01       	movw	r30, r24
    30a4:	e9 5f       	subi	r30, 0xF9	; 249
    30a6:	fd 4f       	sbci	r31, 0xFD	; 253
    30a8:	24 91       	lpm	r18, Z
					break;
    30aa:	5e c0       	rjmp	.+188    	; 0x3168 <__vector_15+0x264>
				case 0:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_h_mode][RED][4]);
    30ac:	90 91 26 01 	lds	r25, 0x0126
    30b0:	8b e1       	ldi	r24, 0x1B	; 27
    30b2:	98 9f       	mul	r25, r24
    30b4:	c0 01       	movw	r24, r0
    30b6:	11 24       	eor	r1, r1
    30b8:	fc 01       	movw	r30, r24
    30ba:	ea 50       	subi	r30, 0x0A	; 10
    30bc:	fe 4f       	sbci	r31, 0xFE	; 254
    30be:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_h_mode][GREEN][4]);
    30c0:	fc 01       	movw	r30, r24
    30c2:	e1 50       	subi	r30, 0x01	; 1
    30c4:	fe 4f       	sbci	r31, 0xFE	; 254
    30c6:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_h_mode][BLUE][4]);
    30c8:	fc 01       	movw	r30, r24
    30ca:	e8 5f       	subi	r30, 0xF8	; 248
    30cc:	fd 4f       	sbci	r31, 0xFD	; 253
    30ce:	24 91       	lpm	r18, Z
					break;
    30d0:	4b c0       	rjmp	.+150    	; 0x3168 <__vector_15+0x264>
				case 1:
					case -RESOLUTION + 1:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_h_mode][RED][5]);
    30d2:	90 91 26 01 	lds	r25, 0x0126
    30d6:	8b e1       	ldi	r24, 0x1B	; 27
    30d8:	98 9f       	mul	r25, r24
    30da:	c0 01       	movw	r24, r0
    30dc:	11 24       	eor	r1, r1
    30de:	fc 01       	movw	r30, r24
    30e0:	e9 50       	subi	r30, 0x09	; 9
    30e2:	fe 4f       	sbci	r31, 0xFE	; 254
    30e4:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_h_mode][GREEN][5]);
    30e6:	fc 01       	movw	r30, r24
    30e8:	e0 50       	subi	r30, 0x00	; 0
    30ea:	fe 4f       	sbci	r31, 0xFE	; 254
    30ec:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_h_mode][BLUE][5]);	
    30ee:	fc 01       	movw	r30, r24
    30f0:	e7 5f       	subi	r30, 0xF7	; 247
    30f2:	fd 4f       	sbci	r31, 0xFD	; 253
    30f4:	24 91       	lpm	r18, Z
					break;
    30f6:	38 c0       	rjmp	.+112    	; 0x3168 <__vector_15+0x264>
				case 2:
					case -RESOLUTION + 2:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_h_mode][RED][6]);
    30f8:	90 91 26 01 	lds	r25, 0x0126
    30fc:	8b e1       	ldi	r24, 0x1B	; 27
    30fe:	98 9f       	mul	r25, r24
    3100:	c0 01       	movw	r24, r0
    3102:	11 24       	eor	r1, r1
    3104:	fc 01       	movw	r30, r24
    3106:	e8 50       	subi	r30, 0x08	; 8
    3108:	fe 4f       	sbci	r31, 0xFE	; 254
    310a:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_h_mode][GREEN][6]);
    310c:	fc 01       	movw	r30, r24
    310e:	ef 5f       	subi	r30, 0xFF	; 255
    3110:	fd 4f       	sbci	r31, 0xFD	; 253
    3112:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_h_mode][BLUE][6]);	
    3114:	fc 01       	movw	r30, r24
    3116:	e6 5f       	subi	r30, 0xF6	; 246
    3118:	fd 4f       	sbci	r31, 0xFD	; 253
    311a:	24 91       	lpm	r18, Z
					break;
    311c:	25 c0       	rjmp	.+74     	; 0x3168 <__vector_15+0x264>
				case 3:
					case -RESOLUTION + 3:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_h_mode][RED][7]);
    311e:	90 91 26 01 	lds	r25, 0x0126
    3122:	8b e1       	ldi	r24, 0x1B	; 27
    3124:	98 9f       	mul	r25, r24
    3126:	c0 01       	movw	r24, r0
    3128:	11 24       	eor	r1, r1
    312a:	fc 01       	movw	r30, r24
    312c:	e7 50       	subi	r30, 0x07	; 7
    312e:	fe 4f       	sbci	r31, 0xFE	; 254
    3130:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_h_mode][GREEN][7]);
    3132:	fc 01       	movw	r30, r24
    3134:	ee 5f       	subi	r30, 0xFE	; 254
    3136:	fd 4f       	sbci	r31, 0xFD	; 253
    3138:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_h_mode][BLUE][7]);	
    313a:	fc 01       	movw	r30, r24
    313c:	e5 5f       	subi	r30, 0xF5	; 245
    313e:	fd 4f       	sbci	r31, 0xFD	; 253
    3140:	24 91       	lpm	r18, Z
					break;		
    3142:	12 c0       	rjmp	.+36     	; 0x3168 <__vector_15+0x264>
				case 4:
					case -RESOLUTION + 4:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_h_mode][RED][8]);
    3144:	90 91 26 01 	lds	r25, 0x0126
    3148:	8b e1       	ldi	r24, 0x1B	; 27
    314a:	98 9f       	mul	r25, r24
    314c:	c0 01       	movw	r24, r0
    314e:	11 24       	eor	r1, r1
    3150:	fc 01       	movw	r30, r24
    3152:	e6 50       	subi	r30, 0x06	; 6
    3154:	fe 4f       	sbci	r31, 0xFE	; 254
    3156:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_h_mode][GREEN][8]);
    3158:	fc 01       	movw	r30, r24
    315a:	ed 5f       	subi	r30, 0xFD	; 253
    315c:	fd 4f       	sbci	r31, 0xFD	; 253
    315e:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_h_mode][BLUE][8]);	
    3160:	fc 01       	movw	r30, r24
    3162:	e4 5f       	subi	r30, 0xF4	; 244
    3164:	fd 4f       	sbci	r31, 0xFD	; 253
    3166:	24 91       	lpm	r18, Z
					break;	
				}
			}

	

	//if temporary registers are not updated
	if((tmp_red == PWM_TOP + 1) && (tmp_green == PWM_TOP + 1) && (tmp_blue == PWM_TOP + 1))
    3168:	48 32       	cpi	r20, 0x28	; 40
    316a:	09 f0       	breq	.+2      	; 0x316e <__vector_15+0x26a>
    316c:	10 c1       	rjmp	.+544    	; 0x338e <__vector_15+0x48a>
    316e:	38 32       	cpi	r19, 0x28	; 40
    3170:	09 f0       	breq	.+2      	; 0x3174 <__vector_15+0x270>
    3172:	10 c1       	rjmp	.+544    	; 0x3394 <__vector_15+0x490>
    3174:	28 32       	cpi	r18, 0x28	; 40
    3176:	09 f0       	breq	.+2      	; 0x317a <__vector_15+0x276>
    3178:	10 c1       	rjmp	.+544    	; 0x339a <__vector_15+0x496>
	{
		switch(g_pos - g_minutes) 	//compute which part of minute hand should be now displayed
    317a:	80 91 1e 01 	lds	r24, 0x011E
    317e:	28 2f       	mov	r18, r24
    3180:	33 27       	eor	r19, r19
    3182:	80 91 1a 01 	lds	r24, 0x011A
    3186:	28 1b       	sub	r18, r24
    3188:	31 09       	sbc	r19, r1
    318a:	21 15       	cp	r18, r1
    318c:	31 05       	cpc	r19, r1
    318e:	09 f4       	brne	.+2      	; 0x3192 <__vector_15+0x28e>
    3190:	a0 c0       	rjmp	.+320    	; 0x32d2 <__vector_15+0x3ce>
    3192:	12 16       	cp	r1, r18
    3194:	13 06       	cpc	r1, r19
    3196:	7c f1       	brlt	.+94     	; 0x31f6 <__vector_15+0x2f2>
    3198:	ef ef       	ldi	r30, 0xFF	; 255
    319a:	24 31       	cpi	r18, 0x14	; 20
    319c:	3e 07       	cpc	r19, r30
    319e:	09 f4       	brne	.+2      	; 0x31a2 <__vector_15+0x29e>
    31a0:	e4 c0       	rjmp	.+456    	; 0x336a <__vector_15+0x466>
    31a2:	ff ef       	ldi	r31, 0xFF	; 255
    31a4:	25 31       	cpi	r18, 0x15	; 21
    31a6:	3f 07       	cpc	r19, r31
    31a8:	7c f4       	brge	.+30     	; 0x31c8 <__vector_15+0x2c4>
    31aa:	7f ef       	ldi	r23, 0xFF	; 255
    31ac:	22 31       	cpi	r18, 0x12	; 18
    31ae:	37 07       	cpc	r19, r23
    31b0:	09 f4       	brne	.+2      	; 0x31b4 <__vector_15+0x2b0>
    31b2:	b5 c0       	rjmp	.+362    	; 0x331e <__vector_15+0x41a>
    31b4:	8f ef       	ldi	r24, 0xFF	; 255
    31b6:	23 31       	cpi	r18, 0x13	; 19
    31b8:	38 07       	cpc	r19, r24
    31ba:	0c f0       	brlt	.+2      	; 0x31be <__vector_15+0x2ba>
    31bc:	c3 c0       	rjmp	.+390    	; 0x3344 <__vector_15+0x440>
    31be:	21 51       	subi	r18, 0x11	; 17
    31c0:	3f 4f       	sbci	r19, 0xFF	; 255
    31c2:	09 f4       	brne	.+2      	; 0x31c6 <__vector_15+0x2c2>
    31c4:	99 c0       	rjmp	.+306    	; 0x32f8 <__vector_15+0x3f4>
    31c6:	ec c0       	rjmp	.+472    	; 0x33a0 <__vector_15+0x49c>
    31c8:	ff ef       	ldi	r31, 0xFF	; 255
    31ca:	2d 3f       	cpi	r18, 0xFD	; 253
    31cc:	3f 07       	cpc	r19, r31
    31ce:	09 f4       	brne	.+2      	; 0x31d2 <__vector_15+0x2ce>
    31d0:	47 c0       	rjmp	.+142    	; 0x3260 <__vector_15+0x35c>
    31d2:	7f ef       	ldi	r23, 0xFF	; 255
    31d4:	2e 3f       	cpi	r18, 0xFE	; 254
    31d6:	37 07       	cpc	r19, r23
    31d8:	24 f4       	brge	.+8      	; 0x31e2 <__vector_15+0x2de>
    31da:	2c 5f       	subi	r18, 0xFC	; 252
    31dc:	3f 4f       	sbci	r19, 0xFF	; 255
    31de:	69 f1       	breq	.+90     	; 0x323a <__vector_15+0x336>
    31e0:	df c0       	rjmp	.+446    	; 0x33a0 <__vector_15+0x49c>
    31e2:	ef ef       	ldi	r30, 0xFF	; 255
    31e4:	2e 3f       	cpi	r18, 0xFE	; 254
    31e6:	3e 07       	cpc	r19, r30
    31e8:	09 f4       	brne	.+2      	; 0x31ec <__vector_15+0x2e8>
    31ea:	4d c0       	rjmp	.+154    	; 0x3286 <__vector_15+0x382>
    31ec:	2f 5f       	subi	r18, 0xFF	; 255
    31ee:	3f 4f       	sbci	r19, 0xFF	; 255
    31f0:	09 f4       	brne	.+2      	; 0x31f4 <__vector_15+0x2f0>
    31f2:	5c c0       	rjmp	.+184    	; 0x32ac <__vector_15+0x3a8>
    31f4:	d5 c0       	rjmp	.+426    	; 0x33a0 <__vector_15+0x49c>
    31f6:	24 30       	cpi	r18, 0x04	; 4
    31f8:	31 05       	cpc	r19, r1
    31fa:	09 f4       	brne	.+2      	; 0x31fe <__vector_15+0x2fa>
    31fc:	b6 c0       	rjmp	.+364    	; 0x336a <__vector_15+0x466>
    31fe:	25 30       	cpi	r18, 0x05	; 5
    3200:	31 05       	cpc	r19, r1
    3202:	4c f4       	brge	.+18     	; 0x3216 <__vector_15+0x312>
    3204:	22 30       	cpi	r18, 0x02	; 2
    3206:	31 05       	cpc	r19, r1
    3208:	09 f4       	brne	.+2      	; 0x320c <__vector_15+0x308>
    320a:	89 c0       	rjmp	.+274    	; 0x331e <__vector_15+0x41a>
    320c:	23 30       	cpi	r18, 0x03	; 3
    320e:	31 05       	cpc	r19, r1
    3210:	0c f0       	brlt	.+2      	; 0x3214 <__vector_15+0x310>
    3212:	98 c0       	rjmp	.+304    	; 0x3344 <__vector_15+0x440>
    3214:	71 c0       	rjmp	.+226    	; 0x32f8 <__vector_15+0x3f4>
    3216:	2d 3e       	cpi	r18, 0xED	; 237
    3218:	31 05       	cpc	r19, r1
    321a:	11 f1       	breq	.+68     	; 0x3260 <__vector_15+0x35c>
    321c:	2e 3e       	cpi	r18, 0xEE	; 238
    321e:	31 05       	cpc	r19, r1
    3220:	24 f4       	brge	.+8      	; 0x322a <__vector_15+0x326>
    3222:	2c 3e       	cpi	r18, 0xEC	; 236
    3224:	31 05       	cpc	r19, r1
    3226:	49 f0       	breq	.+18     	; 0x323a <__vector_15+0x336>
    3228:	bb c0       	rjmp	.+374    	; 0x33a0 <__vector_15+0x49c>
    322a:	2e 3e       	cpi	r18, 0xEE	; 238
    322c:	31 05       	cpc	r19, r1
    322e:	59 f1       	breq	.+86     	; 0x3286 <__vector_15+0x382>
    3230:	2f 3e       	cpi	r18, 0xEF	; 239
    3232:	31 05       	cpc	r19, r1
    3234:	09 f4       	brne	.+2      	; 0x3238 <__vector_15+0x334>
    3236:	3a c0       	rjmp	.+116    	; 0x32ac <__vector_15+0x3a8>
    3238:	b3 c0       	rjmp	.+358    	; 0x33a0 <__vector_15+0x49c>
		{							//and read color value from flash memory
			case -4:
			case RESOLUTION - 4:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_h_mode][RED][0]);
    323a:	90 91 26 01 	lds	r25, 0x0126
    323e:	8b e1       	ldi	r24, 0x1B	; 27
    3240:	98 9f       	mul	r25, r24
    3242:	c0 01       	movw	r24, r0
    3244:	11 24       	eor	r1, r1
    3246:	fc 01       	movw	r30, r24
    3248:	e0 5b       	subi	r30, 0xB0	; 176
    324a:	fe 4f       	sbci	r31, 0xFE	; 254
    324c:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_h_mode][GREEN][0]);
    324e:	fc 01       	movw	r30, r24
    3250:	e7 5a       	subi	r30, 0xA7	; 167
    3252:	fe 4f       	sbci	r31, 0xFE	; 254
    3254:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_h_mode][BLUE][0]);
    3256:	fc 01       	movw	r30, r24
    3258:	ee 59       	subi	r30, 0x9E	; 158
    325a:	fe 4f       	sbci	r31, 0xFE	; 254
    325c:	24 91       	lpm	r18, Z
				break;
    325e:	97 c0       	rjmp	.+302    	; 0x338e <__vector_15+0x48a>
			case -3:
			case RESOLUTION - 3:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_h_mode][RED][1]);
    3260:	90 91 26 01 	lds	r25, 0x0126
    3264:	8b e1       	ldi	r24, 0x1B	; 27
    3266:	98 9f       	mul	r25, r24
    3268:	c0 01       	movw	r24, r0
    326a:	11 24       	eor	r1, r1
    326c:	fc 01       	movw	r30, r24
    326e:	ef 5a       	subi	r30, 0xAF	; 175
    3270:	fe 4f       	sbci	r31, 0xFE	; 254
    3272:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_h_mode][GREEN][1]);
    3274:	fc 01       	movw	r30, r24
    3276:	e6 5a       	subi	r30, 0xA6	; 166
    3278:	fe 4f       	sbci	r31, 0xFE	; 254
    327a:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_h_mode][BLUE][1]);
    327c:	fc 01       	movw	r30, r24
    327e:	ed 59       	subi	r30, 0x9D	; 157
    3280:	fe 4f       	sbci	r31, 0xFE	; 254
    3282:	24 91       	lpm	r18, Z
				break;
    3284:	84 c0       	rjmp	.+264    	; 0x338e <__vector_15+0x48a>
			case -2:
			case RESOLUTION - 2:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_h_mode][RED][2]);
    3286:	90 91 26 01 	lds	r25, 0x0126
    328a:	8b e1       	ldi	r24, 0x1B	; 27
    328c:	98 9f       	mul	r25, r24
    328e:	c0 01       	movw	r24, r0
    3290:	11 24       	eor	r1, r1
    3292:	fc 01       	movw	r30, r24
    3294:	ee 5a       	subi	r30, 0xAE	; 174
    3296:	fe 4f       	sbci	r31, 0xFE	; 254
    3298:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_h_mode][GREEN][2]);
    329a:	fc 01       	movw	r30, r24
    329c:	e5 5a       	subi	r30, 0xA5	; 165
    329e:	fe 4f       	sbci	r31, 0xFE	; 254
    32a0:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_h_mode][BLUE][2]);
    32a2:	fc 01       	movw	r30, r24
    32a4:	ec 59       	subi	r30, 0x9C	; 156
    32a6:	fe 4f       	sbci	r31, 0xFE	; 254
    32a8:	24 91       	lpm	r18, Z
				break;
    32aa:	71 c0       	rjmp	.+226    	; 0x338e <__vector_15+0x48a>
			case -1:
			case RESOLUTION - 1:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_h_mode][RED][3]);
    32ac:	90 91 26 01 	lds	r25, 0x0126
    32b0:	8b e1       	ldi	r24, 0x1B	; 27
    32b2:	98 9f       	mul	r25, r24
    32b4:	c0 01       	movw	r24, r0
    32b6:	11 24       	eor	r1, r1
    32b8:	fc 01       	movw	r30, r24
    32ba:	ed 5a       	subi	r30, 0xAD	; 173
    32bc:	fe 4f       	sbci	r31, 0xFE	; 254
    32be:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_h_mode][GREEN][3]);
    32c0:	fc 01       	movw	r30, r24
    32c2:	e4 5a       	subi	r30, 0xA4	; 164
    32c4:	fe 4f       	sbci	r31, 0xFE	; 254
    32c6:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_h_mode][BLUE][3]);
    32c8:	fc 01       	movw	r30, r24
    32ca:	eb 59       	subi	r30, 0x9B	; 155
    32cc:	fe 4f       	sbci	r31, 0xFE	; 254
    32ce:	24 91       	lpm	r18, Z
				break;
    32d0:	5e c0       	rjmp	.+188    	; 0x338e <__vector_15+0x48a>
			case 0:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_h_mode][RED][4]);
    32d2:	90 91 26 01 	lds	r25, 0x0126
    32d6:	8b e1       	ldi	r24, 0x1B	; 27
    32d8:	98 9f       	mul	r25, r24
    32da:	c0 01       	movw	r24, r0
    32dc:	11 24       	eor	r1, r1
    32de:	fc 01       	movw	r30, r24
    32e0:	ec 5a       	subi	r30, 0xAC	; 172
    32e2:	fe 4f       	sbci	r31, 0xFE	; 254
    32e4:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_h_mode][GREEN][4]);
    32e6:	fc 01       	movw	r30, r24
    32e8:	e3 5a       	subi	r30, 0xA3	; 163
    32ea:	fe 4f       	sbci	r31, 0xFE	; 254
    32ec:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_h_mode][BLUE][4]);
    32ee:	fc 01       	movw	r30, r24
    32f0:	ea 59       	subi	r30, 0x9A	; 154
    32f2:	fe 4f       	sbci	r31, 0xFE	; 254
    32f4:	24 91       	lpm	r18, Z
				break;
    32f6:	4b c0       	rjmp	.+150    	; 0x338e <__vector_15+0x48a>
			case 1:
			case -RESOLUTION + 1:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_h_mode][RED][5]);
    32f8:	90 91 26 01 	lds	r25, 0x0126
    32fc:	8b e1       	ldi	r24, 0x1B	; 27
    32fe:	98 9f       	mul	r25, r24
    3300:	c0 01       	movw	r24, r0
    3302:	11 24       	eor	r1, r1
    3304:	fc 01       	movw	r30, r24
    3306:	eb 5a       	subi	r30, 0xAB	; 171
    3308:	fe 4f       	sbci	r31, 0xFE	; 254
    330a:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_h_mode][GREEN][5]);
    330c:	fc 01       	movw	r30, r24
    330e:	e2 5a       	subi	r30, 0xA2	; 162
    3310:	fe 4f       	sbci	r31, 0xFE	; 254
    3312:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_h_mode][BLUE][5]);	
    3314:	fc 01       	movw	r30, r24
    3316:	e9 59       	subi	r30, 0x99	; 153
    3318:	fe 4f       	sbci	r31, 0xFE	; 254
    331a:	24 91       	lpm	r18, Z
				break;
    331c:	38 c0       	rjmp	.+112    	; 0x338e <__vector_15+0x48a>
			case 2:
			case -RESOLUTION + 2:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_h_mode][RED][6]);
    331e:	90 91 26 01 	lds	r25, 0x0126
    3322:	8b e1       	ldi	r24, 0x1B	; 27
    3324:	98 9f       	mul	r25, r24
    3326:	c0 01       	movw	r24, r0
    3328:	11 24       	eor	r1, r1
    332a:	fc 01       	movw	r30, r24
    332c:	ea 5a       	subi	r30, 0xAA	; 170
    332e:	fe 4f       	sbci	r31, 0xFE	; 254
    3330:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_h_mode][GREEN][6]);
    3332:	fc 01       	movw	r30, r24
    3334:	e1 5a       	subi	r30, 0xA1	; 161
    3336:	fe 4f       	sbci	r31, 0xFE	; 254
    3338:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_h_mode][BLUE][6]);	
    333a:	fc 01       	movw	r30, r24
    333c:	e8 59       	subi	r30, 0x98	; 152
    333e:	fe 4f       	sbci	r31, 0xFE	; 254
    3340:	24 91       	lpm	r18, Z
				break;
    3342:	25 c0       	rjmp	.+74     	; 0x338e <__vector_15+0x48a>
			case 3:
			case -RESOLUTION + 3:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_h_mode][RED][7]);
    3344:	90 91 26 01 	lds	r25, 0x0126
    3348:	8b e1       	ldi	r24, 0x1B	; 27
    334a:	98 9f       	mul	r25, r24
    334c:	c0 01       	movw	r24, r0
    334e:	11 24       	eor	r1, r1
    3350:	fc 01       	movw	r30, r24
    3352:	e9 5a       	subi	r30, 0xA9	; 169
    3354:	fe 4f       	sbci	r31, 0xFE	; 254
    3356:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_h_mode][GREEN][7]);
    3358:	fc 01       	movw	r30, r24
    335a:	e0 5a       	subi	r30, 0xA0	; 160
    335c:	fe 4f       	sbci	r31, 0xFE	; 254
    335e:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_h_mode][BLUE][7]);	
    3360:	fc 01       	movw	r30, r24
    3362:	e7 59       	subi	r30, 0x97	; 151
    3364:	fe 4f       	sbci	r31, 0xFE	; 254
    3366:	24 91       	lpm	r18, Z
				break;		
    3368:	12 c0       	rjmp	.+36     	; 0x338e <__vector_15+0x48a>
			case 4:
			case -RESOLUTION + 4:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_h_mode][RED][8]);
    336a:	90 91 26 01 	lds	r25, 0x0126
    336e:	8b e1       	ldi	r24, 0x1B	; 27
    3370:	98 9f       	mul	r25, r24
    3372:	c0 01       	movw	r24, r0
    3374:	11 24       	eor	r1, r1
    3376:	fc 01       	movw	r30, r24
    3378:	e8 5a       	subi	r30, 0xA8	; 168
    337a:	fe 4f       	sbci	r31, 0xFE	; 254
    337c:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_h_mode][GREEN][8]);
    337e:	fc 01       	movw	r30, r24
    3380:	ef 59       	subi	r30, 0x9F	; 159
    3382:	fe 4f       	sbci	r31, 0xFE	; 254
    3384:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_h_mode][BLUE][8]);	
    3386:	fc 01       	movw	r30, r24
    3388:	e6 59       	subi	r30, 0x96	; 150
    338a:	fe 4f       	sbci	r31, 0xFE	; 254
    338c:	24 91       	lpm	r18, Z
				break;	
		}
	}
	//if temporary registers are not updated
	if((tmp_red == PWM_TOP + 1) && (tmp_green == PWM_TOP + 1) && (tmp_blue == PWM_TOP + 1))	
    338e:	48 32       	cpi	r20, 0x28	; 40
    3390:	09 f0       	breq	.+2      	; 0x3394 <__vector_15+0x490>
    3392:	10 c1       	rjmp	.+544    	; 0x35b4 <__vector_15+0x6b0>
    3394:	38 32       	cpi	r19, 0x28	; 40
    3396:	09 f0       	breq	.+2      	; 0x339a <__vector_15+0x496>
    3398:	0f c1       	rjmp	.+542    	; 0x35b8 <__vector_15+0x6b4>
    339a:	28 32       	cpi	r18, 0x28	; 40
    339c:	09 f0       	breq	.+2      	; 0x33a0 <__vector_15+0x49c>
    339e:	0e c1       	rjmp	.+540    	; 0x35bc <__vector_15+0x6b8>
	{
		switch(g_pos - g_hours)
    33a0:	80 91 1e 01 	lds	r24, 0x011E
    33a4:	28 2f       	mov	r18, r24
    33a6:	33 27       	eor	r19, r19
    33a8:	80 91 36 01 	lds	r24, 0x0136
    33ac:	28 1b       	sub	r18, r24
    33ae:	31 09       	sbc	r19, r1
    33b0:	21 15       	cp	r18, r1
    33b2:	31 05       	cpc	r19, r1
    33b4:	09 f4       	brne	.+2      	; 0x33b8 <__vector_15+0x4b4>
    33b6:	a0 c0       	rjmp	.+320    	; 0x34f8 <__vector_15+0x5f4>
    33b8:	12 16       	cp	r1, r18
    33ba:	13 06       	cpc	r1, r19
    33bc:	7c f1       	brlt	.+94     	; 0x341c <__vector_15+0x518>
    33be:	7f ef       	ldi	r23, 0xFF	; 255
    33c0:	24 31       	cpi	r18, 0x14	; 20
    33c2:	37 07       	cpc	r19, r23
    33c4:	09 f4       	brne	.+2      	; 0x33c8 <__vector_15+0x4c4>
    33c6:	e4 c0       	rjmp	.+456    	; 0x3590 <__vector_15+0x68c>
    33c8:	8f ef       	ldi	r24, 0xFF	; 255
    33ca:	25 31       	cpi	r18, 0x15	; 21
    33cc:	38 07       	cpc	r19, r24
    33ce:	7c f4       	brge	.+30     	; 0x33ee <__vector_15+0x4ea>
    33d0:	ef ef       	ldi	r30, 0xFF	; 255
    33d2:	22 31       	cpi	r18, 0x12	; 18
    33d4:	3e 07       	cpc	r19, r30
    33d6:	09 f4       	brne	.+2      	; 0x33da <__vector_15+0x4d6>
    33d8:	b5 c0       	rjmp	.+362    	; 0x3544 <__vector_15+0x640>
    33da:	ff ef       	ldi	r31, 0xFF	; 255
    33dc:	23 31       	cpi	r18, 0x13	; 19
    33de:	3f 07       	cpc	r19, r31
    33e0:	0c f0       	brlt	.+2      	; 0x33e4 <__vector_15+0x4e0>
    33e2:	c3 c0       	rjmp	.+390    	; 0x356a <__vector_15+0x666>
    33e4:	21 51       	subi	r18, 0x11	; 17
    33e6:	3f 4f       	sbci	r19, 0xFF	; 255
    33e8:	09 f4       	brne	.+2      	; 0x33ec <__vector_15+0x4e8>
    33ea:	99 c0       	rjmp	.+306    	; 0x351e <__vector_15+0x61a>
    33ec:	ff c0       	rjmp	.+510    	; 0x35ec <__vector_15+0x6e8>
    33ee:	8f ef       	ldi	r24, 0xFF	; 255
    33f0:	2d 3f       	cpi	r18, 0xFD	; 253
    33f2:	38 07       	cpc	r19, r24
    33f4:	09 f4       	brne	.+2      	; 0x33f8 <__vector_15+0x4f4>
    33f6:	47 c0       	rjmp	.+142    	; 0x3486 <__vector_15+0x582>
    33f8:	ef ef       	ldi	r30, 0xFF	; 255
    33fa:	2e 3f       	cpi	r18, 0xFE	; 254
    33fc:	3e 07       	cpc	r19, r30
    33fe:	24 f4       	brge	.+8      	; 0x3408 <__vector_15+0x504>
    3400:	2c 5f       	subi	r18, 0xFC	; 252
    3402:	3f 4f       	sbci	r19, 0xFF	; 255
    3404:	69 f1       	breq	.+90     	; 0x3460 <__vector_15+0x55c>
    3406:	f2 c0       	rjmp	.+484    	; 0x35ec <__vector_15+0x6e8>
    3408:	7f ef       	ldi	r23, 0xFF	; 255
    340a:	2e 3f       	cpi	r18, 0xFE	; 254
    340c:	37 07       	cpc	r19, r23
    340e:	09 f4       	brne	.+2      	; 0x3412 <__vector_15+0x50e>
    3410:	4d c0       	rjmp	.+154    	; 0x34ac <__vector_15+0x5a8>
    3412:	2f 5f       	subi	r18, 0xFF	; 255
    3414:	3f 4f       	sbci	r19, 0xFF	; 255
    3416:	09 f4       	brne	.+2      	; 0x341a <__vector_15+0x516>
    3418:	5c c0       	rjmp	.+184    	; 0x34d2 <__vector_15+0x5ce>
    341a:	e8 c0       	rjmp	.+464    	; 0x35ec <__vector_15+0x6e8>
    341c:	24 30       	cpi	r18, 0x04	; 4
    341e:	31 05       	cpc	r19, r1
    3420:	09 f4       	brne	.+2      	; 0x3424 <__vector_15+0x520>
    3422:	b6 c0       	rjmp	.+364    	; 0x3590 <__vector_15+0x68c>
    3424:	25 30       	cpi	r18, 0x05	; 5
    3426:	31 05       	cpc	r19, r1
    3428:	4c f4       	brge	.+18     	; 0x343c <__vector_15+0x538>
    342a:	22 30       	cpi	r18, 0x02	; 2
    342c:	31 05       	cpc	r19, r1
    342e:	09 f4       	brne	.+2      	; 0x3432 <__vector_15+0x52e>
    3430:	89 c0       	rjmp	.+274    	; 0x3544 <__vector_15+0x640>
    3432:	23 30       	cpi	r18, 0x03	; 3
    3434:	31 05       	cpc	r19, r1
    3436:	0c f0       	brlt	.+2      	; 0x343a <__vector_15+0x536>
    3438:	98 c0       	rjmp	.+304    	; 0x356a <__vector_15+0x666>
    343a:	71 c0       	rjmp	.+226    	; 0x351e <__vector_15+0x61a>
    343c:	2d 3e       	cpi	r18, 0xED	; 237
    343e:	31 05       	cpc	r19, r1
    3440:	11 f1       	breq	.+68     	; 0x3486 <__vector_15+0x582>
    3442:	2e 3e       	cpi	r18, 0xEE	; 238
    3444:	31 05       	cpc	r19, r1
    3446:	24 f4       	brge	.+8      	; 0x3450 <__vector_15+0x54c>
    3448:	2c 3e       	cpi	r18, 0xEC	; 236
    344a:	31 05       	cpc	r19, r1
    344c:	49 f0       	breq	.+18     	; 0x3460 <__vector_15+0x55c>
    344e:	ce c0       	rjmp	.+412    	; 0x35ec <__vector_15+0x6e8>
    3450:	2e 3e       	cpi	r18, 0xEE	; 238
    3452:	31 05       	cpc	r19, r1
    3454:	59 f1       	breq	.+86     	; 0x34ac <__vector_15+0x5a8>
    3456:	2f 3e       	cpi	r18, 0xEF	; 239
    3458:	31 05       	cpc	r19, r1
    345a:	09 f4       	brne	.+2      	; 0x345e <__vector_15+0x55a>
    345c:	3a c0       	rjmp	.+116    	; 0x34d2 <__vector_15+0x5ce>
    345e:	c6 c0       	rjmp	.+396    	; 0x35ec <__vector_15+0x6e8>
		{
			case -4:
			case RESOLUTION - 4:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_h_mode][RED][0]);
    3460:	90 91 26 01 	lds	r25, 0x0126
    3464:	8b e1       	ldi	r24, 0x1B	; 27
    3466:	98 9f       	mul	r25, r24
    3468:	c0 01       	movw	r24, r0
    346a:	11 24       	eor	r1, r1
    346c:	fc 01       	movw	r30, r24
    346e:	e2 55       	subi	r30, 0x52	; 82
    3470:	ff 4f       	sbci	r31, 0xFF	; 255
    3472:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_h_mode][GREEN][0]);
    3474:	fc 01       	movw	r30, r24
    3476:	e9 54       	subi	r30, 0x49	; 73
    3478:	ff 4f       	sbci	r31, 0xFF	; 255
    347a:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_h_mode][BLUE][0]);
    347c:	fc 01       	movw	r30, r24
    347e:	e0 54       	subi	r30, 0x40	; 64
    3480:	ff 4f       	sbci	r31, 0xFF	; 255
    3482:	24 91       	lpm	r18, Z
				break;
    3484:	97 c0       	rjmp	.+302    	; 0x35b4 <__vector_15+0x6b0>
			case -3:
			case RESOLUTION - 3:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_h_mode][RED][1]);
    3486:	90 91 26 01 	lds	r25, 0x0126
    348a:	8b e1       	ldi	r24, 0x1B	; 27
    348c:	98 9f       	mul	r25, r24
    348e:	c0 01       	movw	r24, r0
    3490:	11 24       	eor	r1, r1
    3492:	fc 01       	movw	r30, r24
    3494:	e1 55       	subi	r30, 0x51	; 81
    3496:	ff 4f       	sbci	r31, 0xFF	; 255
    3498:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_h_mode][GREEN][1]);
    349a:	fc 01       	movw	r30, r24
    349c:	e8 54       	subi	r30, 0x48	; 72
    349e:	ff 4f       	sbci	r31, 0xFF	; 255
    34a0:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_h_mode][BLUE][1]);
    34a2:	fc 01       	movw	r30, r24
    34a4:	ef 53       	subi	r30, 0x3F	; 63
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	24 91       	lpm	r18, Z
				break;
    34aa:	84 c0       	rjmp	.+264    	; 0x35b4 <__vector_15+0x6b0>
			case -2:
			case RESOLUTION - 2:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_h_mode][RED][2]);
    34ac:	90 91 26 01 	lds	r25, 0x0126
    34b0:	8b e1       	ldi	r24, 0x1B	; 27
    34b2:	98 9f       	mul	r25, r24
    34b4:	c0 01       	movw	r24, r0
    34b6:	11 24       	eor	r1, r1
    34b8:	fc 01       	movw	r30, r24
    34ba:	e0 55       	subi	r30, 0x50	; 80
    34bc:	ff 4f       	sbci	r31, 0xFF	; 255
    34be:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_h_mode][GREEN][2]);
    34c0:	fc 01       	movw	r30, r24
    34c2:	e7 54       	subi	r30, 0x47	; 71
    34c4:	ff 4f       	sbci	r31, 0xFF	; 255
    34c6:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_h_mode][BLUE][2]);
    34c8:	fc 01       	movw	r30, r24
    34ca:	ee 53       	subi	r30, 0x3E	; 62
    34cc:	ff 4f       	sbci	r31, 0xFF	; 255
    34ce:	24 91       	lpm	r18, Z
				break;
    34d0:	71 c0       	rjmp	.+226    	; 0x35b4 <__vector_15+0x6b0>
			case -1:
			case RESOLUTION - 1:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_h_mode][RED][3]);
    34d2:	90 91 26 01 	lds	r25, 0x0126
    34d6:	8b e1       	ldi	r24, 0x1B	; 27
    34d8:	98 9f       	mul	r25, r24
    34da:	c0 01       	movw	r24, r0
    34dc:	11 24       	eor	r1, r1
    34de:	fc 01       	movw	r30, r24
    34e0:	ef 54       	subi	r30, 0x4F	; 79
    34e2:	ff 4f       	sbci	r31, 0xFF	; 255
    34e4:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_h_mode][GREEN][3]);
    34e6:	fc 01       	movw	r30, r24
    34e8:	e6 54       	subi	r30, 0x46	; 70
    34ea:	ff 4f       	sbci	r31, 0xFF	; 255
    34ec:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_h_mode][BLUE][3]);
    34ee:	fc 01       	movw	r30, r24
    34f0:	ed 53       	subi	r30, 0x3D	; 61
    34f2:	ff 4f       	sbci	r31, 0xFF	; 255
    34f4:	24 91       	lpm	r18, Z
				break;
    34f6:	5e c0       	rjmp	.+188    	; 0x35b4 <__vector_15+0x6b0>
			case 0:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_h_mode][RED][4]);
    34f8:	90 91 26 01 	lds	r25, 0x0126
    34fc:	8b e1       	ldi	r24, 0x1B	; 27
    34fe:	98 9f       	mul	r25, r24
    3500:	c0 01       	movw	r24, r0
    3502:	11 24       	eor	r1, r1
    3504:	fc 01       	movw	r30, r24
    3506:	ee 54       	subi	r30, 0x4E	; 78
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_h_mode][GREEN][4]);
    350c:	fc 01       	movw	r30, r24
    350e:	e5 54       	subi	r30, 0x45	; 69
    3510:	ff 4f       	sbci	r31, 0xFF	; 255
    3512:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_h_mode][BLUE][4]);
    3514:	fc 01       	movw	r30, r24
    3516:	ec 53       	subi	r30, 0x3C	; 60
    3518:	ff 4f       	sbci	r31, 0xFF	; 255
    351a:	24 91       	lpm	r18, Z
				break;
    351c:	4b c0       	rjmp	.+150    	; 0x35b4 <__vector_15+0x6b0>
			case 1:
			case -RESOLUTION + 1:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_h_mode][RED][5]);
    351e:	90 91 26 01 	lds	r25, 0x0126
    3522:	8b e1       	ldi	r24, 0x1B	; 27
    3524:	98 9f       	mul	r25, r24
    3526:	c0 01       	movw	r24, r0
    3528:	11 24       	eor	r1, r1
    352a:	fc 01       	movw	r30, r24
    352c:	ed 54       	subi	r30, 0x4D	; 77
    352e:	ff 4f       	sbci	r31, 0xFF	; 255
    3530:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_h_mode][GREEN][5]);
    3532:	fc 01       	movw	r30, r24
    3534:	e4 54       	subi	r30, 0x44	; 68
    3536:	ff 4f       	sbci	r31, 0xFF	; 255
    3538:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_h_mode][BLUE][5]);	
    353a:	fc 01       	movw	r30, r24
    353c:	eb 53       	subi	r30, 0x3B	; 59
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	24 91       	lpm	r18, Z
				break;
    3542:	38 c0       	rjmp	.+112    	; 0x35b4 <__vector_15+0x6b0>
			case 2:
			case -RESOLUTION + 2:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_h_mode][RED][6]);
    3544:	90 91 26 01 	lds	r25, 0x0126
    3548:	8b e1       	ldi	r24, 0x1B	; 27
    354a:	98 9f       	mul	r25, r24
    354c:	c0 01       	movw	r24, r0
    354e:	11 24       	eor	r1, r1
    3550:	fc 01       	movw	r30, r24
    3552:	ec 54       	subi	r30, 0x4C	; 76
    3554:	ff 4f       	sbci	r31, 0xFF	; 255
    3556:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_h_mode][GREEN][6]);
    3558:	fc 01       	movw	r30, r24
    355a:	e3 54       	subi	r30, 0x43	; 67
    355c:	ff 4f       	sbci	r31, 0xFF	; 255
    355e:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_h_mode][BLUE][6]);	
    3560:	fc 01       	movw	r30, r24
    3562:	ea 53       	subi	r30, 0x3A	; 58
    3564:	ff 4f       	sbci	r31, 0xFF	; 255
    3566:	24 91       	lpm	r18, Z
				break;
    3568:	25 c0       	rjmp	.+74     	; 0x35b4 <__vector_15+0x6b0>
			case 3:
			case -RESOLUTION + 3:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_h_mode][RED][7]);
    356a:	90 91 26 01 	lds	r25, 0x0126
    356e:	8b e1       	ldi	r24, 0x1B	; 27
    3570:	98 9f       	mul	r25, r24
    3572:	c0 01       	movw	r24, r0
    3574:	11 24       	eor	r1, r1
    3576:	fc 01       	movw	r30, r24
    3578:	eb 54       	subi	r30, 0x4B	; 75
    357a:	ff 4f       	sbci	r31, 0xFF	; 255
    357c:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_h_mode][GREEN][7]);
    357e:	fc 01       	movw	r30, r24
    3580:	e2 54       	subi	r30, 0x42	; 66
    3582:	ff 4f       	sbci	r31, 0xFF	; 255
    3584:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_h_mode][BLUE][7]);	
    3586:	fc 01       	movw	r30, r24
    3588:	e9 53       	subi	r30, 0x39	; 57
    358a:	ff 4f       	sbci	r31, 0xFF	; 255
    358c:	24 91       	lpm	r18, Z
				break;		
    358e:	12 c0       	rjmp	.+36     	; 0x35b4 <__vector_15+0x6b0>
			case 4:
			case -RESOLUTION + 4:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_h_mode][RED][8]);
    3590:	90 91 26 01 	lds	r25, 0x0126
    3594:	8b e1       	ldi	r24, 0x1B	; 27
    3596:	98 9f       	mul	r25, r24
    3598:	c0 01       	movw	r24, r0
    359a:	11 24       	eor	r1, r1
    359c:	fc 01       	movw	r30, r24
    359e:	ea 54       	subi	r30, 0x4A	; 74
    35a0:	ff 4f       	sbci	r31, 0xFF	; 255
    35a2:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_h_mode][GREEN][8]);
    35a4:	fc 01       	movw	r30, r24
    35a6:	e1 54       	subi	r30, 0x41	; 65
    35a8:	ff 4f       	sbci	r31, 0xFF	; 255
    35aa:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_h_mode][BLUE][8]);	
    35ac:	fc 01       	movw	r30, r24
    35ae:	e8 53       	subi	r30, 0x38	; 56
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	24 91       	lpm	r18, Z
				break;		
		}
	}

	
	//if temporary registers aren't updated that means the hands aren't being displayed now
	if((tmp_red != PWM_TOP + 1) || (tmp_green != PWM_TOP + 1) || (tmp_blue != PWM_TOP + 1))
    35b4:	48 32       	cpi	r20, 0x28	; 40
    35b6:	21 f4       	brne	.+8      	; 0x35c0 <__vector_15+0x6bc>
    35b8:	38 32       	cpi	r19, 0x28	; 40
    35ba:	11 f4       	brne	.+4      	; 0x35c0 <__vector_15+0x6bc>
    35bc:	28 32       	cpi	r18, 0x28	; 40
    35be:	b1 f0       	breq	.+44     	; 0x35ec <__vector_15+0x6e8>
	{
		if(g_rc_state == STATE_SETTING)  //if time is being set 
    35c0:	61 30       	cpi	r22, 0x01	; 1
    35c2:	49 f4       	brne	.+18     	; 0x35d6 <__vector_15+0x6d2>
		{
			if(g_timer2_ovf & 0x02) 	//minute and second hand should blink
    35c4:	80 91 23 01 	lds	r24, 0x0123
    35c8:	81 fd       	sbrc	r24, 1
    35ca:	05 c0       	rjmp	.+10     	; 0x35d6 <__vector_15+0x6d2>
			{
				PWM_RED = tmp_red;
				PWM_GREEN = tmp_green;
				PWM_BLUE = tmp_blue;	
			}
			else
			{
				if(g_rc_hold_counter != 0) //don't blink if any button is held
    35cc:	80 91 0a 01 	lds	r24, 0x010A
    35d0:	88 23       	and	r24, r24
    35d2:	09 f4       	brne	.+2      	; 0x35d6 <__vector_15+0x6d2>
    35d4:	0c c2       	rjmp	.+1048   	; 0x39ee <__vector_15+0xaea>
				{
					PWM_RED = tmp_red;
					PWM_GREEN = tmp_green;
					PWM_BLUE = tmp_blue;
				}
			}
		}
		else		//display stored values
		{
			PWM_RED = tmp_red;
    35d6:	84 2f       	mov	r24, r20
    35d8:	99 27       	eor	r25, r25
    35da:	9b bd       	out	0x2b, r25	; 43
    35dc:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = tmp_green;
    35de:	83 2f       	mov	r24, r19
    35e0:	99 27       	eor	r25, r25
    35e2:	99 bd       	out	0x29, r25	; 41
    35e4:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = tmp_blue;		
    35e6:	82 2f       	mov	r24, r18
    35e8:	99 27       	eor	r25, r25
    35ea:	fd c1       	rjmp	.+1018   	; 0x39e6 <__vector_15+0xae2>
		}
	}
	else  //display background, also stored in flash memomy
	{
		switch(g_mode)
    35ec:	20 91 18 01 	lds	r18, 0x0118
    35f0:	82 2f       	mov	r24, r18
    35f2:	99 27       	eor	r25, r25
    35f4:	aa 27       	eor	r26, r26
    35f6:	bb 27       	eor	r27, r27
    35f8:	fc 01       	movw	r30, r24
    35fa:	36 97       	sbiw	r30, 0x06	; 6
    35fc:	e1 31       	cpi	r30, 0x11	; 17
    35fe:	f1 05       	cpc	r31, r1
    3600:	08 f0       	brcs	.+2      	; 0x3604 <__vector_15+0x700>
    3602:	cf c1       	rjmp	.+926    	; 0x39a2 <__vector_15+0xa9e>
    3604:	ea 5b       	subi	r30, 0xBA	; 186
    3606:	ff 4f       	sbci	r31, 0xFF	; 255
    3608:	40 91 1e 01 	lds	r20, 0x011E
    360c:	ee 0f       	add	r30, r30
    360e:	ff 1f       	adc	r31, r31
    3610:	05 90       	lpm	r0, Z+
    3612:	f4 91       	lpm	r31, Z
    3614:	e0 2d       	mov	r30, r0
    3616:	09 94       	ijmp
		{
			case 22:				// background is changing fast, with black lines grey x2 inverted
			
				PWM_RED = pgm_read_byte(&gc_background[3][RED][g_fast+g_pos]);
    3618:	80 91 1f 01 	lds	r24, 0x011F
    361c:	e8 2f       	mov	r30, r24
    361e:	e4 0f       	add	r30, r20
    3620:	f1 2d       	mov	r31, r1
    3622:	f1 1d       	adc	r31, r1
    3624:	9f 01       	movw	r18, r30
    3626:	ec 58       	subi	r30, 0x8C	; 140
    3628:	fc 4e       	sbci	r31, 0xEC	; 236
    362a:	84 91       	lpm	r24, Z
    362c:	99 27       	eor	r25, r25
    362e:	9b bd       	out	0x2b, r25	; 43
    3630:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = pgm_read_byte(&gc_background[3][GREEN][g_fast+g_pos]);
    3632:	f9 01       	movw	r30, r18
    3634:	ec 5a       	subi	r30, 0xAC	; 172
    3636:	fa 4e       	sbci	r31, 0xEA	; 234
    3638:	84 91       	lpm	r24, Z
    363a:	99 27       	eor	r25, r25
    363c:	99 bd       	out	0x29, r25	; 41
    363e:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = pgm_read_byte(&gc_background[3][BLUE][g_fast+g_pos]);
    3640:	2c 5c       	subi	r18, 0xCC	; 204
    3642:	38 4e       	sbci	r19, 0xE8	; 232
    3644:	f9 01       	movw	r30, r18
    3646:	84 91       	lpm	r24, Z
    3648:	82 c1       	rjmp	.+772    	; 0x394e <__vector_15+0xa4a>
				
				if (g_pos % 20 == 0)
				{
					PWM_RED = PWM_TOP;
					PWM_GREEN = PWM_TOP;
					PWM_BLUE = PWM_TOP;
				}
				break;
				
			case 21:				// background is changing fast, grey x2 inverted
				
				PWM_RED = pgm_read_byte(&gc_background[3][RED][g_fast+g_pos]);
    364a:	80 91 1f 01 	lds	r24, 0x011F
    364e:	68 2f       	mov	r22, r24
    3650:	64 0f       	add	r22, r20
    3652:	71 2d       	mov	r23, r1
    3654:	71 1d       	adc	r23, r1
    3656:	9b 01       	movw	r18, r22
    3658:	fb 01       	movw	r30, r22
    365a:	ec 58       	subi	r30, 0x8C	; 140
    365c:	fc 4e       	sbci	r31, 0xEC	; 236
    365e:	84 91       	lpm	r24, Z
    3660:	99 27       	eor	r25, r25
    3662:	9b bd       	out	0x2b, r25	; 43
    3664:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = pgm_read_byte(&gc_background[3][GREEN][g_fast+g_pos]);
    3666:	fb 01       	movw	r30, r22
    3668:	ec 5a       	subi	r30, 0xAC	; 172
    366a:	fa 4e       	sbci	r31, 0xEA	; 234
    366c:	84 91       	lpm	r24, Z
    366e:	99 27       	eor	r25, r25
    3670:	99 bd       	out	0x29, r25	; 41
    3672:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = pgm_read_byte(&gc_background[3][BLUE][g_fast+g_pos]);
    3674:	2c 5c       	subi	r18, 0xCC	; 204
    3676:	38 4e       	sbci	r19, 0xE8	; 232
    3678:	f9 01       	movw	r30, r18
    367a:	84 91       	lpm	r24, Z
    367c:	b3 c1       	rjmp	.+870    	; 0x39e4 <__vector_15+0xae0>
				break;
				
			case 20:				// background is changing slow, with black lines grey x2 inverted
				
				PWM_RED = pgm_read_byte(&gc_background[3][RED][g_slow+g_pos]);
    367e:	80 91 24 01 	lds	r24, 0x0124
    3682:	68 2f       	mov	r22, r24
    3684:	64 0f       	add	r22, r20
    3686:	71 2d       	mov	r23, r1
    3688:	71 1d       	adc	r23, r1
    368a:	9b 01       	movw	r18, r22
    368c:	fb 01       	movw	r30, r22
    368e:	ec 58       	subi	r30, 0x8C	; 140
    3690:	fc 4e       	sbci	r31, 0xEC	; 236
    3692:	84 91       	lpm	r24, Z
    3694:	99 27       	eor	r25, r25
    3696:	9b bd       	out	0x2b, r25	; 43
    3698:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = pgm_read_byte(&gc_background[3][GREEN][g_slow+g_pos]);
    369a:	fb 01       	movw	r30, r22
    369c:	ec 5a       	subi	r30, 0xAC	; 172
    369e:	fa 4e       	sbci	r31, 0xEA	; 234
    36a0:	84 91       	lpm	r24, Z
    36a2:	99 27       	eor	r25, r25
    36a4:	99 bd       	out	0x29, r25	; 41
    36a6:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = pgm_read_byte(&gc_background[3][BLUE][g_slow+g_pos]);
    36a8:	2c 5c       	subi	r18, 0xCC	; 204
    36aa:	38 4e       	sbci	r19, 0xE8	; 232
    36ac:	f9 01       	movw	r30, r18
    36ae:	84 91       	lpm	r24, Z
    36b0:	4e c1       	rjmp	.+668    	; 0x394e <__vector_15+0xa4a>
				
				if (g_pos % 20 == 0)
				{
					PWM_RED = PWM_TOP;
					PWM_GREEN = PWM_TOP;
					PWM_BLUE = PWM_TOP;
				}
				break;
			
			case 19:				// background is changing slow, grey x2 inverted
				
				PWM_RED = pgm_read_byte(&gc_background[3][RED][g_slow+g_pos]);
    36b2:	80 91 24 01 	lds	r24, 0x0124
    36b6:	68 2f       	mov	r22, r24
    36b8:	64 0f       	add	r22, r20
    36ba:	71 2d       	mov	r23, r1
    36bc:	71 1d       	adc	r23, r1
    36be:	9b 01       	movw	r18, r22
    36c0:	fb 01       	movw	r30, r22
    36c2:	ec 58       	subi	r30, 0x8C	; 140
    36c4:	fc 4e       	sbci	r31, 0xEC	; 236
    36c6:	84 91       	lpm	r24, Z
    36c8:	99 27       	eor	r25, r25
    36ca:	9b bd       	out	0x2b, r25	; 43
    36cc:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = pgm_read_byte(&gc_background[3][GREEN][g_slow+g_pos]);
    36ce:	fb 01       	movw	r30, r22
    36d0:	ec 5a       	subi	r30, 0xAC	; 172
    36d2:	fa 4e       	sbci	r31, 0xEA	; 234
    36d4:	84 91       	lpm	r24, Z
    36d6:	99 27       	eor	r25, r25
    36d8:	99 bd       	out	0x29, r25	; 41
    36da:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = pgm_read_byte(&gc_background[3][BLUE][g_slow+g_pos]);
    36dc:	2c 5c       	subi	r18, 0xCC	; 204
    36de:	38 4e       	sbci	r19, 0xE8	; 232
    36e0:	f9 01       	movw	r30, r18
    36e2:	84 91       	lpm	r24, Z
    36e4:	7f c1       	rjmp	.+766    	; 0x39e4 <__vector_15+0xae0>
				break;
		
			case 18:				// background is changing fast, with black lines grey x2
			
				PWM_RED = pgm_read_byte(&gc_background[2][RED][g_fast+g_pos]);
    36e6:	80 91 1f 01 	lds	r24, 0x011F
    36ea:	68 2f       	mov	r22, r24
    36ec:	64 0f       	add	r22, r20
    36ee:	71 2d       	mov	r23, r1
    36f0:	71 1d       	adc	r23, r1
    36f2:	9b 01       	movw	r18, r22
    36f4:	fb 01       	movw	r30, r22
    36f6:	ec 52       	subi	r30, 0x2C	; 44
    36f8:	f2 4f       	sbci	r31, 0xF2	; 242
    36fa:	84 91       	lpm	r24, Z
    36fc:	99 27       	eor	r25, r25
    36fe:	9b bd       	out	0x2b, r25	; 43
    3700:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = pgm_read_byte(&gc_background[2][GREEN][g_fast+g_pos]);
    3702:	fb 01       	movw	r30, r22
    3704:	ec 54       	subi	r30, 0x4C	; 76
    3706:	f0 4f       	sbci	r31, 0xF0	; 240
    3708:	84 91       	lpm	r24, Z
    370a:	99 27       	eor	r25, r25
    370c:	99 bd       	out	0x29, r25	; 41
    370e:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = pgm_read_byte(&gc_background[2][BLUE][g_fast+g_pos]);
    3710:	2c 56       	subi	r18, 0x6C	; 108
    3712:	3e 4e       	sbci	r19, 0xEE	; 238
    3714:	f9 01       	movw	r30, r18
    3716:	84 91       	lpm	r24, Z
    3718:	1a c1       	rjmp	.+564    	; 0x394e <__vector_15+0xa4a>
				
				if (g_pos % 20 == 0)
				{
					PWM_RED = PWM_TOP;
					PWM_GREEN = PWM_TOP;
					PWM_BLUE = PWM_TOP;
				}
				break;
				
			case 17:				// background is changing fast, grey x2
				
				PWM_RED = pgm_read_byte(&gc_background[2][RED][g_fast+g_pos]);
    371a:	80 91 1f 01 	lds	r24, 0x011F
    371e:	68 2f       	mov	r22, r24
    3720:	64 0f       	add	r22, r20
    3722:	71 2d       	mov	r23, r1
    3724:	71 1d       	adc	r23, r1
    3726:	9b 01       	movw	r18, r22
    3728:	fb 01       	movw	r30, r22
    372a:	ec 52       	subi	r30, 0x2C	; 44
    372c:	f2 4f       	sbci	r31, 0xF2	; 242
    372e:	84 91       	lpm	r24, Z
    3730:	99 27       	eor	r25, r25
    3732:	9b bd       	out	0x2b, r25	; 43
    3734:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = pgm_read_byte(&gc_background[2][GREEN][g_fast+g_pos]);
    3736:	fb 01       	movw	r30, r22
    3738:	ec 54       	subi	r30, 0x4C	; 76
    373a:	f0 4f       	sbci	r31, 0xF0	; 240
    373c:	84 91       	lpm	r24, Z
    373e:	99 27       	eor	r25, r25
    3740:	99 bd       	out	0x29, r25	; 41
    3742:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = pgm_read_byte(&gc_background[2][BLUE][g_fast+g_pos]);
    3744:	2c 56       	subi	r18, 0x6C	; 108
    3746:	3e 4e       	sbci	r19, 0xEE	; 238
    3748:	f9 01       	movw	r30, r18
    374a:	84 91       	lpm	r24, Z
    374c:	4b c1       	rjmp	.+662    	; 0x39e4 <__vector_15+0xae0>
				break;
			
			case 16:				// background is changing slow, with black lines grey x2
				
				PWM_RED = pgm_read_byte(&gc_background[2][RED][g_slow+g_pos]);
    374e:	80 91 24 01 	lds	r24, 0x0124
    3752:	68 2f       	mov	r22, r24
    3754:	64 0f       	add	r22, r20
    3756:	71 2d       	mov	r23, r1
    3758:	71 1d       	adc	r23, r1
    375a:	9b 01       	movw	r18, r22
    375c:	fb 01       	movw	r30, r22
    375e:	ec 52       	subi	r30, 0x2C	; 44
    3760:	f2 4f       	sbci	r31, 0xF2	; 242
    3762:	84 91       	lpm	r24, Z
    3764:	99 27       	eor	r25, r25
    3766:	9b bd       	out	0x2b, r25	; 43
    3768:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = pgm_read_byte(&gc_background[2][GREEN][g_slow+g_pos]);
    376a:	fb 01       	movw	r30, r22
    376c:	ec 54       	subi	r30, 0x4C	; 76
    376e:	f0 4f       	sbci	r31, 0xF0	; 240
    3770:	84 91       	lpm	r24, Z
    3772:	99 27       	eor	r25, r25
    3774:	99 bd       	out	0x29, r25	; 41
    3776:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = pgm_read_byte(&gc_background[2][BLUE][g_slow+g_pos]);
    3778:	2c 56       	subi	r18, 0x6C	; 108
    377a:	3e 4e       	sbci	r19, 0xEE	; 238
    377c:	f9 01       	movw	r30, r18
    377e:	84 91       	lpm	r24, Z
    3780:	e6 c0       	rjmp	.+460    	; 0x394e <__vector_15+0xa4a>
				
				if (g_pos % 20 == 0)
				{
					PWM_RED = PWM_TOP;
					PWM_GREEN = PWM_TOP;
					PWM_BLUE = PWM_TOP;
				}
				break;
			
			case 15:				// background is changing slow, grey x2
				
				PWM_RED = pgm_read_byte(&gc_background[2][RED][g_slow+g_pos]);
    3782:	80 91 24 01 	lds	r24, 0x0124
    3786:	68 2f       	mov	r22, r24
    3788:	64 0f       	add	r22, r20
    378a:	71 2d       	mov	r23, r1
    378c:	71 1d       	adc	r23, r1
    378e:	9b 01       	movw	r18, r22
    3790:	fb 01       	movw	r30, r22
    3792:	ec 52       	subi	r30, 0x2C	; 44
    3794:	f2 4f       	sbci	r31, 0xF2	; 242
    3796:	84 91       	lpm	r24, Z
    3798:	99 27       	eor	r25, r25
    379a:	9b bd       	out	0x2b, r25	; 43
    379c:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = pgm_read_byte(&gc_background[2][GREEN][g_slow+g_pos]);
    379e:	fb 01       	movw	r30, r22
    37a0:	ec 54       	subi	r30, 0x4C	; 76
    37a2:	f0 4f       	sbci	r31, 0xF0	; 240
    37a4:	84 91       	lpm	r24, Z
    37a6:	99 27       	eor	r25, r25
    37a8:	99 bd       	out	0x29, r25	; 41
    37aa:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = pgm_read_byte(&gc_background[2][BLUE][g_slow+g_pos]);
    37ac:	2c 56       	subi	r18, 0x6C	; 108
    37ae:	3e 4e       	sbci	r19, 0xEE	; 238
    37b0:	f9 01       	movw	r30, r18
    37b2:	84 91       	lpm	r24, Z
    37b4:	17 c1       	rjmp	.+558    	; 0x39e4 <__vector_15+0xae0>
				break;
				
			
			case 14:				// background is changing slow, radioactivity x2
				
				PWM_RED = pgm_read_byte(&gc_background[1][RED][g_sr+g_pos]);
    37b6:	80 91 1c 01 	lds	r24, 0x011C
    37ba:	68 2f       	mov	r22, r24
    37bc:	64 0f       	add	r22, r20
    37be:	71 2d       	mov	r23, r1
    37c0:	71 1d       	adc	r23, r1
    37c2:	9b 01       	movw	r18, r22
    37c4:	fb 01       	movw	r30, r22
    37c6:	ec 5c       	subi	r30, 0xCC	; 204
    37c8:	f7 4f       	sbci	r31, 0xF7	; 247
    37ca:	84 91       	lpm	r24, Z
    37cc:	99 27       	eor	r25, r25
    37ce:	9b bd       	out	0x2b, r25	; 43
    37d0:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = pgm_read_byte(&gc_background[1][GREEN][g_sr+g_pos]);
    37d2:	fb 01       	movw	r30, r22
    37d4:	ec 5e       	subi	r30, 0xEC	; 236
    37d6:	f5 4f       	sbci	r31, 0xF5	; 245
    37d8:	84 91       	lpm	r24, Z
    37da:	99 27       	eor	r25, r25
    37dc:	99 bd       	out	0x29, r25	; 41
    37de:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = pgm_read_byte(&gc_background[1][BLUE][g_sr+g_pos]);
    37e0:	2c 50       	subi	r18, 0x0C	; 12
    37e2:	34 4f       	sbci	r19, 0xF4	; 244
    37e4:	f9 01       	movw	r30, r18
    37e6:	84 91       	lpm	r24, Z
    37e8:	fd c0       	rjmp	.+506    	; 0x39e4 <__vector_15+0xae0>
				break;
			
			case 13:				// background is changing fast, with black lines rainbowx2
				
				PWM_RED = pgm_read_byte(&gc_background[0][RED][g_fast+g_pos]);
    37ea:	80 91 1f 01 	lds	r24, 0x011F
    37ee:	68 2f       	mov	r22, r24
    37f0:	64 0f       	add	r22, r20
    37f2:	71 2d       	mov	r23, r1
    37f4:	71 1d       	adc	r23, r1
    37f6:	9b 01       	movw	r18, r22
    37f8:	fb 01       	movw	r30, r22
    37fa:	ec 56       	subi	r30, 0x6C	; 108
    37fc:	fd 4f       	sbci	r31, 0xFD	; 253
    37fe:	84 91       	lpm	r24, Z
    3800:	99 27       	eor	r25, r25
    3802:	9b bd       	out	0x2b, r25	; 43
    3804:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = pgm_read_byte(&gc_background[0][GREEN][g_fast+g_pos]);
    3806:	fb 01       	movw	r30, r22
    3808:	ec 58       	subi	r30, 0x8C	; 140
    380a:	fb 4f       	sbci	r31, 0xFB	; 251
    380c:	84 91       	lpm	r24, Z
    380e:	99 27       	eor	r25, r25
    3810:	99 bd       	out	0x29, r25	; 41
    3812:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = pgm_read_byte(&gc_background[0][BLUE][g_fast+g_pos]);
    3814:	2c 5a       	subi	r18, 0xAC	; 172
    3816:	39 4f       	sbci	r19, 0xF9	; 249
    3818:	f9 01       	movw	r30, r18
    381a:	84 91       	lpm	r24, Z
    381c:	98 c0       	rjmp	.+304    	; 0x394e <__vector_15+0xa4a>
				
				if (g_pos % 20 == 0)
				{
					PWM_RED = PWM_TOP;
					PWM_GREEN = PWM_TOP;
					PWM_BLUE = PWM_TOP;
				}
				break;
				
			case 12:				// background is changing fast, rainbowx2
			
				PWM_RED = pgm_read_byte(&gc_background[0][RED][g_fast+g_pos]);
    381e:	80 91 1f 01 	lds	r24, 0x011F
    3822:	68 2f       	mov	r22, r24
    3824:	64 0f       	add	r22, r20
    3826:	71 2d       	mov	r23, r1
    3828:	71 1d       	adc	r23, r1
    382a:	9b 01       	movw	r18, r22
    382c:	fb 01       	movw	r30, r22
    382e:	ec 56       	subi	r30, 0x6C	; 108
    3830:	fd 4f       	sbci	r31, 0xFD	; 253
    3832:	84 91       	lpm	r24, Z
    3834:	99 27       	eor	r25, r25
    3836:	9b bd       	out	0x2b, r25	; 43
    3838:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = pgm_read_byte(&gc_background[0][GREEN][g_fast+g_pos]);
    383a:	fb 01       	movw	r30, r22
    383c:	ec 58       	subi	r30, 0x8C	; 140
    383e:	fb 4f       	sbci	r31, 0xFB	; 251
    3840:	84 91       	lpm	r24, Z
    3842:	99 27       	eor	r25, r25
    3844:	99 bd       	out	0x29, r25	; 41
    3846:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = pgm_read_byte(&gc_background[0][BLUE][g_fast+g_pos]);
    3848:	2c 5a       	subi	r18, 0xAC	; 172
    384a:	39 4f       	sbci	r19, 0xF9	; 249
    384c:	f9 01       	movw	r30, r18
    384e:	84 91       	lpm	r24, Z
    3850:	c9 c0       	rjmp	.+402    	; 0x39e4 <__vector_15+0xae0>
				break;
	
			case 11:				// background is changing slow, with black lines rainbowx2
				
				PWM_RED = pgm_read_byte(&gc_background[0][RED][g_slow+g_pos]);
    3852:	80 91 24 01 	lds	r24, 0x0124
    3856:	68 2f       	mov	r22, r24
    3858:	64 0f       	add	r22, r20
    385a:	71 2d       	mov	r23, r1
    385c:	71 1d       	adc	r23, r1
    385e:	9b 01       	movw	r18, r22
    3860:	fb 01       	movw	r30, r22
    3862:	ec 56       	subi	r30, 0x6C	; 108
    3864:	fd 4f       	sbci	r31, 0xFD	; 253
    3866:	84 91       	lpm	r24, Z
    3868:	99 27       	eor	r25, r25
    386a:	9b bd       	out	0x2b, r25	; 43
    386c:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = pgm_read_byte(&gc_background[0][GREEN][g_slow+g_pos]);
    386e:	fb 01       	movw	r30, r22
    3870:	ec 58       	subi	r30, 0x8C	; 140
    3872:	fb 4f       	sbci	r31, 0xFB	; 251
    3874:	84 91       	lpm	r24, Z
    3876:	99 27       	eor	r25, r25
    3878:	99 bd       	out	0x29, r25	; 41
    387a:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = pgm_read_byte(&gc_background[0][BLUE][g_slow+g_pos]);
    387c:	2c 5a       	subi	r18, 0xAC	; 172
    387e:	39 4f       	sbci	r19, 0xF9	; 249
    3880:	f9 01       	movw	r30, r18
    3882:	84 91       	lpm	r24, Z
    3884:	64 c0       	rjmp	.+200    	; 0x394e <__vector_15+0xa4a>
				
				if (g_pos % 20 == 0)
				{
					PWM_RED = PWM_TOP;
					PWM_GREEN = PWM_TOP;
					PWM_BLUE = PWM_TOP;
				}
				break;
				
			case 10:				// background is changing slow, rainbowx2
				
				PWM_RED = pgm_read_byte(&gc_background[0][RED][g_slow+g_pos]);
    3886:	80 91 24 01 	lds	r24, 0x0124
    388a:	68 2f       	mov	r22, r24
    388c:	64 0f       	add	r22, r20
    388e:	71 2d       	mov	r23, r1
    3890:	71 1d       	adc	r23, r1
    3892:	9b 01       	movw	r18, r22
    3894:	fb 01       	movw	r30, r22
    3896:	ec 56       	subi	r30, 0x6C	; 108
    3898:	fd 4f       	sbci	r31, 0xFD	; 253
    389a:	84 91       	lpm	r24, Z
    389c:	99 27       	eor	r25, r25
    389e:	9b bd       	out	0x2b, r25	; 43
    38a0:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = pgm_read_byte(&gc_background[0][GREEN][g_slow+g_pos]);
    38a2:	fb 01       	movw	r30, r22
    38a4:	ec 58       	subi	r30, 0x8C	; 140
    38a6:	fb 4f       	sbci	r31, 0xFB	; 251
    38a8:	84 91       	lpm	r24, Z
    38aa:	99 27       	eor	r25, r25
    38ac:	99 bd       	out	0x29, r25	; 41
    38ae:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = pgm_read_byte(&gc_background[0][BLUE][g_slow+g_pos]);
    38b0:	2c 5a       	subi	r18, 0xAC	; 172
    38b2:	39 4f       	sbci	r19, 0xF9	; 249
    38b4:	f9 01       	movw	r30, r18
    38b6:	84 91       	lpm	r24, Z
    38b8:	95 c0       	rjmp	.+298    	; 0x39e4 <__vector_15+0xae0>
				break;
				
			case 9:				// background is changing very slow, with black lines rainbowx2
				
				PWM_RED = pgm_read_byte(&gc_background[0][RED][g_ss+g_pos]);
    38ba:	80 91 28 01 	lds	r24, 0x0128
    38be:	68 2f       	mov	r22, r24
    38c0:	64 0f       	add	r22, r20
    38c2:	71 2d       	mov	r23, r1
    38c4:	71 1d       	adc	r23, r1
    38c6:	9b 01       	movw	r18, r22
    38c8:	fb 01       	movw	r30, r22
    38ca:	ec 56       	subi	r30, 0x6C	; 108
    38cc:	fd 4f       	sbci	r31, 0xFD	; 253
    38ce:	84 91       	lpm	r24, Z
    38d0:	99 27       	eor	r25, r25
    38d2:	9b bd       	out	0x2b, r25	; 43
    38d4:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = pgm_read_byte(&gc_background[0][GREEN][g_ss+g_pos]);
    38d6:	fb 01       	movw	r30, r22
    38d8:	ec 58       	subi	r30, 0x8C	; 140
    38da:	fb 4f       	sbci	r31, 0xFB	; 251
    38dc:	84 91       	lpm	r24, Z
    38de:	99 27       	eor	r25, r25
    38e0:	99 bd       	out	0x29, r25	; 41
    38e2:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = pgm_read_byte(&gc_background[0][BLUE][g_ss+g_pos]);
    38e4:	2c 5a       	subi	r18, 0xAC	; 172
    38e6:	39 4f       	sbci	r19, 0xF9	; 249
    38e8:	f9 01       	movw	r30, r18
    38ea:	84 91       	lpm	r24, Z
    38ec:	30 c0       	rjmp	.+96     	; 0x394e <__vector_15+0xa4a>
				
				if (g_pos % 20 == 0)
				{
					PWM_RED = PWM_TOP;
					PWM_GREEN = PWM_TOP;
					PWM_BLUE = PWM_TOP;
				}
				break;
			
			case 8:				// background is changing very slow, rainbowx2
				
				PWM_RED = pgm_read_byte(&gc_background[0][RED][g_ss+g_pos]);
    38ee:	80 91 28 01 	lds	r24, 0x0128
    38f2:	68 2f       	mov	r22, r24
    38f4:	64 0f       	add	r22, r20
    38f6:	71 2d       	mov	r23, r1
    38f8:	71 1d       	adc	r23, r1
    38fa:	9b 01       	movw	r18, r22
    38fc:	fb 01       	movw	r30, r22
    38fe:	ec 56       	subi	r30, 0x6C	; 108
    3900:	fd 4f       	sbci	r31, 0xFD	; 253
    3902:	84 91       	lpm	r24, Z
    3904:	99 27       	eor	r25, r25
    3906:	9b bd       	out	0x2b, r25	; 43
    3908:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = pgm_read_byte(&gc_background[0][GREEN][g_ss+g_pos]);
    390a:	fb 01       	movw	r30, r22
    390c:	ec 58       	subi	r30, 0x8C	; 140
    390e:	fb 4f       	sbci	r31, 0xFB	; 251
    3910:	84 91       	lpm	r24, Z
    3912:	99 27       	eor	r25, r25
    3914:	99 bd       	out	0x29, r25	; 41
    3916:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = pgm_read_byte(&gc_background[0][BLUE][g_ss+g_pos]);
    3918:	2c 5a       	subi	r18, 0xAC	; 172
    391a:	39 4f       	sbci	r19, 0xF9	; 249
    391c:	f9 01       	movw	r30, r18
    391e:	84 91       	lpm	r24, Z
    3920:	61 c0       	rjmp	.+194    	; 0x39e4 <__vector_15+0xae0>
				break;
			
			case 7:				// background is changing, one color with black lines
				
				PWM_RED = pgm_read_byte(&g_background[0][GREEN][g_seconds]);
    3922:	80 91 2b 01 	lds	r24, 0x012B
    3926:	28 2f       	mov	r18, r24
    3928:	33 27       	eor	r19, r19
    392a:	f9 01       	movw	r30, r18
    392c:	ec 5f       	subi	r30, 0xFC	; 252
    392e:	f5 4e       	sbci	r31, 0xE5	; 229
    3930:	84 91       	lpm	r24, Z
    3932:	99 27       	eor	r25, r25
    3934:	9b bd       	out	0x2b, r25	; 43
    3936:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = pgm_read_byte(&g_background[0][RED][g_seconds]);
    3938:	f9 01       	movw	r30, r18
    393a:	ec 5e       	subi	r30, 0xEC	; 236
    393c:	f6 4e       	sbci	r31, 0xE6	; 230
    393e:	84 91       	lpm	r24, Z
    3940:	99 27       	eor	r25, r25
    3942:	99 bd       	out	0x29, r25	; 41
    3944:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = pgm_read_byte(&g_background[0][BLUE][g_seconds]);
    3946:	2c 50       	subi	r18, 0x0C	; 12
    3948:	35 4e       	sbci	r19, 0xE5	; 229
    394a:	f9 01       	movw	r30, r18
    394c:	84 91       	lpm	r24, Z
    394e:	99 27       	eor	r25, r25
    3950:	90 93 79 00 	sts	0x0079, r25
    3954:	80 93 78 00 	sts	0x0078, r24
				
				if (g_pos % 20 == 0)
    3958:	84 2f       	mov	r24, r20
    395a:	64 e1       	ldi	r22, 0x14	; 20
    395c:	0e 94 e7 20 	call	0x41ce <__udivmodqi4>
    3960:	99 23       	and	r25, r25
    3962:	09 f0       	breq	.+2      	; 0x3966 <__vector_15+0xa62>
    3964:	44 c0       	rjmp	.+136    	; 0x39ee <__vector_15+0xaea>
				{
					PWM_RED = PWM_TOP;
    3966:	87 e2       	ldi	r24, 0x27	; 39
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	9b bd       	out	0x2b, r25	; 43
    396c:	8a bd       	out	0x2a, r24	; 42
					PWM_GREEN = PWM_TOP;
    396e:	99 bd       	out	0x29, r25	; 41
    3970:	88 bd       	out	0x28, r24	; 40
    3972:	39 c0       	rjmp	.+114    	; 0x39e6 <__vector_15+0xae2>
					PWM_BLUE = PWM_TOP;
				}
				break;
			
			case 6:				// background is changing, one color 
				
				PWM_RED = pgm_read_byte(&g_background[0][GREEN][g_seconds]);
    3974:	80 91 2b 01 	lds	r24, 0x012B
    3978:	28 2f       	mov	r18, r24
    397a:	33 27       	eor	r19, r19
    397c:	f9 01       	movw	r30, r18
    397e:	ec 5f       	subi	r30, 0xFC	; 252
    3980:	f5 4e       	sbci	r31, 0xE5	; 229
    3982:	84 91       	lpm	r24, Z
    3984:	99 27       	eor	r25, r25
    3986:	9b bd       	out	0x2b, r25	; 43
    3988:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = pgm_read_byte(&g_background[0][RED][g_seconds]);
    398a:	f9 01       	movw	r30, r18
    398c:	ec 5e       	subi	r30, 0xEC	; 236
    398e:	f6 4e       	sbci	r31, 0xE6	; 230
    3990:	84 91       	lpm	r24, Z
    3992:	99 27       	eor	r25, r25
    3994:	99 bd       	out	0x29, r25	; 41
    3996:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = pgm_read_byte(&g_background[0][BLUE][g_seconds]);
    3998:	2c 50       	subi	r18, 0x0C	; 12
    399a:	35 4e       	sbci	r19, 0xE5	; 229
    399c:	f9 01       	movw	r30, r18
    399e:	84 91       	lpm	r24, Z
    39a0:	21 c0       	rjmp	.+66     	; 0x39e4 <__vector_15+0xae0>
				break;
			
			default:		// basic modes
				
				PWM_RED = pgm_read_byte(&g_background[g_mode][RED][g_pos]);
    39a2:	33 27       	eor	r19, r19
    39a4:	80 ed       	ldi	r24, 0xD0	; 208
    39a6:	92 e0       	ldi	r25, 0x02	; 2
    39a8:	28 9f       	mul	r18, r24
    39aa:	b0 01       	movw	r22, r0
    39ac:	29 9f       	mul	r18, r25
    39ae:	70 0d       	add	r23, r0
    39b0:	38 9f       	mul	r19, r24
    39b2:	70 0d       	add	r23, r0
    39b4:	11 24       	eor	r1, r1
    39b6:	cb 01       	movw	r24, r22
    39b8:	20 91 1e 01 	lds	r18, 0x011E
    39bc:	82 0f       	add	r24, r18
    39be:	91 1d       	adc	r25, r1
    39c0:	fc 01       	movw	r30, r24
    39c2:	ec 5e       	subi	r30, 0xEC	; 236
    39c4:	f6 4e       	sbci	r31, 0xE6	; 230
    39c6:	24 91       	lpm	r18, Z
    39c8:	33 27       	eor	r19, r19
    39ca:	3b bd       	out	0x2b, r19	; 43
    39cc:	2a bd       	out	0x2a, r18	; 42
				PWM_GREEN = pgm_read_byte(&g_background[g_mode][GREEN][g_pos]);
    39ce:	fc 01       	movw	r30, r24
    39d0:	ec 5f       	subi	r30, 0xFC	; 252
    39d2:	f5 4e       	sbci	r31, 0xE5	; 229
    39d4:	24 91       	lpm	r18, Z
    39d6:	33 27       	eor	r19, r19
    39d8:	39 bd       	out	0x29, r19	; 41
    39da:	28 bd       	out	0x28, r18	; 40
				PWM_BLUE = pgm_read_byte(&g_background[g_mode][BLUE][g_pos]);
    39dc:	8c 50       	subi	r24, 0x0C	; 12
    39de:	95 4e       	sbci	r25, 0xE5	; 229
    39e0:	fc 01       	movw	r30, r24
    39e2:	84 91       	lpm	r24, Z
    39e4:	99 27       	eor	r25, r25
    39e6:	90 93 79 00 	sts	0x0079, r25
    39ea:	80 93 78 00 	sts	0x0078, r24
				break;			
		}
	}
	
	g_pos++;		//increase position
    39ee:	80 91 1e 01 	lds	r24, 0x011E
    39f2:	8f 5f       	subi	r24, 0xFF	; 255
    39f4:	80 93 1e 01 	sts	0x011E, r24
	g_reminder--;	//decrease reminder
    39f8:	51 50       	subi	r21, 0x01	; 1
    39fa:	50 93 1b 01 	sts	0x011B, r21
	
	//	for fast, slow and very slow mode background changing
	r=TCNT2;
    39fe:	84 b5       	in	r24, 0x24	; 36
    3a00:	80 93 20 01 	sts	0x0120, r24
	if (TCNT2 % 85 == 0)	
    3a04:	84 b5       	in	r24, 0x24	; 36
    3a06:	65 e5       	ldi	r22, 0x55	; 85
    3a08:	0e 94 e7 20 	call	0x41ce <__udivmodqi4>
    3a0c:	29 2f       	mov	r18, r25
    3a0e:	99 23       	and	r25, r25
    3a10:	09 f0       	breq	.+2      	; 0x3a14 <__vector_15+0xb10>
    3a12:	76 c0       	rjmp	.+236    	; 0x3b00 <__vector_15+0xbfc>
	{
		g_timer2_s1++;
    3a14:	80 91 35 01 	lds	r24, 0x0135
    3a18:	8f 5f       	subi	r24, 0xFF	; 255
    3a1a:	80 93 35 01 	sts	0x0135, r24
		g_timer2_s2++;
    3a1e:	80 91 1d 01 	lds	r24, 0x011D
    3a22:	8f 5f       	subi	r24, 0xFF	; 255
    3a24:	80 93 1d 01 	sts	0x011D, r24
		g_timer2_s3++;
    3a28:	90 91 0d 01 	lds	r25, 0x010D
    3a2c:	9f 5f       	subi	r25, 0xFF	; 255
    3a2e:	90 93 0d 01 	sts	0x010D, r25
		g_timer2_s5++;
    3a32:	80 91 22 01 	lds	r24, 0x0122
    3a36:	8f 5f       	subi	r24, 0xFF	; 255
    3a38:	80 93 22 01 	sts	0x0122, r24
		
		if(g_timer2_s3 == 120)		// very slow, every 30s background change
    3a3c:	98 37       	cpi	r25, 0x78	; 120
    3a3e:	a1 f4       	brne	.+40     	; 0x3a68 <__vector_15+0xb64>
		{	
			g_timer2_s4++;
    3a40:	80 91 2c 01 	lds	r24, 0x012C
    3a44:	8f 5f       	subi	r24, 0xFF	; 255
    3a46:	80 93 2c 01 	sts	0x012C, r24
			
			if(g_timer2_s4 == 60)
    3a4a:	8c 33       	cpi	r24, 0x3C	; 60
    3a4c:	59 f4       	brne	.+22     	; 0x3a64 <__vector_15+0xb60>
			{
				g_ss++;
    3a4e:	80 91 28 01 	lds	r24, 0x0128
    3a52:	8f 5f       	subi	r24, 0xFF	; 255
    3a54:	80 93 28 01 	sts	0x0128, r24
				if(g_ss == 240)
    3a58:	80 3f       	cpi	r24, 0xF0	; 240
    3a5a:	11 f4       	brne	.+4      	; 0x3a60 <__vector_15+0xb5c>
				g_ss =0;
    3a5c:	20 93 28 01 	sts	0x0128, r18
				
				g_timer2_s4=0;
    3a60:	20 93 2c 01 	sts	0x012C, r18
			}
			
			g_timer2_s3=0;	
    3a64:	10 92 0d 01 	sts	0x010D, r1
		}
	
		if (g_timer2_s2 == 6)		// slow background change
    3a68:	80 91 1d 01 	lds	r24, 0x011D
    3a6c:	86 30       	cpi	r24, 0x06	; 6
    3a6e:	59 f4       	brne	.+22     	; 0x3a86 <__vector_15+0xb82>
		{
			g_slow++;
    3a70:	80 91 24 01 	lds	r24, 0x0124
    3a74:	8f 5f       	subi	r24, 0xFF	; 255
    3a76:	80 93 24 01 	sts	0x0124, r24
			if(g_slow == 240)
    3a7a:	80 3f       	cpi	r24, 0xF0	; 240
    3a7c:	11 f4       	brne	.+4      	; 0x3a82 <__vector_15+0xb7e>
			g_slow =0;
    3a7e:	10 92 24 01 	sts	0x0124, r1
	
			g_timer2_s2=0;
    3a82:	10 92 1d 01 	sts	0x011D, r1
		}
		
		if (g_timer2_s1 == 2)	
    3a86:	80 91 35 01 	lds	r24, 0x0135
    3a8a:	82 30       	cpi	r24, 0x02	; 2
    3a8c:	59 f4       	brne	.+22     	; 0x3aa4 <__vector_15+0xba0>
		{
			g_fast++;
    3a8e:	80 91 1f 01 	lds	r24, 0x011F
    3a92:	8f 5f       	subi	r24, 0xFF	; 255
    3a94:	80 93 1f 01 	sts	0x011F, r24
			if(g_fast == 240)		// fast background change
    3a98:	80 3f       	cpi	r24, 0xF0	; 240
    3a9a:	11 f4       	brne	.+4      	; 0x3aa0 <__vector_15+0xb9c>
			g_fast =0;
    3a9c:	10 92 1f 01 	sts	0x011F, r1
			
			g_timer2_s1=0;
    3aa0:	10 92 35 01 	sts	0x0135, r1
		}
		
		if(g_timer2_s5 == 5)		// radioactivity background change - semi random direction
    3aa4:	80 91 22 01 	lds	r24, 0x0122
    3aa8:	85 30       	cpi	r24, 0x05	; 5
    3aaa:	51 f5       	brne	.+84     	; 0x3b00 <__vector_15+0xbfc>
		{	
			g_timer2_s6++;
    3aac:	80 91 21 01 	lds	r24, 0x0121
    3ab0:	8f 5f       	subi	r24, 0xFF	; 255
    3ab2:	80 93 21 01 	sts	0x0121, r24
			
			if(g_timer2_s6 == 3)
    3ab6:	83 30       	cpi	r24, 0x03	; 3
    3ab8:	09 f5       	brne	.+66     	; 0x3afc <__vector_15+0xbf8>
			{
				
				if((r+1) % 2 == 0)
    3aba:	80 91 20 01 	lds	r24, 0x0120
    3abe:	99 27       	eor	r25, r25
    3ac0:	99 27       	eor	r25, r25
    3ac2:	86 95       	lsr	r24
    3ac4:	97 95       	ror	r25
    3ac6:	88 27       	eor	r24, r24
    3ac8:	20 91 1c 01 	lds	r18, 0x011C
    3acc:	80 50       	subi	r24, 0x00	; 0
    3ace:	90 48       	sbci	r25, 0x80	; 128
    3ad0:	49 f4       	brne	.+18     	; 0x3ae4 <__vector_15+0xbe0>
				{
					g_sr++;
    3ad2:	82 2f       	mov	r24, r18
    3ad4:	8f 5f       	subi	r24, 0xFF	; 255
    3ad6:	80 93 1c 01 	sts	0x011C, r24
					if(g_sr == 240)
    3ada:	80 3f       	cpi	r24, 0xF0	; 240
    3adc:	69 f4       	brne	.+26     	; 0x3af8 <__vector_15+0xbf4>
					g_sr =0;
    3ade:	10 92 1c 01 	sts	0x011C, r1
    3ae2:	0a c0       	rjmp	.+20     	; 0x3af8 <__vector_15+0xbf4>
				}
				else
				{
					if(g_sr == 0)
    3ae4:	22 23       	and	r18, r18
    3ae6:	19 f4       	brne	.+6      	; 0x3aee <__vector_15+0xbea>
					g_sr =240;
    3ae8:	80 ef       	ldi	r24, 0xF0	; 240
    3aea:	80 93 1c 01 	sts	0x011C, r24
					g_sr--;
    3aee:	80 91 1c 01 	lds	r24, 0x011C
    3af2:	81 50       	subi	r24, 0x01	; 1
    3af4:	80 93 1c 01 	sts	0x011C, r24
				}
				
				g_timer2_s6=0;
    3af8:	10 92 21 01 	sts	0x0121, r1
			}
			
			g_timer2_s5=0;	
    3afc:	10 92 22 01 	sts	0x0122, r1
    3b00:	ff 91       	pop	r31
    3b02:	ef 91       	pop	r30
    3b04:	bf 91       	pop	r27
    3b06:	af 91       	pop	r26
    3b08:	9f 91       	pop	r25
    3b0a:	8f 91       	pop	r24
    3b0c:	7f 91       	pop	r23
    3b0e:	6f 91       	pop	r22
    3b10:	5f 91       	pop	r21
    3b12:	4f 91       	pop	r20
    3b14:	3f 91       	pop	r19
    3b16:	2f 91       	pop	r18
    3b18:	0f 90       	pop	r0
    3b1a:	0f be       	out	0x3f, r0	; 63
    3b1c:	0f 90       	pop	r0
    3b1e:	1f 90       	pop	r1
    3b20:	18 95       	reti

00003b22 <__vector_10>:
		}
	}
}

//################# TIMER2 overflow interupt routine #######################
//Timer2 is clocked using external 4096Hz generator (square wave from RTC)
//this routine updates internal time registers and clear some general purpose registers
ISR(TIMER2_OVF_vect)
{
    3b22:	1f 92       	push	r1
    3b24:	0f 92       	push	r0
    3b26:	0f b6       	in	r0, 0x3f	; 63
    3b28:	0f 92       	push	r0
    3b2a:	11 24       	eor	r1, r1
    3b2c:	2f 93       	push	r18
    3b2e:	3f 93       	push	r19
    3b30:	6f 93       	push	r22
    3b32:	7f 93       	push	r23
    3b34:	8f 93       	push	r24
    3b36:	9f 93       	push	r25
	g_timer2_ovf++;  		//increase overflows counter
    3b38:	80 91 23 01 	lds	r24, 0x0123
    3b3c:	8f 5f       	subi	r24, 0xFF	; 255
    3b3e:	80 93 23 01 	sts	0x0123, r24
	
	static uint8_t last_rc_bit_counter = 0;
	
	if(last_rc_bit_counter == g_rc_bit_counter) 	//this indicates error, transmission was stopped
    3b42:	80 91 03 01 	lds	r24, 0x0103
    3b46:	28 2f       	mov	r18, r24
    3b48:	33 27       	eor	r19, r19
    3b4a:	80 91 2a 01 	lds	r24, 0x012A
    3b4e:	99 27       	eor	r25, r25
    3b50:	87 fd       	sbrc	r24, 7
    3b52:	90 95       	com	r25
    3b54:	28 17       	cp	r18, r24
    3b56:	39 07       	cpc	r19, r25
    3b58:	11 f4       	brne	.+4      	; 0x3b5e <__vector_10+0x3c>
		g_rc_bit_counter = 0;						//clear remote control bit counter
    3b5a:	10 92 2a 01 	sts	0x012A, r1
	
	last_rc_bit_counter = g_rc_bit_counter;
    3b5e:	80 91 2a 01 	lds	r24, 0x012A
    3b62:	80 93 03 01 	sts	0x0103, r24
	if(g_s_rc_state == STATE_SETTING)
    3b66:	20 91 00 01 	lds	r18, 0x0100
    3b6a:	21 30       	cpi	r18, 0x01	; 1
    3b6c:	29 f4       	brne	.+10     	; 0x3b78 <__vector_10+0x56>
	{
		c_timer2_ovf=16;
    3b6e:	80 e1       	ldi	r24, 0x10	; 16
    3b70:	80 93 0c 01 	sts	0x010C, r24
		c_rc_idle_counter=4;
    3b74:	84 e0       	ldi	r24, 0x04	; 4
    3b76:	03 c0       	rjmp	.+6      	; 0x3b7e <__vector_10+0x5c>
	}
	else
	{
		c_timer2_ovf=4;
    3b78:	84 e0       	ldi	r24, 0x04	; 4
    3b7a:	80 93 0c 01 	sts	0x010C, r24
		c_rc_idle_counter=4;
    3b7e:	80 93 29 01 	sts	0x0129, r24
	}
	
	if(g_timer2_ovf == c_timer2_ovf)	// 4*255*(1/4096Hz) = 0,25s elapsed
    3b82:	90 91 23 01 	lds	r25, 0x0123
    3b86:	80 91 0c 01 	lds	r24, 0x010C
    3b8a:	98 17       	cp	r25, r24
    3b8c:	09 f0       	breq	.+2      	; 0x3b90 <__vector_10+0x6e>
    3b8e:	47 c0       	rjmp	.+142    	; 0x3c1e <__vector_10+0xfc>
	{	
		g_uart_counter = 0;  //clear uart char counter
    3b90:	10 92 27 01 	sts	0x0127, r1
		g_timer2_ovf = 0;    //clear timer2 overflow counter	
    3b94:	10 92 23 01 	sts	0x0123, r1
		g_rc_idle_counter++; //increase remote control idle counter
    3b98:	80 91 25 01 	lds	r24, 0x0125
    3b9c:	8f 5f       	subi	r24, 0xFF	; 255
    3b9e:	80 93 25 01 	sts	0x0125, r24
		
		if(g_rc_idle_counter == c_rc_idle_counter)
    3ba2:	90 91 29 01 	lds	r25, 0x0129
    3ba6:	89 17       	cp	r24, r25
    3ba8:	39 f4       	brne	.+14     	; 0x3bb8 <__vector_10+0x96>
		{	
			g_rc_idle_counter = 0;	
    3baa:	10 92 25 01 	sts	0x0125, r1
			g_rc_hold_counter = 0;	//clear button hold counter
    3bae:	10 92 0a 01 	sts	0x010A, r1
			EIMSK |= _BV(RC_IN);
    3bb2:	89 b7       	in	r24, 0x39	; 57
    3bb4:	80 62       	ori	r24, 0x20	; 32
    3bb6:	89 bf       	out	0x39, r24	; 57
		}
	if(g_rc_state != STATE_SETTING) //if time is being set don't update time registers
    3bb8:	80 91 01 01 	lds	r24, 0x0101
    3bbc:	81 30       	cpi	r24, 0x01	; 1
    3bbe:	79 f1       	breq	.+94     	; 0x3c1e <__vector_10+0xfc>
    3bc0:	80 91 2b 01 	lds	r24, 0x012B
		{
			//remember that these valuse are already preprocessed so one full circle = 240steps
		if(g_s_rc_state == STATE_SETTING)
    3bc4:	21 30       	cpi	r18, 0x01	; 1
    3bc6:	11 f4       	brne	.+4      	; 0x3bcc <__vector_10+0xaa>
			g_seconds+=4;
    3bc8:	8c 5f       	subi	r24, 0xFC	; 252
    3bca:	01 c0       	rjmp	.+2      	; 0x3bce <__vector_10+0xac>
		else
			g_seconds++;
    3bcc:	8f 5f       	subi	r24, 0xFF	; 255
    3bce:	80 93 2b 01 	sts	0x012B, r24
			if(g_seconds == RESOLUTION)
    3bd2:	80 91 2b 01 	lds	r24, 0x012B
    3bd6:	80 3f       	cpi	r24, 0xF0	; 240
    3bd8:	11 f4       	brne	.+4      	; 0x3bde <__vector_10+0xbc>
				g_seconds = 0;
    3bda:	10 92 2b 01 	sts	0x012B, r1
			if(g_seconds % 60 == 0)
    3bde:	80 91 2b 01 	lds	r24, 0x012B
    3be2:	6c e3       	ldi	r22, 0x3C	; 60
    3be4:	0e 94 e7 20 	call	0x41ce <__udivmodqi4>
    3be8:	99 23       	and	r25, r25
    3bea:	c9 f4       	brne	.+50     	; 0x3c1e <__vector_10+0xfc>
			{		
				g_minutes++;
    3bec:	80 91 1a 01 	lds	r24, 0x011A
    3bf0:	8f 5f       	subi	r24, 0xFF	; 255
    3bf2:	80 93 1a 01 	sts	0x011A, r24
				if(g_minutes == RESOLUTION)
    3bf6:	80 3f       	cpi	r24, 0xF0	; 240
    3bf8:	11 f4       	brne	.+4      	; 0x3bfe <__vector_10+0xdc>
					g_minutes = 0;
    3bfa:	90 93 1a 01 	sts	0x011A, r25
				if(g_minutes % 12 == 0)
    3bfe:	80 91 1a 01 	lds	r24, 0x011A
    3c02:	6c e0       	ldi	r22, 0x0C	; 12
    3c04:	0e 94 e7 20 	call	0x41ce <__udivmodqi4>
    3c08:	99 23       	and	r25, r25
    3c0a:	49 f4       	brne	.+18     	; 0x3c1e <__vector_10+0xfc>
				{
					g_hours++;
    3c0c:	80 91 36 01 	lds	r24, 0x0136
    3c10:	8f 5f       	subi	r24, 0xFF	; 255
    3c12:	80 93 36 01 	sts	0x0136, r24
					if(g_hours == 240)
    3c16:	80 3f       	cpi	r24, 0xF0	; 240
    3c18:	11 f4       	brne	.+4      	; 0x3c1e <__vector_10+0xfc>
					g_hours = 0;
    3c1a:	90 93 36 01 	sts	0x0136, r25
    3c1e:	9f 91       	pop	r25
    3c20:	8f 91       	pop	r24
    3c22:	7f 91       	pop	r23
    3c24:	6f 91       	pop	r22
    3c26:	3f 91       	pop	r19
    3c28:	2f 91       	pop	r18
    3c2a:	0f 90       	pop	r0
    3c2c:	0f be       	out	0x3f, r0	; 63
    3c2e:	0f 90       	pop	r0
    3c30:	1f 90       	pop	r1
    3c32:	18 95       	reti

00003c34 <__vector_6>:
				}
			}	
		}
	}
}

//################# External interupt5 routine #######################
//Input INT5 is conntected to the IR receiver
//this routine is called either rising or falling edge comes on INT5
//Philips RC5 code is manchester linear code
ISR(INT5_vect)
{
    3c34:	1f 92       	push	r1
    3c36:	0f 92       	push	r0
    3c38:	0f b6       	in	r0, 0x3f	; 63
    3c3a:	0f 92       	push	r0
    3c3c:	11 24       	eor	r1, r1
    3c3e:	2f 93       	push	r18
    3c40:	3f 93       	push	r19
    3c42:	4f 93       	push	r20
    3c44:	5f 93       	push	r21
    3c46:	6f 93       	push	r22
    3c48:	7f 93       	push	r23
    3c4a:	8f 93       	push	r24
    3c4c:	9f 93       	push	r25
    3c4e:	af 93       	push	r26
    3c50:	bf 93       	push	r27
    3c52:	ef 93       	push	r30
    3c54:	ff 93       	push	r31
	static uint8_t timer2_buf_a = 0;
	static uint8_t timer2_buf_b = 0;		
	static uint8_t timer2_ovf_buf = 0;
	static uint16_t data_buf = 0;			//static buffer regeisters
	static uint8_t edge_position = 0;		//edge position indicator
											//if even the edge is at the begining of a bit
											//if odd the edge is in the of a bit
											//for more details see Manchester code specification
	
	uint8_t tmp_time;	
	uint8_t tmp_command;	//helpful registers

	g_rc_idle_counter = 0; 		//something is being received so clear rc idle register
    3c56:	10 92 25 01 	sts	0x0125, r1
	
	if(g_rc_bit_counter == 0)	//transmission has just begun
    3c5a:	20 91 2a 01 	lds	r18, 0x012A
    3c5e:	50 91 23 01 	lds	r21, 0x0123
    3c62:	22 23       	and	r18, r18
    3c64:	c1 f4       	brne	.+48     	; 0x3c96 <__vector_6+0x62>
	{
		timer2_buf_a = TCNT2;			//store timer2 data register
    3c66:	84 b5       	in	r24, 0x24	; 36
    3c68:	80 93 04 01 	sts	0x0104, r24
		timer2_ovf_buf = g_timer2_ovf;	//and timer2 overflow counter
    3c6c:	50 93 06 01 	sts	0x0106, r21

		if(PINE & _BV(RC_IN))			//if RC_IN pin is high
    3c70:	0d 9b       	sbis	0x01, 5	; 1
    3c72:	05 c0       	rjmp	.+10     	; 0x3c7e <__vector_6+0x4a>
			data_buf = 0x0000;			//error occured, this situation isn't correct
    3c74:	10 92 08 01 	sts	0x0108, r1
    3c78:	10 92 07 01 	sts	0x0107, r1
    3c7c:	73 c0       	rjmp	.+230    	; 0x3d64 <__vector_6+0x130>
		else
		{
			data_buf = 0x8000;			//first start bit received
    3c7e:	80 e0       	ldi	r24, 0x00	; 0
    3c80:	90 e8       	ldi	r25, 0x80	; 128
    3c82:	90 93 08 01 	sts	0x0108, r25
    3c86:	80 93 07 01 	sts	0x0107, r24
			g_rc_bit_counter++;			//increase bit counder
    3c8a:	81 e0       	ldi	r24, 0x01	; 1
    3c8c:	80 93 2a 01 	sts	0x012A, r24
			edge_position = 1;			//first received egde is in the middle of the bit
    3c90:	80 93 09 01 	sts	0x0109, r24
    3c94:	67 c0       	rjmp	.+206    	; 0x3d64 <__vector_6+0x130>
		}
	}
	else
	{
		timer2_buf_b = TCNT2;		//store in register 'b'
    3c96:	94 b5       	in	r25, 0x24	; 36
    3c98:	90 93 05 01 	sts	0x0105, r25
		
		if(timer2_ovf_buf != g_timer2_ovf)	//if timer2 overflowed meanwhile
    3c9c:	80 91 06 01 	lds	r24, 0x0106
    3ca0:	40 91 04 01 	lds	r20, 0x0104
    3ca4:	85 17       	cp	r24, r21
    3ca6:	21 f0       	breq	.+8      	; 0x3cb0 <__vector_6+0x7c>
		{
			tmp_time =  255 - timer2_buf_a + timer2_buf_b + 1;	//compute time since last edge
    3ca8:	94 1b       	sub	r25, r20
			timer2_ovf_buf = g_timer2_ovf;
    3caa:	50 93 06 01 	sts	0x0106, r21
    3cae:	01 c0       	rjmp	.+2      	; 0x3cb2 <__vector_6+0x7e>
		}
		else
			tmp_time =  timer2_buf_b - timer2_buf_a;			//compute time since last edge
    3cb0:	94 1b       	sub	r25, r20
			
		timer2_buf_a = timer2_buf_b;							//update register 'a'
    3cb2:	80 91 05 01 	lds	r24, 0x0105
    3cb6:	80 93 04 01 	sts	0x0104, r24
		
		//if half of a bit time elapsed
		if((tmp_time >= HALF_BIT - DELTA) && (tmp_time <= HALF_BIT + DELTA)) 
    3cba:	89 2f       	mov	r24, r25
    3cbc:	82 50       	subi	r24, 0x02	; 2
    3cbe:	83 30       	cpi	r24, 0x03	; 3
    3cc0:	20 f4       	brcc	.+8      	; 0x3cca <__vector_6+0x96>
		{
			edge_position++;			//increase edge position
    3cc2:	80 91 09 01 	lds	r24, 0x0109
    3cc6:	8f 5f       	subi	r24, 0xFF	; 255
    3cc8:	06 c0       	rjmp	.+12     	; 0x3cd6 <__vector_6+0xa2>
			if(edge_position & 0x01)	//decode if it's middle-bit edge
			{
				if(!(PINE & _BV(RC_IN)))
					data_buf |= _BV(15 - g_rc_bit_counter);
					
				g_rc_bit_counter++;	
			}
		}
		//if one bit time elapsed
		else if((tmp_time >= ONE_BIT - DELTA) && (tmp_time <= ONE_BIT + DELTA))
    3cca:	96 50       	subi	r25, 0x06	; 6
    3ccc:	93 30       	cpi	r25, 0x03	; 3
    3cce:	38 f5       	brcc	.+78     	; 0x3d1e <__vector_6+0xea>
		{
			edge_position += 2;			//increase edge position with 2
    3cd0:	80 91 09 01 	lds	r24, 0x0109
    3cd4:	8e 5f       	subi	r24, 0xFE	; 254
    3cd6:	80 93 09 01 	sts	0x0109, r24
			
			if(edge_position & 0x01)	//decode if it's middle-bit edge
    3cda:	80 ff       	sbrs	r24, 0
    3cdc:	22 c0       	rjmp	.+68     	; 0x3d22 <__vector_6+0xee>
			{
				if(!(PINE & _BV(RC_IN)))
    3cde:	0d 99       	sbic	0x01, 5	; 1
    3ce0:	18 c0       	rjmp	.+48     	; 0x3d12 <__vector_6+0xde>
					data_buf |= _BV(15 - g_rc_bit_counter);
    3ce2:	33 27       	eor	r19, r19
    3ce4:	27 fd       	sbrc	r18, 7
    3ce6:	30 95       	com	r19
    3ce8:	8f e0       	ldi	r24, 0x0F	; 15
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	82 1b       	sub	r24, r18
    3cee:	93 0b       	sbc	r25, r19
    3cf0:	21 e0       	ldi	r18, 0x01	; 1
    3cf2:	30 e0       	ldi	r19, 0x00	; 0
    3cf4:	02 c0       	rjmp	.+4      	; 0x3cfa <__vector_6+0xc6>
    3cf6:	22 0f       	add	r18, r18
    3cf8:	33 1f       	adc	r19, r19
    3cfa:	8a 95       	dec	r24
    3cfc:	e2 f7       	brpl	.-8      	; 0x3cf6 <__vector_6+0xc2>
    3cfe:	80 91 07 01 	lds	r24, 0x0107
    3d02:	90 91 08 01 	lds	r25, 0x0108
    3d06:	82 2b       	or	r24, r18
    3d08:	93 2b       	or	r25, r19
    3d0a:	90 93 08 01 	sts	0x0108, r25
    3d0e:	80 93 07 01 	sts	0x0107, r24
					
				g_rc_bit_counter++;	
    3d12:	80 91 2a 01 	lds	r24, 0x012A
    3d16:	8f 5f       	subi	r24, 0xFF	; 255
    3d18:	80 93 2a 01 	sts	0x012A, r24
    3d1c:	02 c0       	rjmp	.+4      	; 0x3d22 <__vector_6+0xee>
			}			
		}
		else
			g_rc_bit_counter = 0;		//erroc ocurred, clear bit counter register
    3d1e:	10 92 2a 01 	sts	0x012A, r1
		
		if(g_rc_bit_counter == 14)		//if 14 bits are received
    3d22:	80 91 2a 01 	lds	r24, 0x012A
    3d26:	8e 30       	cpi	r24, 0x0E	; 14
    3d28:	e9 f4       	brne	.+58     	; 0x3d64 <__vector_6+0x130>
		{
			//validate received data
			if((data_buf & _BV(15)) && (data_buf & _BV(14)))	//start bits are both '1'
    3d2a:	20 91 07 01 	lds	r18, 0x0107
    3d2e:	30 91 08 01 	lds	r19, 0x0108
    3d32:	37 ff       	sbrs	r19, 7
    3d34:	15 c0       	rjmp	.+42     	; 0x3d60 <__vector_6+0x12c>
    3d36:	36 ff       	sbrs	r19, 6
    3d38:	13 c0       	rjmp	.+38     	; 0x3d60 <__vector_6+0x12c>
			{
				if(((data_buf >> 8) & 0b00011111) == DEVICE_ADDRESS)  //the message is addressed to the clock
    3d3a:	83 2f       	mov	r24, r19
    3d3c:	99 27       	eor	r25, r25
    3d3e:	8f 71       	andi	r24, 0x1F	; 31
    3d40:	90 70       	andi	r25, 0x00	; 0
    3d42:	89 2b       	or	r24, r25
    3d44:	69 f4       	brne	.+26     	; 0x3d60 <__vector_6+0x12c>
    3d46:	c9 01       	movw	r24, r18
    3d48:	96 95       	lsr	r25
    3d4a:	87 95       	ror	r24
    3d4c:	96 95       	lsr	r25
    3d4e:	87 95       	ror	r24
				{
					if(data_buf & _BV(13)) //toogle bit is '1'
    3d50:	35 ff       	sbrs	r19, 5
    3d52:	03 c0       	rjmp	.+6      	; 0x3d5a <__vector_6+0x126>
						tmp_command = 0b10000000 | ((data_buf >> 2) & 0b00111111);
    3d54:	8f 73       	andi	r24, 0x3F	; 63
    3d56:	80 68       	ori	r24, 0x80	; 128
    3d58:	01 c0       	rjmp	.+2      	; 0x3d5c <__vector_6+0x128>
					else
						tmp_command = ((data_buf >> 2) & 0b00111111);
    3d5a:	8f 73       	andi	r24, 0x3F	; 63
					
					rc_process_command(tmp_command); //process received command	
    3d5c:	0e 94 46 15 	call	0x2a8c <rc_process_command>
				}
			}
			
			g_rc_bit_counter = 0;
    3d60:	10 92 2a 01 	sts	0x012A, r1
    3d64:	ff 91       	pop	r31
    3d66:	ef 91       	pop	r30
    3d68:	bf 91       	pop	r27
    3d6a:	af 91       	pop	r26
    3d6c:	9f 91       	pop	r25
    3d6e:	8f 91       	pop	r24
    3d70:	7f 91       	pop	r23
    3d72:	6f 91       	pop	r22
    3d74:	5f 91       	pop	r21
    3d76:	4f 91       	pop	r20
    3d78:	3f 91       	pop	r19
    3d7a:	2f 91       	pop	r18
    3d7c:	0f 90       	pop	r0
    3d7e:	0f be       	out	0x3f, r0	; 63
    3d80:	0f 90       	pop	r0
    3d82:	1f 90       	pop	r1
    3d84:	18 95       	reti

00003d86 <init_timers>:
		}
		
	}
}

void init_timers(void)
{
	TCCR3B |= _BV(CS31);		//}
    3d86:	80 91 8a 00 	lds	r24, 0x008A
    3d8a:	82 60       	ori	r24, 0x02	; 2
    3d8c:	80 93 8a 00 	sts	0x008A, r24
	ETIMSK |= _BV(TICIE3);		//}enable timer3 input capture interrupt on falling edge
    3d90:	80 91 7d 00 	lds	r24, 0x007D
    3d94:	80 62       	ori	r24, 0x20	; 32
    3d96:	80 93 7d 00 	sts	0x007D, r24
	
	TCCR0 |= _BV(WGM01) | _BV(CS01);	//}
    3d9a:	83 b7       	in	r24, 0x33	; 51
    3d9c:	8a 60       	ori	r24, 0x0A	; 10
    3d9e:	83 bf       	out	0x33, r24	; 51
	OCR0 = 255;							//}enable timer0 output compare feature (LEDs PWM driving)
    3da0:	8f ef       	ldi	r24, 0xFF	; 255
    3da2:	81 bf       	out	0x31, r24	; 49
	
	TCCR2 |= _BV(CS22) | _BV(CS21); 	//}configure timer2 as a external clocked counter
    3da4:	85 b5       	in	r24, 0x25	; 37
    3da6:	86 60       	ori	r24, 0x06	; 6
    3da8:	85 bd       	out	0x25, r24	; 37
	TIMSK |= _BV(TOIE2);				//}and enable overflow interupt
    3daa:	87 b7       	in	r24, 0x37	; 55
    3dac:	80 64       	ori	r24, 0x40	; 64
    3dae:	87 bf       	out	0x37, r24	; 55
	
	TCCR1A |= (_BV(WGM11) | _BV(COM1A1) | _BV(COM1B1) | _BV(COM1C1)| 	//}enable timer1 
    3db0:	8f b5       	in	r24, 0x2f	; 47
    3db2:	8e 6f       	ori	r24, 0xFE	; 254
    3db4:	8f bd       	out	0x2f, r24	; 47
	_BV(COM1A0) | _BV(COM1B0) | _BV(COM1C0));							//}output compare
																		//}mode
	TCCR1B |= (_BV(WGM13) | _BV(WGM12) |  _BV(CS10));					//}negative polarity
    3db6:	8e b5       	in	r24, 0x2e	; 46
    3db8:	89 61       	ori	r24, 0x19	; 25
    3dba:	8e bd       	out	0x2e, r24	; 46
																		
	ICR1 = PWM_TOP;														//set PWM top value
    3dbc:	87 e2       	ldi	r24, 0x27	; 39
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	97 bd       	out	0x27, r25	; 39
    3dc2:	86 bd       	out	0x26, r24	; 38
	PWM_RED = PWM_TOP;													//}
    3dc4:	9b bd       	out	0x2b, r25	; 43
    3dc6:	8a bd       	out	0x2a, r24	; 42
	PWM_GREEN = PWM_TOP;												//}turn off all leds
    3dc8:	99 bd       	out	0x29, r25	; 41
    3dca:	88 bd       	out	0x28, r24	; 40
	PWM_BLUE = PWM_TOP;													//}
    3dcc:	90 93 79 00 	sts	0x0079, r25
    3dd0:	80 93 78 00 	sts	0x0078, r24
    3dd4:	08 95       	ret

00003dd6 <main>:
	
}

int main(void)
{
    3dd6:	cf ef       	ldi	r28, 0xFF	; 255
    3dd8:	d0 e1       	ldi	r29, 0x10	; 16
    3dda:	de bf       	out	0x3e, r29	; 62
    3ddc:	cd bf       	out	0x3d, r28	; 61
	//initialization
	MOTDDR |= _BV(MOTPIN);
    3dde:	d0 9a       	sbi	0x1a, 0	; 26
	LEDDDR |= _BV(RED_LED) | _BV(GREEN_LED) | _BV(BLUE_LED) ; 
    3de0:	87 b3       	in	r24, 0x17	; 23
    3de2:	80 6e       	ori	r24, 0xE0	; 224
    3de4:	87 bb       	out	0x17, r24	; 23
	MOT_OFF();
    3de6:	d8 98       	cbi	0x1b, 0	; 27
	init_i2c();
    3de8:	0e 94 5a 1f 	call	0x3eb4 <init_i2c>
	init_timers();
    3dec:	0e 94 c3 1e 	call	0x3d86 <init_timers>
	USART1_Init ( MYUBRR );
    3df0:	89 e1       	ldi	r24, 0x19	; 25
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	0e 94 19 15 	call	0x2a32 <USART1_Init>
	
	EICRB |= _BV(ISC50);
    3df8:	8a b7       	in	r24, 0x3a	; 58
    3dfa:	84 60       	ori	r24, 0x04	; 4
    3dfc:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= _BV(RC_IN); //enable RC interrupt, both edges
    3dfe:	89 b7       	in	r24, 0x39	; 57
    3e00:	80 62       	ori	r24, 0x20	; 32
    3e02:	89 bf       	out	0x39, r24	; 57
	
	g_mode = 14; 		//radioactivity mode
    3e04:	8e e0       	ldi	r24, 0x0E	; 14
    3e06:	80 93 18 01 	sts	0x0118, r24
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
    3e0a:	80 e0       	ldi	r24, 0x00	; 0
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	fc 01       	movw	r30, r24
    3e10:	31 97       	sbiw	r30, 0x01	; 1
    3e12:	f1 f7       	brne	.-4      	; 0x3e10 <main+0x3a>
	
	_delay_ms(200);	
	_delay_ms(200);	//wait for all devices to warm up

	
	SetPointer(0x00);					//set i2c pointer to the begin
    3e14:	01 97       	sbiw	r24, 0x01	; 1
    3e16:	f1 f7       	brne	.-4      	; 0x3e14 <main+0x3e>
    3e18:	80 e0       	ldi	r24, 0x00	; 0
    3e1a:	0e 94 60 1f 	call	0x3ec0 <SetPointer>
	ReadBufI2C(g_data_rtc, 8);			//read all data
    3e1e:	68 e0       	ldi	r22, 0x08	; 8
    3e20:	8d e2       	ldi	r24, 0x2D	; 45
    3e22:	91 e0       	ldi	r25, 0x01	; 1
    3e24:	0e 94 6f 20 	call	0x40de <ReadBufI2C>

	WriteI2C(SECONDS_ADDR, 0b01111111 & g_data_rtc[SECONDS_ADDR]); //enable oscilator
    3e28:	80 91 2d 01 	lds	r24, 0x012D
    3e2c:	8f 77       	andi	r24, 0x7F	; 127
    3e2e:	68 2f       	mov	r22, r24
    3e30:	80 e0       	ldi	r24, 0x00	; 0
    3e32:	0e 94 9d 1f 	call	0x3f3a <WriteI2C>
	WriteI2C(CONTROL_ADDR, 0b10010001); 							//enable RTC square wave output,
    3e36:	61 e9       	ldi	r22, 0x91	; 145
    3e38:	87 e0       	ldi	r24, 0x07	; 7
    3e3a:	0e 94 9d 1f 	call	0x3f3a <WriteI2C>
																	//without these lines RC will not work
																	//and all hands will stay still
	
	g_data_rtc[HOURS_ADDR] &= 0b00011111; //mask am/pm bit
    3e3e:	80 91 2f 01 	lds	r24, 0x012F
    3e42:	8f 71       	andi	r24, 0x1F	; 31
    3e44:	80 93 2f 01 	sts	0x012F, r24
    3e48:	cd e2       	ldi	r28, 0x2D	; 45
    3e4a:	d1 e0       	ldi	r29, 0x01	; 1
    3e4c:	17 e0       	ldi	r17, 0x07	; 7
	
	uint8_t i;
	for(i = 0; i < 8; i++)
		g_data_rtc[i] = BCDtoDEC(g_data_rtc[i]); //convert to decimal format
    3e4e:	88 81       	ld	r24, Y
    3e50:	0e 94 c0 20 	call	0x4180 <BCDtoDEC>
    3e54:	89 93       	st	Y+, r24
    3e56:	11 50       	subi	r17, 0x01	; 1
    3e58:	17 ff       	sbrs	r17, 7
    3e5a:	f9 cf       	rjmp	.-14     	; 0x3e4e <main+0x78>
	
	//now these values must be preprocessed to 240steps/cicrle format
	g_seconds = 4*g_data_rtc[SECONDS_ADDR] ;
    3e5c:	30 91 2d 01 	lds	r19, 0x012D
    3e60:	83 2f       	mov	r24, r19
    3e62:	99 27       	eor	r25, r25
    3e64:	88 0f       	add	r24, r24
    3e66:	99 1f       	adc	r25, r25
    3e68:	88 0f       	add	r24, r24
    3e6a:	99 1f       	adc	r25, r25
    3e6c:	80 93 2b 01 	sts	0x012B, r24
	g_minutes = 4*g_data_rtc[MINUTES_ADDR] + (g_data_rtc[SECONDS_ADDR] / 15);
    3e70:	40 91 2e 01 	lds	r20, 0x012E
    3e74:	24 2f       	mov	r18, r20
    3e76:	22 0f       	add	r18, r18
    3e78:	22 0f       	add	r18, r18
    3e7a:	83 2f       	mov	r24, r19
    3e7c:	6f e0       	ldi	r22, 0x0F	; 15
    3e7e:	0e 94 e7 20 	call	0x41ce <__udivmodqi4>
    3e82:	28 0f       	add	r18, r24
    3e84:	20 93 1a 01 	sts	0x011A, r18
	g_hours   = 20*(g_data_rtc[HOURS_ADDR]%12) + (g_data_rtc[MINUTES_ADDR]/3);
    3e88:	80 91 2f 01 	lds	r24, 0x012F
    3e8c:	6c e0       	ldi	r22, 0x0C	; 12
    3e8e:	0e 94 e7 20 	call	0x41ce <__udivmodqi4>
    3e92:	84 e1       	ldi	r24, 0x14	; 20
    3e94:	98 9f       	mul	r25, r24
    3e96:	90 01       	movw	r18, r0
    3e98:	11 24       	eor	r1, r1
    3e9a:	84 2f       	mov	r24, r20
    3e9c:	63 e0       	ldi	r22, 0x03	; 3
    3e9e:	0e 94 e7 20 	call	0x41ce <__udivmodqi4>
    3ea2:	82 0f       	add	r24, r18
    3ea4:	80 93 36 01 	sts	0x0136, r24
		
	MOT_ON(); 		//start the motor
    3ea8:	d8 9a       	sbi	0x1b, 0	; 27
	g_power_on = 1;	//set power indicator
    3eaa:	81 e0       	ldi	r24, 0x01	; 1
    3eac:	80 93 19 01 	sts	0x0119, r24
	sei();			//enable interrupts
    3eb0:	78 94       	sei
	while(1);		//and let them do all the job
    3eb2:	ff cf       	rjmp	.-2      	; 0x3eb2 <main+0xdc>

00003eb4 <init_i2c>:

//###################################################################
void init_i2c(void)
{
	TWBR = 72;
    3eb4:	88 e4       	ldi	r24, 0x48	; 72
    3eb6:	80 93 70 00 	sts	0x0070, r24
	TWSR = 0; 
    3eba:	10 92 71 00 	sts	0x0071, r1
    3ebe:	08 95       	ret

00003ec0 <SetPointer>:
}
//###################################################################
uint8_t SetPointer(uint8_t Address)
{
    3ec0:	48 2f       	mov	r20, r24
	TWCR = TW_MT_SEND_START;
    3ec2:	84 ea       	ldi	r24, 0xA4	; 164
    3ec4:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    3ec8:	80 91 74 00 	lds	r24, 0x0074
    3ecc:	88 23       	and	r24, r24
    3ece:	e4 f7       	brge	.-8      	; 0x3ec8 <SetPointer+0x8>
	
	if(!(TWSR & TW_START))
    3ed0:	80 91 71 00 	lds	r24, 0x0071
    3ed4:	99 27       	eor	r25, r25
    3ed6:	9c 01       	movw	r18, r24
    3ed8:	28 70       	andi	r18, 0x08	; 8
    3eda:	30 70       	andi	r19, 0x00	; 0
    3edc:	83 fd       	sbrc	r24, 3
    3ede:	02 c0       	rjmp	.+4      	; 0x3ee4 <SetPointer+0x24>
		return 0;
    3ee0:	c9 01       	movw	r24, r18
    3ee2:	08 95       	ret

	TWDR = SLA_W;
    3ee4:	80 ed       	ldi	r24, 0xD0	; 208
    3ee6:	80 93 73 00 	sts	0x0073, r24
	TWCR = _BV(TWINT) | _BV(TWEN);
    3eea:	84 e8       	ldi	r24, 0x84	; 132
    3eec:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    3ef0:	80 91 74 00 	lds	r24, 0x0074
    3ef4:	88 23       	and	r24, r24
    3ef6:	e4 f7       	brge	.-8      	; 0x3ef0 <SetPointer+0x30>

	if(!(TWSR & TW_MT_SLA_ACK))
    3ef8:	80 91 71 00 	lds	r24, 0x0071
    3efc:	99 27       	eor	r25, r25
    3efe:	88 71       	andi	r24, 0x18	; 24
    3f00:	90 70       	andi	r25, 0x00	; 0
    3f02:	00 97       	sbiw	r24, 0x00	; 0
    3f04:	c9 f0       	breq	.+50     	; 0x3f38 <SetPointer+0x78>
		return 0;
		
	TWDR = Address;
    3f06:	40 93 73 00 	sts	0x0073, r20
	TWCR = _BV(TWINT) | _BV(TWEN);	
    3f0a:	84 e8       	ldi	r24, 0x84	; 132
    3f0c:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    3f10:	80 91 74 00 	lds	r24, 0x0074
    3f14:	88 23       	and	r24, r24
    3f16:	e4 f7       	brge	.-8      	; 0x3f10 <SetPointer+0x50>
			 
	if(!(TWSR & TW_MT_DATA_ACK))
    3f18:	80 91 71 00 	lds	r24, 0x0071
    3f1c:	99 27       	eor	r25, r25
    3f1e:	88 72       	andi	r24, 0x28	; 40
    3f20:	90 70       	andi	r25, 0x00	; 0
    3f22:	00 97       	sbiw	r24, 0x00	; 0
    3f24:	49 f0       	breq	.+18     	; 0x3f38 <SetPointer+0x78>
		return 0;
		
	TWCR = TW_MT_SEND_STOP;
    3f26:	84 e9       	ldi	r24, 0x94	; 148
    3f28:	80 93 74 00 	sts	0x0074, r24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
    3f2c:	80 ea       	ldi	r24, 0xA0	; 160
    3f2e:	9f e0       	ldi	r25, 0x0F	; 15
    3f30:	01 97       	sbiw	r24, 0x01	; 1
    3f32:	f1 f7       	brne	.-4      	; 0x3f30 <SetPointer+0x70>
	_delay_ms(1);
	return 1;
    3f34:	81 e0       	ldi	r24, 0x01	; 1
    3f36:	90 e0       	ldi	r25, 0x00	; 0
}
    3f38:	08 95       	ret

00003f3a <WriteI2C>:
//###################################################################
uint8_t WriteI2C(uint8_t Address, uint8_t Data)
{
    3f3a:	48 2f       	mov	r20, r24
	TWCR = TW_MT_SEND_START;
    3f3c:	84 ea       	ldi	r24, 0xA4	; 164
    3f3e:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    3f42:	80 91 74 00 	lds	r24, 0x0074
    3f46:	88 23       	and	r24, r24
    3f48:	e4 f7       	brge	.-8      	; 0x3f42 <WriteI2C+0x8>
	
	if(!(TWSR & TW_START))
    3f4a:	80 91 71 00 	lds	r24, 0x0071
    3f4e:	99 27       	eor	r25, r25
    3f50:	9c 01       	movw	r18, r24
    3f52:	28 70       	andi	r18, 0x08	; 8
    3f54:	30 70       	andi	r19, 0x00	; 0
    3f56:	83 fd       	sbrc	r24, 3
    3f58:	02 c0       	rjmp	.+4      	; 0x3f5e <WriteI2C+0x24>
		return 0;
    3f5a:	c9 01       	movw	r24, r18
    3f5c:	08 95       	ret
	

	TWDR = SLA_W;
    3f5e:	80 ed       	ldi	r24, 0xD0	; 208
    3f60:	80 93 73 00 	sts	0x0073, r24
	TWCR = _BV(TWINT) | _BV(TWEN);
    3f64:	84 e8       	ldi	r24, 0x84	; 132
    3f66:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    3f6a:	80 91 74 00 	lds	r24, 0x0074
    3f6e:	88 23       	and	r24, r24
    3f70:	e4 f7       	brge	.-8      	; 0x3f6a <WriteI2C+0x30>

	if(!(TWSR & TW_MT_SLA_ACK))
    3f72:	80 91 71 00 	lds	r24, 0x0071
    3f76:	99 27       	eor	r25, r25
    3f78:	88 71       	andi	r24, 0x18	; 24
    3f7a:	90 70       	andi	r25, 0x00	; 0
    3f7c:	00 97       	sbiw	r24, 0x00	; 0
    3f7e:	49 f1       	breq	.+82     	; 0x3fd2 <WriteI2C+0x98>
		return 0;
		
	TWDR = Address;
    3f80:	40 93 73 00 	sts	0x0073, r20
	TWCR = _BV(TWINT) | _BV(TWEN);	
    3f84:	84 e8       	ldi	r24, 0x84	; 132
    3f86:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    3f8a:	80 91 74 00 	lds	r24, 0x0074
    3f8e:	88 23       	and	r24, r24
    3f90:	e4 f7       	brge	.-8      	; 0x3f8a <WriteI2C+0x50>
			
	if(!(TWSR & TW_MT_DATA_ACK))
    3f92:	80 91 71 00 	lds	r24, 0x0071
    3f96:	99 27       	eor	r25, r25
    3f98:	88 72       	andi	r24, 0x28	; 40
    3f9a:	90 70       	andi	r25, 0x00	; 0
    3f9c:	00 97       	sbiw	r24, 0x00	; 0
    3f9e:	c9 f0       	breq	.+50     	; 0x3fd2 <WriteI2C+0x98>
		return 0;
		
	TWDR = Data;
    3fa0:	60 93 73 00 	sts	0x0073, r22
	TWCR = _BV(TWINT) | _BV(TWEN);	
    3fa4:	84 e8       	ldi	r24, 0x84	; 132
    3fa6:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));	
    3faa:	80 91 74 00 	lds	r24, 0x0074
    3fae:	88 23       	and	r24, r24
    3fb0:	e4 f7       	brge	.-8      	; 0x3faa <WriteI2C+0x70>

	if(!(TWSR & TW_MT_DATA_ACK))
    3fb2:	80 91 71 00 	lds	r24, 0x0071
    3fb6:	99 27       	eor	r25, r25
    3fb8:	88 72       	andi	r24, 0x28	; 40
    3fba:	90 70       	andi	r25, 0x00	; 0
    3fbc:	00 97       	sbiw	r24, 0x00	; 0
    3fbe:	49 f0       	breq	.+18     	; 0x3fd2 <WriteI2C+0x98>
		return 0;
	
	TWCR = TW_MT_SEND_STOP;
    3fc0:	84 e9       	ldi	r24, 0x94	; 148
    3fc2:	80 93 74 00 	sts	0x0074, r24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
    3fc6:	80 ea       	ldi	r24, 0xA0	; 160
    3fc8:	9f e0       	ldi	r25, 0x0F	; 15
    3fca:	01 97       	sbiw	r24, 0x01	; 1
    3fcc:	f1 f7       	brne	.-4      	; 0x3fca <WriteI2C+0x90>
	_delay_ms(1);
	return 1;
    3fce:	81 e0       	ldi	r24, 0x01	; 1
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
}
    3fd2:	08 95       	ret

00003fd4 <WriteBufI2C>:
//###################################################################
uint8_t WriteBufI2C(uint8_t Address, uint8_t *Data, uint8_t Len)
{
    3fd4:	58 2f       	mov	r21, r24
	uint8_t Poz;
	TWCR = TW_MT_SEND_START;
    3fd6:	84 ea       	ldi	r24, 0xA4	; 164
    3fd8:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    3fdc:	80 91 74 00 	lds	r24, 0x0074
    3fe0:	88 23       	and	r24, r24
    3fe2:	e4 f7       	brge	.-8      	; 0x3fdc <WriteBufI2C+0x8>
	
	if(!(TWSR & TW_START))
    3fe4:	80 91 71 00 	lds	r24, 0x0071
    3fe8:	99 27       	eor	r25, r25
    3fea:	9c 01       	movw	r18, r24
    3fec:	28 70       	andi	r18, 0x08	; 8
    3fee:	30 70       	andi	r19, 0x00	; 0
    3ff0:	83 fd       	sbrc	r24, 3
    3ff2:	02 c0       	rjmp	.+4      	; 0x3ff8 <WriteBufI2C+0x24>
		return 0;
    3ff4:	c9 01       	movw	r24, r18
    3ff6:	08 95       	ret

	TWDR = SLA_W;
    3ff8:	80 ed       	ldi	r24, 0xD0	; 208
    3ffa:	80 93 73 00 	sts	0x0073, r24
	TWCR = _BV(TWINT) | _BV(TWEN);
    3ffe:	84 e8       	ldi	r24, 0x84	; 132
    4000:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    4004:	80 91 74 00 	lds	r24, 0x0074
    4008:	88 23       	and	r24, r24
    400a:	e4 f7       	brge	.-8      	; 0x4004 <WriteBufI2C+0x30>

	if(!(TWSR & TW_MT_SLA_ACK))
    400c:	80 91 71 00 	lds	r24, 0x0071
    4010:	99 27       	eor	r25, r25
    4012:	88 71       	andi	r24, 0x18	; 24
    4014:	90 70       	andi	r25, 0x00	; 0
    4016:	00 97       	sbiw	r24, 0x00	; 0
    4018:	99 f1       	breq	.+102    	; 0x4080 <WriteBufI2C+0xac>
		return 0;
		
	TWDR = Address;
    401a:	50 93 73 00 	sts	0x0073, r21
	TWCR = _BV(TWINT) | _BV(TWEN);	
    401e:	84 e8       	ldi	r24, 0x84	; 132
    4020:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    4024:	80 91 74 00 	lds	r24, 0x0074
    4028:	88 23       	and	r24, r24
    402a:	e4 f7       	brge	.-8      	; 0x4024 <WriteBufI2C+0x50>
			
	if(!(TWSR & TW_MT_DATA_ACK))
    402c:	80 91 71 00 	lds	r24, 0x0071
    4030:	99 27       	eor	r25, r25
    4032:	88 72       	andi	r24, 0x28	; 40
    4034:	90 70       	andi	r25, 0x00	; 0
    4036:	00 97       	sbiw	r24, 0x00	; 0
    4038:	19 f1       	breq	.+70     	; 0x4080 <WriteBufI2C+0xac>
		return 0;
	
	for(Poz = 0; Poz < Len; Poz++)
    403a:	20 e0       	ldi	r18, 0x00	; 0
    403c:	24 17       	cp	r18, r20
    403e:	b8 f4       	brcc	.+46     	; 0x406e <WriteBufI2C+0x9a>
    4040:	34 e8       	ldi	r19, 0x84	; 132
	{
		TWDR = Data[Poz];
    4042:	fb 01       	movw	r30, r22
    4044:	e2 0f       	add	r30, r18
    4046:	f1 1d       	adc	r31, r1
    4048:	80 81       	ld	r24, Z
    404a:	80 93 73 00 	sts	0x0073, r24
		TWCR = _BV(TWINT) | _BV(TWEN);	
    404e:	30 93 74 00 	sts	0x0074, r19
		while(!(TWCR & _BV(TWINT)));	
    4052:	80 91 74 00 	lds	r24, 0x0074
    4056:	88 23       	and	r24, r24
    4058:	e4 f7       	brge	.-8      	; 0x4052 <WriteBufI2C+0x7e>
	
		if(!(TWSR & TW_MT_DATA_ACK))
    405a:	80 91 71 00 	lds	r24, 0x0071
    405e:	99 27       	eor	r25, r25
    4060:	88 72       	andi	r24, 0x28	; 40
    4062:	90 70       	andi	r25, 0x00	; 0
    4064:	00 97       	sbiw	r24, 0x00	; 0
    4066:	61 f0       	breq	.+24     	; 0x4080 <WriteBufI2C+0xac>
    4068:	2f 5f       	subi	r18, 0xFF	; 255
    406a:	24 17       	cp	r18, r20
    406c:	50 f3       	brcs	.-44     	; 0x4042 <WriteBufI2C+0x6e>
			return 0;
	}
	
	TWCR = TW_MT_SEND_STOP;
    406e:	84 e9       	ldi	r24, 0x94	; 148
    4070:	80 93 74 00 	sts	0x0074, r24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
    4074:	80 ea       	ldi	r24, 0xA0	; 160
    4076:	9f e0       	ldi	r25, 0x0F	; 15
    4078:	01 97       	sbiw	r24, 0x01	; 1
    407a:	f1 f7       	brne	.-4      	; 0x4078 <WriteBufI2C+0xa4>
	_delay_ms(1);
	return 1;
    407c:	81 e0       	ldi	r24, 0x01	; 1
    407e:	90 e0       	ldi	r25, 0x00	; 0
}
    4080:	08 95       	ret

00004082 <ReadI2C>:
//###################################################################
uint8_t ReadI2C(void)
{
	uint8_t Result = 0x01;
    4082:	21 e0       	ldi	r18, 0x01	; 1
	TWCR = TW_MR_SEND_START;
    4084:	84 ea       	ldi	r24, 0xA4	; 164
    4086:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    408a:	80 91 74 00 	lds	r24, 0x0074
    408e:	88 23       	and	r24, r24
    4090:	e4 f7       	brge	.-8      	; 0x408a <ReadI2C+0x8>
	
	if(TWSR & TW_START)
    4092:	80 91 71 00 	lds	r24, 0x0071
    4096:	83 ff       	sbrs	r24, 3
    4098:	1b c0       	rjmp	.+54     	; 0x40d0 <ReadI2C+0x4e>
	{
		Result = 0xf0;
    409a:	20 ef       	ldi	r18, 0xF0	; 240
		TWDR = SLA_R;
    409c:	81 ed       	ldi	r24, 0xD1	; 209
    409e:	80 93 73 00 	sts	0x0073, r24
		TWCR = _BV(TWINT) | _BV(TWEN);
    40a2:	84 e8       	ldi	r24, 0x84	; 132
    40a4:	80 93 74 00 	sts	0x0074, r24
		while(!(TWCR & _BV(TWINT)));	
    40a8:	80 91 74 00 	lds	r24, 0x0074
    40ac:	88 23       	and	r24, r24
    40ae:	e4 f7       	brge	.-8      	; 0x40a8 <ReadI2C+0x26>
		
		if(TWSR & TW_MR_SLA_ACK)
    40b0:	80 91 71 00 	lds	r24, 0x0071
    40b4:	86 ff       	sbrs	r24, 6
    40b6:	0c c0       	rjmp	.+24     	; 0x40d0 <ReadI2C+0x4e>
		{
			TWCR = _BV(TWINT) | _BV(TWEN);
    40b8:	84 e8       	ldi	r24, 0x84	; 132
    40ba:	80 93 74 00 	sts	0x0074, r24
			
			while(!(TWCR & _BV(TWINT)));
    40be:	80 91 74 00 	lds	r24, 0x0074
    40c2:	88 23       	and	r24, r24
    40c4:	e4 f7       	brge	.-8      	; 0x40be <ReadI2C+0x3c>
			
			Result = TWDR;
    40c6:	20 91 73 00 	lds	r18, 0x0073
			TWCR = TW_MR_SEND_STOP;
    40ca:	84 e9       	ldi	r24, 0x94	; 148
    40cc:	80 93 74 00 	sts	0x0074, r24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
    40d0:	80 ea       	ldi	r24, 0xA0	; 160
    40d2:	9f e0       	ldi	r25, 0x0F	; 15
    40d4:	01 97       	sbiw	r24, 0x01	; 1
    40d6:	f1 f7       	brne	.-4      	; 0x40d4 <ReadI2C+0x52>
			
		}
	}
	_delay_ms(1);
	return Result;
}
    40d8:	82 2f       	mov	r24, r18
    40da:	99 27       	eor	r25, r25
    40dc:	08 95       	ret

000040de <ReadBufI2C>:
//###################################################################
void ReadBufI2C(uint8_t *Buf, uint8_t Len)
{
    40de:	dc 01       	movw	r26, r24
	uint8_t Poz;
	TWCR = TW_MR_SEND_START;
    40e0:	84 ea       	ldi	r24, 0xA4	; 164
    40e2:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    40e6:	80 91 74 00 	lds	r24, 0x0074
    40ea:	88 23       	and	r24, r24
    40ec:	e4 f7       	brge	.-8      	; 0x40e6 <ReadBufI2C+0x8>
	
	if(TWSR & TW_START)
    40ee:	80 91 71 00 	lds	r24, 0x0071
    40f2:	83 ff       	sbrs	r24, 3
    40f4:	37 c0       	rjmp	.+110    	; 0x4164 <ReadBufI2C+0x86>
	{
		TWDR = SLA_R;
    40f6:	81 ed       	ldi	r24, 0xD1	; 209
    40f8:	80 93 73 00 	sts	0x0073, r24
		TWCR = _BV(TWINT) | _BV(TWEN);
    40fc:	84 e8       	ldi	r24, 0x84	; 132
    40fe:	80 93 74 00 	sts	0x0074, r24
		while(!(TWCR & _BV(TWINT)));	
    4102:	80 91 74 00 	lds	r24, 0x0074
    4106:	88 23       	and	r24, r24
    4108:	e4 f7       	brge	.-8      	; 0x4102 <ReadBufI2C+0x24>
		
		if(TWSR & TW_MR_SLA_ACK)
    410a:	80 91 71 00 	lds	r24, 0x0071
    410e:	86 ff       	sbrs	r24, 6
    4110:	29 c0       	rjmp	.+82     	; 0x4164 <ReadBufI2C+0x86>
		{
			
			for(Poz = 0; Poz < Len - 1; Poz++)
    4112:	20 e0       	ldi	r18, 0x00	; 0
    4114:	77 27       	eor	r23, r23
    4116:	61 50       	subi	r22, 0x01	; 1
    4118:	70 40       	sbci	r23, 0x00	; 0
    411a:	16 16       	cp	r1, r22
    411c:	17 06       	cpc	r1, r23
    411e:	9c f4       	brge	.+38     	; 0x4146 <ReadBufI2C+0x68>
    4120:	34 ec       	ldi	r19, 0xC4	; 196
			{	
				TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
    4122:	30 93 74 00 	sts	0x0074, r19
				while(!(TWCR & _BV(TWINT)));
    4126:	80 91 74 00 	lds	r24, 0x0074
    412a:	88 23       	and	r24, r24
    412c:	e4 f7       	brge	.-8      	; 0x4126 <ReadBufI2C+0x48>
			
				Buf[Poz] = TWDR;
    412e:	fd 01       	movw	r30, r26
    4130:	e2 0f       	add	r30, r18
    4132:	f1 1d       	adc	r31, r1
    4134:	80 91 73 00 	lds	r24, 0x0073
    4138:	80 83       	st	Z, r24
    413a:	2f 5f       	subi	r18, 0xFF	; 255
    413c:	82 2f       	mov	r24, r18
    413e:	99 27       	eor	r25, r25
    4140:	86 17       	cp	r24, r22
    4142:	97 07       	cpc	r25, r23
    4144:	74 f3       	brlt	.-36     	; 0x4122 <ReadBufI2C+0x44>
			}
			
			TWCR = _BV(TWINT) | _BV(TWEN);
    4146:	84 e8       	ldi	r24, 0x84	; 132
    4148:	80 93 74 00 	sts	0x0074, r24
			while(!(TWCR & _BV(TWINT)));
    414c:	80 91 74 00 	lds	r24, 0x0074
    4150:	88 23       	and	r24, r24
    4152:	e4 f7       	brge	.-8      	; 0x414c <ReadBufI2C+0x6e>
			
			Buf[Poz] = TWDR;
    4154:	a2 0f       	add	r26, r18
    4156:	b1 1d       	adc	r27, r1
    4158:	80 91 73 00 	lds	r24, 0x0073
    415c:	8c 93       	st	X, r24
			TWCR = TW_MR_SEND_STOP;
    415e:	84 e9       	ldi	r24, 0x94	; 148
    4160:	80 93 74 00 	sts	0x0074, r24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
    4164:	80 ea       	ldi	r24, 0xA0	; 160
    4166:	9f e0       	ldi	r25, 0x0F	; 15
    4168:	01 97       	sbiw	r24, 0x01	; 1
    416a:	f1 f7       	brne	.-4      	; 0x4168 <ReadBufI2C+0x8a>
    416c:	08 95       	ret

0000416e <RTC_SetValue>:

//I2C handling procedures
void RTC_SetValue(uint8_t Address, uint8_t Value)
{
	WriteI2C(Address, Value);
    416e:	0e 94 9d 1f 	call	0x3f3a <WriteI2C>
    4172:	08 95       	ret

00004174 <RTC_ReadValue>:
}

uint8_t RTC_ReadValue(uint8_t Address)
{
	SetPointer(Address);
    4174:	0e 94 60 1f 	call	0x3ec0 <SetPointer>
	return ReadI2C();
    4178:	0e 94 41 20 	call	0x4082 <ReadI2C>
}
    417c:	99 27       	eor	r25, r25
    417e:	08 95       	ret

00004180 <BCDtoDEC>:

//Binary-coded-decimal to decimal converting procedure
uint8_t BCDtoDEC(uint8_t BCDValue)
{
    4180:	48 2f       	mov	r20, r24
	return ((BCDValue & 0x0f) + (10 * ((BCDValue >> 4) & 0x0f)));
    4182:	82 95       	swap	r24
    4184:	8f 70       	andi	r24, 0x0F	; 15
    4186:	28 2f       	mov	r18, r24
    4188:	33 27       	eor	r19, r19
    418a:	c9 01       	movw	r24, r18
    418c:	53 e0       	ldi	r21, 0x03	; 3
    418e:	88 0f       	add	r24, r24
    4190:	99 1f       	adc	r25, r25
    4192:	5a 95       	dec	r21
    4194:	e1 f7       	brne	.-8      	; 0x418e <BCDtoDEC+0xe>
    4196:	82 0f       	add	r24, r18
    4198:	93 1f       	adc	r25, r19
    419a:	82 0f       	add	r24, r18
    419c:	93 1f       	adc	r25, r19
    419e:	4f 70       	andi	r20, 0x0F	; 15
    41a0:	48 0f       	add	r20, r24
}
    41a2:	84 2f       	mov	r24, r20
    41a4:	99 27       	eor	r25, r25
    41a6:	08 95       	ret

000041a8 <DECtoBCD>:
//Decimal to binary-coded-decimal to converting procedure
uint8_t DECtoBCD(uint8_t DecValue)
{
    41a8:	38 2f       	mov	r19, r24
	return ((DecValue % 10) | ((DecValue / 10) << 4));
    41aa:	4a e0       	ldi	r20, 0x0A	; 10
    41ac:	64 2f       	mov	r22, r20
    41ae:	0e 94 e7 20 	call	0x41ce <__udivmodqi4>
    41b2:	29 2f       	mov	r18, r25
    41b4:	83 2f       	mov	r24, r19
    41b6:	0e 94 e7 20 	call	0x41ce <__udivmodqi4>
    41ba:	99 27       	eor	r25, r25
    41bc:	64 e0       	ldi	r22, 0x04	; 4
    41be:	88 0f       	add	r24, r24
    41c0:	99 1f       	adc	r25, r25
    41c2:	6a 95       	dec	r22
    41c4:	e1 f7       	brne	.-8      	; 0x41be <DECtoBCD+0x16>
    41c6:	28 2b       	or	r18, r24
}
    41c8:	82 2f       	mov	r24, r18
    41ca:	99 27       	eor	r25, r25
    41cc:	08 95       	ret

000041ce <__udivmodqi4>:
    41ce:	99 1b       	sub	r25, r25
    41d0:	79 e0       	ldi	r23, 0x09	; 9
    41d2:	04 c0       	rjmp	.+8      	; 0x41dc <__udivmodqi4_ep>

000041d4 <__udivmodqi4_loop>:
    41d4:	99 1f       	adc	r25, r25
    41d6:	96 17       	cp	r25, r22
    41d8:	08 f0       	brcs	.+2      	; 0x41dc <__udivmodqi4_ep>
    41da:	96 1b       	sub	r25, r22

000041dc <__udivmodqi4_ep>:
    41dc:	88 1f       	adc	r24, r24
    41de:	7a 95       	dec	r23
    41e0:	c9 f7       	brne	.-14     	; 0x41d4 <__udivmodqi4_loop>
    41e2:	80 95       	com	r24
    41e4:	08 95       	ret

000041e6 <__udivmodhi4>:
    41e6:	aa 1b       	sub	r26, r26
    41e8:	bb 1b       	sub	r27, r27
    41ea:	51 e1       	ldi	r21, 0x11	; 17
    41ec:	07 c0       	rjmp	.+14     	; 0x41fc <__udivmodhi4_ep>

000041ee <__udivmodhi4_loop>:
    41ee:	aa 1f       	adc	r26, r26
    41f0:	bb 1f       	adc	r27, r27
    41f2:	a6 17       	cp	r26, r22
    41f4:	b7 07       	cpc	r27, r23
    41f6:	10 f0       	brcs	.+4      	; 0x41fc <__udivmodhi4_ep>
    41f8:	a6 1b       	sub	r26, r22
    41fa:	b7 0b       	sbc	r27, r23

000041fc <__udivmodhi4_ep>:
    41fc:	88 1f       	adc	r24, r24
    41fe:	99 1f       	adc	r25, r25
    4200:	5a 95       	dec	r21
    4202:	a9 f7       	brne	.-22     	; 0x41ee <__udivmodhi4_loop>
    4204:	80 95       	com	r24
    4206:	90 95       	com	r25
    4208:	bc 01       	movw	r22, r24
    420a:	cd 01       	movw	r24, r26
    420c:	08 95       	ret
