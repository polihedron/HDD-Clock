
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000ae16  0000aeaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000ae16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  00800102  00800102  0000aeac  2**0
                  ALLOC
  3 .noinit       00000000  0080014e  0080014e  0000aeac  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  0000aeac  2**0
                  CONTENTS
  5 .stab         00000408  00000000  00000000  0000aeac  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  0000b2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 0000003c  00000000  00000000  0000b338  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000585  00000000  00000000  0000b374  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000523f  00000000  00000000  0000b8f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000377  00000000  00000000  00010b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001f59  00000000  00000000  00010eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000005e5  00000000  00000000  00012e08  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 df 34 	jmp	0x69be <__init>
       4:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
       8:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
       c:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      10:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      14:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      18:	0c 94 1f 54 	jmp	0xa83e <__vector_6>
      1c:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      20:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      24:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      28:	0c 94 9e 53 	jmp	0xa73c <__vector_10>
      2c:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      30:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      34:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      38:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      3c:	0c 94 78 37 	jmp	0x6ef0 <__vector_15>
      40:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      44:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      48:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      4c:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      50:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      54:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      58:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      5c:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      60:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      64:	0c 94 1c 37 	jmp	0x6e38 <__vector_25>
      68:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      6c:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      70:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      74:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      78:	0c 94 db 36 	jmp	0x6db6 <__vector_30>
      7c:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      80:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      84:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>
      88:	0c 94 fc 34 	jmp	0x69f8 <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	e7 51       	subi	r30, 0x17	; 23
      8e:	b4 51       	subi	r27, 0x14	; 20
      90:	92 51       	subi	r25, 0x12	; 18
      92:	5f 51       	subi	r21, 0x1F	; 31
      94:	3d 51       	subi	r19, 0x1D	; 29
      96:	0a 51       	subi	r16, 0x1A	; 26
      98:	e8 50       	subi	r30, 0x08	; 8
      9a:	b5 50       	subi	r27, 0x05	; 5
      9c:	93 50       	subi	r25, 0x03	; 3
      9e:	60 50       	subi	r22, 0x00	; 0
      a0:	3e 50       	subi	r19, 0x0E	; 14
      a2:	0c 50       	subi	r16, 0x0C	; 12
      a4:	f5 4f       	sbci	r31, 0xF5	; 245
      a6:	cd 4f       	sbci	r28, 0xFD	; 253
      a8:	b6 4f       	sbci	r27, 0xF6	; 246
      aa:	8e 4f       	sbci	r24, 0xFE	; 254
      ac:	77 4f       	sbci	r23, 0xF7	; 247
      ae:	4f 4f       	sbci	r20, 0xFF	; 255
      b0:	38 4f       	sbci	r19, 0xF8	; 248
      b2:	10 4f       	sbci	r17, 0xF0	; 240
      b4:	f9 4e       	sbci	r31, 0xE9	; 233
      b6:	d1 4e       	sbci	r29, 0xE1	; 225
      b8:	ba 4e       	sbci	r27, 0xEA	; 234
      ba:	92 4e       	sbci	r25, 0xE2	; 226
      bc:	f0 4d       	sbci	r31, 0xD0	; 208
      be:	bb 4d       	sbci	r27, 0xDB	; 219
      c0:	75 4d       	sbci	r23, 0xD5	; 213
      c2:	63 4c       	sbci	r22, 0xC3	; 195
      c4:	51 4b       	sbci	r21, 0xB1	; 177
      c6:	3c 4a       	sbci	r19, 0xAC	; 172
      c8:	27 49       	sbci	r18, 0x97	; 151
      ca:	ff 47       	sbci	r31, 0x7F	; 127
      cc:	d7 46       	sbci	r29, 0x67	; 103
      ce:	af 45       	sbci	r26, 0x5F	; 95
      d0:	3d 45       	sbci	r19, 0x5D	; 93
      d2:	1a 45       	sbci	r17, 0x5A	; 90
      d4:	8e 44       	sbci	r24, 0x4E	; 78
      d6:	3d 44       	sbci	r19, 0x4D	; 77
      d8:	fa 43       	sbci	r31, 0x3A	; 58
      da:	d6 43       	sbci	r29, 0x36	; 54
      dc:	a0 43       	sbci	r26, 0x30	; 48
      de:	2e 43       	sbci	r18, 0x3E	; 62
      e0:	bc 42       	sbci	r27, 0x2C	; 44
      e2:	4a 42       	sbci	r20, 0x2A	; 42
      e4:	d8 41       	sbci	r29, 0x18	; 24
      e6:	66 41       	sbci	r22, 0x16	; 22
      e8:	f4 40       	sbci	r31, 0x04	; 4
      ea:	82 40       	sbci	r24, 0x02	; 2
      ec:	10 40       	sbci	r17, 0x00	; 0
      ee:	9e 3f       	cpi	r25, 0xFE	; 254
      f0:	2c 3f       	cpi	r18, 0xFC	; 252
      f2:	ba 3e       	cpi	r27, 0xEA	; 234
      f4:	48 3e       	cpi	r20, 0xE8	; 232
      f6:	d6 3d       	cpi	r29, 0xD6	; 214
      f8:	64 3d       	cpi	r22, 0xD4	; 212
      fa:	f2 3c       	cpi	r31, 0xC2	; 194
      fc:	80 3c       	cpi	r24, 0xC0	; 192
      fe:	0e 3c       	cpi	r16, 0xCE	; 206
     100:	9c 3b       	cpi	r25, 0xBC	; 188

00000102 <g_hour_hand>:
     102:	27 27 27 27 27 27 27 27 27 27 27 00 00 00 00 00     '''''''''''.....
     112:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
     122:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
     132:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     142:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 27     ''''''''''.....'
     152:	27 27 27 24 24 24 24 24 27 27 27 27 27 27 27 27     '''$$$$$''''''''
     162:	27 27 27 27 27 08 08 08 08 08 27 27 27 27 27 27     '''''.....''''''
     172:	27 27 27 27 27 27 27 14 14 14 14 14 27 27 27 27     '''''''.....''''
     182:	00 00 00 00 00 27 27 27 27 00 00 00 00 00 27 27     .....''''.....''
     192:	27 27 00 00 00 00 00 27 27 27 27 00 00 00 00 00     ''.....''''.....
     1a2:	27 27 27 27 00 00 00 00 00 27 27 27 27 24 24 24     ''''.....''''$$$
     1b2:	24 24 27 27 27 27 27 27 27 27 27 27 27 27 27 00     $$'''''''''''''.
     1c2:	00 00 00 00 27 27 27 27 00 00 00 00 00 27 27 27     ....''''.....'''
     1d2:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 27     ''''''''''.....'
     1e2:	27 27 27 27 27 27 27 27 27 27 27 27 14 14 14 14     ''''''''''''....
     1f2:	14 27 27 27 27 16 16 16 16 16 27 27 27 27 27 27     .''''.....''''''
     202:	27 27 27 27 27 27 27 20 20 20 20 20 27 27 28 27     '''''''     ''('
     212:	27 27 27 27 27 27 28 28 27 27 27 27 27 27 27 28     ''''''(('''''''(
     222:	28 27 27 27 27 27 27 27 28                          ('''''''(

0000022b <g_minute_hand>:
     22b:	28 28 27 27 27 27 27 28 28 28 27 27 00 00 00 27     (('''''(((''...'
     23b:	27 28 28 28 27 27 27 27 27 28 28 28 28 27 00 00     '((('''''(((('..
     24b:	00 27 28 28 28 27 27 27 27 27 27 27 28 28 28 27     .'((('''''''((('
     25b:	27 27 27 27 28 28 28 28 27 27 27 27 27 28 28 28     ''''(((('''''(((
     26b:	27 27 27 27 27 27 27 28 28 28 27 00 00 00 27 28     '''''''((('...'(
     27b:	28 28 27 27 24 24 24 27 27 28 28 27 27 27 27 27     ((''$$$''(('''''
     28b:	27 27 28 28 28 27 08 08 08 27 28 28 28 28 27 27     ''((('...'((((''
     29b:	27 27 27 28 28 28 27 27 14 14 14 27 27 28 28 28     '''(((''...''(((
     2ab:	27 00 00 00 27 28 28 28 28 27 00 00 00 27 28 28     '...'(((('...'((
     2bb:	28 27 27 00 00 00 27 27 28 28 28 27 00 00 00 27     (''...''((('...'
     2cb:	28 28 28 27 27 00 00 00 27 27 28 28 27 27 24 24     (((''...''((''$$
     2db:	24 27 27 28 28 28 27 27 27 27 27 28 28 28 27 27     $''((('''''(((''
     2eb:	00 00 00 27 27 28 28 27 27 00 00 00 27 27 28 28     ...''((''...''((
     2fb:	28 27 27 27 27 27 28 28 28 27 27 00 00 00 27 27     ('''''(((''...''
     30b:	28 28 28 27 27 27 27 27 28 28 28 27 27 14 14 14     ((('''''(((''...
     31b:	27 27 28 28 27 27 16 16 16 27 27 28 28 28 27 27     ''((''...''(((''
     32b:	27 27 27 28 28 28 27 27 20 20 20 27 27 28 28 28     '''(((''   ''(((
     33b:	27 27 27 27 27 28 28 28 28 27 27 27 27 27 28 28     '''''(((('''''((
     34b:	28 28 27 27 27 27 27 28 28                          (('''''((

00000354 <g_second_hand>:
     354:	28 28 27 27 00 27 27 28 28 28 28 27 27 27 27 27     ((''.''(((('''''
     364:	28 28 28 28 27 27 27 27 27 28 28 28 28 27 27 00     (((('''''((((''.
     374:	27 27 28 28 28 28 27 27 27 27 27 28 28 28 28 27     ''(((('''''(((('
     384:	27 27 27 27 28 28 28 28 27 27 00 27 27 28 28 28     ''''((((''.''(((
     394:	28 27 27 27 27 27 28 28 28 28 27 27 27 27 27 28     ('''''(((('''''(
     3a4:	28 28 28 27 27 00 27 27 28 28 28 28 27 27 27 27     (((''.''((((''''
     3b4:	27 28 28 28 28 27 27 27 27 27 28 28 28 28 27 27     '(((('''''((((''
     3c4:	00 27 27 28 28 28 28 27 27 27 27 27 28 28 28 28     .''(((('''''((((
     3d4:	27 27 27 27 27 28 28 28 28 27 27 00 27 27 28 28     '''''((((''.''((
     3e4:	28 28 27 27 27 27 27 28 28 28 28 27 27 27 27 27     (('''''(((('''''
     3f4:	28 28 28 28 27 27 00 27 27 28 28 28 28 27 27 27     ((((''.''(((('''
     404:	27 27 28 28 28 28 27 27 27 27 27 28 28 28 28 27     ''(((('''''(((('
     414:	27 00 27 27 28 28 28 28 27 27 27 27 27 28 28 28     '.''(((('''''(((
     424:	28 27 27 27 27 27 28 28 28 28 27 27 00 27 27 28     ('''''((((''.''(
     434:	28 28 28 27 27 27 27 27 28 28 28 28 27 27 27 27     ((('''''((((''''
     444:	27 28 28 28 28 27 27 00 27 27 28 28 28 28 27 27     '((((''.''((((''
     454:	27 27 27 28 28 28 28 27 27 27 27 27 28 28 28 28     '''(((('''''((((
     464:	28 27 00 27 28 28 28 28 28 28 27 27 27 28 28 28     ('.'(((((('''(((
     474:	28 28 28 27 27 27 28 28 28                          ((('''(((

0000047d <gm_background>:
	...
     4a1:	27 27 27 27 27 27 00 00 00 00 00 00 00 00 00 00     ''''''..........
	...
     591:	27 27 27 27 27 27 00 00 00 00 00 00 00 00 00 00     ''''''..........
	...
     6fd:	00 00 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ..''''''........
	...
     7ed:	00 00 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ..''''''........
	...
     83d:	27 27 27 27 27 27 26 00 00 00 00 00 00 00 00 00     ''''''&.........
	...
     895:	26 27 27 27 27 27 27 26 00 00 00 00 00 00 00 00     &''''''&........
	...
     8b1:	00 00 00 26 27 27 27 27 27 27 26 00 00 00 00 00     ...&''''''&.....
	...
     8d1:	00 00 26 27 27 27 27 27 27 26 00 00 00 00 00 00     ..&''''''&......
	...
     929:	00 00 00 26 27 27 27 27 27 27 26 00 00 00 00 00     ...&''''''&.....
	...
     985:	26 27 27 27 27 27 27 26 00 00 00 00 00 00 00 00     &''''''&........
	...
     9a1:	00 00 00 26 27 27 27 27 27 27 26 00 00 00 00 00     ...&''''''&.....
	...
     9c1:	00 00 26 27 27 27 27 27 27 26 00 00 00 00 00 00     ..&''''''&......
	...
     a19:	00 00 00 26 01 01 01 01 01 01 01 01 01 01 01 01     ...&............
     a29:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a39:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a49:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a59:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a69:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a79:	02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11     ................
     a89:	12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 00 00     ................
	...
     b0d:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     b1d:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     b2d:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     b3d:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     b4d:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     b5d:	01 01 01 01 01 01 01 01 01 01 01 01 02 03 04 05     ................
     b6d:	06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15     ................
     b7d:	16 17 18 19 1a 1b 1c 1d 1e 1f 00 00 00 00 00 00     ................
	...
     bfd:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     c0d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     c1d:	27 27 27 27 27 27 27 26 00 00 00 00 00 00 00 00     '''''''&........
	...
     cc5:	26 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     &'''''''''''''''
     cd5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     ce5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     cf5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     d05:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 26     '''''''''''''''&
	...
     db5:	26 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     &'''''''''''''''
     dc5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     dd5:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
     e2d:	26 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     &'''''''''''''''
     e3d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     e4d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     e5d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     e6d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 26     '''''''''''''''&
	...
     f1d:	26 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     &'''''''''''''''
     f2d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     f3d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     f4d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     f5d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 26     '''''''''''''''&
	...
     fbd:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     ''''''''''''''..
	...
     fe9:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
     ff9:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     ''''''''''''''..
	...
    1025:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1035:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     ''''''''''''''..
	...
    1061:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1071:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     ''''''''''''''..
	...
    109d:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    10ad:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     ''''''''''''''..
	...
    10d9:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    10e9:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     ''''''''''''''..
	...
    1115:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1125:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     ''''''''''''''..
	...
    1151:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1161:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     ''''''''''''''..
	...
    118d:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
	...
    11ad:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    11bd:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
	...
    11e9:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    11f9:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
	...
    1225:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1235:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
	...
    1261:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1271:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
	...
    129d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    12ad:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
	...
    12d9:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    12e9:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
	...
    1315:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1325:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
	...
    1351:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1361:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
	...
    137d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    138d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    139d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    13ad:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    13cd:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    13dd:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    13ed:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    13fd:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    141d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    142d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    143d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    144d:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    146d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    147d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    148d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    149d:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    14bd:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    14cd:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    14dd:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    14ed:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    150d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    151d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    152d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    153d:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    1575:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1585:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1595:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    15a5:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    15c5:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    15d5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    15e5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    15f5:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    1615:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1625:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1635:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1645:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    1665:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1675:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1685:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1695:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    16b5:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    16c5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    16d5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    16e5:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    1705:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1715:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1725:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1735:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1745:	27 27 27 27 27 00 00 00 00 00 00 00 00 00 00 00     '''''...........
	...
    1761:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    1771:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 00 00     '''''''''.......
	...
    1791:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    17a1:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 00 00     '''''''''.......
	...
    17c1:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    17d1:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 00 00     '''''''''.......
	...
    17f1:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    1801:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 00 00     '''''''''.......
	...
    1821:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    1831:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 00 00     '''''''''.......
	...
    1851:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    1861:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 00 00     '''''''''.......
	...
    1881:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    1891:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 00 00     '''''''''.......
	...
    18b1:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    18c1:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 00 00     '''''''''.......
	...
    18e1:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    18f1:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 00 00     '''''''''.......
	...
    1911:	00 00 00 27 27 27 27 27 27 27 27 27 00 00 00 00     ...'''''''''....
	...
    1929:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1939:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
	...
    1959:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1969:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
	...
    1989:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1999:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
	...
    19b9:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    19c9:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
	...
    19e9:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    19f9:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
	...
    1a19:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1a29:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
	...
    1a49:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1a59:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
	...
    1a79:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1a89:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
	...
    1aa9:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1ab9:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
	...
    1ad9:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1ae9:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
    1af9:	00 00 00 00 27 27 27 27 27 27 27 27 27 27 27 00     ....'''''''''''.
	...
    1b19:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1b29:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     '...............
    1b39:	00 00 00 00 00 27 27 27 27 27 27 27 27 27 27 27     .....'''''''''''
    1b49:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    1b59:	00 00 00 00 00 00 00 27 27 27 27 27 27 27 27 27     .......'''''''''
    1b69:	27 27 27 27 27 27 00 00 00 00 00 00 00 00 00 00     ''''''..........
	...
    1b81:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
	...
    1ba1:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    1bb1:	27 27 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ''..............
    1bc1:	00 00 00 00 00 00 27 27 27 27 27 27 27 27 27 27     ......''''''''''
    1bd1:	27 27 27 27 27 00 00 00 00 00 00 00 00 00 00 00     '''''...........
	...
    1be9:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
	...
    1c09:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1c19:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     '...............
    1c29:	00 00 00 00 00 27 27 27 27 27 27 27 27 27 27 27     .....'''''''''''
    1c39:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    1c49:	00 00 00 00 00 00 00 27 27 27 27 27 27 27 27 27     .......'''''''''
    1c59:	27 27 27 27 27 27 00 00 00 00 00 00 00 00 00 00     ''''''..........
	...
    1c71:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
	...
    1c91:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    1ca1:	27 27 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ''..............
    1cb1:	00 00 00 00 00 00 27 27 27 27 27 27 27 27 27 27     ......''''''''''
    1cc1:	27 27 27 27 27 00 00 00 00 00 00 00 00 00 00 00     '''''...........
	...
    1cd9:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    1ce9:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1cf9:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     '...............
    1d09:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1d19:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    1d29:	00 00 00 00 00 27 27 27 27 27 27 27 27 27 27 27     .....'''''''''''
    1d39:	27 27 27 27 27 27 00 00 00 00 00 00 00 00 00 00     ''''''..........
    1d49:	00 00 00 00 00 00 00 27 27 27 27 27 27 27 27 27     .......'''''''''
    1d59:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    1d71:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    1d81:	27 27 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ''..............
    1d91:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    1da1:	27 27 27 27 27 00 00 00 00 00 00 00 00 00 00 00     '''''...........
    1db1:	00 00 00 00 00 00 27 27 27 27 27 27 27 27 27 27     ......''''''''''
    1dc1:	27 27 27 27 27 27 27 00 00 00 00 00 00 00 00 00     '''''''.........
	...
    1dd9:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1de9:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     '...............
    1df9:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1e09:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    1e19:	00 00 00 00 00 27 27 27 27 27 27 27 27 27 27 27     .....'''''''''''
    1e29:	27 27 27 27 27 27 00 00 00 00 00 00 00 00 00 00     ''''''..........
    1e39:	00 00 00 00 00 00 00 27 27 27 27 27 27 27 27 27     .......'''''''''
    1e49:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    1e61:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    1e71:	27 27 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ''..............
    1e81:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    1e91:	27 27 27 27 27 00 00 00 00 00 00 00 00 00 00 00     '''''...........
    1ea1:	00 00 00 00 00 00 27 27 27 27 27 27 27 27 27 27     ......''''''''''
    1eb1:	27 27 27 27 27 27 27 00 00 00 00 00 27 27 27 27     '''''''.....''''
    1ec1:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1ed1:	27 27 27 00 00 00 00 00 00 00 00 00 00 00 00 00     '''.............
    1ee1:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    1ef1:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1f01:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
	...
    1f1d:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    1f2d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1f3d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
	...
    1f59:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    1f69:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1f79:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
	...
    1f95:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    1fa5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1fb5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
	...
    1fd1:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    1fe1:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1ff1:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
	...
    200d:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    201d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    202d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
	...
    2049:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    2059:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2069:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
	...
    2085:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    2095:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 27     ''''''''.......'
    20a5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    20b5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    20c5:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
	...
    20dd:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    20ed:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    20fd:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    210d:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 27     '..............'
    211d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    212d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    213d:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
	...
    2155:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    2165:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2175:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2185:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 27     '..............'
    2195:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    21a5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    21b5:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
	...
    21cd:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    21dd:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    21ed:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    21fd:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 27     '..............'
    220d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    221d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    222d:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
	...
    2245:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    2255:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2265:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2275:	27 00 00 00 00 00 00 00 27 27 27 27 27 27 27 27     '.......''''''''
    2285:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2295:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
	...
    22ad:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    22bd:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    22cd:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    22dd:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    22ed:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    22fd:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    230d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    231d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    232d:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    233d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    234d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    235d:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    236d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    237d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    238d:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    239d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    23ad:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    23bd:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    23cd:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    23dd:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    23ed:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    23fd:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    240d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    241d:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    242d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    243d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    244d:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
	...
    2469:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2479:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2489:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    2499:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    24a9:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    24b9:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    24c9:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    24d9:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    24e9:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    24f9:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2509:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2519:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    2529:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2539:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2549:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    2559:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2569:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2579:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    2589:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2599:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    25a9:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    25b9:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    25c9:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    25d9:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    25e9:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    25f9:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2609:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    2619:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2629:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2639:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2649:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
    2659:	00 00 00 00 00 00 27 27 27 27 27 27 27 27 27 27     ......''''''''''
    2669:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2679:	27 00 00 00 00 00 00 00 00 27 27 27 27 27 27 27     '........'''''''
    2689:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2699:	27 27 27 27 00 00 00 00 00 00 00 27 27 27 27 27     ''''.......'''''
    26a9:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    26b9:	27 27 27 27 27 27 00 00 00 00 00 00 00 27 27 27     ''''''.......'''
    26c9:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    26d9:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 27     ''''''''.......'
    26e9:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    26f9:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
    2709:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    2719:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
    2729:	00 00 00 00 27 27 27 27 27 27 27 27 27 27 27 27     ....''''''''''''
    2739:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
    2749:	00 00 00 00 00 00 27 27 27 27 27 27 27 27 27 27     ......''''''''''
    2759:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2769:	27 00 00 00 00 00 00 00 00 27 27 27 27 27 27 27     '........'''''''
    2779:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2789:	27 27 27 27 00 00 00 00 00 00 00 27 27 27 27 27     ''''.......'''''
    2799:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    27a9:	27 27 27 27 27 27 00 00 00 00 00 00 00 27 27 27     ''''''.......'''
    27b9:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    27c9:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 27     ''''''''.......'
    27d9:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    27e9:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
    27f9:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    2809:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
	...
    2825:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2835:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
    2845:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    2855:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
    2865:	00 00 00 00 00 27 27 27 27 27 27 27 27 27 27 27     .....'''''''''''
    2875:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
    2885:	00 00 00 00 00 00 00 27 27 27 27 27 27 27 27 27     .......'''''''''
    2895:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    28a5:	27 00 00 00 00 00 00 00 00 27 27 27 27 27 27 27     '........'''''''
    28b5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    28c5:	27 27 27 00 00 00 00 00 00 00 00 27 27 27 27 27     '''........'''''
    28d5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    28e5:	27 27 27 27 27 27 00 00 00 00 00 00 00 00 27 27     ''''''........''
    28f5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2905:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
    2915:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2925:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
    2935:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    2945:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
    2955:	00 00 00 00 00 27 27 27 27 27 27 27 27 27 27 27     .....'''''''''''
    2965:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
    2975:	00 00 00 00 00 00 00 27 27 27 27 27 27 27 27 27     .......'''''''''
    2985:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2995:	27 00 00 00 00 00 00 00 00 27 27 27 27 27 27 27     '........'''''''
    29a5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    29b5:	27 27 27 00 00 00 00 00 00 00 00 27 27 27 27 27     '''........'''''
    29c5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    29d5:	27 27 27 27 27 27 00 00 00 00 00 00 00 00 27 27     ''''''........''
    29e5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    29f5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2a05:	27 27 27 27 27 27 27 27 00 00 00 00 00 27 27 27     ''''''''.....'''
    2a15:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     ''''''''''''''..
    2a25:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    2a35:	27 27 27 27 00 00 00 00 00 27 27 27 27 27 27 27     ''''.....'''''''
    2a45:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 27     ''''''''''.....'
    2a55:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2a65:	00 00 00 00 00 27 27 27 27 27 27 27 27 27 27 27     .....'''''''''''
    2a75:	27 27 27 27 27 27 00 00 00 00 00 27 27 27 27 27     ''''''.....'''''
    2a85:	27 27 27 27 27 27 27 27 27 27 27 00 00 00 00 00     '''''''''''.....
    2a95:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2aa5:	27 00 00 00 00 00 27 27 27 27 27 27 27 27 27 27     '.....''''''''''
    2ab5:	27 27 27 27 27 27 27 00 00 00 00 00 27 27 27 27     '''''''.....''''
    2ac5:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
    2ad5:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    2ae5:	27 27 27 00 00 00 00 00 27 27 27 27 27 27 27 27     '''.....''''''''
    2af5:	27 27 27 27 27 27 27 27 00 00 00 00 00 27 27 27     ''''''''.....'''
    2b05:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     ''''''''''''''..
    2b15:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    2b25:	27 27 27 27 00 00 00 00 00 27 27 27 27 27 27 27     ''''.....'''''''
    2b35:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 27     ''''''''''.....'
    2b45:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2b55:	00 00 00 00 00 27 27 27 27 27 27 27 27 27 27 27     .....'''''''''''
    2b65:	27 27 27 27 27 27 00 00 00 00 00 27 27 27 27 27     ''''''.....'''''
    2b75:	27 27 27 27 27 27 27 27 27 27 27 00 00 00 00 00     '''''''''''.....
    2b85:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2b95:	27 00 00 00 00 00 27 27 27 27 27 27 27 27 27 27     '.....''''''''''
    2ba5:	27 27 27 27 27 27 27 00 00 00 00 00 27 27 27 27     '''''''.....''''
    2bb5:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
    2bc5:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    2bd5:	27 27 27 00 00 00 00 00 00 00 00 00 00 27 27 27     '''..........'''
    2be5:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
    2bf5:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    2c05:	27 27 27 00 00 00 00 00 27 27 27 27 27 27 27 27     '''.....''''''''
    2c15:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 27 27     '''''''''.....''
    2c25:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
    2c35:	00 00 00 00 27 27 27 27 27 27 27 27 27 27 27 27     ....''''''''''''
    2c45:	27 27 27 27 27 00 00 00 00 00 27 27 27 27 27 27     '''''.....''''''
    2c55:	27 27 27 27 27 27 27 27 27 27 27 00 00 00 00 00     '''''''''''.....
    2c65:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2c75:	00 00 00 00 00 27 27 27 27 27 27 27 27 27 27 27     .....'''''''''''
    2c85:	27 27 27 27 27 27 00 00 00 00 00 27 27 27 27 27     ''''''.....'''''
    2c95:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
    2ca5:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    2cb5:	27 27 00 00 00 00 00 27 27 27 27 27 27 27 27 27     ''.....'''''''''
    2cc5:	27 27 27 27 27 27 27 27 00 00 00 00 00 27 27 27     ''''''''.....'''
    2cd5:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
    2ce5:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    2cf5:	27 27 27 00 00 00 00 00 27 27 27 27 27 27 27 27     '''.....''''''''
    2d05:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 27 27     '''''''''.....''
    2d15:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
    2d25:	00 00 00 00 27 27 27 27 27 27 27 27 27 27 27 27     ....''''''''''''
    2d35:	27 27 27 27 27 00 00 00 00 00 27 27 27 27 27 27     '''''.....''''''
    2d45:	27 27 27 27 27 27 27 27 27 27 27 00 00 00 00 00     '''''''''''.....
    2d55:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2d65:	00 00 00 00 00 27 27 27 27 27 27 27 27 27 27 27     .....'''''''''''
    2d75:	27 27 27 27 27 27 00 00 00 00 00 27 27 27 27 27     ''''''.....'''''
    2d85:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
    2d95:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    2da5:	27 27 00 00 00 00 00 27 27 27 27 27 27 27 27 27     ''.....'''''''''
    2db5:	27 27 27 27 27 27 27 27 27 01 01 01 01 01 01 01     '''''''''.......
    2dc5:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2dd5:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2de5:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2df5:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2e05:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2e15:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2e25:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2e35:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2e45:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2e55:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2e65:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2e75:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2e85:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2e95:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2ea5:	03 03 03 03 03 03 03 03 27 01 01 01 01 01 01 01     ........'.......
    2eb5:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2ec5:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2ed5:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2ee5:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2ef5:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2f05:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2f15:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2f25:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2f35:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2f45:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2f55:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2f65:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2f75:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2f85:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2f95:	03 03 03 03 03 03 03 03 27 07 07 07 07 07 07 07     ........'.......
    2fa5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    2fb5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    2fc5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    2fd5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    2fe5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    2ff5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    3005:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    3015:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    3025:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    3035:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    3045:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    3055:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    3065:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    3075:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    3085:	0b 0b 0b 0b 0b 0b 0b 0b 27 07 07 07 07 07 07 07     ........'.......
    3095:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    30a5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    30b5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    30c5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    30d5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    30e5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    30f5:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    3105:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    3115:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    3125:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    3135:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    3145:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    3155:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    3165:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    3175:	0b 0b 0b 0b 0b 0b 0b 0b                             ........

0000317d <gc_background>:
	...
    31a1:	00 00 00 01 01 01 02 03 04 05 06 07 08 09 0a 0b     ................
    31b1:	0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b     ................
    31c1:	1c 1d 1e 1f 20 21 22 23 24 25 26 27 27 27 27 27     .... !"#$%&'''''
    31d1:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    31e1:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    31f1:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3201:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3211:	27 27 27 27 27 27 27 27 27 27 27 27 27 26 25 24     '''''''''''''&%$
    3221:	23 22 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14     #"! ............
    3231:	13 12 11 10 0f 0e 0d 0c 0b 0a 09 08 07 06 05 04     ................
    3241:	03 02 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3291:	00 00 00 01 01 01 02 03 04 05 06 07 08 09 0a 0b     ................
    32a1:	0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b     ................
    32b1:	1c 1d 1e 1f 20 21 22 23 24 25 26 27 27 27 27 27     .... !"#$%&'''''
    32c1:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    32d1:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    32e1:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    32f1:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3301:	27 27 27 27 27 27 27 27 27 27 27 27 27 26 25 24     '''''''''''''&%$
    3311:	23 22 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14     #"! ............
    3321:	13 12 11 10 0f 0e 0d 0c 0b 0a 09 08 07 06 05 04     ................
    3331:	03 02 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    335d:	27 26 25 24 23 22 21 20 1f 1e 1d 1c 1b 1a 19 18     '&%$#"! ........
    336d:	17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a 09 08     ................
    337d:	07 06 05 04 03 02 01 01 01 00 00 00 00 00 00 00     ................
	...
    33d1:	00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01     ................
    33e1:	02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11     ................
    33f1:	12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21     .............. !
    3401:	22 23 24 25 26 27 27 27 27 27 27 27 27 27 27 27     "#$%&'''''''''''
    3411:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3421:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3431:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3441:	27 27 27 27 27 27 27 27 27 27 27 27 27 26 25 24     '''''''''''''&%$
    3451:	23 22 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14     #"! ............
    3461:	13 12 11 10 0f 0e 0d 0c 0b 0a 09 08 07 06 05 04     ................
    3471:	03 02 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    34c1:	00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01     ................
    34d1:	02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11     ................
    34e1:	12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21     .............. !
    34f1:	22 23 24 25 26 27 27 27 27 27 27 27 27 27 27 27     "#$%&'''''''''''
    3501:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3511:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3521:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3531:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3541:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3551:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3561:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3571:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3581:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3591:	27 27 27 27 27 27 27 25 23 21 1f 1d 1b 19 17 15     '''''''%#!......
    35a1:	14 13 12 11 10 0f 0e 0d 0c 0b 0a 09 08 07 06 05     ................
    35b1:	04 03 02 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3601:	00 00 00 01 01 01 02 03 04 05 06 07 08 09 0a 0c     ................
    3611:	0e 10 12 14 16 18 1a 1c 1d 1e 1f 20 21 22 23 24     ........... !"#$
    3621:	25 26 27 27 27 27 27 27 27 27 27 27 27 27 27 27     %&''''''''''''''
    3631:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3641:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3651:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3661:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3671:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3681:	27 27 27 27 27 27 27 25 23 21 1f 1d 1b 19 17 15     '''''''%#!......
    3691:	14 13 12 11 10 0f 0e 0d 0c 0b 0a 09 08 07 06 05     ................
    36a1:	04 03 02 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    36f1:	00 00 00 01 01 01 02 03 04 05 06 07 08 09 0a 0c     ................
    3701:	0e 10 12 14 16 18 1a 1c 1d 1e 1f 20 21 22 23 24     ........... !"#$
    3711:	25 26 27 27 27 27 27 27 27 27 27 27 00 00 00 00     %&''''''''''....
	...
    3745:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3755:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3765:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    3795:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    37a5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    37b5:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    37e5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    37f5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3805:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    3835:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3845:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3855:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    3885:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3895:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    38a5:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    38d5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    38e5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    38f5:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    3925:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3935:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3945:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    3975:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3985:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3995:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    39c5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    39d5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    39e5:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    3a15:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3a25:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3a35:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    3a65:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3a75:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3a85:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    3ab5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3ac5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3ad5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3ae5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3af5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3b05:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3b15:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3b25:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3b35:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3b45:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3b55:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3b65:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3b75:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3b85:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3b95:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3ba5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3bb5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3bc5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3bd5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3be5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3bf5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3c05:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3c15:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3c25:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3c35:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3c45:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3c55:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3c65:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3c75:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3c85:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3c95:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3ca5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3cb5:	27 27 27 27 27 27 27 27 0c 0c 0c 0d 0d 0e 0e 0f     ''''''''........
    3cc5:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    3cd5:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    3ce5:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    3cf5:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    3d05:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    3d15:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    3d25:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    3d35:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    3d45:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    3d55:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    3d65:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    3d75:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    3d85:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    3d95:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    3da5:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    3db5:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    3dc5:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    3dd5:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    3de5:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    3df5:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    3e05:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    3e15:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    3e25:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    3e35:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    3e45:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    3e55:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    3e65:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    3e75:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    3e85:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    3e95:	0f 0e 0e 0d 0d 0c 0c 0c 25 24 24 23 23 22 22 21     ........%$$##""!
    3ea5:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    3eb5:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    3ec5:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    3ed5:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    3ee5:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    3ef5:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    3f05:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    3f15:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    3f25:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    3f35:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    3f45:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    3f55:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    3f65:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    3f75:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    3f85:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    3f95:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    3fa5:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    3fb5:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    3fc5:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    3fd5:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    3fe5:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    3ff5:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    4005:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    4015:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    4025:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    4035:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    4045:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    4055:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    4065:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    4075:	21 22 22 23 23 24 24 25 0c 0c 0c 0d 0d 0e 0e 0f     !""##$$%........
    4085:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    4095:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    40a5:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    40b5:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    40c5:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    40d5:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    40e5:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    40f5:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    4105:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    4115:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    4125:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    4135:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    4145:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    4155:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    4165:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    4175:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    4185:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    4195:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    41a5:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    41b5:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    41c5:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    41d5:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    41e5:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    41f5:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    4205:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    4215:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    4225:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    4235:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    4245:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    4255:	0f 0e 0e 0d 0d 0c 0c 0c 21 20 1f 1e 1d 1c 1b 1a     ........! ......
    4265:	19 18 17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a     ................
    4275:	0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19     ................
    4285:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    4295:	19 18 17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a     ................
    42a5:	0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19     ................
    42b5:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    42c5:	19 18 17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a     ................
    42d5:	0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19     ................
    42e5:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    42f5:	19 18 17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a     ................
    4305:	0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19     ................
    4315:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    4325:	19 18 17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a     ................
    4335:	0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19     ................
    4345:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    4355:	19 18 17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a     ................
    4365:	0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19     ................
    4375:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    4385:	19 18 17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a     ................
    4395:	0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19     ................
    43a5:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    43b5:	19 18 17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a     ................
    43c5:	0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19     ................
    43d5:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    43e5:	19 18 17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a     ................
    43f5:	0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19     ................
    4405:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    4415:	19 18 17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a     ................
    4425:	0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19     ................
    4435:	1a 1b 1c 1d 1e 1f 20 21 25 24 23 22 21 20 1f 1e     ...... !%$#"! ..
    4445:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    4455:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    4465:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    4475:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    4485:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    4495:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    44a5:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    44b5:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    44c5:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    44d5:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    44e5:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    44f5:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    4505:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    4515:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    4525:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    4535:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    4545:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    4555:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    4565:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    4575:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    4585:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    4595:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    45a5:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    45b5:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    45c5:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    45d5:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    45e5:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    45f5:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    4605:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    4615:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    4625:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    4635:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    4645:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    4655:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    4665:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    4675:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    4685:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    4695:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    46a5:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    46b5:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    46c5:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    46d5:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    46e5:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    46f5:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    4705:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    4715:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    4725:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    4735:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    4745:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    4755:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    4765:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    4775:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    4785:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    4795:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    47a5:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    47b5:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    47c5:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    47d5:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    47e5:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    47f5:	1e 1f 20 21 22 23 24 25 21 20 1f 1e 1d 1c 1b 1a     .. !"#$%! ......
    4805:	19 18 17 16 15 14 13 12 11 11 12 13 14 15 16 17     ................
    4815:	18 19 1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c     ........ !! ....
    4825:	1b 1a 19 18 17 16 15 14 13 12 11 11 11 12 13 14     ................
    4835:	15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 21 20 1f     ........... !! .
    4845:	1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 11 12     ................
    4855:	13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 21     ............. !!
    4865:	20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11      ...............
    4875:	11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20     ............... 
    4885:	21 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13     !! .............
    4895:	12 11 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e     ................
    48a5:	1f 20 21 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15     . !! ...........
    48b5:	14 13 12 11 11 11 12 13 14 15 16 17 18 19 1a 1b     ................
    48c5:	1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a 19 18     .... !! ........
    48d5:	17 16 15 14 13 12 11 11 12 13 14 15 16 17 18 19     ................
    48e5:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    48f5:	19 18 17 16 15 14 13 12 11 11 12 13 14 15 16 17     ................
    4905:	18 19 1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c     ........ !! ....
    4915:	1b 1a 19 18 17 16 15 14 13 12 11 11 11 12 13 14     ................
    4925:	15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 21 20 1f     ........... !! .
    4935:	1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 11 12     ................
    4945:	13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 21     ............. !!
    4955:	20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11      ...............
    4965:	11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20     ............... 
    4975:	21 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13     !! .............
    4985:	12 11 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e     ................
    4995:	1f 20 21 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15     . !! ...........
    49a5:	14 13 12 11 11 11 12 13 14 15 16 17 18 19 1a 1b     ................
    49b5:	1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a 19 18     .... !! ........
    49c5:	17 16 15 14 13 12 11 11 12 13 14 15 16 17 18 19     ................
    49d5:	1a 1b 1c 1d 1e 1f 20 21 25 24 23 22 21 20 1f 1e     ...... !%$#"! ..
    49e5:	1d 1c 1b 1a 19 18 17 16 15 15 16 17 18 19 1a 1b     ................
    49f5:	1c 1d 1e 1f 20 21 22 23 24 25 25 24 23 22 21 20     .... !"#$%%$#"! 
    4a05:	1f 1e 1d 1c 1b 1a 19 18 17 16 15 15 15 16 17 18     ................
    4a15:	19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25 25 24 23     ....... !"#$%%$#
    4a25:	22 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 15 16     "! .............
    4a35:	17 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25 25     ......... !"#$%%
    4a45:	24 23 22 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15     $#"! ...........
    4a55:	15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24     ........... !"#$
    4a65:	25 25 24 23 22 21 20 1f 1e 1d 1c 1b 1a 19 18 17     %%$#"! .........
    4a75:	16 15 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 22     ............. !"
    4a85:	23 24 25 25 24 23 22 21 20 1f 1e 1d 1c 1b 1a 19     #$%%$#"! .......
    4a95:	18 17 16 15 15 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
    4aa5:	20 21 22 23 24 25 25 24 23 22 21 20 1f 1e 1d 1c      !"#$%%$#"! ....
    4ab5:	1b 1a 19 18 17 16 15 15 16 17 18 19 1a 1b 1c 1d     ................
    4ac5:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    4ad5:	1d 1c 1b 1a 19 18 17 16 15 15 16 17 18 19 1a 1b     ................
    4ae5:	1c 1d 1e 1f 20 21 22 23 24 25 25 24 23 22 21 20     .... !"#$%%$#"! 
    4af5:	1f 1e 1d 1c 1b 1a 19 18 17 16 15 15 15 16 17 18     ................
    4b05:	19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25 25 24 23     ....... !"#$%%$#
    4b15:	22 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 15 16     "! .............
    4b25:	17 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25 25     ......... !"#$%%
    4b35:	24 23 22 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15     $#"! ...........
    4b45:	15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24     ........... !"#$
    4b55:	25 25 24 23 22 21 20 1f 1e 1d 1c 1b 1a 19 18 17     %%$#"! .........
    4b65:	16 15 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 22     ............. !"
    4b75:	23 24 25 25 24 23 22 21 20 1f 1e 1d 1c 1b 1a 19     #$%%$#"! .......
    4b85:	18 17 16 15 15 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
    4b95:	20 21 22 23 24 25 25 24 23 22 21 20 1f 1e 1d 1c      !"#$%%$#"! ....
    4ba5:	1b 1a 19 18 17 16 15 15 16 17 18 19 1a 1b 1c 1d     ................
    4bb5:	1e 1f 20 21 22 23 24 25 21 20 1f 1e 1d 1c 1b 1a     .. !"#$%! ......
    4bc5:	19 18 17 16 15 14 13 12 11 11 12 13 14 15 16 17     ................
    4bd5:	18 19 1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c     ........ !! ....
    4be5:	1b 1a 19 18 17 16 15 14 13 12 11 11 11 12 13 14     ................
    4bf5:	15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 21 20 1f     ........... !! .
    4c05:	1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 11 12     ................
    4c15:	13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 21     ............. !!
    4c25:	22 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11     "...............
    4c35:	11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20     ............... 
    4c45:	21 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13     !! .............
    4c55:	12 11 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e     ................
    4c65:	1f 20 21 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15     . !! ...........
    4c75:	14 13 12 11 11 11 12 13 14 15 16 17 18 19 1a 1b     ................
    4c85:	1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a 19 18     .... !! ........
    4c95:	17 16 15 14 13 12 11 11 12 13 14 15 16 17 18 19     ................
    4ca5:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    4cb5:	19 18 17 16 15 14 13 12 11 11 12 13 14 15 16 17     ................
    4cc5:	18 19 1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c     ........ !! ....
    4cd5:	1b 1a 19 18 17 16 15 14 13 12 11 11 11 12 13 14     ................
    4ce5:	15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 21 20 1f     ........... !! .
    4cf5:	1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 11 12     ................
    4d05:	13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 21     ............. !!
    4d15:	22 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11     "...............
    4d25:	11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20     ............... 
    4d35:	21 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13     !! .............
    4d45:	12 11 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e     ................
    4d55:	1f 20 21 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15     . !! ...........
    4d65:	14 13 12 11 11 11 12 13 14 15 16 17 18 19 1a 1b     ................
    4d75:	1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a 19 18     .... !! ........
    4d85:	17 16 15 14 13 12 11 11 12 13 14 15 16 17 18 19     ................
    4d95:	1a 1b 1c 1d 1e 1f 20 21 27 27 22 22 22 22 22 22     ...... !''""""""
    4da5:	22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22     """"""""""""""""
    4db5:	22 22 22 22 22 22 27 27 19 19 19 19 19 19 19 19     """"""''........
    4dc5:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4dd5:	19 19 19 19 27 27 22 22 22 22 22 22 22 22 22 22     ....''""""""""""
    4de5:	22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22     """"""""""""""""
    4df5:	22 22 27 27 19 19 19 19 19 19 19 19 19 19 19 19     ""''............
    4e05:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4e15:	27 27 22 22 22 22 22 22 22 22 22 22 22 22 22 22     ''""""""""""""""
    4e25:	22 22 22 22 22 22 22 22 22 22 22 22 22 22 27 27     """"""""""""""''
    4e35:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4e45:	19 19 19 19 19 19 19 19 19 19 19 19 27 27 22 22     ............''""
    4e55:	22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22     """"""""""""""""
    4e65:	22 22 22 22 22 22 22 22 22 22 27 27 19 19 19 19     """"""""""''....
    4e75:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4e85:	19 19 19 19 19 19 19 19 27 27 22 22 22 22 22 22     ........''""""""
    4e95:	22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22     """"""""""""""""
    4ea5:	22 22 22 22 22 22 27 27 19 19 19 19 19 19 19 19     """"""''........
    4eb5:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4ec5:	19 19 19 19 27 27 22 22 22 22 22 22 22 22 22 22     ....''""""""""""
    4ed5:	22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22     """"""""""""""""
    4ee5:	22 22 27 27 19 19 19 19 19 19 19 19 19 19 19 19     ""''............
    4ef5:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4f05:	27 27 22 22 22 22 22 22 22 22 22 22 22 22 22 22     ''""""""""""""""
    4f15:	22 22 22 22 22 22 22 22 22 22 22 22 22 22 27 27     """"""""""""""''
    4f25:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4f35:	19 19 19 19 19 19 19 19 19 19 19 19 27 27 22 22     ............''""
    4f45:	22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22     """"""""""""""""
    4f55:	22 22 22 22 22 22 22 22 22 22 27 27 19 19 19 19     """"""""""''....
    4f65:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4f75:	19 19 19 19 19 19 19 19 27 27 27 27 27 27 27 27     ........''''''''
    4f85:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    4f95:	27 27 27 27 27 27 27 27 19 19 19 19 19 19 19 19     ''''''''........
    4fa5:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4fb5:	19 19 19 19 27 27 27 27 27 27 27 27 27 27 27 27     ....''''''''''''
    4fc5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    4fd5:	27 27 27 27 19 19 19 19 19 19 19 19 19 19 19 19     ''''............
    4fe5:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4ff5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5005:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5015:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    5025:	19 19 19 19 19 19 19 19 19 19 19 19 27 27 27 27     ............''''
    5035:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5045:	27 27 27 27 27 27 27 27 27 27 27 27 19 19 19 19     ''''''''''''....
    5055:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    5065:	19 19 19 19 19 19 19 19 27 27 27 27 27 27 27 27     ........''''''''
    5075:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5085:	27 27 27 27 27 27 27 27 19 19 19 19 19 19 19 19     ''''''''........
    5095:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    50a5:	19 19 19 19 27 27 27 27 27 27 27 27 27 27 27 27     ....''''''''''''
    50b5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    50c5:	27 27 27 27 19 19 19 19 19 19 19 19 19 19 19 19     ''''............
    50d5:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    50e5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    50f5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5105:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    5115:	19 19 19 19 19 19 19 19 19 19 19 19 27 27 27 27     ............''''
    5125:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5135:	27 27 27 27 27 27 27 27 27 27 27 27 19 19 19 19     ''''''''''''....
    5145:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    5155:	19 19 19 19 19 19 19 19 27 27 27 27 27 27 27 27     ........''''''''
    5165:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5175:	27 27 27 27 27 27 27 27 1f 1f 1f 1f 1f 1f 1f 1f     ''''''''........
    5185:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    5195:	1f 1f 1f 1f 27 27 27 27 27 27 27 27 27 27 27 27     ....''''''''''''
    51a5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    51b5:	27 27 27 27 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ''''............
    51c5:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    51d5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    51e5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    51f5:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    5205:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 27 27 27 27     ............''''
    5215:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5225:	27 27 27 27 27 27 27 27 27 27 27 27 1f 1f 1f 1f     ''''''''''''....
    5235:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    5245:	1f 1f 1f 1f 1f 1f 1f 1f 27 27 27 27 27 27 27 27     ........''''''''
    5255:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5265:	27 27 27 27 27 27 27 27 1f 1f 1f 1f 1f 1f 1f 1f     ''''''''........
    5275:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    5285:	1f 1f 1f 1f 27 27 27 27 27 27 27 27 27 27 27 27     ....''''''''''''
    5295:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    52a5:	27 27 27 27 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ''''............
    52b5:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    52c5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    52d5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    52e5:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    52f5:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 27 27 27 27     ............''''
    5305:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5315:	27 27 27 27 27 27 27 27 27 27 27 27 1f 1f 1f 1f     ''''''''''''....
    5325:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    5335:	1f 1f 1f 1f 1f 1f 1f 1f 00 00 00 00 00 00 00 00     ................
	...
    5365:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
    5375:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
    5385:	20 21 22 23 24 25 26 27 27 27 27 27 27 27 27 27      !"#$%&'''''''''
    5395:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    53a5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    53b5:	27 26 25 24 23 22 21 20 1f 1e 1d 1c 1b 1a 19 18     '&%$#"! ........
    53c5:	17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a 09 08     ................
    53d5:	07 06 05 04 03 02 01 00 00 00 00 00 00 00 00 00     ................
	...
    5455:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
    5465:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
    5475:	20 21 22 23 24 25 26 27 27 27 27 27 27 27 27 27      !"#$%&'''''''''
    5485:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5495:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    54a5:	27 26 25 24 23 22 21 20 1f 1e 1d 1c 1b 1a 19 18     '&%$#"! ........
    54b5:	17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a 09 08     ................
    54c5:	07 06 05 04 03 02 01 00 00 00 00 00 00 00 00 00     ................
	...
    551d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    552d:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    553d:	27 27 27 27 27 27 27 27 27 26 25 24 23 22 21 20     '''''''''&%$#"! 
    554d:	1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10     ................
    555d:	0f 0e 0d 0c 0b 0a 09 08 07 06 05 04 03 02 01 00     ................
	...
    55e5:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
    55f5:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
    5605:	20 21 22 23 24 25 26 27 27 27 27 27 27 27 27 27      !"#$%&'''''''''
    5615:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5625:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5635:	27 26 25 24 23 22 21 20 1f 1e 1d 1c 1b 1a 19 18     '&%$#"! ........
    5645:	17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a 09 08     ................
    5655:	07 06 05 04 03 02 01 00 00 00 00 00 00 00 00 00     ................
	...
    56d5:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
    56e5:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
    56f5:	20 21 22 23 24 25 26 27 27 27 27 27 27 27 27 27      !"#$%&'''''''''
    5705:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5715:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5725:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5735:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5745:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5755:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5765:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5775:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5785:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5795:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    57a5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    57b5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    57c5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    57d5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    57e5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    57f5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5805:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5815:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5825:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5835:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5845:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5855:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5865:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5875:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5885:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5895:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    58a5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    58b5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    58c5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    58d5:	27 27 27 27 27 27 27 27 26 25 24 23 22 21 20 1f     ''''''''&%$#"! .
    58e5:	1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f     ................
    58f5:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    5905:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    5915:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0e 0e 0e 0e 0e 0d 0d     ................
    5925:	0d 0d 0d 0d 0d 0d 0d 0d 0c 0c 0c 0c 0c 0c 0c 0c     ................
    5935:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    5945:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    5955:	0c 0c 0c 0c 0c 0d 0e 0f 10 12 13 14 15 16 17 18     ................
    5965:	19 1a 1b 1c 1d 1e 1f 20 21 22 23 23 23 23 23 23     ....... !"######
    5975:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
    5985:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
    5995:	23 23 23 24 24 25 25 25 26 26 27 27 27 27 27 27     ###$$%%%&&''''''
    59a5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    59b5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    59c5:	27 27 27 27 27 27 27 27 26 25 24 23 22 21 20 1f     ''''''''&%$#"! .
    59d5:	1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f     ................
    59e5:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    59f5:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    5a05:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0e 0e 0e 0e 0e 0d 0d     ................
    5a15:	0d 0d 0d 0d 0d 0d 0d 0d 0c 0c 0c 0c 0c 0c 0c 0c     ................
    5a25:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    5a35:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
    5a45:	0c 0c 0c 0c 0c 0d 0e 0f 10 12 13 14 15 16 17 18     ................
    5a55:	19 1a 1b 1c 1d 1e 1f 20 21 22 23 23 23 23 23 23     ....... !"######
    5a65:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
    5a75:	23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23     ################
    5a85:	23 23 23 24 24 25 25 25 26 26 27 27 27 27 27 27     ###$$%%%&&''''''
    5a95:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5aa5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5ab5:	27 27 27 27 27 27 27 27 1c 1c 1c 1d 1d 1d 1e 1e     ''''''''........
    5ac5:	1f 1f 20 20 21 21 22 22 23 23 24 24 25 25 25 26     ..  !!""##$$%%%&
    5ad5:	26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26     &&&&&&&&&&&&&&&&
    5ae5:	26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26     &&&&&&&&&&&&&&&&
    5af5:	26 26 26 26 25 25 24 24 23 23 22 22 21 21 20 20     &&&&%%$$##""!!  
    5b05:	1f 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 13 13     ................
    5b15:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    5b25:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    5b35:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    5b45:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    5b55:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    5b65:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    5b75:	13 13 13 13 13 13 13 13 13 13 14 14 15 15 16 16     ................
    5b85:	17 17 18 18 19 19 1a 1a 1b 1b 1c 1c 1c 1c 1c 1c     ................
    5b95:	1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c     ................
    5ba5:	1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 1d 1d 1d 1e 1e     ................
    5bb5:	1f 1f 20 20 21 21 22 22 23 23 24 24 25 25 25 26     ..  !!""##$$%%%&
    5bc5:	26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26     &&&&&&&&&&&&&&&&
    5bd5:	26 26 26 26 26 26 26 26 26 26 26 26 26 26 26 26     &&&&&&&&&&&&&&&&
    5be5:	26 26 26 26 25 25 24 24 23 23 22 22 21 21 20 20     &&&&%%$$##""!!  
    5bf5:	1f 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 13 13     ................
    5c05:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    5c15:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    5c25:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    5c35:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    5c45:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    5c55:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
    5c65:	13 13 13 13 13 13 13 13 13 13 14 14 15 15 16 16     ................
    5c75:	17 17 18 18 19 19 1a 1a 1b 1b 1c 1c 1c 1c 1c 1c     ................
    5c85:	1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c 1c     ................
    5c95:	1c 1c 1c 1c 1c 1c 1c 1c 13 14 15 16 17 18 19 1a     ................
    5ca5:	1b 1c 1d 1e 1f 20 21 22 23 24 25 26 27 27 27 27     ..... !"#$%&''''
    5cb5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5cc5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5cd5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5ce5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5cf5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5d05:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5d15:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5d25:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5d35:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5d45:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5d55:	27 27 27 27 27 26 25 24 23 22 21 20 1f 1e 1d 1c     '''''&%$#"! ....
    5d65:	1b 1a 19 18 17 16 15 14 13 12 12 12 12 12 12 12     ................
    5d75:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    5d85:	12 12 12 12 12 12 12 12 13 14 15 16 17 18 19 1a     ................
    5d95:	1b 1c 1d 1e 1f 20 21 22 23 24 25 26 27 27 27 27     ..... !"#$%&''''
    5da5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5db5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5dc5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5dd5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5de5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5df5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5e05:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5e15:	27 27 27 27 27 27 27 27 27 27 27 27 26 26 27 27     ''''''''''''&&''
    5e25:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5e35:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5e45:	27 27 27 27 27 26 25 24 23 22 21 20 1f 1e 1d 1c     '''''&%$#"! ....
    5e55:	1b 1a 19 18 17 16 15 14 13 12 12 12 12 12 12 12     ................
    5e65:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    5e75:	12 12 12 12 12 12 12 12                             ........

00005e7d <g_background>:
	...
    605d:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    606d:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    607d:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    608d:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    609d:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    60ad:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    60bd:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    60cd:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    60dd:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    60ed:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    60fd:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    610d:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    611d:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    612d:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    613d:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    614d:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     '...............
    615d:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    616d:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    6185:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    6195:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    61ad:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    61bd:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    61d5:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    61e5:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    61fd:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    620d:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    6225:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    6235:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    624d:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    625d:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    6275:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    6285:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    629d:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    62ad:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    62c5:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    62d5:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    62ed:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    62fd:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    6315:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    6325:	00 00 00 00 00 00 00 27 27 0f 0f 0f 0f 0f 0f 0f     .......''.......
    6335:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 27 27 0f 0f 0f     ...........''...
    6345:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 27     ...............'
    6355:	27 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     '...............
    6365:	0f 0f 0f 27 27 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ...''...........
    6375:	0f 0f 0f 0f 0f 0f 0f 27 27 0f 0f 0f 0f 0f 0f 0f     .......''.......
    6385:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 27 27 0f 0f 0f     ...........''...
    6395:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 27     ...............'
    63a5:	27 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     '...............
    63b5:	0f 0f 0f 27 27 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ...''...........
    63c5:	0f 0f 0f 0f 0f 0f 0f 27 27 0f 0f 0f 0f 0f 0f 0f     .......''.......
    63d5:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 27 27 0f 0f 0f     ...........''...
    63e5:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 27     ...............'
    63f5:	27 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     '...............
    6405:	0f 0f 0f 27 27 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ...''...........
    6415:	0f 0f 0f 0f 0f 0f 0f 27 27 27 27 27 27 27 27 27     .......'''''''''
    6425:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6435:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6445:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6455:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6465:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6475:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6485:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6495:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    64a5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    64b5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    64c5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    64d5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    64e5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    64f5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6505:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6515:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6525:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6535:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6545:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6555:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6565:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6575:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6585:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6595:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    65a5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    65b5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    65c5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    65d5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    65e5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    65f5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6605:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6615:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6625:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6635:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6645:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6655:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6665:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6675:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6685:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6695:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    66a5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    66b5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    66c5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    66d5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    66e5:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    6715:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
    6725:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
    6735:	20 21 22 23 24 25 26 27 27 27 27 27 27 27 27 27      !"#$%&'''''''''
    6745:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6755:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6765:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6775:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6785:	27 27 27 27 27 27 27 27 27 26 25 24 23 22 21 20     '''''''''&%$#"! 
    6795:	1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10     ................
    67a5:	0f 0e 0d 0c 0b 0a 09 08 07 06 05 04 03 02 01 00     ................
	...
    67dd:	27 26 25 24 23 22 21 20 1f 1e 1d 1c 1b 1a 19 18     '&%$#"! ........
    67ed:	17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a 09 08     ................
    67fd:	07 06 05 04 03 02 01 00 00 00 00 00 00 00 00 00     ................
	...
    6855:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
    6865:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
    6875:	20 21 22 23 24 25 26 27 27 27 27 27 27 27 27 27      !"#$%&'''''''''
    6885:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6895:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    68a5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    68b5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    68c5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    68d5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    68e5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    68f5:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6905:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    6915:	27 27 27 27 27 27 27 27 27 26 25 24 23 22 21 20     '''''''''&%$#"! 
    6925:	1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10     ................
    6935:	0f 0e 0d 0c 0b 0a 09 08 07 06 05 04 03 02 01 00     ................
	...
    6995:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
    69a5:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
    69b5:	20 21 22 23 24 25 26 27 00                           !"#$%&'.

000069be <__init>:
    69be:	11 24       	eor	r1, r1
    69c0:	1f be       	out	0x3f, r1	; 63
    69c2:	cf ef       	ldi	r28, 0xFF	; 255
    69c4:	d0 e1       	ldi	r29, 0x10	; 16
    69c6:	de bf       	out	0x3e, r29	; 62
    69c8:	cd bf       	out	0x3d, r28	; 61

000069ca <__do_copy_data>:
    69ca:	11 e0       	ldi	r17, 0x01	; 1
    69cc:	a0 e0       	ldi	r26, 0x00	; 0
    69ce:	b1 e0       	ldi	r27, 0x01	; 1
    69d0:	e6 e1       	ldi	r30, 0x16	; 22
    69d2:	fe ea       	ldi	r31, 0xAE	; 174
    69d4:	00 e0       	ldi	r16, 0x00	; 0
    69d6:	0b bf       	out	0x3b, r16	; 59
    69d8:	02 c0       	rjmp	.+4      	; 0x69de <__do_copy_data+0x14>
    69da:	07 90       	elpm	r0, Z+
    69dc:	0d 92       	st	X+, r0
    69de:	a2 30       	cpi	r26, 0x02	; 2
    69e0:	b1 07       	cpc	r27, r17
    69e2:	d9 f7       	brne	.-10     	; 0x69da <__do_copy_data+0x10>

000069e4 <__do_clear_bss>:
    69e4:	11 e0       	ldi	r17, 0x01	; 1
    69e6:	a2 e0       	ldi	r26, 0x02	; 2
    69e8:	b1 e0       	ldi	r27, 0x01	; 1
    69ea:	01 c0       	rjmp	.+2      	; 0x69ee <.do_clear_bss_start>

000069ec <.do_clear_bss_loop>:
    69ec:	1d 92       	st	X+, r1

000069ee <.do_clear_bss_start>:
    69ee:	ae 34       	cpi	r26, 0x4E	; 78
    69f0:	b1 07       	cpc	r27, r17
    69f2:	e1 f7       	brne	.-8      	; 0x69ec <.do_clear_bss_loop>
    69f4:	0c 94 ed 54 	jmp	0xa9da <main>

000069f8 <__bad_interrupt>:
    69f8:	0c 94 00 00 	jmp	0x0 <__vectors>

000069fc <USART1_Init>:
void rc_process_command(uint8_t command);

//############# UART functions, useful for debugging ##########
void USART1_Init( unsigned int ubrr )
{
    69fc:	9c 01       	movw	r18, r24
	/* Set baud rate */
	UBRR1H = (unsigned char)(ubrr>>8);
    69fe:	83 2f       	mov	r24, r19
    6a00:	99 27       	eor	r25, r25
    6a02:	80 93 98 00 	sts	0x0098, r24
	UBRR1L = (unsigned char)ubrr;
    6a06:	20 93 99 00 	sts	0x0099, r18
	/* Enable receiver and transmitter */
	UCSR1B = (1<<RXEN1) | (1<<TXEN1) | _BV(RXCIE1);
    6a0a:	88 e9       	ldi	r24, 0x98	; 152
    6a0c:	80 93 9a 00 	sts	0x009A, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR1C =  (1<<UCSZ11) | (1<<UCSZ10);
    6a10:	86 e0       	ldi	r24, 0x06	; 6
    6a12:	80 93 9d 00 	sts	0x009D, r24
    6a16:	08 95       	ret

00006a18 <USART1_Receive>:
}

unsigned char USART1_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR1A & (1<<RXC1)) )
    6a18:	80 91 9b 00 	lds	r24, 0x009B
    6a1c:	88 23       	and	r24, r24
    6a1e:	e4 f7       	brge	.-8      	; 0x6a18 <USART1_Receive>
	;
	/* Get and return received data from buffer */
	return UDR1;
    6a20:	80 91 9c 00 	lds	r24, 0x009C
}
    6a24:	99 27       	eor	r25, r25
    6a26:	08 95       	ret

00006a28 <USART1_Transmit>:

void USART1_Transmit( unsigned char data )
{
    6a28:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) )
    6a2a:	80 91 9b 00 	lds	r24, 0x009B
    6a2e:	85 ff       	sbrs	r24, 5
    6a30:	fc cf       	rjmp	.-8      	; 0x6a2a <USART1_Transmit+0x2>
	;
	/* Put data into buffer, sends the data */
	UDR1 = data;
    6a32:	90 93 9c 00 	sts	0x009C, r25
    6a36:	08 95       	ret

00006a38 <send_str>:
}

void send_str( unsigned char *str )
{
    6a38:	cf 93       	push	r28
    6a3a:	df 93       	push	r29
    6a3c:	ec 01       	movw	r28, r24
	while(*str)
	{
		USART1_Transmit(*str);
		str++;
    6a3e:	88 81       	ld	r24, Y
    6a40:	88 23       	and	r24, r24
    6a42:	31 f0       	breq	.+12     	; 0x6a50 <send_str+0x18>
    6a44:	89 91       	ld	r24, Y+
    6a46:	0e 94 14 35 	call	0x6a28 <USART1_Transmit>
    6a4a:	88 81       	ld	r24, Y
    6a4c:	88 23       	and	r24, r24
    6a4e:	d1 f7       	brne	.-12     	; 0x6a44 <send_str+0xc>
    6a50:	df 91       	pop	r29
    6a52:	cf 91       	pop	r28
    6a54:	08 95       	ret

00006a56 <rc_process_command>:
	}
}


//######################## RC command processing function ############
void rc_process_command(uint8_t command)
{
    6a56:	1f 93       	push	r17
    6a58:	cf 93       	push	r28
    6a5a:	df 93       	push	r29
    6a5c:	98 2f       	mov	r25, r24
	static uint8_t last_command = 0;
	uint8_t i;
	
	if(last_command == command)		//if last command was the same
    6a5e:	80 91 03 01 	lds	r24, 0x0103
    6a62:	89 17       	cp	r24, r25
    6a64:	59 f4       	brne	.+22     	; 0x6a7c <rc_process_command+0x26>
	{
		g_rc_hold_counter++;			//increase the counter
    6a66:	80 91 0d 01 	lds	r24, 0x010D
    6a6a:	8f 5f       	subi	r24, 0xFF	; 255
    6a6c:	80 93 0d 01 	sts	0x010D, r24
		if(g_rc_hold_counter > 20)		//and don't let it overflow
    6a70:	85 31       	cpi	r24, 0x15	; 21
    6a72:	30 f0       	brcs	.+12     	; 0x6a80 <rc_process_command+0x2a>
			g_rc_hold_counter = 20;
    6a74:	84 e1       	ldi	r24, 0x14	; 20
    6a76:	80 93 0d 01 	sts	0x010D, r24
    6a7a:	02 c0       	rjmp	.+4      	; 0x6a80 <rc_process_command+0x2a>
	}
	else
		g_rc_hold_counter = 0;
    6a7c:	10 92 0d 01 	sts	0x010D, r1
	
	last_command = command;	
    6a80:	90 93 03 01 	sts	0x0103, r25
		
	switch(command & 0b01111111)		//mask the toggle bit
    6a84:	89 2f       	mov	r24, r25
    6a86:	99 27       	eor	r25, r25
    6a88:	8f 77       	andi	r24, 0x7F	; 127
    6a8a:	90 70       	andi	r25, 0x00	; 0
    6a8c:	81 31       	cpi	r24, 0x11	; 17
    6a8e:	91 05       	cpc	r25, r1
    6a90:	09 f4       	brne	.+2      	; 0x6a94 <rc_process_command+0x3e>
    6a92:	7a c1       	rjmp	.+756    	; 0x6d88 <rc_process_command+0x332>
    6a94:	82 31       	cpi	r24, 0x12	; 18
    6a96:	91 05       	cpc	r25, r1
    6a98:	6c f4       	brge	.+26     	; 0x6ab4 <rc_process_command+0x5e>
    6a9a:	8d 30       	cpi	r24, 0x0D	; 13
    6a9c:	91 05       	cpc	r25, r1
    6a9e:	41 f1       	breq	.+80     	; 0x6af0 <rc_process_command+0x9a>
    6aa0:	8e 30       	cpi	r24, 0x0E	; 14
    6aa2:	91 05       	cpc	r25, r1
    6aa4:	1c f4       	brge	.+6      	; 0x6aac <rc_process_command+0x56>
    6aa6:	0c 97       	sbiw	r24, 0x0c	; 12
    6aa8:	a1 f0       	breq	.+40     	; 0x6ad2 <rc_process_command+0x7c>
    6aaa:	81 c1       	rjmp	.+770    	; 0x6dae <rc_process_command+0x358>
    6aac:	40 97       	sbiw	r24, 0x10	; 16
    6aae:	09 f4       	brne	.+2      	; 0x6ab2 <rc_process_command+0x5c>
    6ab0:	5c c1       	rjmp	.+696    	; 0x6d6a <rc_process_command+0x314>
    6ab2:	7d c1       	rjmp	.+762    	; 0x6dae <rc_process_command+0x358>
    6ab4:	81 32       	cpi	r24, 0x21	; 33
    6ab6:	91 05       	cpc	r25, r1
    6ab8:	09 f4       	brne	.+2      	; 0x6abc <rc_process_command+0x66>
    6aba:	f1 c0       	rjmp	.+482    	; 0x6c9e <rc_process_command+0x248>
    6abc:	82 32       	cpi	r24, 0x22	; 34
    6abe:	91 05       	cpc	r25, r1
    6ac0:	24 f4       	brge	.+8      	; 0x6aca <rc_process_command+0x74>
    6ac2:	80 97       	sbiw	r24, 0x20	; 32
    6ac4:	09 f4       	brne	.+2      	; 0x6ac8 <rc_process_command+0x72>
    6ac6:	84 c0       	rjmp	.+264    	; 0x6bd0 <rc_process_command+0x17a>
    6ac8:	72 c1       	rjmp	.+740    	; 0x6dae <rc_process_command+0x358>
    6aca:	c8 97       	sbiw	r24, 0x38	; 56
    6acc:	09 f4       	brne	.+2      	; 0x6ad0 <rc_process_command+0x7a>
    6ace:	5a c0       	rjmp	.+180    	; 0x6b84 <rc_process_command+0x12e>
    6ad0:	6e c1       	rjmp	.+732    	; 0x6dae <rc_process_command+0x358>
	{
	case RC_POWER:						//POWER button is pressed
		if(g_power_on == 1)
    6ad2:	80 91 20 01 	lds	r24, 0x0120
    6ad6:	81 30       	cpi	r24, 0x01	; 1
    6ad8:	21 f4       	brne	.+8      	; 0x6ae2 <rc_process_command+0x8c>
		{
			g_power_on = 0;			
    6ada:	10 92 20 01 	sts	0x0120, r1
			MOT_OFF();					//stop the motor
    6ade:	d8 98       	cbi	0x1b, 0	; 27
    6ae0:	04 c0       	rjmp	.+8      	; 0x6aea <rc_process_command+0x94>
		}
		else
		{
			g_power_on = 1;
    6ae2:	81 e0       	ldi	r24, 0x01	; 1
    6ae4:	80 93 20 01 	sts	0x0120, r24
			MOT_ON();					//start the motor
    6ae8:	d8 9a       	sbi	0x1b, 0	; 27
		}
		g_rc_state = STATE_NORMAL;		//set state as NORMAL
    6aea:	10 92 02 01 	sts	0x0102, r1
    6aee:	6c c0       	rjmp	.+216    	; 0x6bc8 <rc_process_command+0x172>
		g_s_rc_state = STATE_DEMO;		//set state as DEMO
		EIMSK &= ~_BV(RC_IN);			//disable RC feature for a while
		break;
	
	case RC_SET:						//SET button is pressed
		if(g_power_on)					//react only if power is on (motor spins)
    6af0:	80 91 20 01 	lds	r24, 0x0120
    6af4:	88 23       	and	r24, r24
    6af6:	09 f4       	brne	.+2      	; 0x6afa <rc_process_command+0xa4>
    6af8:	45 c0       	rjmp	.+138    	; 0x6b84 <rc_process_command+0x12e>
		{
			switch(g_rc_state)			//reaction depends on current state
    6afa:	80 91 02 01 	lds	r24, 0x0102
    6afe:	99 27       	eor	r25, r25
    6b00:	00 97       	sbiw	r24, 0x00	; 0
    6b02:	19 f0       	breq	.+6      	; 0x6b0a <rc_process_command+0xb4>
    6b04:	01 97       	sbiw	r24, 0x01	; 1
    6b06:	91 f0       	breq	.+36     	; 0x6b2c <rc_process_command+0xd6>
    6b08:	4f c1       	rjmp	.+670    	; 0x6da8 <rc_process_command+0x352>
			{
			case STATE_NORMAL:						//in normal state
				g_rc_state = STATE_SETTING;			
    6b0a:	81 e0       	ldi	r24, 0x01	; 1
    6b0c:	80 93 02 01 	sts	0x0102, r24
				g_seconds = 0;						//clear seconds register
    6b10:	10 92 42 01 	sts	0x0142, r1
				g_minutes = (g_minutes / 4) * 4; 	//adjust minute hand
    6b14:	80 91 22 01 	lds	r24, 0x0122
    6b18:	86 95       	lsr	r24
    6b1a:	86 95       	lsr	r24
    6b1c:	99 27       	eor	r25, r25
    6b1e:	88 0f       	add	r24, r24
    6b20:	99 1f       	adc	r25, r25
    6b22:	88 0f       	add	r24, r24
    6b24:	99 1f       	adc	r25, r25
    6b26:	80 93 22 01 	sts	0x0122, r24
				break;
    6b2a:	3e c1       	rjmp	.+636    	; 0x6da8 <rc_process_command+0x352>
			case STATE_SETTING:						//in time setting state
				g_rc_state = STATE_NORMAL;
    6b2c:	10 92 02 01 	sts	0x0102, r1
				g_data_rtc[SECONDS_ADDR] = 0;				//prepare
    6b30:	10 92 44 01 	sts	0x0144, r1
				g_data_rtc[MINUTES_ADDR] = g_minutes / 4;	//data before
    6b34:	80 91 22 01 	lds	r24, 0x0122
    6b38:	86 95       	lsr	r24
    6b3a:	86 95       	lsr	r24
    6b3c:	80 93 45 01 	sts	0x0145, r24
				g_data_rtc[HOURS_ADDR] = g_hours / 20;		//sending it to RTC
    6b40:	80 91 4d 01 	lds	r24, 0x014D
    6b44:	64 e1       	ldi	r22, 0x14	; 20
    6b46:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    6b4a:	80 93 46 01 	sts	0x0146, r24
				
				if(g_data_rtc[HOURS_ADDR] == 0)			//RTC is working in 1-12 am/pm
    6b4e:	88 23       	and	r24, r24
    6b50:	19 f4       	brne	.+6      	; 0x6b58 <rc_process_command+0x102>
					g_data_rtc[HOURS_ADDR] = 12;
    6b52:	8c e0       	ldi	r24, 0x0C	; 12
    6b54:	80 93 46 01 	sts	0x0146, r24
    6b58:	c4 e4       	ldi	r28, 0x44	; 68
    6b5a:	d1 e0       	ldi	r29, 0x01	; 1
    6b5c:	12 e0       	ldi	r17, 0x02	; 2

				for(i = 0; i < 3; i++)
					g_data_rtc[i] = DECtoBCD(g_data_rtc[i]);	//convert to RCD format
    6b5e:	88 81       	ld	r24, Y
    6b60:	0e 94 d8 56 	call	0xadb0 <DECtoBCD>
    6b64:	89 93       	st	Y+, r24
    6b66:	11 50       	subi	r17, 0x01	; 1
    6b68:	17 ff       	sbrs	r17, 7
    6b6a:	f9 cf       	rjmp	.-14     	; 0x6b5e <rc_process_command+0x108>
				
				g_data_rtc[HOURS_ADDR] |= 0b00100000;		//set am/pm mode bit
    6b6c:	80 91 46 01 	lds	r24, 0x0146
    6b70:	80 62       	ori	r24, 0x20	; 32
    6b72:	80 93 46 01 	sts	0x0146, r24
	
				WriteBufI2C(0x00, g_data_rtc, 7);			//send it to RTC
    6b76:	47 e0       	ldi	r20, 0x07	; 7
    6b78:	64 e4       	ldi	r22, 0x44	; 68
    6b7a:	71 e0       	ldi	r23, 0x01	; 1
    6b7c:	80 e0       	ldi	r24, 0x00	; 0
    6b7e:	0e 94 ee 55 	call	0xabdc <WriteBufI2C>
    6b82:	12 c1       	rjmp	.+548    	; 0x6da8 <rc_process_command+0x352>
				break;
			}	
			EIMSK &= ~_BV(RC_IN);							//disable RC feature for a while
			break;
		}
	
	case RC_SET2:						//SET button is pressed
		if(g_power_on)					//react only if power is on (motor spins)
    6b84:	80 91 20 01 	lds	r24, 0x0120
    6b88:	88 23       	and	r24, r24
    6b8a:	11 f1       	breq	.+68     	; 0x6bd0 <rc_process_command+0x17a>
		{
			switch(g_s_rc_state)			//reaction depends on current state
    6b8c:	80 91 00 01 	lds	r24, 0x0100
    6b90:	99 27       	eor	r25, r25
    6b92:	81 30       	cpi	r24, 0x01	; 1
    6b94:	91 05       	cpc	r25, r1
    6b96:	c1 f0       	breq	.+48     	; 0x6bc8 <rc_process_command+0x172>
    6b98:	82 30       	cpi	r24, 0x02	; 2
    6b9a:	91 05       	cpc	r25, r1
    6b9c:	1c f4       	brge	.+6      	; 0x6ba4 <rc_process_command+0x14e>
    6b9e:	89 2b       	or	r24, r25
    6ba0:	69 f0       	breq	.+26     	; 0x6bbc <rc_process_command+0x166>
    6ba2:	02 c1       	rjmp	.+516    	; 0x6da8 <rc_process_command+0x352>
    6ba4:	02 97       	sbiw	r24, 0x02	; 2
    6ba6:	09 f0       	breq	.+2      	; 0x6baa <rc_process_command+0x154>
    6ba8:	ff c0       	rjmp	.+510    	; 0x6da8 <rc_process_command+0x352>
			{
			case STATE_DEMO:						//in time demo state
				g_s_rc_state = STATE_NORMAL;
    6baa:	10 92 00 01 	sts	0x0100, r1
				g_seconds = 0;
    6bae:	10 92 42 01 	sts	0x0142, r1
				g_mode=g_temp_mode ;
    6bb2:	80 91 0b 01 	lds	r24, 0x010B
    6bb6:	80 93 1f 01 	sts	0x011F, r24
				break;	
    6bba:	f6 c0       	rjmp	.+492    	; 0x6da8 <rc_process_command+0x352>
			case STATE_NORMAL:						//in normal state
				g_s_rc_state = STATE_SETTING;
    6bbc:	81 e0       	ldi	r24, 0x01	; 1
    6bbe:	80 93 00 01 	sts	0x0100, r24
				g_seconds = 0;
    6bc2:	10 92 42 01 	sts	0x0142, r1
				//g_mode=g_temp_mode ;
				break;
    6bc6:	f0 c0       	rjmp	.+480    	; 0x6da8 <rc_process_command+0x352>
			case STATE_SETTING:						//clock seconds hand step by 1s
				g_s_rc_state = STATE_DEMO;
    6bc8:	82 e0       	ldi	r24, 0x02	; 2
    6bca:	80 93 00 01 	sts	0x0100, r24
    6bce:	ec c0       	rjmp	.+472    	; 0x6da8 <rc_process_command+0x352>
				//g_mode=g_temp_mode ;
				break;
			}	
			
			EIMSK &= ~_BV(RC_IN);							//disable RC feature for a while
			break;
		}
	
	case RC_PLUS:						//PLUS button is pressed
		if(g_power_on)					//react only if power is on (motor spins)
    6bd0:	80 91 20 01 	lds	r24, 0x0120
    6bd4:	88 23       	and	r24, r24
    6bd6:	09 f4       	brne	.+2      	; 0x6bda <rc_process_command+0x184>
    6bd8:	ea c0       	rjmp	.+468    	; 0x6dae <rc_process_command+0x358>
		{
			switch(g_rc_state)			//reaction depends on current state
    6bda:	80 91 02 01 	lds	r24, 0x0102
    6bde:	99 27       	eor	r25, r25
    6be0:	00 97       	sbiw	r24, 0x00	; 0
    6be2:	19 f0       	breq	.+6      	; 0x6bea <rc_process_command+0x194>
    6be4:	01 97       	sbiw	r24, 0x01	; 1
    6be6:	51 f0       	breq	.+20     	; 0x6bfc <rc_process_command+0x1a6>
    6be8:	e2 c0       	rjmp	.+452    	; 0x6dae <rc_process_command+0x358>
			{
			case STATE_NORMAL:			//in normal state change displaying mode
				if(g_mode == NUMBER_OF_MODES - 1)
    6bea:	80 91 1f 01 	lds	r24, 0x011F
    6bee:	8d 33       	cpi	r24, 0x3D	; 61
    6bf0:	19 f4       	brne	.+6      	; 0x6bf8 <rc_process_command+0x1a2>
					g_mode = 0;
    6bf2:	10 92 1f 01 	sts	0x011F, r1
    6bf6:	d5 c0       	rjmp	.+426    	; 0x6da2 <rc_process_command+0x34c>
				else
					g_mode++;
    6bf8:	8f 5f       	subi	r24, 0xFF	; 255
    6bfa:	65 c0       	rjmp	.+202    	; 0x6cc6 <rc_process_command+0x270>
				g_rc_idle_counter = 2;	
				EIMSK &= ~_BV(RC_IN);			//disable RC feature for a while	
				break;
			case STATE_SETTING:				//in time setting mode
				if(g_rc_hold_counter < 20)	//if PLUS button is not held for a long time
    6bfc:	80 91 0d 01 	lds	r24, 0x010D
    6c00:	20 91 22 01 	lds	r18, 0x0122
    6c04:	84 31       	cpi	r24, 0x14	; 20
    6c06:	c8 f4       	brcc	.+50     	; 0x6c3a <rc_process_command+0x1e4>
				{
					g_minutes += 4;			//move second hand 4 steps forward	
    6c08:	82 2f       	mov	r24, r18
    6c0a:	8c 5f       	subi	r24, 0xFC	; 252
    6c0c:	80 93 22 01 	sts	0x0122, r24
					if(g_minutes == RESOLUTION)	
    6c10:	80 3f       	cpi	r24, 0xF0	; 240
    6c12:	11 f4       	brne	.+4      	; 0x6c18 <rc_process_command+0x1c2>
						g_minutes = 0;
    6c14:	10 92 22 01 	sts	0x0122, r1
					if(g_minutes % 12 == 0) //if divisible
    6c18:	80 91 22 01 	lds	r24, 0x0122
    6c1c:	6c e0       	ldi	r22, 0x0C	; 12
    6c1e:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    6c22:	99 23       	and	r25, r25
    6c24:	09 f0       	breq	.+2      	; 0x6c28 <rc_process_command+0x1d2>
    6c26:	c3 c0       	rjmp	.+390    	; 0x6dae <rc_process_command+0x358>
					{
						g_hours++;			//move hour hand one step forward
    6c28:	80 91 4d 01 	lds	r24, 0x014D
    6c2c:	8f 5f       	subi	r24, 0xFF	; 255
    6c2e:	80 93 4d 01 	sts	0x014D, r24
						if(g_hours == RESOLUTION)
    6c32:	80 3f       	cpi	r24, 0xF0	; 240
    6c34:	09 f0       	breq	.+2      	; 0x6c38 <rc_process_command+0x1e2>
    6c36:	bb c0       	rjmp	.+374    	; 0x6dae <rc_process_command+0x358>
    6c38:	2f c0       	rjmp	.+94     	; 0x6c98 <rc_process_command+0x242>
							g_hours = 0;
					}
				}
				else		//PLUS button is held for a long time
				{
					if(g_minutes % 24)		//while not divisible do the same as above
    6c3a:	82 2f       	mov	r24, r18
    6c3c:	68 e1       	ldi	r22, 0x18	; 24
    6c3e:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    6c42:	99 23       	and	r25, r25
    6c44:	c9 f0       	breq	.+50     	; 0x6c78 <rc_process_command+0x222>
					{
						g_minutes += 4;
    6c46:	82 2f       	mov	r24, r18
    6c48:	8c 5f       	subi	r24, 0xFC	; 252
    6c4a:	80 93 22 01 	sts	0x0122, r24
						if(g_minutes == RESOLUTION)
    6c4e:	80 3f       	cpi	r24, 0xF0	; 240
    6c50:	11 f4       	brne	.+4      	; 0x6c56 <rc_process_command+0x200>
							g_minutes = 0;
    6c52:	10 92 22 01 	sts	0x0122, r1
						if(g_minutes % 12 == 0)
    6c56:	80 91 22 01 	lds	r24, 0x0122
    6c5a:	6c e0       	ldi	r22, 0x0C	; 12
    6c5c:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    6c60:	99 23       	and	r25, r25
    6c62:	09 f0       	breq	.+2      	; 0x6c66 <rc_process_command+0x210>
    6c64:	a4 c0       	rjmp	.+328    	; 0x6dae <rc_process_command+0x358>
						{
							g_hours++;
    6c66:	80 91 4d 01 	lds	r24, 0x014D
    6c6a:	8f 5f       	subi	r24, 0xFF	; 255
    6c6c:	80 93 4d 01 	sts	0x014D, r24
							if(g_hours == RESOLUTION)
    6c70:	80 3f       	cpi	r24, 0xF0	; 240
    6c72:	09 f0       	breq	.+2      	; 0x6c76 <rc_process_command+0x220>
    6c74:	9c c0       	rjmp	.+312    	; 0x6dae <rc_process_command+0x358>
    6c76:	10 c0       	rjmp	.+32     	; 0x6c98 <rc_process_command+0x242>
							g_hours = 0;
						}					
					}
					else
					{
						g_minutes += 24;		//move minute hand 24 step forward
    6c78:	82 2f       	mov	r24, r18
    6c7a:	88 5e       	subi	r24, 0xE8	; 232
    6c7c:	80 93 22 01 	sts	0x0122, r24
						if(g_minutes == RESOLUTION)
    6c80:	80 3f       	cpi	r24, 0xF0	; 240
    6c82:	11 f4       	brne	.+4      	; 0x6c88 <rc_process_command+0x232>
							g_minutes = 0;
    6c84:	90 93 22 01 	sts	0x0122, r25
						g_hours += 2;			//move hour hand 	
    6c88:	80 91 4d 01 	lds	r24, 0x014D
    6c8c:	8e 5f       	subi	r24, 0xFE	; 254
    6c8e:	80 93 4d 01 	sts	0x014D, r24
						if(g_hours == RESOLUTION)
    6c92:	80 3f       	cpi	r24, 0xF0	; 240
    6c94:	09 f0       	breq	.+2      	; 0x6c98 <rc_process_command+0x242>
    6c96:	8b c0       	rjmp	.+278    	; 0x6dae <rc_process_command+0x358>
							g_hours = 0;						
    6c98:	90 93 4d 01 	sts	0x014D, r25
					}
				}
				break;
			}
		}
		break;
    6c9c:	88 c0       	rjmp	.+272    	; 0x6dae <rc_process_command+0x358>
	
	case RC_MINUS:						//MINUS button is pressed
		if(g_power_on)					//react only if power is on (motor spins)
    6c9e:	80 91 20 01 	lds	r24, 0x0120
    6ca2:	88 23       	and	r24, r24
    6ca4:	09 f4       	brne	.+2      	; 0x6ca8 <rc_process_command+0x252>
    6ca6:	61 c0       	rjmp	.+194    	; 0x6d6a <rc_process_command+0x314>
		{
			switch(g_rc_state)
    6ca8:	80 91 02 01 	lds	r24, 0x0102
    6cac:	99 27       	eor	r25, r25
    6cae:	00 97       	sbiw	r24, 0x00	; 0
    6cb0:	19 f0       	breq	.+6      	; 0x6cb8 <rc_process_command+0x262>
    6cb2:	01 97       	sbiw	r24, 0x01	; 1
    6cb4:	59 f0       	breq	.+22     	; 0x6ccc <rc_process_command+0x276>
    6cb6:	7b c0       	rjmp	.+246    	; 0x6dae <rc_process_command+0x358>
			{
			case STATE_NORMAL:			//in normal state change displaying mode
				if(g_mode == 0)
    6cb8:	80 91 1f 01 	lds	r24, 0x011F
    6cbc:	88 23       	and	r24, r24
    6cbe:	11 f4       	brne	.+4      	; 0x6cc4 <rc_process_command+0x26e>
					g_mode = NUMBER_OF_MODES - 1;
    6cc0:	8d e3       	ldi	r24, 0x3D	; 61
    6cc2:	01 c0       	rjmp	.+2      	; 0x6cc6 <rc_process_command+0x270>
				else
					g_mode--;
    6cc4:	81 50       	subi	r24, 0x01	; 1
    6cc6:	80 93 1f 01 	sts	0x011F, r24
    6cca:	6b c0       	rjmp	.+214    	; 0x6da2 <rc_process_command+0x34c>
				g_rc_idle_counter = 2;
				EIMSK &= ~_BV(RC_IN);		//disable RC feature for a while
				break;

			case STATE_SETTING:				//in time setting mode
				if(g_rc_hold_counter < 20)	//if MINUS button is not held for a long time
    6ccc:	80 91 0d 01 	lds	r24, 0x010D
    6cd0:	20 91 22 01 	lds	r18, 0x0122
    6cd4:	84 31       	cpi	r24, 0x14	; 20
    6cd6:	88 f4       	brcc	.+34     	; 0x6cfa <rc_process_command+0x2a4>
				{
					if(g_minutes == 0)
    6cd8:	22 23       	and	r18, r18
    6cda:	19 f4       	brne	.+6      	; 0x6ce2 <rc_process_command+0x28c>
						g_minutes = RESOLUTION;
    6cdc:	80 ef       	ldi	r24, 0xF0	; 240
    6cde:	80 93 22 01 	sts	0x0122, r24
						
					g_minutes -= 4;				//move minute hand 4 steps back
    6ce2:	80 91 22 01 	lds	r24, 0x0122
    6ce6:	84 50       	subi	r24, 0x04	; 4
    6ce8:	80 93 22 01 	sts	0x0122, r24
						
					if(g_minutes % 12 == 0)	//if divisible
    6cec:	6c e0       	ldi	r22, 0x0C	; 12
    6cee:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    6cf2:	99 23       	and	r25, r25
    6cf4:	09 f0       	breq	.+2      	; 0x6cf8 <rc_process_command+0x2a2>
    6cf6:	5b c0       	rjmp	.+182    	; 0x6dae <rc_process_command+0x358>
    6cf8:	16 c0       	rjmp	.+44     	; 0x6d26 <rc_process_command+0x2d0>
					{
						if(g_hours == 0)
							g_hours = RESOLUTION;
						g_hours--;				//move hour hand one step back
					}
				}
				else			//MINUS button is held for a long time
				{
					if(g_minutes % 24)	//while not divisible do the same as above
    6cfa:	82 2f       	mov	r24, r18
    6cfc:	68 e1       	ldi	r22, 0x18	; 24
    6cfe:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    6d02:	99 23       	and	r25, r25
    6d04:	d9 f0       	breq	.+54     	; 0x6d3c <rc_process_command+0x2e6>
					{
						if(g_minutes == 0)
    6d06:	22 23       	and	r18, r18
    6d08:	19 f4       	brne	.+6      	; 0x6d10 <rc_process_command+0x2ba>
							g_minutes = RESOLUTION;
    6d0a:	80 ef       	ldi	r24, 0xF0	; 240
    6d0c:	80 93 22 01 	sts	0x0122, r24
						g_minutes -= 4;
    6d10:	80 91 22 01 	lds	r24, 0x0122
    6d14:	84 50       	subi	r24, 0x04	; 4
    6d16:	80 93 22 01 	sts	0x0122, r24
							
						if(g_minutes % 12 == 0)
    6d1a:	6c e0       	ldi	r22, 0x0C	; 12
    6d1c:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    6d20:	99 23       	and	r25, r25
    6d22:	09 f0       	breq	.+2      	; 0x6d26 <rc_process_command+0x2d0>
    6d24:	44 c0       	rjmp	.+136    	; 0x6dae <rc_process_command+0x358>
						{
							if(g_hours == 0)
    6d26:	80 91 4d 01 	lds	r24, 0x014D
    6d2a:	88 23       	and	r24, r24
    6d2c:	19 f4       	brne	.+6      	; 0x6d34 <rc_process_command+0x2de>
								g_hours = RESOLUTION;	
    6d2e:	80 ef       	ldi	r24, 0xF0	; 240
    6d30:	80 93 4d 01 	sts	0x014D, r24
							g_hours--;		
    6d34:	80 91 4d 01 	lds	r24, 0x014D
    6d38:	81 50       	subi	r24, 0x01	; 1
    6d3a:	14 c0       	rjmp	.+40     	; 0x6d64 <rc_process_command+0x30e>
						}					
					}
					else
					{
						if(g_minutes == 0)
    6d3c:	22 23       	and	r18, r18
    6d3e:	19 f4       	brne	.+6      	; 0x6d46 <rc_process_command+0x2f0>
							g_minutes = RESOLUTION;
    6d40:	80 ef       	ldi	r24, 0xF0	; 240
    6d42:	80 93 22 01 	sts	0x0122, r24
						g_minutes -= 24;	//move minute hand 24 steps back
    6d46:	80 91 22 01 	lds	r24, 0x0122
    6d4a:	88 51       	subi	r24, 0x18	; 24
    6d4c:	80 93 22 01 	sts	0x0122, r24
						
						if(g_hours == 0)
    6d50:	80 91 4d 01 	lds	r24, 0x014D
    6d54:	88 23       	and	r24, r24
    6d56:	19 f4       	brne	.+6      	; 0x6d5e <rc_process_command+0x308>
							g_hours = RESOLUTION;	
    6d58:	80 ef       	ldi	r24, 0xF0	; 240
    6d5a:	80 93 4d 01 	sts	0x014D, r24
					 	
						g_hours -= 2;		//move hour hand 2 steps back
    6d5e:	80 91 4d 01 	lds	r24, 0x014D
    6d62:	82 50       	subi	r24, 0x02	; 2
    6d64:	80 93 4d 01 	sts	0x014D, r24
					}
				}			
				break;
			}	
			break;
    6d68:	22 c0       	rjmp	.+68     	; 0x6dae <rc_process_command+0x358>
		}
	
	case RC_VPLUS:						//PLUS button is pressed
		if(g_power_on)					//react only if power is on (motor spins)
    6d6a:	80 91 20 01 	lds	r24, 0x0120
    6d6e:	88 23       	and	r24, r24
    6d70:	f1 f0       	breq	.+60     	; 0x6dae <rc_process_command+0x358>
		{
				if(g_hh_mode == NUMBER_OF_HH_MODES - 1)
    6d72:	80 91 35 01 	lds	r24, 0x0135
    6d76:	8a 30       	cpi	r24, 0x0A	; 10
    6d78:	19 f4       	brne	.+6      	; 0x6d80 <rc_process_command+0x32a>
					g_hh_mode = 0;
    6d7a:	10 92 35 01 	sts	0x0135, r1
    6d7e:	11 c0       	rjmp	.+34     	; 0x6da2 <rc_process_command+0x34c>
				else
					g_hh_mode++;
    6d80:	8f 5f       	subi	r24, 0xFF	; 255
    6d82:	80 93 35 01 	sts	0x0135, r24
    6d86:	0d c0       	rjmp	.+26     	; 0x6da2 <rc_process_command+0x34c>
				g_rc_idle_counter = 2;	
				EIMSK &= ~_BV(RC_IN);			//disable RC feature for a while	
		}
		break;
	
	case RC_VMINUS:						//MINUS button is pressed
		if(g_power_on)					//react only if power is on (motor spins)
    6d88:	80 91 20 01 	lds	r24, 0x0120
    6d8c:	88 23       	and	r24, r24
    6d8e:	79 f0       	breq	.+30     	; 0x6dae <rc_process_command+0x358>
		{
				if(g_mh_mode == 0)
    6d90:	80 91 0c 01 	lds	r24, 0x010C
    6d94:	88 23       	and	r24, r24
    6d96:	11 f4       	brne	.+4      	; 0x6d9c <rc_process_command+0x346>
					g_mh_mode = NUMBER_OF_MH_MODES - 1;
    6d98:	8a e0       	ldi	r24, 0x0A	; 10
    6d9a:	01 c0       	rjmp	.+2      	; 0x6d9e <rc_process_command+0x348>
				else
					g_mh_mode--;
    6d9c:	81 50       	subi	r24, 0x01	; 1
    6d9e:	80 93 0c 01 	sts	0x010C, r24
				g_rc_idle_counter = 2;
    6da2:	82 e0       	ldi	r24, 0x02	; 2
    6da4:	80 93 2e 01 	sts	0x012E, r24
				EIMSK &= ~_BV(RC_IN);		//disable RC feature for a while
    6da8:	89 b7       	in	r24, 0x39	; 57
    6daa:	8f 7d       	andi	r24, 0xDF	; 223
    6dac:	89 bf       	out	0x39, r24	; 57
    6dae:	df 91       	pop	r29
    6db0:	cf 91       	pop	r28
    6db2:	1f 91       	pop	r17
    6db4:	08 95       	ret

00006db6 <__vector_30>:
		}
		break;
	}
}

//################## UART receive completed interrupt routine ###############
ISR(USART1_RX_vect)
{
    6db6:	1f 92       	push	r1
    6db8:	0f 92       	push	r0
    6dba:	0f b6       	in	r0, 0x3f	; 63
    6dbc:	0f 92       	push	r0
    6dbe:	11 24       	eor	r1, r1
    6dc0:	2f 93       	push	r18
    6dc2:	8f 93       	push	r24
    6dc4:	9f 93       	push	r25
    6dc6:	ef 93       	push	r30
    6dc8:	ff 93       	push	r31
	g_uart_buffer[g_uart_counter] = UDR1;
    6dca:	90 91 34 01 	lds	r25, 0x0134
    6dce:	e9 2f       	mov	r30, r25
    6dd0:	ff 27       	eor	r31, r31
    6dd2:	eb 5e       	subi	r30, 0xEB	; 235
    6dd4:	fe 4f       	sbci	r31, 0xFE	; 254
    6dd6:	80 91 9c 00 	lds	r24, 0x009C
    6dda:	80 83       	st	Z, r24
	g_uart_counter++;
    6ddc:	89 2f       	mov	r24, r25
    6dde:	8f 5f       	subi	r24, 0xFF	; 255
    6de0:	80 93 34 01 	sts	0x0134, r24
	
	//if string 'RESET' is received enable the watchdog and wait for the chip reset
	//this feature is used to programm ATMEGA via bootloader
	//bootloader used in this project (MegaLoad) can be downloaded from http://www.microsyl.com/
	if(g_uart_counter == 5)
    6de4:	85 30       	cpi	r24, 0x05	; 5
    6de6:	f1 f4       	brne	.+60     	; 0x6e24 <__vector_30+0x6e>
	{
		if( g_uart_buffer[0] == 'R' &&
    6de8:	80 91 15 01 	lds	r24, 0x0115
    6dec:	82 35       	cpi	r24, 0x52	; 82
    6dee:	d1 f4       	brne	.+52     	; 0x6e24 <__vector_30+0x6e>
    6df0:	80 91 16 01 	lds	r24, 0x0116
    6df4:	85 34       	cpi	r24, 0x45	; 69
    6df6:	b1 f4       	brne	.+44     	; 0x6e24 <__vector_30+0x6e>
    6df8:	80 91 17 01 	lds	r24, 0x0117
    6dfc:	83 35       	cpi	r24, 0x53	; 83
    6dfe:	91 f4       	brne	.+36     	; 0x6e24 <__vector_30+0x6e>
    6e00:	80 91 18 01 	lds	r24, 0x0118
    6e04:	85 34       	cpi	r24, 0x45	; 69
    6e06:	71 f4       	brne	.+28     	; 0x6e24 <__vector_30+0x6e>
    6e08:	80 91 19 01 	lds	r24, 0x0119
    6e0c:	84 35       	cpi	r24, 0x54	; 84
    6e0e:	51 f4       	brne	.+20     	; 0x6e24 <__vector_30+0x6e>
			g_uart_buffer[1] == 'E' &&
			g_uart_buffer[2] == 'S' &&
			g_uart_buffer[3] == 'E' &&
			g_uart_buffer[4] == 'T')
		{
			wdt_enable(WDTO_120MS);
    6e10:	88 e1       	ldi	r24, 0x18	; 24
    6e12:	90 e0       	ldi	r25, 0x00	; 0
    6e14:	2b e0       	ldi	r18, 0x0B	; 11
    6e16:	0f b6       	in	r0, 0x3f	; 63
    6e18:	f8 94       	cli
    6e1a:	a8 95       	wdr
    6e1c:	81 bd       	out	0x21, r24	; 33
    6e1e:	0f be       	out	0x3f, r0	; 63
    6e20:	21 bd       	out	0x21, r18	; 33
			while(1);
    6e22:	ff cf       	rjmp	.-2      	; 0x6e22 <__vector_30+0x6c>
    6e24:	ff 91       	pop	r31
    6e26:	ef 91       	pop	r30
    6e28:	9f 91       	pop	r25
    6e2a:	8f 91       	pop	r24
    6e2c:	2f 91       	pop	r18
    6e2e:	0f 90       	pop	r0
    6e30:	0f be       	out	0x3f, r0	; 63
    6e32:	0f 90       	pop	r0
    6e34:	1f 90       	pop	r1
    6e36:	18 95       	reti

00006e38 <__vector_25>:
		}
	}
}
 

//################# TIMER3 input capture interrupt routine #######################
//when the slit in the disc comes next to the detector this interrupt is called
ISR(TIMER3_CAPT_vect)
{
    6e38:	1f 92       	push	r1
    6e3a:	0f 92       	push	r0
    6e3c:	0f b6       	in	r0, 0x3f	; 63
    6e3e:	0f 92       	push	r0
    6e40:	11 24       	eor	r1, r1
    6e42:	2f 93       	push	r18
    6e44:	5f 93       	push	r21
    6e46:	6f 93       	push	r22
    6e48:	7f 93       	push	r23
    6e4a:	8f 93       	push	r24
    6e4c:	9f 93       	push	r25
    6e4e:	af 93       	push	r26
    6e50:	bf 93       	push	r27
	TCNT3 = 0;	//clear timer
    6e52:	10 92 89 00 	sts	0x0089, r1
    6e56:	10 92 88 00 	sts	0x0088, r1
	
	if(((ICR3 > 34000) || (ETIFR & _BV(TOV3))) || !g_power_on) //if the disc spins to slow 
    6e5a:	80 91 80 00 	lds	r24, 0x0080
    6e5e:	90 91 81 00 	lds	r25, 0x0081
    6e62:	81 5d       	subi	r24, 0xD1	; 209
    6e64:	94 48       	sbci	r25, 0x84	; 132
    6e66:	40 f4       	brcc	.+16     	; 0x6e78 <__vector_25+0x40>
    6e68:	80 91 7c 00 	lds	r24, 0x007C
    6e6c:	82 fd       	sbrc	r24, 2
    6e6e:	04 c0       	rjmp	.+8      	; 0x6e78 <__vector_25+0x40>
    6e70:	80 91 20 01 	lds	r24, 0x0120
    6e74:	88 23       	and	r24, r24
    6e76:	81 f4       	brne	.+32     	; 0x6e98 <__vector_25+0x60>
	{
		ETIFR |= _BV(TOV3);						//clear overflow flag
    6e78:	80 91 7c 00 	lds	r24, 0x007C
    6e7c:	84 60       	ori	r24, 0x04	; 4
    6e7e:	80 93 7c 00 	sts	0x007C, r24
		
		PWM_RED = PWM_TOP;						//}
    6e82:	87 e2       	ldi	r24, 0x27	; 39
    6e84:	90 e0       	ldi	r25, 0x00	; 0
    6e86:	9b bd       	out	0x2b, r25	; 43
    6e88:	8a bd       	out	0x2a, r24	; 42
		PWM_GREEN = PWM_TOP;					//}	and turn off all of the diodes
    6e8a:	99 bd       	out	0x29, r25	; 41
    6e8c:	88 bd       	out	0x28, r24	; 40
		PWM_BLUE = PWM_TOP;						//}
    6e8e:	90 93 79 00 	sts	0x0079, r25
    6e92:	80 93 78 00 	sts	0x0078, r24
		return;								//leave this routine
    6e96:	1f c0       	rjmp	.+62     	; 0x6ed6 <__vector_25+0x9e>
	}
	
	OCR0 = ICR3/RESOLUTION;						//compute time for one step
    6e98:	80 91 80 00 	lds	r24, 0x0080
    6e9c:	90 91 81 00 	lds	r25, 0x0081
    6ea0:	60 ef       	ldi	r22, 0xF0	; 240
    6ea2:	70 e0       	ldi	r23, 0x00	; 0
    6ea4:	0e 94 f7 56 	call	0xadee <__udivmodhi4>
    6ea8:	61 bf       	out	0x31, r22	; 49
	g_reminder = ICR3 - (OCR0*RESOLUTION);		//compute reminder
    6eaa:	80 91 80 00 	lds	r24, 0x0080
    6eae:	90 91 81 00 	lds	r25, 0x0081
    6eb2:	28 2f       	mov	r18, r24
    6eb4:	91 b7       	in	r25, 0x31	; 49
    6eb6:	80 ef       	ldi	r24, 0xF0	; 240
    6eb8:	98 9f       	mul	r25, r24
    6eba:	c0 01       	movw	r24, r0
    6ebc:	11 24       	eor	r1, r1
    6ebe:	28 1b       	sub	r18, r24
    6ec0:	20 93 24 01 	sts	0x0124, r18
	//g_position = 3*RESOLUTION/4;						//set proper position (12 o'clock=0, 6 o'clock = RESOLUTION/2)
	g_position = RESOLUTION/4;						//set proper position (12 o'clock=0, 6 o'clock = RESOLUTION/2)
    6ec4:	8c e3       	ldi	r24, 0x3C	; 60
    6ec6:	80 93 40 01 	sts	0x0140, r24
	TCNT0 = OCR0 - 2;							//timer0 compare interrupt must be called as soon as possible
    6eca:	81 b7       	in	r24, 0x31	; 49
    6ecc:	82 50       	subi	r24, 0x02	; 2
    6ece:	82 bf       	out	0x32, r24	; 50
	TIMSK |= _BV(OCIE0);						//enable timer0 compare interrupt
    6ed0:	87 b7       	in	r24, 0x37	; 55
    6ed2:	82 60       	ori	r24, 0x02	; 2
    6ed4:	87 bf       	out	0x37, r24	; 55
    6ed6:	bf 91       	pop	r27
    6ed8:	af 91       	pop	r26
    6eda:	9f 91       	pop	r25
    6edc:	8f 91       	pop	r24
    6ede:	7f 91       	pop	r23
    6ee0:	6f 91       	pop	r22
    6ee2:	5f 91       	pop	r21
    6ee4:	2f 91       	pop	r18
    6ee6:	0f 90       	pop	r0
    6ee8:	0f be       	out	0x3f, r0	; 63
    6eea:	0f 90       	pop	r0
    6eec:	1f 90       	pop	r1
    6eee:	18 95       	reti

00006ef0 <__vector_15>:
}

//################# TIMER0 compare interupt routine #######################
//this routine is used to display all of the patterns you see
ISR(TIMER0_COMP_vect)
{
    6ef0:	1f 92       	push	r1
    6ef2:	0f 92       	push	r0
    6ef4:	0f b6       	in	r0, 0x3f	; 63
    6ef6:	0f 92       	push	r0
    6ef8:	11 24       	eor	r1, r1
    6efa:	2f 93       	push	r18
    6efc:	3f 93       	push	r19
    6efe:	4f 93       	push	r20
    6f00:	5f 93       	push	r21
    6f02:	6f 93       	push	r22
    6f04:	7f 93       	push	r23
    6f06:	8f 93       	push	r24
    6f08:	9f 93       	push	r25
    6f0a:	af 93       	push	r26
    6f0c:	bf 93       	push	r27
    6f0e:	cf 93       	push	r28
    6f10:	ef 93       	push	r30
    6f12:	ff 93       	push	r31
	uint8_t tmp_red = PWM_TOP + 1,
			tmp_green = PWM_TOP + 1,
			tmp_blue = PWM_TOP + 1;		//temporary color registers
			
	//if(g_position == 3*RESOLUTION/4 - 1)	  	//if it's last interrupt in the cycle
	if(g_position == RESOLUTION/4 - 1)	  	//if it's last interrupt in the cycle
    6f14:	90 91 40 01 	lds	r25, 0x0140
    6f18:	9b 33       	cpi	r25, 0x3B	; 59
    6f1a:	19 f4       	brne	.+6      	; 0x6f22 <__vector_15+0x32>
		TIMSK &= ~_BV(OCIE0);			//disable this interrupt
    6f1c:	87 b7       	in	r24, 0x37	; 55
    6f1e:	8d 7f       	andi	r24, 0xFD	; 253
    6f20:	87 bf       	out	0x37, r24	; 55
	
	if(g_reminder == 0)	//if reminder becomes zero, decrease output compare register
    6f22:	c0 91 24 01 	lds	r28, 0x0124
    6f26:	cc 23       	and	r28, r28
    6f28:	19 f4       	brne	.+6      	; 0x6f30 <__vector_15+0x40>
		OCR0--;				//with this trick image becomes more solid, no jitter can be seen
    6f2a:	81 b7       	in	r24, 0x31	; 49
    6f2c:	81 50       	subi	r24, 0x01	; 1
    6f2e:	81 bf       	out	0x31, r24	; 49
		
	if(g_position == RESOLUTION) //clear if overflow	
    6f30:	90 3f       	cpi	r25, 0xF0	; 240
    6f32:	11 f4       	brne	.+4      	; 0x6f38 <__vector_15+0x48>
		g_position = 0;
    6f34:	10 92 40 01 	sts	0x0140, r1
		
	//if temporary registers are not updated
	
		if ((g_rc_state == STATE_NORMAL) && (seconds_hand) && !((g_mode==40) && radioactivity) && !((pgm_read_byte(&gm_background[1][GREEN][g_speed6rev+g_position]) == 0x00) && ((g_mode == 42) || (g_mode == 43)))) //do not display second hand if time is being set
    6f38:	60 91 02 01 	lds	r22, 0x0102
    6f3c:	66 23       	and	r22, r22
    6f3e:	09 f0       	breq	.+2      	; 0x6f42 <__vector_15+0x52>
    6f40:	2f c1       	rjmp	.+606    	; 0x71a0 <__vector_15+0x2b0>
    6f42:	80 91 25 01 	lds	r24, 0x0125
    6f46:	88 23       	and	r24, r24
    6f48:	09 f4       	brne	.+2      	; 0x6f4c <__vector_15+0x5c>
    6f4a:	2a c1       	rjmp	.+596    	; 0x71a0 <__vector_15+0x2b0>
    6f4c:	20 91 1f 01 	lds	r18, 0x011F
    6f50:	28 32       	cpi	r18, 0x28	; 40
    6f52:	29 f4       	brne	.+10     	; 0x6f5e <__vector_15+0x6e>
    6f54:	80 91 41 01 	lds	r24, 0x0141
    6f58:	88 23       	and	r24, r24
    6f5a:	09 f0       	breq	.+2      	; 0x6f5e <__vector_15+0x6e>
    6f5c:	21 c1       	rjmp	.+578    	; 0x71a0 <__vector_15+0x2b0>
    6f5e:	90 91 27 01 	lds	r25, 0x0127
    6f62:	80 91 40 01 	lds	r24, 0x0140
    6f66:	48 2f       	mov	r20, r24
    6f68:	55 27       	eor	r21, r21
    6f6a:	fa 01       	movw	r30, r20
    6f6c:	e9 0f       	add	r30, r25
    6f6e:	f1 1d       	adc	r31, r1
    6f70:	e3 5e       	subi	r30, 0xE3	; 227
    6f72:	f5 4f       	sbci	r31, 0xF5	; 245
    6f74:	84 91       	lpm	r24, Z
    6f76:	88 23       	and	r24, r24
    6f78:	21 f4       	brne	.+8      	; 0x6f82 <__vector_15+0x92>
    6f7a:	2a 52       	subi	r18, 0x2A	; 42
    6f7c:	22 30       	cpi	r18, 0x02	; 2
    6f7e:	08 f4       	brcc	.+2      	; 0x6f82 <__vector_15+0x92>
    6f80:	0f c1       	rjmp	.+542    	; 0x71a0 <__vector_15+0x2b0>
			{ 
				switch(g_position - g_seconds) 	//compute which part of second hand should be now displayed
    6f82:	80 91 42 01 	lds	r24, 0x0142
    6f86:	48 1b       	sub	r20, r24
    6f88:	51 09       	sbc	r21, r1
    6f8a:	ca 01       	movw	r24, r20
    6f8c:	41 15       	cp	r20, r1
    6f8e:	51 05       	cpc	r21, r1
    6f90:	09 f4       	brne	.+2      	; 0x6f94 <__vector_15+0xa4>
    6f92:	9f c0       	rjmp	.+318    	; 0x70d2 <__vector_15+0x1e2>
    6f94:	14 16       	cp	r1, r20
    6f96:	15 06       	cpc	r1, r21
    6f98:	74 f1       	brlt	.+92     	; 0x6ff6 <__vector_15+0x106>
    6f9a:	2f ef       	ldi	r18, 0xFF	; 255
    6f9c:	44 31       	cpi	r20, 0x14	; 20
    6f9e:	52 07       	cpc	r21, r18
    6fa0:	09 f4       	brne	.+2      	; 0x6fa4 <__vector_15+0xb4>
    6fa2:	e3 c0       	rjmp	.+454    	; 0x716a <__vector_15+0x27a>
    6fa4:	3f ef       	ldi	r19, 0xFF	; 255
    6fa6:	45 31       	cpi	r20, 0x15	; 21
    6fa8:	53 07       	cpc	r21, r19
    6faa:	7c f4       	brge	.+30     	; 0x6fca <__vector_15+0xda>
    6fac:	4f ef       	ldi	r20, 0xFF	; 255
    6fae:	82 31       	cpi	r24, 0x12	; 18
    6fb0:	94 07       	cpc	r25, r20
    6fb2:	09 f4       	brne	.+2      	; 0x6fb6 <__vector_15+0xc6>
    6fb4:	b4 c0       	rjmp	.+360    	; 0x711e <__vector_15+0x22e>
    6fb6:	5f ef       	ldi	r21, 0xFF	; 255
    6fb8:	83 31       	cpi	r24, 0x13	; 19
    6fba:	95 07       	cpc	r25, r21
    6fbc:	0c f0       	brlt	.+2      	; 0x6fc0 <__vector_15+0xd0>
    6fbe:	c2 c0       	rjmp	.+388    	; 0x7144 <__vector_15+0x254>
    6fc0:	81 51       	subi	r24, 0x11	; 17
    6fc2:	9f 4f       	sbci	r25, 0xFF	; 255
    6fc4:	09 f4       	brne	.+2      	; 0x6fc8 <__vector_15+0xd8>
    6fc6:	98 c0       	rjmp	.+304    	; 0x70f8 <__vector_15+0x208>
    6fc8:	eb c0       	rjmp	.+470    	; 0x71a0 <__vector_15+0x2b0>
    6fca:	ef ef       	ldi	r30, 0xFF	; 255
    6fcc:	4d 3f       	cpi	r20, 0xFD	; 253
    6fce:	5e 07       	cpc	r21, r30
    6fd0:	09 f4       	brne	.+2      	; 0x6fd4 <__vector_15+0xe4>
    6fd2:	46 c0       	rjmp	.+140    	; 0x7060 <__vector_15+0x170>
    6fd4:	ff ef       	ldi	r31, 0xFF	; 255
    6fd6:	4e 3f       	cpi	r20, 0xFE	; 254
    6fd8:	5f 07       	cpc	r21, r31
    6fda:	24 f4       	brge	.+8      	; 0x6fe4 <__vector_15+0xf4>
    6fdc:	4c 5f       	subi	r20, 0xFC	; 252
    6fde:	5f 4f       	sbci	r21, 0xFF	; 255
    6fe0:	61 f1       	breq	.+88     	; 0x703a <__vector_15+0x14a>
    6fe2:	de c0       	rjmp	.+444    	; 0x71a0 <__vector_15+0x2b0>
    6fe4:	4e 5f       	subi	r20, 0xFE	; 254
    6fe6:	5f 4f       	sbci	r21, 0xFF	; 255
    6fe8:	09 f4       	brne	.+2      	; 0x6fec <__vector_15+0xfc>
    6fea:	4d c0       	rjmp	.+154    	; 0x7086 <__vector_15+0x196>
    6fec:	8f 5f       	subi	r24, 0xFF	; 255
    6fee:	9f 4f       	sbci	r25, 0xFF	; 255
    6ff0:	09 f4       	brne	.+2      	; 0x6ff4 <__vector_15+0x104>
    6ff2:	5c c0       	rjmp	.+184    	; 0x70ac <__vector_15+0x1bc>
    6ff4:	d5 c0       	rjmp	.+426    	; 0x71a0 <__vector_15+0x2b0>
    6ff6:	44 30       	cpi	r20, 0x04	; 4
    6ff8:	51 05       	cpc	r21, r1
    6ffa:	09 f4       	brne	.+2      	; 0x6ffe <__vector_15+0x10e>
    6ffc:	b6 c0       	rjmp	.+364    	; 0x716a <__vector_15+0x27a>
    6ffe:	45 30       	cpi	r20, 0x05	; 5
    7000:	51 05       	cpc	r21, r1
    7002:	4c f4       	brge	.+18     	; 0x7016 <__vector_15+0x126>
    7004:	42 30       	cpi	r20, 0x02	; 2
    7006:	51 05       	cpc	r21, r1
    7008:	09 f4       	brne	.+2      	; 0x700c <__vector_15+0x11c>
    700a:	89 c0       	rjmp	.+274    	; 0x711e <__vector_15+0x22e>
    700c:	43 30       	cpi	r20, 0x03	; 3
    700e:	51 05       	cpc	r21, r1
    7010:	0c f0       	brlt	.+2      	; 0x7014 <__vector_15+0x124>
    7012:	98 c0       	rjmp	.+304    	; 0x7144 <__vector_15+0x254>
    7014:	71 c0       	rjmp	.+226    	; 0x70f8 <__vector_15+0x208>
    7016:	4d 3e       	cpi	r20, 0xED	; 237
    7018:	51 05       	cpc	r21, r1
    701a:	11 f1       	breq	.+68     	; 0x7060 <__vector_15+0x170>
    701c:	4e 3e       	cpi	r20, 0xEE	; 238
    701e:	51 05       	cpc	r21, r1
    7020:	24 f4       	brge	.+8      	; 0x702a <__vector_15+0x13a>
    7022:	4c 3e       	cpi	r20, 0xEC	; 236
    7024:	51 05       	cpc	r21, r1
    7026:	49 f0       	breq	.+18     	; 0x703a <__vector_15+0x14a>
    7028:	bb c0       	rjmp	.+374    	; 0x71a0 <__vector_15+0x2b0>
    702a:	4e 3e       	cpi	r20, 0xEE	; 238
    702c:	51 05       	cpc	r21, r1
    702e:	59 f1       	breq	.+86     	; 0x7086 <__vector_15+0x196>
    7030:	4f 3e       	cpi	r20, 0xEF	; 239
    7032:	51 05       	cpc	r21, r1
    7034:	09 f4       	brne	.+2      	; 0x7038 <__vector_15+0x148>
    7036:	3a c0       	rjmp	.+116    	; 0x70ac <__vector_15+0x1bc>
    7038:	b3 c0       	rjmp	.+358    	; 0x71a0 <__vector_15+0x2b0>
				{							//and read color value from flash memory
				case -4:
					case RESOLUTION - 4:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_mh_mode][RED][0]);
    703a:	90 91 0c 01 	lds	r25, 0x010C
    703e:	8b e1       	ldi	r24, 0x1B	; 27
    7040:	98 9f       	mul	r25, r24
    7042:	c0 01       	movw	r24, r0
    7044:	11 24       	eor	r1, r1
    7046:	fc 01       	movw	r30, r24
    7048:	ec 5a       	subi	r30, 0xAC	; 172
    704a:	fc 4f       	sbci	r31, 0xFC	; 252
    704c:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_mh_mode][GREEN][0]);
    704e:	fc 01       	movw	r30, r24
    7050:	e3 5a       	subi	r30, 0xA3	; 163
    7052:	fc 4f       	sbci	r31, 0xFC	; 252
    7054:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_mh_mode][BLUE][0]);
    7056:	fc 01       	movw	r30, r24
    7058:	ea 59       	subi	r30, 0x9A	; 154
    705a:	fc 4f       	sbci	r31, 0xFC	; 252
    705c:	24 91       	lpm	r18, Z
					break;
    705e:	97 c0       	rjmp	.+302    	; 0x718e <__vector_15+0x29e>
				case -3:
					case RESOLUTION - 3:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_mh_mode][RED][1]);
    7060:	90 91 0c 01 	lds	r25, 0x010C
    7064:	8b e1       	ldi	r24, 0x1B	; 27
    7066:	98 9f       	mul	r25, r24
    7068:	c0 01       	movw	r24, r0
    706a:	11 24       	eor	r1, r1
    706c:	fc 01       	movw	r30, r24
    706e:	eb 5a       	subi	r30, 0xAB	; 171
    7070:	fc 4f       	sbci	r31, 0xFC	; 252
    7072:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_mh_mode][GREEN][1]);
    7074:	fc 01       	movw	r30, r24
    7076:	e2 5a       	subi	r30, 0xA2	; 162
    7078:	fc 4f       	sbci	r31, 0xFC	; 252
    707a:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_mh_mode][BLUE][1]);
    707c:	fc 01       	movw	r30, r24
    707e:	e9 59       	subi	r30, 0x99	; 153
    7080:	fc 4f       	sbci	r31, 0xFC	; 252
    7082:	24 91       	lpm	r18, Z
					break;
    7084:	84 c0       	rjmp	.+264    	; 0x718e <__vector_15+0x29e>
				case -2:
					case RESOLUTION - 2:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_mh_mode][RED][2]);
    7086:	90 91 0c 01 	lds	r25, 0x010C
    708a:	8b e1       	ldi	r24, 0x1B	; 27
    708c:	98 9f       	mul	r25, r24
    708e:	c0 01       	movw	r24, r0
    7090:	11 24       	eor	r1, r1
    7092:	fc 01       	movw	r30, r24
    7094:	ea 5a       	subi	r30, 0xAA	; 170
    7096:	fc 4f       	sbci	r31, 0xFC	; 252
    7098:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_mh_mode][GREEN][2]);
    709a:	fc 01       	movw	r30, r24
    709c:	e1 5a       	subi	r30, 0xA1	; 161
    709e:	fc 4f       	sbci	r31, 0xFC	; 252
    70a0:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_mh_mode][BLUE][2]);
    70a2:	fc 01       	movw	r30, r24
    70a4:	e8 59       	subi	r30, 0x98	; 152
    70a6:	fc 4f       	sbci	r31, 0xFC	; 252
    70a8:	24 91       	lpm	r18, Z
					break;
    70aa:	71 c0       	rjmp	.+226    	; 0x718e <__vector_15+0x29e>
				case -1:
					case RESOLUTION - 1:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_mh_mode][RED][3]);
    70ac:	90 91 0c 01 	lds	r25, 0x010C
    70b0:	8b e1       	ldi	r24, 0x1B	; 27
    70b2:	98 9f       	mul	r25, r24
    70b4:	c0 01       	movw	r24, r0
    70b6:	11 24       	eor	r1, r1
    70b8:	fc 01       	movw	r30, r24
    70ba:	e9 5a       	subi	r30, 0xA9	; 169
    70bc:	fc 4f       	sbci	r31, 0xFC	; 252
    70be:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_mh_mode][GREEN][3]);
    70c0:	fc 01       	movw	r30, r24
    70c2:	e0 5a       	subi	r30, 0xA0	; 160
    70c4:	fc 4f       	sbci	r31, 0xFC	; 252
    70c6:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_mh_mode][BLUE][3]);
    70c8:	fc 01       	movw	r30, r24
    70ca:	e7 59       	subi	r30, 0x97	; 151
    70cc:	fc 4f       	sbci	r31, 0xFC	; 252
    70ce:	24 91       	lpm	r18, Z
					break;
    70d0:	5e c0       	rjmp	.+188    	; 0x718e <__vector_15+0x29e>
				case 0:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_mh_mode][RED][4]);
    70d2:	90 91 0c 01 	lds	r25, 0x010C
    70d6:	8b e1       	ldi	r24, 0x1B	; 27
    70d8:	98 9f       	mul	r25, r24
    70da:	c0 01       	movw	r24, r0
    70dc:	11 24       	eor	r1, r1
    70de:	fc 01       	movw	r30, r24
    70e0:	e8 5a       	subi	r30, 0xA8	; 168
    70e2:	fc 4f       	sbci	r31, 0xFC	; 252
    70e4:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_mh_mode][GREEN][4]);
    70e6:	fc 01       	movw	r30, r24
    70e8:	ef 59       	subi	r30, 0x9F	; 159
    70ea:	fc 4f       	sbci	r31, 0xFC	; 252
    70ec:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_mh_mode][BLUE][4]);
    70ee:	fc 01       	movw	r30, r24
    70f0:	e6 59       	subi	r30, 0x96	; 150
    70f2:	fc 4f       	sbci	r31, 0xFC	; 252
    70f4:	24 91       	lpm	r18, Z
					break;
    70f6:	4b c0       	rjmp	.+150    	; 0x718e <__vector_15+0x29e>
				case 1:
					case -RESOLUTION + 1:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_mh_mode][RED][5]);
    70f8:	90 91 0c 01 	lds	r25, 0x010C
    70fc:	8b e1       	ldi	r24, 0x1B	; 27
    70fe:	98 9f       	mul	r25, r24
    7100:	c0 01       	movw	r24, r0
    7102:	11 24       	eor	r1, r1
    7104:	fc 01       	movw	r30, r24
    7106:	e7 5a       	subi	r30, 0xA7	; 167
    7108:	fc 4f       	sbci	r31, 0xFC	; 252
    710a:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_mh_mode][GREEN][5]);
    710c:	fc 01       	movw	r30, r24
    710e:	ee 59       	subi	r30, 0x9E	; 158
    7110:	fc 4f       	sbci	r31, 0xFC	; 252
    7112:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_mh_mode][BLUE][5]);	
    7114:	fc 01       	movw	r30, r24
    7116:	e5 59       	subi	r30, 0x95	; 149
    7118:	fc 4f       	sbci	r31, 0xFC	; 252
    711a:	24 91       	lpm	r18, Z
					break;
    711c:	38 c0       	rjmp	.+112    	; 0x718e <__vector_15+0x29e>
				case 2:
					case -RESOLUTION + 2:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_mh_mode][RED][6]);
    711e:	90 91 0c 01 	lds	r25, 0x010C
    7122:	8b e1       	ldi	r24, 0x1B	; 27
    7124:	98 9f       	mul	r25, r24
    7126:	c0 01       	movw	r24, r0
    7128:	11 24       	eor	r1, r1
    712a:	fc 01       	movw	r30, r24
    712c:	e6 5a       	subi	r30, 0xA6	; 166
    712e:	fc 4f       	sbci	r31, 0xFC	; 252
    7130:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_mh_mode][GREEN][6]);
    7132:	fc 01       	movw	r30, r24
    7134:	ed 59       	subi	r30, 0x9D	; 157
    7136:	fc 4f       	sbci	r31, 0xFC	; 252
    7138:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_mh_mode][BLUE][6]);	
    713a:	fc 01       	movw	r30, r24
    713c:	e4 59       	subi	r30, 0x94	; 148
    713e:	fc 4f       	sbci	r31, 0xFC	; 252
    7140:	24 91       	lpm	r18, Z
					break;
    7142:	25 c0       	rjmp	.+74     	; 0x718e <__vector_15+0x29e>
				case 3:
					case -RESOLUTION + 3:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_mh_mode][RED][7]);
    7144:	90 91 0c 01 	lds	r25, 0x010C
    7148:	8b e1       	ldi	r24, 0x1B	; 27
    714a:	98 9f       	mul	r25, r24
    714c:	c0 01       	movw	r24, r0
    714e:	11 24       	eor	r1, r1
    7150:	fc 01       	movw	r30, r24
    7152:	e5 5a       	subi	r30, 0xA5	; 165
    7154:	fc 4f       	sbci	r31, 0xFC	; 252
    7156:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_mh_mode][GREEN][7]);
    7158:	fc 01       	movw	r30, r24
    715a:	ec 59       	subi	r30, 0x9C	; 156
    715c:	fc 4f       	sbci	r31, 0xFC	; 252
    715e:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_mh_mode][BLUE][7]);	
    7160:	fc 01       	movw	r30, r24
    7162:	e3 59       	subi	r30, 0x93	; 147
    7164:	fc 4f       	sbci	r31, 0xFC	; 252
    7166:	24 91       	lpm	r18, Z
					break;		
    7168:	12 c0       	rjmp	.+36     	; 0x718e <__vector_15+0x29e>
				case 4:
					case -RESOLUTION + 4:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_mh_mode][RED][8]);
    716a:	90 91 0c 01 	lds	r25, 0x010C
    716e:	8b e1       	ldi	r24, 0x1B	; 27
    7170:	98 9f       	mul	r25, r24
    7172:	c0 01       	movw	r24, r0
    7174:	11 24       	eor	r1, r1
    7176:	fc 01       	movw	r30, r24
    7178:	e4 5a       	subi	r30, 0xA4	; 164
    717a:	fc 4f       	sbci	r31, 0xFC	; 252
    717c:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_mh_mode][GREEN][8]);
    717e:	fc 01       	movw	r30, r24
    7180:	eb 59       	subi	r30, 0x9B	; 155
    7182:	fc 4f       	sbci	r31, 0xFC	; 252
    7184:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_mh_mode][BLUE][8]);	
    7186:	fc 01       	movw	r30, r24
    7188:	e2 59       	subi	r30, 0x92	; 146
    718a:	fc 4f       	sbci	r31, 0xFC	; 252
    718c:	24 91       	lpm	r18, Z
					break;	
				}
			}



	//if temporary registers are not updated
	if((tmp_red == PWM_TOP + 1) && (tmp_green == PWM_TOP + 1) && (tmp_blue == PWM_TOP + 1) && !((g_mode==40) && radioactivity) && !((pgm_read_byte(&gm_background[1][GREEN][g_speed6rev+g_position]) == 0x00) && ((g_mode == 42) || (g_mode == 43))))
    718e:	48 32       	cpi	r20, 0x28	; 40
    7190:	09 f0       	breq	.+2      	; 0x7194 <__vector_15+0x2a4>
    7192:	28 c1       	rjmp	.+592    	; 0x73e4 <__vector_15+0x4f4>
    7194:	38 32       	cpi	r19, 0x28	; 40
    7196:	09 f0       	breq	.+2      	; 0x719a <__vector_15+0x2aa>
    7198:	28 c1       	rjmp	.+592    	; 0x73ea <__vector_15+0x4fa>
    719a:	28 32       	cpi	r18, 0x28	; 40
    719c:	09 f0       	breq	.+2      	; 0x71a0 <__vector_15+0x2b0>
    719e:	28 c1       	rjmp	.+592    	; 0x73f0 <__vector_15+0x500>
    71a0:	20 91 1f 01 	lds	r18, 0x011F
    71a4:	28 32       	cpi	r18, 0x28	; 40
    71a6:	29 f4       	brne	.+10     	; 0x71b2 <__vector_15+0x2c2>
    71a8:	80 91 41 01 	lds	r24, 0x0141
    71ac:	88 23       	and	r24, r24
    71ae:	09 f0       	breq	.+2      	; 0x71b2 <__vector_15+0x2c2>
    71b0:	22 c1       	rjmp	.+580    	; 0x73f6 <__vector_15+0x506>
    71b2:	90 91 27 01 	lds	r25, 0x0127
    71b6:	80 91 40 01 	lds	r24, 0x0140
    71ba:	48 2f       	mov	r20, r24
    71bc:	55 27       	eor	r21, r21
    71be:	fa 01       	movw	r30, r20
    71c0:	e9 0f       	add	r30, r25
    71c2:	f1 1d       	adc	r31, r1
    71c4:	e3 5e       	subi	r30, 0xE3	; 227
    71c6:	f5 4f       	sbci	r31, 0xF5	; 245
    71c8:	84 91       	lpm	r24, Z
    71ca:	88 23       	and	r24, r24
    71cc:	21 f4       	brne	.+8      	; 0x71d6 <__vector_15+0x2e6>
    71ce:	2a 52       	subi	r18, 0x2A	; 42
    71d0:	22 30       	cpi	r18, 0x02	; 2
    71d2:	08 f4       	brcc	.+2      	; 0x71d6 <__vector_15+0x2e6>
    71d4:	10 c1       	rjmp	.+544    	; 0x73f6 <__vector_15+0x506>
	{
		switch(g_position - g_minutes) 	//compute which part of minute hand should be now displayed
    71d6:	80 91 22 01 	lds	r24, 0x0122
    71da:	48 1b       	sub	r20, r24
    71dc:	51 09       	sbc	r21, r1
    71de:	ca 01       	movw	r24, r20
    71e0:	41 15       	cp	r20, r1
    71e2:	51 05       	cpc	r21, r1
    71e4:	09 f4       	brne	.+2      	; 0x71e8 <__vector_15+0x2f8>
    71e6:	a0 c0       	rjmp	.+320    	; 0x7328 <__vector_15+0x438>
    71e8:	14 16       	cp	r1, r20
    71ea:	15 06       	cpc	r1, r21
    71ec:	7c f1       	brlt	.+94     	; 0x724c <__vector_15+0x35c>
    71ee:	5f ef       	ldi	r21, 0xFF	; 255
    71f0:	84 31       	cpi	r24, 0x14	; 20
    71f2:	95 07       	cpc	r25, r21
    71f4:	09 f4       	brne	.+2      	; 0x71f8 <__vector_15+0x308>
    71f6:	e4 c0       	rjmp	.+456    	; 0x73c0 <__vector_15+0x4d0>
    71f8:	7f ef       	ldi	r23, 0xFF	; 255
    71fa:	85 31       	cpi	r24, 0x15	; 21
    71fc:	97 07       	cpc	r25, r23
    71fe:	7c f4       	brge	.+30     	; 0x721e <__vector_15+0x32e>
    7200:	ef ef       	ldi	r30, 0xFF	; 255
    7202:	82 31       	cpi	r24, 0x12	; 18
    7204:	9e 07       	cpc	r25, r30
    7206:	09 f4       	brne	.+2      	; 0x720a <__vector_15+0x31a>
    7208:	b5 c0       	rjmp	.+362    	; 0x7374 <__vector_15+0x484>
    720a:	ff ef       	ldi	r31, 0xFF	; 255
    720c:	83 31       	cpi	r24, 0x13	; 19
    720e:	9f 07       	cpc	r25, r31
    7210:	0c f0       	brlt	.+2      	; 0x7214 <__vector_15+0x324>
    7212:	c3 c0       	rjmp	.+390    	; 0x739a <__vector_15+0x4aa>
    7214:	81 51       	subi	r24, 0x11	; 17
    7216:	9f 4f       	sbci	r25, 0xFF	; 255
    7218:	09 f4       	brne	.+2      	; 0x721c <__vector_15+0x32c>
    721a:	99 c0       	rjmp	.+306    	; 0x734e <__vector_15+0x45e>
    721c:	ec c0       	rjmp	.+472    	; 0x73f6 <__vector_15+0x506>
    721e:	3f ef       	ldi	r19, 0xFF	; 255
    7220:	8d 3f       	cpi	r24, 0xFD	; 253
    7222:	93 07       	cpc	r25, r19
    7224:	09 f4       	brne	.+2      	; 0x7228 <__vector_15+0x338>
    7226:	47 c0       	rjmp	.+142    	; 0x72b6 <__vector_15+0x3c6>
    7228:	4f ef       	ldi	r20, 0xFF	; 255
    722a:	8e 3f       	cpi	r24, 0xFE	; 254
    722c:	94 07       	cpc	r25, r20
    722e:	24 f4       	brge	.+8      	; 0x7238 <__vector_15+0x348>
    7230:	8c 5f       	subi	r24, 0xFC	; 252
    7232:	9f 4f       	sbci	r25, 0xFF	; 255
    7234:	69 f1       	breq	.+90     	; 0x7290 <__vector_15+0x3a0>
    7236:	df c0       	rjmp	.+446    	; 0x73f6 <__vector_15+0x506>
    7238:	7f ef       	ldi	r23, 0xFF	; 255
    723a:	8e 3f       	cpi	r24, 0xFE	; 254
    723c:	97 07       	cpc	r25, r23
    723e:	09 f4       	brne	.+2      	; 0x7242 <__vector_15+0x352>
    7240:	4d c0       	rjmp	.+154    	; 0x72dc <__vector_15+0x3ec>
    7242:	8f 5f       	subi	r24, 0xFF	; 255
    7244:	9f 4f       	sbci	r25, 0xFF	; 255
    7246:	09 f4       	brne	.+2      	; 0x724a <__vector_15+0x35a>
    7248:	5c c0       	rjmp	.+184    	; 0x7302 <__vector_15+0x412>
    724a:	d5 c0       	rjmp	.+426    	; 0x73f6 <__vector_15+0x506>
    724c:	44 30       	cpi	r20, 0x04	; 4
    724e:	51 05       	cpc	r21, r1
    7250:	09 f4       	brne	.+2      	; 0x7254 <__vector_15+0x364>
    7252:	b6 c0       	rjmp	.+364    	; 0x73c0 <__vector_15+0x4d0>
    7254:	45 30       	cpi	r20, 0x05	; 5
    7256:	51 05       	cpc	r21, r1
    7258:	4c f4       	brge	.+18     	; 0x726c <__vector_15+0x37c>
    725a:	42 30       	cpi	r20, 0x02	; 2
    725c:	51 05       	cpc	r21, r1
    725e:	09 f4       	brne	.+2      	; 0x7262 <__vector_15+0x372>
    7260:	89 c0       	rjmp	.+274    	; 0x7374 <__vector_15+0x484>
    7262:	43 30       	cpi	r20, 0x03	; 3
    7264:	51 05       	cpc	r21, r1
    7266:	0c f0       	brlt	.+2      	; 0x726a <__vector_15+0x37a>
    7268:	98 c0       	rjmp	.+304    	; 0x739a <__vector_15+0x4aa>
    726a:	71 c0       	rjmp	.+226    	; 0x734e <__vector_15+0x45e>
    726c:	4d 3e       	cpi	r20, 0xED	; 237
    726e:	51 05       	cpc	r21, r1
    7270:	11 f1       	breq	.+68     	; 0x72b6 <__vector_15+0x3c6>
    7272:	4e 3e       	cpi	r20, 0xEE	; 238
    7274:	51 05       	cpc	r21, r1
    7276:	24 f4       	brge	.+8      	; 0x7280 <__vector_15+0x390>
    7278:	4c 3e       	cpi	r20, 0xEC	; 236
    727a:	51 05       	cpc	r21, r1
    727c:	49 f0       	breq	.+18     	; 0x7290 <__vector_15+0x3a0>
    727e:	bb c0       	rjmp	.+374    	; 0x73f6 <__vector_15+0x506>
    7280:	4e 3e       	cpi	r20, 0xEE	; 238
    7282:	51 05       	cpc	r21, r1
    7284:	59 f1       	breq	.+86     	; 0x72dc <__vector_15+0x3ec>
    7286:	4f 3e       	cpi	r20, 0xEF	; 239
    7288:	51 05       	cpc	r21, r1
    728a:	09 f4       	brne	.+2      	; 0x728e <__vector_15+0x39e>
    728c:	3a c0       	rjmp	.+116    	; 0x7302 <__vector_15+0x412>
    728e:	b3 c0       	rjmp	.+358    	; 0x73f6 <__vector_15+0x506>
		{							//and read color value from flash memory
			case -4:
			case RESOLUTION - 4:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_mh_mode][RED][0]);
    7290:	90 91 0c 01 	lds	r25, 0x010C
    7294:	8b e1       	ldi	r24, 0x1B	; 27
    7296:	98 9f       	mul	r25, r24
    7298:	c0 01       	movw	r24, r0
    729a:	11 24       	eor	r1, r1
    729c:	fc 01       	movw	r30, r24
    729e:	e5 5d       	subi	r30, 0xD5	; 213
    72a0:	fd 4f       	sbci	r31, 0xFD	; 253
    72a2:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_mh_mode][GREEN][0]);
    72a4:	fc 01       	movw	r30, r24
    72a6:	ec 5c       	subi	r30, 0xCC	; 204
    72a8:	fd 4f       	sbci	r31, 0xFD	; 253
    72aa:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_mh_mode][BLUE][0]);
    72ac:	fc 01       	movw	r30, r24
    72ae:	e3 5c       	subi	r30, 0xC3	; 195
    72b0:	fd 4f       	sbci	r31, 0xFD	; 253
    72b2:	24 91       	lpm	r18, Z
				break;
    72b4:	97 c0       	rjmp	.+302    	; 0x73e4 <__vector_15+0x4f4>
			case -3:
			case RESOLUTION - 3:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_mh_mode][RED][1]);
    72b6:	90 91 0c 01 	lds	r25, 0x010C
    72ba:	8b e1       	ldi	r24, 0x1B	; 27
    72bc:	98 9f       	mul	r25, r24
    72be:	c0 01       	movw	r24, r0
    72c0:	11 24       	eor	r1, r1
    72c2:	fc 01       	movw	r30, r24
    72c4:	e4 5d       	subi	r30, 0xD4	; 212
    72c6:	fd 4f       	sbci	r31, 0xFD	; 253
    72c8:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_mh_mode][GREEN][1]);
    72ca:	fc 01       	movw	r30, r24
    72cc:	eb 5c       	subi	r30, 0xCB	; 203
    72ce:	fd 4f       	sbci	r31, 0xFD	; 253
    72d0:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_mh_mode][BLUE][1]);
    72d2:	fc 01       	movw	r30, r24
    72d4:	e2 5c       	subi	r30, 0xC2	; 194
    72d6:	fd 4f       	sbci	r31, 0xFD	; 253
    72d8:	24 91       	lpm	r18, Z
				break;
    72da:	84 c0       	rjmp	.+264    	; 0x73e4 <__vector_15+0x4f4>
			case -2:
			case RESOLUTION - 2:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_mh_mode][RED][2]);
    72dc:	90 91 0c 01 	lds	r25, 0x010C
    72e0:	8b e1       	ldi	r24, 0x1B	; 27
    72e2:	98 9f       	mul	r25, r24
    72e4:	c0 01       	movw	r24, r0
    72e6:	11 24       	eor	r1, r1
    72e8:	fc 01       	movw	r30, r24
    72ea:	e3 5d       	subi	r30, 0xD3	; 211
    72ec:	fd 4f       	sbci	r31, 0xFD	; 253
    72ee:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_mh_mode][GREEN][2]);
    72f0:	fc 01       	movw	r30, r24
    72f2:	ea 5c       	subi	r30, 0xCA	; 202
    72f4:	fd 4f       	sbci	r31, 0xFD	; 253
    72f6:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_mh_mode][BLUE][2]);
    72f8:	fc 01       	movw	r30, r24
    72fa:	e1 5c       	subi	r30, 0xC1	; 193
    72fc:	fd 4f       	sbci	r31, 0xFD	; 253
    72fe:	24 91       	lpm	r18, Z
				break;
    7300:	71 c0       	rjmp	.+226    	; 0x73e4 <__vector_15+0x4f4>
			case -1:
			case RESOLUTION - 1:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_mh_mode][RED][3]);
    7302:	90 91 0c 01 	lds	r25, 0x010C
    7306:	8b e1       	ldi	r24, 0x1B	; 27
    7308:	98 9f       	mul	r25, r24
    730a:	c0 01       	movw	r24, r0
    730c:	11 24       	eor	r1, r1
    730e:	fc 01       	movw	r30, r24
    7310:	e2 5d       	subi	r30, 0xD2	; 210
    7312:	fd 4f       	sbci	r31, 0xFD	; 253
    7314:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_mh_mode][GREEN][3]);
    7316:	fc 01       	movw	r30, r24
    7318:	e9 5c       	subi	r30, 0xC9	; 201
    731a:	fd 4f       	sbci	r31, 0xFD	; 253
    731c:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_mh_mode][BLUE][3]);
    731e:	fc 01       	movw	r30, r24
    7320:	e0 5c       	subi	r30, 0xC0	; 192
    7322:	fd 4f       	sbci	r31, 0xFD	; 253
    7324:	24 91       	lpm	r18, Z
				break;
    7326:	5e c0       	rjmp	.+188    	; 0x73e4 <__vector_15+0x4f4>
			case 0:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_mh_mode][RED][4]);
    7328:	90 91 0c 01 	lds	r25, 0x010C
    732c:	8b e1       	ldi	r24, 0x1B	; 27
    732e:	98 9f       	mul	r25, r24
    7330:	c0 01       	movw	r24, r0
    7332:	11 24       	eor	r1, r1
    7334:	fc 01       	movw	r30, r24
    7336:	e1 5d       	subi	r30, 0xD1	; 209
    7338:	fd 4f       	sbci	r31, 0xFD	; 253
    733a:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_mh_mode][GREEN][4]);
    733c:	fc 01       	movw	r30, r24
    733e:	e8 5c       	subi	r30, 0xC8	; 200
    7340:	fd 4f       	sbci	r31, 0xFD	; 253
    7342:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_mh_mode][BLUE][4]);
    7344:	fc 01       	movw	r30, r24
    7346:	ef 5b       	subi	r30, 0xBF	; 191
    7348:	fd 4f       	sbci	r31, 0xFD	; 253
    734a:	24 91       	lpm	r18, Z
				break;
    734c:	4b c0       	rjmp	.+150    	; 0x73e4 <__vector_15+0x4f4>
			case 1:
			case -RESOLUTION + 1:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_mh_mode][RED][5]);
    734e:	90 91 0c 01 	lds	r25, 0x010C
    7352:	8b e1       	ldi	r24, 0x1B	; 27
    7354:	98 9f       	mul	r25, r24
    7356:	c0 01       	movw	r24, r0
    7358:	11 24       	eor	r1, r1
    735a:	fc 01       	movw	r30, r24
    735c:	e0 5d       	subi	r30, 0xD0	; 208
    735e:	fd 4f       	sbci	r31, 0xFD	; 253
    7360:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_mh_mode][GREEN][5]);
    7362:	fc 01       	movw	r30, r24
    7364:	e7 5c       	subi	r30, 0xC7	; 199
    7366:	fd 4f       	sbci	r31, 0xFD	; 253
    7368:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_mh_mode][BLUE][5]);	
    736a:	fc 01       	movw	r30, r24
    736c:	ee 5b       	subi	r30, 0xBE	; 190
    736e:	fd 4f       	sbci	r31, 0xFD	; 253
    7370:	24 91       	lpm	r18, Z
				break;
    7372:	38 c0       	rjmp	.+112    	; 0x73e4 <__vector_15+0x4f4>
			case 2:
			case -RESOLUTION + 2:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_mh_mode][RED][6]);
    7374:	90 91 0c 01 	lds	r25, 0x010C
    7378:	8b e1       	ldi	r24, 0x1B	; 27
    737a:	98 9f       	mul	r25, r24
    737c:	c0 01       	movw	r24, r0
    737e:	11 24       	eor	r1, r1
    7380:	fc 01       	movw	r30, r24
    7382:	ef 5c       	subi	r30, 0xCF	; 207
    7384:	fd 4f       	sbci	r31, 0xFD	; 253
    7386:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_mh_mode][GREEN][6]);
    7388:	fc 01       	movw	r30, r24
    738a:	e6 5c       	subi	r30, 0xC6	; 198
    738c:	fd 4f       	sbci	r31, 0xFD	; 253
    738e:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_mh_mode][BLUE][6]);	
    7390:	fc 01       	movw	r30, r24
    7392:	ed 5b       	subi	r30, 0xBD	; 189
    7394:	fd 4f       	sbci	r31, 0xFD	; 253
    7396:	24 91       	lpm	r18, Z
				break;
    7398:	25 c0       	rjmp	.+74     	; 0x73e4 <__vector_15+0x4f4>
			case 3:
			case -RESOLUTION + 3:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_mh_mode][RED][7]);
    739a:	90 91 0c 01 	lds	r25, 0x010C
    739e:	8b e1       	ldi	r24, 0x1B	; 27
    73a0:	98 9f       	mul	r25, r24
    73a2:	c0 01       	movw	r24, r0
    73a4:	11 24       	eor	r1, r1
    73a6:	fc 01       	movw	r30, r24
    73a8:	ee 5c       	subi	r30, 0xCE	; 206
    73aa:	fd 4f       	sbci	r31, 0xFD	; 253
    73ac:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_mh_mode][GREEN][7]);
    73ae:	fc 01       	movw	r30, r24
    73b0:	e5 5c       	subi	r30, 0xC5	; 197
    73b2:	fd 4f       	sbci	r31, 0xFD	; 253
    73b4:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_mh_mode][BLUE][7]);	
    73b6:	fc 01       	movw	r30, r24
    73b8:	ec 5b       	subi	r30, 0xBC	; 188
    73ba:	fd 4f       	sbci	r31, 0xFD	; 253
    73bc:	24 91       	lpm	r18, Z
				break;		
    73be:	12 c0       	rjmp	.+36     	; 0x73e4 <__vector_15+0x4f4>
			case 4:
			case -RESOLUTION + 4:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_mh_mode][RED][8]);
    73c0:	90 91 0c 01 	lds	r25, 0x010C
    73c4:	8b e1       	ldi	r24, 0x1B	; 27
    73c6:	98 9f       	mul	r25, r24
    73c8:	c0 01       	movw	r24, r0
    73ca:	11 24       	eor	r1, r1
    73cc:	fc 01       	movw	r30, r24
    73ce:	ed 5c       	subi	r30, 0xCD	; 205
    73d0:	fd 4f       	sbci	r31, 0xFD	; 253
    73d2:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_mh_mode][GREEN][8]);
    73d4:	fc 01       	movw	r30, r24
    73d6:	e4 5c       	subi	r30, 0xC4	; 196
    73d8:	fd 4f       	sbci	r31, 0xFD	; 253
    73da:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_mh_mode][BLUE][8]);	
    73dc:	fc 01       	movw	r30, r24
    73de:	eb 5b       	subi	r30, 0xBB	; 187
    73e0:	fd 4f       	sbci	r31, 0xFD	; 253
    73e2:	24 91       	lpm	r18, Z
				break;	
		}
	}
	//if temporary registers are not updated
	if((tmp_red == PWM_TOP + 1) && (tmp_green == PWM_TOP + 1) && (tmp_blue == PWM_TOP + 1) && !((g_mode==40) && radioactivity) && !((pgm_read_byte(&gm_background[1][GREEN][g_speed6rev+g_position]) == 0x00) && ((g_mode == 42) || (g_mode == 43))))	
    73e4:	48 32       	cpi	r20, 0x28	; 40
    73e6:	09 f0       	breq	.+2      	; 0x73ea <__vector_15+0x4fa>
    73e8:	27 c1       	rjmp	.+590    	; 0x7638 <__vector_15+0x748>
    73ea:	38 32       	cpi	r19, 0x28	; 40
    73ec:	09 f0       	breq	.+2      	; 0x73f0 <__vector_15+0x500>
    73ee:	26 c1       	rjmp	.+588    	; 0x763c <__vector_15+0x74c>
    73f0:	28 32       	cpi	r18, 0x28	; 40
    73f2:	09 f0       	breq	.+2      	; 0x73f6 <__vector_15+0x506>
    73f4:	25 c1       	rjmp	.+586    	; 0x7640 <__vector_15+0x750>
    73f6:	20 91 1f 01 	lds	r18, 0x011F
    73fa:	28 32       	cpi	r18, 0x28	; 40
    73fc:	29 f4       	brne	.+10     	; 0x7408 <__vector_15+0x518>
    73fe:	80 91 41 01 	lds	r24, 0x0141
    7402:	88 23       	and	r24, r24
    7404:	09 f0       	breq	.+2      	; 0x7408 <__vector_15+0x518>
    7406:	81 c1       	rjmp	.+770    	; 0x770a <__vector_15+0x81a>
    7408:	90 91 27 01 	lds	r25, 0x0127
    740c:	80 91 40 01 	lds	r24, 0x0140
    7410:	48 2f       	mov	r20, r24
    7412:	55 27       	eor	r21, r21
    7414:	fa 01       	movw	r30, r20
    7416:	e9 0f       	add	r30, r25
    7418:	f1 1d       	adc	r31, r1
    741a:	e3 5e       	subi	r30, 0xE3	; 227
    741c:	f5 4f       	sbci	r31, 0xF5	; 245
    741e:	84 91       	lpm	r24, Z
    7420:	88 23       	and	r24, r24
    7422:	21 f4       	brne	.+8      	; 0x742c <__vector_15+0x53c>
    7424:	2a 52       	subi	r18, 0x2A	; 42
    7426:	22 30       	cpi	r18, 0x02	; 2
    7428:	08 f4       	brcc	.+2      	; 0x742c <__vector_15+0x53c>
    742a:	6f c1       	rjmp	.+734    	; 0x770a <__vector_15+0x81a>
	{
		switch(g_position - g_hours)
    742c:	80 91 4d 01 	lds	r24, 0x014D
    7430:	48 1b       	sub	r20, r24
    7432:	51 09       	sbc	r21, r1
    7434:	ca 01       	movw	r24, r20
    7436:	41 15       	cp	r20, r1
    7438:	51 05       	cpc	r21, r1
    743a:	09 f4       	brne	.+2      	; 0x743e <__vector_15+0x54e>
    743c:	9f c0       	rjmp	.+318    	; 0x757c <__vector_15+0x68c>
    743e:	14 16       	cp	r1, r20
    7440:	15 06       	cpc	r1, r21
    7442:	74 f1       	brlt	.+92     	; 0x74a0 <__vector_15+0x5b0>
    7444:	ff ef       	ldi	r31, 0xFF	; 255
    7446:	44 31       	cpi	r20, 0x14	; 20
    7448:	5f 07       	cpc	r21, r31
    744a:	09 f4       	brne	.+2      	; 0x744e <__vector_15+0x55e>
    744c:	e3 c0       	rjmp	.+454    	; 0x7614 <__vector_15+0x724>
    744e:	2f ef       	ldi	r18, 0xFF	; 255
    7450:	45 31       	cpi	r20, 0x15	; 21
    7452:	52 07       	cpc	r21, r18
    7454:	74 f4       	brge	.+28     	; 0x7472 <__vector_15+0x582>
    7456:	42 51       	subi	r20, 0x12	; 18
    7458:	5f 4f       	sbci	r21, 0xFF	; 255
    745a:	09 f4       	brne	.+2      	; 0x745e <__vector_15+0x56e>
    745c:	b5 c0       	rjmp	.+362    	; 0x75c8 <__vector_15+0x6d8>
    745e:	4f ef       	ldi	r20, 0xFF	; 255
    7460:	83 31       	cpi	r24, 0x13	; 19
    7462:	94 07       	cpc	r25, r20
    7464:	0c f0       	brlt	.+2      	; 0x7468 <__vector_15+0x578>
    7466:	c3 c0       	rjmp	.+390    	; 0x75ee <__vector_15+0x6fe>
    7468:	81 51       	subi	r24, 0x11	; 17
    746a:	9f 4f       	sbci	r25, 0xFF	; 255
    746c:	09 f4       	brne	.+2      	; 0x7470 <__vector_15+0x580>
    746e:	99 c0       	rjmp	.+306    	; 0x75a2 <__vector_15+0x6b2>
    7470:	4c c1       	rjmp	.+664    	; 0x770a <__vector_15+0x81a>
    7472:	7f ef       	ldi	r23, 0xFF	; 255
    7474:	4d 3f       	cpi	r20, 0xFD	; 253
    7476:	57 07       	cpc	r21, r23
    7478:	09 f4       	brne	.+2      	; 0x747c <__vector_15+0x58c>
    747a:	47 c0       	rjmp	.+142    	; 0x750a <__vector_15+0x61a>
    747c:	ef ef       	ldi	r30, 0xFF	; 255
    747e:	4e 3f       	cpi	r20, 0xFE	; 254
    7480:	5e 07       	cpc	r21, r30
    7482:	24 f4       	brge	.+8      	; 0x748c <__vector_15+0x59c>
    7484:	4c 5f       	subi	r20, 0xFC	; 252
    7486:	5f 4f       	sbci	r21, 0xFF	; 255
    7488:	69 f1       	breq	.+90     	; 0x74e4 <__vector_15+0x5f4>
    748a:	3f c1       	rjmp	.+638    	; 0x770a <__vector_15+0x81a>
    748c:	2f ef       	ldi	r18, 0xFF	; 255
    748e:	4e 3f       	cpi	r20, 0xFE	; 254
    7490:	52 07       	cpc	r21, r18
    7492:	09 f4       	brne	.+2      	; 0x7496 <__vector_15+0x5a6>
    7494:	4d c0       	rjmp	.+154    	; 0x7530 <__vector_15+0x640>
    7496:	4f 5f       	subi	r20, 0xFF	; 255
    7498:	5f 4f       	sbci	r21, 0xFF	; 255
    749a:	09 f4       	brne	.+2      	; 0x749e <__vector_15+0x5ae>
    749c:	5c c0       	rjmp	.+184    	; 0x7556 <__vector_15+0x666>
    749e:	35 c1       	rjmp	.+618    	; 0x770a <__vector_15+0x81a>
    74a0:	44 30       	cpi	r20, 0x04	; 4
    74a2:	51 05       	cpc	r21, r1
    74a4:	09 f4       	brne	.+2      	; 0x74a8 <__vector_15+0x5b8>
    74a6:	b6 c0       	rjmp	.+364    	; 0x7614 <__vector_15+0x724>
    74a8:	45 30       	cpi	r20, 0x05	; 5
    74aa:	51 05       	cpc	r21, r1
    74ac:	4c f4       	brge	.+18     	; 0x74c0 <__vector_15+0x5d0>
    74ae:	42 30       	cpi	r20, 0x02	; 2
    74b0:	51 05       	cpc	r21, r1
    74b2:	09 f4       	brne	.+2      	; 0x74b6 <__vector_15+0x5c6>
    74b4:	89 c0       	rjmp	.+274    	; 0x75c8 <__vector_15+0x6d8>
    74b6:	43 30       	cpi	r20, 0x03	; 3
    74b8:	51 05       	cpc	r21, r1
    74ba:	0c f0       	brlt	.+2      	; 0x74be <__vector_15+0x5ce>
    74bc:	98 c0       	rjmp	.+304    	; 0x75ee <__vector_15+0x6fe>
    74be:	71 c0       	rjmp	.+226    	; 0x75a2 <__vector_15+0x6b2>
    74c0:	4d 3e       	cpi	r20, 0xED	; 237
    74c2:	51 05       	cpc	r21, r1
    74c4:	11 f1       	breq	.+68     	; 0x750a <__vector_15+0x61a>
    74c6:	4e 3e       	cpi	r20, 0xEE	; 238
    74c8:	51 05       	cpc	r21, r1
    74ca:	24 f4       	brge	.+8      	; 0x74d4 <__vector_15+0x5e4>
    74cc:	4c 3e       	cpi	r20, 0xEC	; 236
    74ce:	51 05       	cpc	r21, r1
    74d0:	49 f0       	breq	.+18     	; 0x74e4 <__vector_15+0x5f4>
    74d2:	1b c1       	rjmp	.+566    	; 0x770a <__vector_15+0x81a>
    74d4:	4e 3e       	cpi	r20, 0xEE	; 238
    74d6:	51 05       	cpc	r21, r1
    74d8:	59 f1       	breq	.+86     	; 0x7530 <__vector_15+0x640>
    74da:	4f 3e       	cpi	r20, 0xEF	; 239
    74dc:	51 05       	cpc	r21, r1
    74de:	09 f4       	brne	.+2      	; 0x74e2 <__vector_15+0x5f2>
    74e0:	3a c0       	rjmp	.+116    	; 0x7556 <__vector_15+0x666>
    74e2:	13 c1       	rjmp	.+550    	; 0x770a <__vector_15+0x81a>
		{
			case -4:
			case RESOLUTION - 4:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_hh_mode][RED][0]);
    74e4:	90 91 35 01 	lds	r25, 0x0135
    74e8:	8b e1       	ldi	r24, 0x1B	; 27
    74ea:	98 9f       	mul	r25, r24
    74ec:	c0 01       	movw	r24, r0
    74ee:	11 24       	eor	r1, r1
    74f0:	fc 01       	movw	r30, r24
    74f2:	ee 5f       	subi	r30, 0xFE	; 254
    74f4:	fe 4f       	sbci	r31, 0xFE	; 254
    74f6:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_hh_mode][GREEN][0]);
    74f8:	fc 01       	movw	r30, r24
    74fa:	e5 5f       	subi	r30, 0xF5	; 245
    74fc:	fe 4f       	sbci	r31, 0xFE	; 254
    74fe:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_hh_mode][BLUE][0]);
    7500:	fc 01       	movw	r30, r24
    7502:	ec 5e       	subi	r30, 0xEC	; 236
    7504:	fe 4f       	sbci	r31, 0xFE	; 254
    7506:	24 91       	lpm	r18, Z
				break;
    7508:	97 c0       	rjmp	.+302    	; 0x7638 <__vector_15+0x748>
			case -3:
			case RESOLUTION - 3:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_hh_mode][RED][1]);
    750a:	90 91 35 01 	lds	r25, 0x0135
    750e:	8b e1       	ldi	r24, 0x1B	; 27
    7510:	98 9f       	mul	r25, r24
    7512:	c0 01       	movw	r24, r0
    7514:	11 24       	eor	r1, r1
    7516:	fc 01       	movw	r30, r24
    7518:	ed 5f       	subi	r30, 0xFD	; 253
    751a:	fe 4f       	sbci	r31, 0xFE	; 254
    751c:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_hh_mode][GREEN][1]);
    751e:	fc 01       	movw	r30, r24
    7520:	e4 5f       	subi	r30, 0xF4	; 244
    7522:	fe 4f       	sbci	r31, 0xFE	; 254
    7524:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_hh_mode][BLUE][1]);
    7526:	fc 01       	movw	r30, r24
    7528:	eb 5e       	subi	r30, 0xEB	; 235
    752a:	fe 4f       	sbci	r31, 0xFE	; 254
    752c:	24 91       	lpm	r18, Z
				break;
    752e:	84 c0       	rjmp	.+264    	; 0x7638 <__vector_15+0x748>
			case -2:
			case RESOLUTION - 2:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_hh_mode][RED][2]);
    7530:	90 91 35 01 	lds	r25, 0x0135
    7534:	8b e1       	ldi	r24, 0x1B	; 27
    7536:	98 9f       	mul	r25, r24
    7538:	c0 01       	movw	r24, r0
    753a:	11 24       	eor	r1, r1
    753c:	fc 01       	movw	r30, r24
    753e:	ec 5f       	subi	r30, 0xFC	; 252
    7540:	fe 4f       	sbci	r31, 0xFE	; 254
    7542:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_hh_mode][GREEN][2]);
    7544:	fc 01       	movw	r30, r24
    7546:	e3 5f       	subi	r30, 0xF3	; 243
    7548:	fe 4f       	sbci	r31, 0xFE	; 254
    754a:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_hh_mode][BLUE][2]);
    754c:	fc 01       	movw	r30, r24
    754e:	ea 5e       	subi	r30, 0xEA	; 234
    7550:	fe 4f       	sbci	r31, 0xFE	; 254
    7552:	24 91       	lpm	r18, Z
				break;
    7554:	71 c0       	rjmp	.+226    	; 0x7638 <__vector_15+0x748>
			case -1:
			case RESOLUTION - 1:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_hh_mode][RED][3]);
    7556:	90 91 35 01 	lds	r25, 0x0135
    755a:	8b e1       	ldi	r24, 0x1B	; 27
    755c:	98 9f       	mul	r25, r24
    755e:	c0 01       	movw	r24, r0
    7560:	11 24       	eor	r1, r1
    7562:	fc 01       	movw	r30, r24
    7564:	eb 5f       	subi	r30, 0xFB	; 251
    7566:	fe 4f       	sbci	r31, 0xFE	; 254
    7568:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_hh_mode][GREEN][3]);
    756a:	fc 01       	movw	r30, r24
    756c:	e2 5f       	subi	r30, 0xF2	; 242
    756e:	fe 4f       	sbci	r31, 0xFE	; 254
    7570:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_hh_mode][BLUE][3]);
    7572:	fc 01       	movw	r30, r24
    7574:	e9 5e       	subi	r30, 0xE9	; 233
    7576:	fe 4f       	sbci	r31, 0xFE	; 254
    7578:	24 91       	lpm	r18, Z
				break;
    757a:	5e c0       	rjmp	.+188    	; 0x7638 <__vector_15+0x748>
			case 0:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_hh_mode][RED][4]);
    757c:	90 91 35 01 	lds	r25, 0x0135
    7580:	8b e1       	ldi	r24, 0x1B	; 27
    7582:	98 9f       	mul	r25, r24
    7584:	c0 01       	movw	r24, r0
    7586:	11 24       	eor	r1, r1
    7588:	fc 01       	movw	r30, r24
    758a:	ea 5f       	subi	r30, 0xFA	; 250
    758c:	fe 4f       	sbci	r31, 0xFE	; 254
    758e:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_hh_mode][GREEN][4]);
    7590:	fc 01       	movw	r30, r24
    7592:	e1 5f       	subi	r30, 0xF1	; 241
    7594:	fe 4f       	sbci	r31, 0xFE	; 254
    7596:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_hh_mode][BLUE][4]);
    7598:	fc 01       	movw	r30, r24
    759a:	e8 5e       	subi	r30, 0xE8	; 232
    759c:	fe 4f       	sbci	r31, 0xFE	; 254
    759e:	24 91       	lpm	r18, Z
				break;
    75a0:	4b c0       	rjmp	.+150    	; 0x7638 <__vector_15+0x748>
			case 1:
			case -RESOLUTION + 1:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_hh_mode][RED][5]);
    75a2:	90 91 35 01 	lds	r25, 0x0135
    75a6:	8b e1       	ldi	r24, 0x1B	; 27
    75a8:	98 9f       	mul	r25, r24
    75aa:	c0 01       	movw	r24, r0
    75ac:	11 24       	eor	r1, r1
    75ae:	fc 01       	movw	r30, r24
    75b0:	e9 5f       	subi	r30, 0xF9	; 249
    75b2:	fe 4f       	sbci	r31, 0xFE	; 254
    75b4:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_hh_mode][GREEN][5]);
    75b6:	fc 01       	movw	r30, r24
    75b8:	e0 5f       	subi	r30, 0xF0	; 240
    75ba:	fe 4f       	sbci	r31, 0xFE	; 254
    75bc:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_hh_mode][BLUE][5]);	
    75be:	fc 01       	movw	r30, r24
    75c0:	e7 5e       	subi	r30, 0xE7	; 231
    75c2:	fe 4f       	sbci	r31, 0xFE	; 254
    75c4:	24 91       	lpm	r18, Z
				break;
    75c6:	38 c0       	rjmp	.+112    	; 0x7638 <__vector_15+0x748>
			case 2:
			case -RESOLUTION + 2:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_hh_mode][RED][6]);
    75c8:	90 91 35 01 	lds	r25, 0x0135
    75cc:	8b e1       	ldi	r24, 0x1B	; 27
    75ce:	98 9f       	mul	r25, r24
    75d0:	c0 01       	movw	r24, r0
    75d2:	11 24       	eor	r1, r1
    75d4:	fc 01       	movw	r30, r24
    75d6:	e8 5f       	subi	r30, 0xF8	; 248
    75d8:	fe 4f       	sbci	r31, 0xFE	; 254
    75da:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_hh_mode][GREEN][6]);
    75dc:	fc 01       	movw	r30, r24
    75de:	ef 5e       	subi	r30, 0xEF	; 239
    75e0:	fe 4f       	sbci	r31, 0xFE	; 254
    75e2:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_hh_mode][BLUE][6]);	
    75e4:	fc 01       	movw	r30, r24
    75e6:	e6 5e       	subi	r30, 0xE6	; 230
    75e8:	fe 4f       	sbci	r31, 0xFE	; 254
    75ea:	24 91       	lpm	r18, Z
				break;
    75ec:	25 c0       	rjmp	.+74     	; 0x7638 <__vector_15+0x748>
			case 3:
			case -RESOLUTION + 3:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_hh_mode][RED][7]);
    75ee:	90 91 35 01 	lds	r25, 0x0135
    75f2:	8b e1       	ldi	r24, 0x1B	; 27
    75f4:	98 9f       	mul	r25, r24
    75f6:	c0 01       	movw	r24, r0
    75f8:	11 24       	eor	r1, r1
    75fa:	fc 01       	movw	r30, r24
    75fc:	e7 5f       	subi	r30, 0xF7	; 247
    75fe:	fe 4f       	sbci	r31, 0xFE	; 254
    7600:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_hh_mode][GREEN][7]);
    7602:	fc 01       	movw	r30, r24
    7604:	ee 5e       	subi	r30, 0xEE	; 238
    7606:	fe 4f       	sbci	r31, 0xFE	; 254
    7608:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_hh_mode][BLUE][7]);	
    760a:	fc 01       	movw	r30, r24
    760c:	e5 5e       	subi	r30, 0xE5	; 229
    760e:	fe 4f       	sbci	r31, 0xFE	; 254
    7610:	24 91       	lpm	r18, Z
				break;		
    7612:	12 c0       	rjmp	.+36     	; 0x7638 <__vector_15+0x748>
			case 4:
			case -RESOLUTION + 4:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_hh_mode][RED][8]);
    7614:	90 91 35 01 	lds	r25, 0x0135
    7618:	8b e1       	ldi	r24, 0x1B	; 27
    761a:	98 9f       	mul	r25, r24
    761c:	c0 01       	movw	r24, r0
    761e:	11 24       	eor	r1, r1
    7620:	fc 01       	movw	r30, r24
    7622:	e6 5f       	subi	r30, 0xF6	; 246
    7624:	fe 4f       	sbci	r31, 0xFE	; 254
    7626:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_hh_mode][GREEN][8]);
    7628:	fc 01       	movw	r30, r24
    762a:	ed 5e       	subi	r30, 0xED	; 237
    762c:	fe 4f       	sbci	r31, 0xFE	; 254
    762e:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_hh_mode][BLUE][8]);	
    7630:	fc 01       	movw	r30, r24
    7632:	e4 5e       	subi	r30, 0xE4	; 228
    7634:	fe 4f       	sbci	r31, 0xFE	; 254
    7636:	24 91       	lpm	r18, Z
				break;		
		}
	}

		
	//if temporary registers aren't updated that means the hands aren't being displayed now
	if((tmp_red != PWM_TOP + 1) || (tmp_green != PWM_TOP + 1) || (tmp_blue != PWM_TOP + 1))
    7638:	48 32       	cpi	r20, 0x28	; 40
    763a:	29 f4       	brne	.+10     	; 0x7646 <__vector_15+0x756>
    763c:	38 32       	cpi	r19, 0x28	; 40
    763e:	19 f4       	brne	.+6      	; 0x7646 <__vector_15+0x756>
    7640:	28 32       	cpi	r18, 0x28	; 40
    7642:	09 f4       	brne	.+2      	; 0x7646 <__vector_15+0x756>
    7644:	62 c0       	rjmp	.+196    	; 0x770a <__vector_15+0x81a>
	{
		if(g_rc_state == STATE_SETTING)  //if time is being set 
    7646:	61 30       	cpi	r22, 0x01	; 1
    7648:	51 f5       	brne	.+84     	; 0x769e <__vector_15+0x7ae>
		{
			if(g_timer2_ovf & 0x02) 	//minute and second hand should blink
    764a:	80 91 29 01 	lds	r24, 0x0129
    764e:	81 ff       	sbrs	r24, 1
    7650:	10 c0       	rjmp	.+32     	; 0x7672 <__vector_15+0x782>
			{
				PWM_RED = tmp_red;
    7652:	84 2f       	mov	r24, r20
    7654:	99 27       	eor	r25, r25
    7656:	9b bd       	out	0x2b, r25	; 43
    7658:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = tmp_green;
    765a:	83 2f       	mov	r24, r19
    765c:	99 27       	eor	r25, r25
    765e:	99 bd       	out	0x29, r25	; 41
    7660:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = tmp_blue;	
    7662:	82 2f       	mov	r24, r18
    7664:	99 27       	eor	r25, r25
    7666:	90 93 79 00 	sts	0x0079, r25
    766a:	80 93 78 00 	sts	0x0078, r24
    766e:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			}
			else
			{
				if(g_rc_hold_counter != 0) //don't blink if any button is held
    7672:	80 91 0d 01 	lds	r24, 0x010D
    7676:	88 23       	and	r24, r24
    7678:	11 f4       	brne	.+4      	; 0x767e <__vector_15+0x78e>
    767a:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
				{
					PWM_RED = tmp_red;
    767e:	84 2f       	mov	r24, r20
    7680:	99 27       	eor	r25, r25
    7682:	9b bd       	out	0x2b, r25	; 43
    7684:	8a bd       	out	0x2a, r24	; 42
					PWM_GREEN = tmp_green;
    7686:	83 2f       	mov	r24, r19
    7688:	99 27       	eor	r25, r25
    768a:	99 bd       	out	0x29, r25	; 41
    768c:	88 bd       	out	0x28, r24	; 40
					PWM_BLUE = tmp_blue;
    768e:	82 2f       	mov	r24, r18
    7690:	99 27       	eor	r25, r25
    7692:	90 93 79 00 	sts	0x0079, r25
    7696:	80 93 78 00 	sts	0x0078, r24
    769a:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
				}
			}
		}
		
		else
		{
			if (g_mode==42 || g_mode==43)
    769e:	80 91 1f 01 	lds	r24, 0x011F
    76a2:	8a 52       	subi	r24, 0x2A	; 42
    76a4:	64 2f       	mov	r22, r20
    76a6:	77 27       	eor	r23, r23
    76a8:	43 2f       	mov	r20, r19
    76aa:	55 27       	eor	r21, r21
    76ac:	82 30       	cpi	r24, 0x02	; 2
    76ae:	08 f5       	brcc	.+66     	; 0x76f2 <__vector_15+0x802>
			{
			PWM_RED = tmp_red; //- pgm_read_byte(&gm_background[1][RED][g_speed6rev+g_position]) ;
    76b0:	7b bd       	out	0x2b, r23	; 43
    76b2:	6a bd       	out	0x2a, r22	; 42
			
			if ((tmp_green - pgm_read_byte(&gm_background[1][GREEN][g_speed6rev+g_position])) < 0x01)
    76b4:	90 91 27 01 	lds	r25, 0x0127
    76b8:	80 91 40 01 	lds	r24, 0x0140
    76bc:	69 2f       	mov	r22, r25
    76be:	68 0f       	add	r22, r24
    76c0:	71 2d       	mov	r23, r1
    76c2:	71 1d       	adc	r23, r1
    76c4:	fb 01       	movw	r30, r22
    76c6:	e3 5e       	subi	r30, 0xE3	; 227
    76c8:	f5 4f       	sbci	r31, 0xF5	; 245
    76ca:	84 91       	lpm	r24, Z
    76cc:	fa 01       	movw	r30, r20
    76ce:	e8 1b       	sub	r30, r24
    76d0:	f1 09       	sbc	r31, r1
    76d2:	1e 16       	cp	r1, r30
    76d4:	1f 06       	cpc	r1, r31
    76d6:	1c f0       	brlt	.+6      	; 0x76de <__vector_15+0x7ee>
			PWM_GREEN = tmp_green;
    76d8:	59 bd       	out	0x29, r21	; 41
    76da:	48 bd       	out	0x28, r20	; 40
    76dc:	02 c0       	rjmp	.+4      	; 0x76e2 <__vector_15+0x7f2>
			else
			PWM_GREEN = tmp_green - pgm_read_byte(&gm_background[1][GREEN][g_speed6rev+g_position]);
    76de:	f9 bd       	out	0x29, r31	; 41
    76e0:	e8 bd       	out	0x28, r30	; 40
			
			PWM_BLUE = tmp_blue; //- pgm_read_byte(&gm_background[1][BLUE][g_speed6rev+g_position]);
    76e2:	82 2f       	mov	r24, r18
    76e4:	99 27       	eor	r25, r25
    76e6:	90 93 79 00 	sts	0x0079, r25
    76ea:	80 93 78 00 	sts	0x0078, r24
    76ee:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			}
	
			else
			{
			PWM_RED = tmp_red;
    76f2:	7b bd       	out	0x2b, r23	; 43
    76f4:	6a bd       	out	0x2a, r22	; 42
			PWM_GREEN = tmp_green;
    76f6:	59 bd       	out	0x29, r21	; 41
    76f8:	48 bd       	out	0x28, r20	; 40
			PWM_BLUE = tmp_blue;
    76fa:	82 2f       	mov	r24, r18
    76fc:	99 27       	eor	r25, r25
    76fe:	90 93 79 00 	sts	0x0079, r25
    7702:	80 93 78 00 	sts	0x0078, r24
    7706:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			}		
		}
	}
	else  //display background, also stored in flash memomy
	{
		switch(g_mode)
    770a:	20 91 1f 01 	lds	r18, 0x011F
    770e:	82 2f       	mov	r24, r18
    7710:	99 27       	eor	r25, r25
    7712:	aa 27       	eor	r26, r26
    7714:	bb 27       	eor	r27, r27
    7716:	fc 01       	movw	r30, r24
    7718:	33 97       	sbiw	r30, 0x03	; 3
    771a:	eb 33       	cpi	r30, 0x3B	; 59
    771c:	f1 05       	cpc	r31, r1
    771e:	10 f0       	brcs	.+4      	; 0x7724 <__vector_15+0x834>
    7720:	0c 94 09 52 	jmp	0xa412 <__vector_15+0x3522>
    7724:	ea 5b       	subi	r30, 0xBA	; 186
    7726:	ff 4f       	sbci	r31, 0xFF	; 255
    7728:	a0 91 40 01 	lds	r26, 0x0140
    772c:	ee 0f       	add	r30, r30
    772e:	ff 1f       	adc	r31, r31
    7730:	05 90       	lpm	r0, Z+
    7732:	f4 91       	lpm	r31, Z
    7734:	e0 2d       	mov	r30, r0
    7736:	09 94       	ijmp
		{

		case 61:				// background is changing 11 synthesis rainbow
			seconds_hand=0;
    7738:	10 92 25 01 	sts	0x0125, r1

			if ((pgm_read_byte(&gm_background[10][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[10][RED][g_speed6+g_position])) > PWM_TOP)
    773c:	50 91 2c 01 	lds	r21, 0x012C
    7740:	2a 2f       	mov	r18, r26
    7742:	33 27       	eor	r19, r19
    7744:	f9 01       	movw	r30, r18
    7746:	e5 0f       	add	r30, r21
    7748:	f1 1d       	adc	r31, r1
    774a:	e3 52       	subi	r30, 0x23	; 35
    774c:	f4 4d       	sbci	r31, 0xD4	; 212
    774e:	94 91       	lpm	r25, Z
    7750:	40 91 43 01 	lds	r20, 0x0143
    7754:	f9 01       	movw	r30, r18
    7756:	e4 0f       	add	r30, r20
    7758:	f1 1d       	adc	r31, r1
    775a:	e3 50       	subi	r30, 0x03	; 3
    775c:	f6 4d       	sbci	r31, 0xD6	; 214
    775e:	84 91       	lpm	r24, Z
    7760:	89 0f       	add	r24, r25
    7762:	91 2d       	mov	r25, r1
    7764:	91 1d       	adc	r25, r1
    7766:	88 97       	sbiw	r24, 0x28	; 40
    7768:	1c f0       	brlt	.+6      	; 0x7770 <__vector_15+0x880>
			PWM_RED = PWM_TOP ;
    776a:	87 e2       	ldi	r24, 0x27	; 39
    776c:	90 e0       	ldi	r25, 0x00	; 0
    776e:	09 c0       	rjmp	.+18     	; 0x7782 <__vector_15+0x892>
			else
			PWM_RED =  pgm_read_byte(&gc_background[0][RED][g_speed6rev+g_position]);
    7770:	80 91 27 01 	lds	r24, 0x0127
    7774:	28 0f       	add	r18, r24
    7776:	31 1d       	adc	r19, r1
    7778:	23 58       	subi	r18, 0x83	; 131
    777a:	3e 4c       	sbci	r19, 0xCE	; 206
    777c:	f9 01       	movw	r30, r18
    777e:	84 91       	lpm	r24, Z
    7780:	99 27       	eor	r25, r25
    7782:	9b bd       	out	0x2b, r25	; 43
    7784:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[10][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[10][RED][g_speed6+g_position])) > PWM_TOP)
    7786:	2a 2f       	mov	r18, r26
    7788:	33 27       	eor	r19, r19
    778a:	f9 01       	movw	r30, r18
    778c:	e5 0f       	add	r30, r21
    778e:	f1 1d       	adc	r31, r1
    7790:	e3 52       	subi	r30, 0x23	; 35
    7792:	f4 4d       	sbci	r31, 0xD4	; 212
    7794:	94 91       	lpm	r25, Z
    7796:	f9 01       	movw	r30, r18
    7798:	e4 0f       	add	r30, r20
    779a:	f1 1d       	adc	r31, r1
    779c:	e3 50       	subi	r30, 0x03	; 3
    779e:	f6 4d       	sbci	r31, 0xD6	; 214
    77a0:	84 91       	lpm	r24, Z
    77a2:	89 0f       	add	r24, r25
    77a4:	91 2d       	mov	r25, r1
    77a6:	91 1d       	adc	r25, r1
    77a8:	88 97       	sbiw	r24, 0x28	; 40
    77aa:	1c f0       	brlt	.+6      	; 0x77b2 <__vector_15+0x8c2>
			PWM_GREEN = PWM_TOP ;
    77ac:	87 e2       	ldi	r24, 0x27	; 39
    77ae:	90 e0       	ldi	r25, 0x00	; 0
    77b0:	09 c0       	rjmp	.+18     	; 0x77c4 <__vector_15+0x8d4>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[0][GREEN][g_speed6rev+g_position]);
    77b2:	80 91 27 01 	lds	r24, 0x0127
    77b6:	28 0f       	add	r18, r24
    77b8:	31 1d       	adc	r19, r1
    77ba:	23 5a       	subi	r18, 0xA3	; 163
    77bc:	3c 4c       	sbci	r19, 0xCC	; 204
    77be:	f9 01       	movw	r30, r18
    77c0:	84 91       	lpm	r24, Z
    77c2:	99 27       	eor	r25, r25
    77c4:	99 bd       	out	0x29, r25	; 41
    77c6:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[10][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[10][RED][g_speed6+g_position])) > PWM_TOP)
    77c8:	2a 2f       	mov	r18, r26
    77ca:	33 27       	eor	r19, r19
    77cc:	f9 01       	movw	r30, r18
    77ce:	e5 0f       	add	r30, r21
    77d0:	f1 1d       	adc	r31, r1
    77d2:	e3 52       	subi	r30, 0x23	; 35
    77d4:	f4 4d       	sbci	r31, 0xD4	; 212
    77d6:	94 91       	lpm	r25, Z
    77d8:	f9 01       	movw	r30, r18
    77da:	e4 0f       	add	r30, r20
    77dc:	f1 1d       	adc	r31, r1
    77de:	e3 50       	subi	r30, 0x03	; 3
    77e0:	f6 4d       	sbci	r31, 0xD6	; 214
    77e2:	84 91       	lpm	r24, Z
    77e4:	89 0f       	add	r24, r25
    77e6:	91 2d       	mov	r25, r1
    77e8:	91 1d       	adc	r25, r1
    77ea:	88 97       	sbiw	r24, 0x28	; 40
    77ec:	44 f0       	brlt	.+16     	; 0x77fe <__vector_15+0x90e>
			PWM_BLUE  = PWM_TOP ;
    77ee:	87 e2       	ldi	r24, 0x27	; 39
    77f0:	90 e0       	ldi	r25, 0x00	; 0
    77f2:	90 93 79 00 	sts	0x0079, r25
    77f6:	80 93 78 00 	sts	0x0078, r24
    77fa:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[0][BLUE][g_speed6rev+g_position]);
    77fe:	80 91 27 01 	lds	r24, 0x0127
    7802:	28 0f       	add	r18, r24
    7804:	31 1d       	adc	r19, r1
    7806:	23 5c       	subi	r18, 0xC3	; 195
    7808:	3a 4c       	sbci	r19, 0xCA	; 202
    780a:	f9 01       	movw	r30, r18
    780c:	84 91       	lpm	r24, Z
    780e:	99 27       	eor	r25, r25
    7810:	90 93 79 00 	sts	0x0079, r25
    7814:	80 93 78 00 	sts	0x0078, r24
		break;	
    7818:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
		
		case 60:				// background is changing 11 synthesis windows
			seconds_hand=0;
    781c:	10 92 25 01 	sts	0x0125, r1
			
			if ((pgm_read_byte(&gm_background[10][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[10][RED][g_speed6+g_position])) > PWM_TOP)
    7820:	50 91 2c 01 	lds	r21, 0x012C
    7824:	2a 2f       	mov	r18, r26
    7826:	33 27       	eor	r19, r19
    7828:	f9 01       	movw	r30, r18
    782a:	e5 0f       	add	r30, r21
    782c:	f1 1d       	adc	r31, r1
    782e:	e3 52       	subi	r30, 0x23	; 35
    7830:	f4 4d       	sbci	r31, 0xD4	; 212
    7832:	94 91       	lpm	r25, Z
    7834:	40 91 43 01 	lds	r20, 0x0143
    7838:	f9 01       	movw	r30, r18
    783a:	e4 0f       	add	r30, r20
    783c:	f1 1d       	adc	r31, r1
    783e:	e3 50       	subi	r30, 0x03	; 3
    7840:	f6 4d       	sbci	r31, 0xD6	; 214
    7842:	84 91       	lpm	r24, Z
    7844:	89 0f       	add	r24, r25
    7846:	91 2d       	mov	r25, r1
    7848:	91 1d       	adc	r25, r1
    784a:	88 97       	sbiw	r24, 0x28	; 40
    784c:	1c f0       	brlt	.+6      	; 0x7854 <__vector_15+0x964>
			PWM_RED = PWM_TOP ;
    784e:	87 e2       	ldi	r24, 0x27	; 39
    7850:	90 e0       	ldi	r25, 0x00	; 0
    7852:	09 c0       	rjmp	.+18     	; 0x7866 <__vector_15+0x976>
			else
			PWM_RED =  pgm_read_byte(&gc_background[7][RED][g_speed6rev+g_position]);
    7854:	80 91 27 01 	lds	r24, 0x0127
    7858:	28 0f       	add	r18, r24
    785a:	31 1d       	adc	r19, r1
    785c:	23 52       	subi	r18, 0x23	; 35
    785e:	37 4a       	sbci	r19, 0xA7	; 167
    7860:	f9 01       	movw	r30, r18
    7862:	84 91       	lpm	r24, Z
    7864:	99 27       	eor	r25, r25
    7866:	9b bd       	out	0x2b, r25	; 43
    7868:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[10][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[10][RED][g_speed6+g_position])) > PWM_TOP)
    786a:	2a 2f       	mov	r18, r26
    786c:	33 27       	eor	r19, r19
    786e:	f9 01       	movw	r30, r18
    7870:	e5 0f       	add	r30, r21
    7872:	f1 1d       	adc	r31, r1
    7874:	e3 52       	subi	r30, 0x23	; 35
    7876:	f4 4d       	sbci	r31, 0xD4	; 212
    7878:	94 91       	lpm	r25, Z
    787a:	f9 01       	movw	r30, r18
    787c:	e4 0f       	add	r30, r20
    787e:	f1 1d       	adc	r31, r1
    7880:	e3 50       	subi	r30, 0x03	; 3
    7882:	f6 4d       	sbci	r31, 0xD6	; 214
    7884:	84 91       	lpm	r24, Z
    7886:	89 0f       	add	r24, r25
    7888:	91 2d       	mov	r25, r1
    788a:	91 1d       	adc	r25, r1
    788c:	88 97       	sbiw	r24, 0x28	; 40
    788e:	1c f0       	brlt	.+6      	; 0x7896 <__vector_15+0x9a6>
			PWM_GREEN = PWM_TOP ;
    7890:	87 e2       	ldi	r24, 0x27	; 39
    7892:	90 e0       	ldi	r25, 0x00	; 0
    7894:	09 c0       	rjmp	.+18     	; 0x78a8 <__vector_15+0x9b8>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[7][GREEN][g_speed6rev+g_position]);
    7896:	80 91 27 01 	lds	r24, 0x0127
    789a:	28 0f       	add	r18, r24
    789c:	31 1d       	adc	r19, r1
    789e:	23 54       	subi	r18, 0x43	; 67
    78a0:	35 4a       	sbci	r19, 0xA5	; 165
    78a2:	f9 01       	movw	r30, r18
    78a4:	84 91       	lpm	r24, Z
    78a6:	99 27       	eor	r25, r25
    78a8:	99 bd       	out	0x29, r25	; 41
    78aa:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[10][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[10][RED][g_speed6+g_position])) > PWM_TOP)
    78ac:	2a 2f       	mov	r18, r26
    78ae:	33 27       	eor	r19, r19
    78b0:	f9 01       	movw	r30, r18
    78b2:	e5 0f       	add	r30, r21
    78b4:	f1 1d       	adc	r31, r1
    78b6:	e3 52       	subi	r30, 0x23	; 35
    78b8:	f4 4d       	sbci	r31, 0xD4	; 212
    78ba:	94 91       	lpm	r25, Z
    78bc:	f9 01       	movw	r30, r18
    78be:	e4 0f       	add	r30, r20
    78c0:	f1 1d       	adc	r31, r1
    78c2:	e3 50       	subi	r30, 0x03	; 3
    78c4:	f6 4d       	sbci	r31, 0xD6	; 214
    78c6:	84 91       	lpm	r24, Z
    78c8:	89 0f       	add	r24, r25
    78ca:	91 2d       	mov	r25, r1
    78cc:	91 1d       	adc	r25, r1
    78ce:	88 97       	sbiw	r24, 0x28	; 40
    78d0:	44 f0       	brlt	.+16     	; 0x78e2 <__vector_15+0x9f2>
			PWM_BLUE  = PWM_TOP ;
    78d2:	87 e2       	ldi	r24, 0x27	; 39
    78d4:	90 e0       	ldi	r25, 0x00	; 0
    78d6:	90 93 79 00 	sts	0x0079, r25
    78da:	80 93 78 00 	sts	0x0078, r24
    78de:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[7][BLUE][g_speed6rev+g_position]);
    78e2:	80 91 27 01 	lds	r24, 0x0127
    78e6:	28 0f       	add	r18, r24
    78e8:	31 1d       	adc	r19, r1
    78ea:	23 56       	subi	r18, 0x63	; 99
    78ec:	33 4a       	sbci	r19, 0xA3	; 163
    78ee:	f9 01       	movw	r30, r18
    78f0:	84 91       	lpm	r24, Z
    78f2:	99 27       	eor	r25, r25
    78f4:	90 93 79 00 	sts	0x0079, r25
    78f8:	80 93 78 00 	sts	0x0078, r24
		break;	
    78fc:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
	
		case 59:				// background is changing 11 synthesis africa
			seconds_hand=0;
    7900:	10 92 25 01 	sts	0x0125, r1
			
			if ((pgm_read_byte(&gm_background[10][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[10][RED][g_speed6+g_position])) > PWM_TOP)
    7904:	50 91 2c 01 	lds	r21, 0x012C
    7908:	2a 2f       	mov	r18, r26
    790a:	33 27       	eor	r19, r19
    790c:	f9 01       	movw	r30, r18
    790e:	e5 0f       	add	r30, r21
    7910:	f1 1d       	adc	r31, r1
    7912:	e3 52       	subi	r30, 0x23	; 35
    7914:	f4 4d       	sbci	r31, 0xD4	; 212
    7916:	94 91       	lpm	r25, Z
    7918:	40 91 43 01 	lds	r20, 0x0143
    791c:	f9 01       	movw	r30, r18
    791e:	e4 0f       	add	r30, r20
    7920:	f1 1d       	adc	r31, r1
    7922:	e3 50       	subi	r30, 0x03	; 3
    7924:	f6 4d       	sbci	r31, 0xD6	; 214
    7926:	84 91       	lpm	r24, Z
    7928:	89 0f       	add	r24, r25
    792a:	91 2d       	mov	r25, r1
    792c:	91 1d       	adc	r25, r1
    792e:	88 97       	sbiw	r24, 0x28	; 40
    7930:	1c f0       	brlt	.+6      	; 0x7938 <__vector_15+0xa48>
			PWM_RED = PWM_TOP ;
    7932:	87 e2       	ldi	r24, 0x27	; 39
    7934:	90 e0       	ldi	r25, 0x00	; 0
    7936:	09 c0       	rjmp	.+18     	; 0x794a <__vector_15+0xa5a>
			else
			PWM_RED =  pgm_read_byte(&gc_background[6][RED][g_speed6rev+g_position]);
    7938:	80 91 27 01 	lds	r24, 0x0127
    793c:	28 0f       	add	r18, r24
    793e:	31 1d       	adc	r19, r1
    7940:	23 5c       	subi	r18, 0xC3	; 195
    7942:	3c 4a       	sbci	r19, 0xAC	; 172
    7944:	f9 01       	movw	r30, r18
    7946:	84 91       	lpm	r24, Z
    7948:	99 27       	eor	r25, r25
    794a:	9b bd       	out	0x2b, r25	; 43
    794c:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[10][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[10][RED][g_speed6+g_position])) > PWM_TOP)
    794e:	2a 2f       	mov	r18, r26
    7950:	33 27       	eor	r19, r19
    7952:	f9 01       	movw	r30, r18
    7954:	e5 0f       	add	r30, r21
    7956:	f1 1d       	adc	r31, r1
    7958:	e3 52       	subi	r30, 0x23	; 35
    795a:	f4 4d       	sbci	r31, 0xD4	; 212
    795c:	94 91       	lpm	r25, Z
    795e:	f9 01       	movw	r30, r18
    7960:	e4 0f       	add	r30, r20
    7962:	f1 1d       	adc	r31, r1
    7964:	e3 50       	subi	r30, 0x03	; 3
    7966:	f6 4d       	sbci	r31, 0xD6	; 214
    7968:	84 91       	lpm	r24, Z
    796a:	89 0f       	add	r24, r25
    796c:	91 2d       	mov	r25, r1
    796e:	91 1d       	adc	r25, r1
    7970:	88 97       	sbiw	r24, 0x28	; 40
    7972:	1c f0       	brlt	.+6      	; 0x797a <__vector_15+0xa8a>
			PWM_GREEN = PWM_TOP ;
    7974:	87 e2       	ldi	r24, 0x27	; 39
    7976:	90 e0       	ldi	r25, 0x00	; 0
    7978:	09 c0       	rjmp	.+18     	; 0x798c <__vector_15+0xa9c>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[6][GREEN][g_speed6rev+g_position]);
    797a:	80 91 27 01 	lds	r24, 0x0127
    797e:	28 0f       	add	r18, r24
    7980:	31 1d       	adc	r19, r1
    7982:	23 5e       	subi	r18, 0xE3	; 227
    7984:	3a 4a       	sbci	r19, 0xAA	; 170
    7986:	f9 01       	movw	r30, r18
    7988:	84 91       	lpm	r24, Z
    798a:	99 27       	eor	r25, r25
    798c:	99 bd       	out	0x29, r25	; 41
    798e:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[10][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[10][RED][g_speed6+g_position])) > PWM_TOP)
    7990:	2a 2f       	mov	r18, r26
    7992:	33 27       	eor	r19, r19
    7994:	f9 01       	movw	r30, r18
    7996:	e5 0f       	add	r30, r21
    7998:	f1 1d       	adc	r31, r1
    799a:	e3 52       	subi	r30, 0x23	; 35
    799c:	f4 4d       	sbci	r31, 0xD4	; 212
    799e:	94 91       	lpm	r25, Z
    79a0:	f9 01       	movw	r30, r18
    79a2:	e4 0f       	add	r30, r20
    79a4:	f1 1d       	adc	r31, r1
    79a6:	e3 50       	subi	r30, 0x03	; 3
    79a8:	f6 4d       	sbci	r31, 0xD6	; 214
    79aa:	84 91       	lpm	r24, Z
    79ac:	89 0f       	add	r24, r25
    79ae:	91 2d       	mov	r25, r1
    79b0:	91 1d       	adc	r25, r1
    79b2:	88 97       	sbiw	r24, 0x28	; 40
    79b4:	44 f0       	brlt	.+16     	; 0x79c6 <__vector_15+0xad6>
			PWM_BLUE  = PWM_TOP ;
    79b6:	87 e2       	ldi	r24, 0x27	; 39
    79b8:	90 e0       	ldi	r25, 0x00	; 0
    79ba:	90 93 79 00 	sts	0x0079, r25
    79be:	80 93 78 00 	sts	0x0078, r24
    79c2:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[6][BLUE][g_speed6rev+g_position]);
    79c6:	80 91 27 01 	lds	r24, 0x0127
    79ca:	28 0f       	add	r18, r24
    79cc:	31 1d       	adc	r19, r1
    79ce:	23 50       	subi	r18, 0x03	; 3
    79d0:	39 4a       	sbci	r19, 0xA9	; 169
    79d2:	f9 01       	movw	r30, r18
    79d4:	84 91       	lpm	r24, Z
    79d6:	99 27       	eor	r25, r25
    79d8:	90 93 79 00 	sts	0x0079, r25
    79dc:	80 93 78 00 	sts	0x0078, r24
		break;
    79e0:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>

		case 58:				// background is changing 7 synthesis rainbow
			seconds_hand=0;
    79e4:	10 92 25 01 	sts	0x0125, r1

			if ((pgm_read_byte(&gm_background[9][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[9][RED][g_speed6+g_position])) > PWM_TOP)
    79e8:	50 91 2c 01 	lds	r21, 0x012C
    79ec:	2a 2f       	mov	r18, r26
    79ee:	33 27       	eor	r19, r19
    79f0:	f9 01       	movw	r30, r18
    79f2:	e5 0f       	add	r30, r21
    79f4:	f1 1d       	adc	r31, r1
    79f6:	e3 5e       	subi	r30, 0xE3	; 227
    79f8:	f7 4d       	sbci	r31, 0xD7	; 215
    79fa:	94 91       	lpm	r25, Z
    79fc:	40 91 43 01 	lds	r20, 0x0143
    7a00:	f9 01       	movw	r30, r18
    7a02:	e4 0f       	add	r30, r20
    7a04:	f1 1d       	adc	r31, r1
    7a06:	e3 5c       	subi	r30, 0xC3	; 195
    7a08:	f9 4d       	sbci	r31, 0xD9	; 217
    7a0a:	84 91       	lpm	r24, Z
    7a0c:	89 0f       	add	r24, r25
    7a0e:	91 2d       	mov	r25, r1
    7a10:	91 1d       	adc	r25, r1
    7a12:	88 97       	sbiw	r24, 0x28	; 40
    7a14:	1c f0       	brlt	.+6      	; 0x7a1c <__vector_15+0xb2c>
			PWM_RED = PWM_TOP ;
    7a16:	87 e2       	ldi	r24, 0x27	; 39
    7a18:	90 e0       	ldi	r25, 0x00	; 0
    7a1a:	09 c0       	rjmp	.+18     	; 0x7a2e <__vector_15+0xb3e>
			else
			PWM_RED =  pgm_read_byte(&gc_background[0][RED][g_speed6rev+g_position]);
    7a1c:	80 91 27 01 	lds	r24, 0x0127
    7a20:	28 0f       	add	r18, r24
    7a22:	31 1d       	adc	r19, r1
    7a24:	23 58       	subi	r18, 0x83	; 131
    7a26:	3e 4c       	sbci	r19, 0xCE	; 206
    7a28:	f9 01       	movw	r30, r18
    7a2a:	84 91       	lpm	r24, Z
    7a2c:	99 27       	eor	r25, r25
    7a2e:	9b bd       	out	0x2b, r25	; 43
    7a30:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[9][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[9][RED][g_speed6+g_position])) > PWM_TOP)
    7a32:	2a 2f       	mov	r18, r26
    7a34:	33 27       	eor	r19, r19
    7a36:	f9 01       	movw	r30, r18
    7a38:	e5 0f       	add	r30, r21
    7a3a:	f1 1d       	adc	r31, r1
    7a3c:	e3 5e       	subi	r30, 0xE3	; 227
    7a3e:	f7 4d       	sbci	r31, 0xD7	; 215
    7a40:	94 91       	lpm	r25, Z
    7a42:	f9 01       	movw	r30, r18
    7a44:	e4 0f       	add	r30, r20
    7a46:	f1 1d       	adc	r31, r1
    7a48:	e3 5c       	subi	r30, 0xC3	; 195
    7a4a:	f9 4d       	sbci	r31, 0xD9	; 217
    7a4c:	84 91       	lpm	r24, Z
    7a4e:	89 0f       	add	r24, r25
    7a50:	91 2d       	mov	r25, r1
    7a52:	91 1d       	adc	r25, r1
    7a54:	88 97       	sbiw	r24, 0x28	; 40
    7a56:	1c f0       	brlt	.+6      	; 0x7a5e <__vector_15+0xb6e>
			PWM_GREEN = PWM_TOP ;
    7a58:	87 e2       	ldi	r24, 0x27	; 39
    7a5a:	90 e0       	ldi	r25, 0x00	; 0
    7a5c:	09 c0       	rjmp	.+18     	; 0x7a70 <__vector_15+0xb80>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[0][GREEN][g_speed6rev+g_position]);
    7a5e:	80 91 27 01 	lds	r24, 0x0127
    7a62:	28 0f       	add	r18, r24
    7a64:	31 1d       	adc	r19, r1
    7a66:	23 5a       	subi	r18, 0xA3	; 163
    7a68:	3c 4c       	sbci	r19, 0xCC	; 204
    7a6a:	f9 01       	movw	r30, r18
    7a6c:	84 91       	lpm	r24, Z
    7a6e:	99 27       	eor	r25, r25
    7a70:	99 bd       	out	0x29, r25	; 41
    7a72:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[9][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[9][RED][g_speed6+g_position])) > PWM_TOP)
    7a74:	2a 2f       	mov	r18, r26
    7a76:	33 27       	eor	r19, r19
    7a78:	f9 01       	movw	r30, r18
    7a7a:	e5 0f       	add	r30, r21
    7a7c:	f1 1d       	adc	r31, r1
    7a7e:	e3 5e       	subi	r30, 0xE3	; 227
    7a80:	f7 4d       	sbci	r31, 0xD7	; 215
    7a82:	94 91       	lpm	r25, Z
    7a84:	f9 01       	movw	r30, r18
    7a86:	e4 0f       	add	r30, r20
    7a88:	f1 1d       	adc	r31, r1
    7a8a:	e3 5c       	subi	r30, 0xC3	; 195
    7a8c:	f9 4d       	sbci	r31, 0xD9	; 217
    7a8e:	84 91       	lpm	r24, Z
    7a90:	89 0f       	add	r24, r25
    7a92:	91 2d       	mov	r25, r1
    7a94:	91 1d       	adc	r25, r1
    7a96:	88 97       	sbiw	r24, 0x28	; 40
    7a98:	44 f0       	brlt	.+16     	; 0x7aaa <__vector_15+0xbba>
			PWM_BLUE  = PWM_TOP ;
    7a9a:	87 e2       	ldi	r24, 0x27	; 39
    7a9c:	90 e0       	ldi	r25, 0x00	; 0
    7a9e:	90 93 79 00 	sts	0x0079, r25
    7aa2:	80 93 78 00 	sts	0x0078, r24
    7aa6:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[0][BLUE][g_speed6rev+g_position]);
    7aaa:	80 91 27 01 	lds	r24, 0x0127
    7aae:	28 0f       	add	r18, r24
    7ab0:	31 1d       	adc	r19, r1
    7ab2:	23 5c       	subi	r18, 0xC3	; 195
    7ab4:	3a 4c       	sbci	r19, 0xCA	; 202
    7ab6:	f9 01       	movw	r30, r18
    7ab8:	84 91       	lpm	r24, Z
    7aba:	99 27       	eor	r25, r25
    7abc:	90 93 79 00 	sts	0x0079, r25
    7ac0:	80 93 78 00 	sts	0x0078, r24
		break;	
    7ac4:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
		
		case 57:				// background is changing 7 synthesis windows
			seconds_hand=0;
    7ac8:	10 92 25 01 	sts	0x0125, r1
			
			if ((pgm_read_byte(&gm_background[9][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[9][RED][g_speed6+g_position])) > PWM_TOP)
    7acc:	50 91 2c 01 	lds	r21, 0x012C
    7ad0:	2a 2f       	mov	r18, r26
    7ad2:	33 27       	eor	r19, r19
    7ad4:	f9 01       	movw	r30, r18
    7ad6:	e5 0f       	add	r30, r21
    7ad8:	f1 1d       	adc	r31, r1
    7ada:	e3 5e       	subi	r30, 0xE3	; 227
    7adc:	f7 4d       	sbci	r31, 0xD7	; 215
    7ade:	94 91       	lpm	r25, Z
    7ae0:	40 91 43 01 	lds	r20, 0x0143
    7ae4:	f9 01       	movw	r30, r18
    7ae6:	e4 0f       	add	r30, r20
    7ae8:	f1 1d       	adc	r31, r1
    7aea:	e3 5c       	subi	r30, 0xC3	; 195
    7aec:	f9 4d       	sbci	r31, 0xD9	; 217
    7aee:	84 91       	lpm	r24, Z
    7af0:	89 0f       	add	r24, r25
    7af2:	91 2d       	mov	r25, r1
    7af4:	91 1d       	adc	r25, r1
    7af6:	88 97       	sbiw	r24, 0x28	; 40
    7af8:	1c f0       	brlt	.+6      	; 0x7b00 <__vector_15+0xc10>
			PWM_RED = PWM_TOP ;
    7afa:	87 e2       	ldi	r24, 0x27	; 39
    7afc:	90 e0       	ldi	r25, 0x00	; 0
    7afe:	09 c0       	rjmp	.+18     	; 0x7b12 <__vector_15+0xc22>
			else
			PWM_RED =  pgm_read_byte(&gc_background[7][RED][g_speed6rev+g_position]);
    7b00:	80 91 27 01 	lds	r24, 0x0127
    7b04:	28 0f       	add	r18, r24
    7b06:	31 1d       	adc	r19, r1
    7b08:	23 52       	subi	r18, 0x23	; 35
    7b0a:	37 4a       	sbci	r19, 0xA7	; 167
    7b0c:	f9 01       	movw	r30, r18
    7b0e:	84 91       	lpm	r24, Z
    7b10:	99 27       	eor	r25, r25
    7b12:	9b bd       	out	0x2b, r25	; 43
    7b14:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[9][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[9][RED][g_speed6+g_position])) > PWM_TOP)
    7b16:	2a 2f       	mov	r18, r26
    7b18:	33 27       	eor	r19, r19
    7b1a:	f9 01       	movw	r30, r18
    7b1c:	e5 0f       	add	r30, r21
    7b1e:	f1 1d       	adc	r31, r1
    7b20:	e3 5e       	subi	r30, 0xE3	; 227
    7b22:	f7 4d       	sbci	r31, 0xD7	; 215
    7b24:	94 91       	lpm	r25, Z
    7b26:	f9 01       	movw	r30, r18
    7b28:	e4 0f       	add	r30, r20
    7b2a:	f1 1d       	adc	r31, r1
    7b2c:	e3 5c       	subi	r30, 0xC3	; 195
    7b2e:	f9 4d       	sbci	r31, 0xD9	; 217
    7b30:	84 91       	lpm	r24, Z
    7b32:	89 0f       	add	r24, r25
    7b34:	91 2d       	mov	r25, r1
    7b36:	91 1d       	adc	r25, r1
    7b38:	88 97       	sbiw	r24, 0x28	; 40
    7b3a:	1c f0       	brlt	.+6      	; 0x7b42 <__vector_15+0xc52>
			PWM_GREEN = PWM_TOP ;
    7b3c:	87 e2       	ldi	r24, 0x27	; 39
    7b3e:	90 e0       	ldi	r25, 0x00	; 0
    7b40:	09 c0       	rjmp	.+18     	; 0x7b54 <__vector_15+0xc64>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[7][GREEN][g_speed6rev+g_position]);
    7b42:	80 91 27 01 	lds	r24, 0x0127
    7b46:	28 0f       	add	r18, r24
    7b48:	31 1d       	adc	r19, r1
    7b4a:	23 54       	subi	r18, 0x43	; 67
    7b4c:	35 4a       	sbci	r19, 0xA5	; 165
    7b4e:	f9 01       	movw	r30, r18
    7b50:	84 91       	lpm	r24, Z
    7b52:	99 27       	eor	r25, r25
    7b54:	99 bd       	out	0x29, r25	; 41
    7b56:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[9][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[9][RED][g_speed6+g_position])) > PWM_TOP)
    7b58:	2a 2f       	mov	r18, r26
    7b5a:	33 27       	eor	r19, r19
    7b5c:	f9 01       	movw	r30, r18
    7b5e:	e5 0f       	add	r30, r21
    7b60:	f1 1d       	adc	r31, r1
    7b62:	e3 5e       	subi	r30, 0xE3	; 227
    7b64:	f7 4d       	sbci	r31, 0xD7	; 215
    7b66:	94 91       	lpm	r25, Z
    7b68:	f9 01       	movw	r30, r18
    7b6a:	e4 0f       	add	r30, r20
    7b6c:	f1 1d       	adc	r31, r1
    7b6e:	e3 5c       	subi	r30, 0xC3	; 195
    7b70:	f9 4d       	sbci	r31, 0xD9	; 217
    7b72:	84 91       	lpm	r24, Z
    7b74:	89 0f       	add	r24, r25
    7b76:	91 2d       	mov	r25, r1
    7b78:	91 1d       	adc	r25, r1
    7b7a:	88 97       	sbiw	r24, 0x28	; 40
    7b7c:	44 f0       	brlt	.+16     	; 0x7b8e <__vector_15+0xc9e>
			PWM_BLUE  = PWM_TOP ;
    7b7e:	87 e2       	ldi	r24, 0x27	; 39
    7b80:	90 e0       	ldi	r25, 0x00	; 0
    7b82:	90 93 79 00 	sts	0x0079, r25
    7b86:	80 93 78 00 	sts	0x0078, r24
    7b8a:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[7][BLUE][g_speed6rev+g_position]);
    7b8e:	80 91 27 01 	lds	r24, 0x0127
    7b92:	28 0f       	add	r18, r24
    7b94:	31 1d       	adc	r19, r1
    7b96:	23 56       	subi	r18, 0x63	; 99
    7b98:	33 4a       	sbci	r19, 0xA3	; 163
    7b9a:	f9 01       	movw	r30, r18
    7b9c:	84 91       	lpm	r24, Z
    7b9e:	99 27       	eor	r25, r25
    7ba0:	90 93 79 00 	sts	0x0079, r25
    7ba4:	80 93 78 00 	sts	0x0078, r24
		break;	
    7ba8:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
	
		case 56:				// background is changing 7 synthesis africa
			seconds_hand=0;
    7bac:	10 92 25 01 	sts	0x0125, r1
			
			if ((pgm_read_byte(&gm_background[9][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[9][RED][g_speed6+g_position])) > PWM_TOP)
    7bb0:	50 91 2c 01 	lds	r21, 0x012C
    7bb4:	2a 2f       	mov	r18, r26
    7bb6:	33 27       	eor	r19, r19
    7bb8:	f9 01       	movw	r30, r18
    7bba:	e5 0f       	add	r30, r21
    7bbc:	f1 1d       	adc	r31, r1
    7bbe:	e3 5e       	subi	r30, 0xE3	; 227
    7bc0:	f7 4d       	sbci	r31, 0xD7	; 215
    7bc2:	94 91       	lpm	r25, Z
    7bc4:	40 91 43 01 	lds	r20, 0x0143
    7bc8:	f9 01       	movw	r30, r18
    7bca:	e4 0f       	add	r30, r20
    7bcc:	f1 1d       	adc	r31, r1
    7bce:	e3 5c       	subi	r30, 0xC3	; 195
    7bd0:	f9 4d       	sbci	r31, 0xD9	; 217
    7bd2:	84 91       	lpm	r24, Z
    7bd4:	89 0f       	add	r24, r25
    7bd6:	91 2d       	mov	r25, r1
    7bd8:	91 1d       	adc	r25, r1
    7bda:	88 97       	sbiw	r24, 0x28	; 40
    7bdc:	1c f0       	brlt	.+6      	; 0x7be4 <__vector_15+0xcf4>
			PWM_RED = PWM_TOP ;
    7bde:	87 e2       	ldi	r24, 0x27	; 39
    7be0:	90 e0       	ldi	r25, 0x00	; 0
    7be2:	09 c0       	rjmp	.+18     	; 0x7bf6 <__vector_15+0xd06>
			else
			PWM_RED =  pgm_read_byte(&gc_background[6][RED][g_speed6rev+g_position]);
    7be4:	80 91 27 01 	lds	r24, 0x0127
    7be8:	28 0f       	add	r18, r24
    7bea:	31 1d       	adc	r19, r1
    7bec:	23 5c       	subi	r18, 0xC3	; 195
    7bee:	3c 4a       	sbci	r19, 0xAC	; 172
    7bf0:	f9 01       	movw	r30, r18
    7bf2:	84 91       	lpm	r24, Z
    7bf4:	99 27       	eor	r25, r25
    7bf6:	9b bd       	out	0x2b, r25	; 43
    7bf8:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[9][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[9][RED][g_speed6+g_position])) > PWM_TOP)
    7bfa:	2a 2f       	mov	r18, r26
    7bfc:	33 27       	eor	r19, r19
    7bfe:	f9 01       	movw	r30, r18
    7c00:	e5 0f       	add	r30, r21
    7c02:	f1 1d       	adc	r31, r1
    7c04:	e3 5e       	subi	r30, 0xE3	; 227
    7c06:	f7 4d       	sbci	r31, 0xD7	; 215
    7c08:	94 91       	lpm	r25, Z
    7c0a:	f9 01       	movw	r30, r18
    7c0c:	e4 0f       	add	r30, r20
    7c0e:	f1 1d       	adc	r31, r1
    7c10:	e3 5c       	subi	r30, 0xC3	; 195
    7c12:	f9 4d       	sbci	r31, 0xD9	; 217
    7c14:	84 91       	lpm	r24, Z
    7c16:	89 0f       	add	r24, r25
    7c18:	91 2d       	mov	r25, r1
    7c1a:	91 1d       	adc	r25, r1
    7c1c:	88 97       	sbiw	r24, 0x28	; 40
    7c1e:	1c f0       	brlt	.+6      	; 0x7c26 <__vector_15+0xd36>
			PWM_GREEN = PWM_TOP ;
    7c20:	87 e2       	ldi	r24, 0x27	; 39
    7c22:	90 e0       	ldi	r25, 0x00	; 0
    7c24:	09 c0       	rjmp	.+18     	; 0x7c38 <__vector_15+0xd48>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[6][GREEN][g_speed6rev+g_position]);
    7c26:	80 91 27 01 	lds	r24, 0x0127
    7c2a:	28 0f       	add	r18, r24
    7c2c:	31 1d       	adc	r19, r1
    7c2e:	23 5e       	subi	r18, 0xE3	; 227
    7c30:	3a 4a       	sbci	r19, 0xAA	; 170
    7c32:	f9 01       	movw	r30, r18
    7c34:	84 91       	lpm	r24, Z
    7c36:	99 27       	eor	r25, r25
    7c38:	99 bd       	out	0x29, r25	; 41
    7c3a:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[9][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[9][RED][g_speed6+g_position])) > PWM_TOP)
    7c3c:	2a 2f       	mov	r18, r26
    7c3e:	33 27       	eor	r19, r19
    7c40:	f9 01       	movw	r30, r18
    7c42:	e5 0f       	add	r30, r21
    7c44:	f1 1d       	adc	r31, r1
    7c46:	e3 5e       	subi	r30, 0xE3	; 227
    7c48:	f7 4d       	sbci	r31, 0xD7	; 215
    7c4a:	94 91       	lpm	r25, Z
    7c4c:	f9 01       	movw	r30, r18
    7c4e:	e4 0f       	add	r30, r20
    7c50:	f1 1d       	adc	r31, r1
    7c52:	e3 5c       	subi	r30, 0xC3	; 195
    7c54:	f9 4d       	sbci	r31, 0xD9	; 217
    7c56:	84 91       	lpm	r24, Z
    7c58:	89 0f       	add	r24, r25
    7c5a:	91 2d       	mov	r25, r1
    7c5c:	91 1d       	adc	r25, r1
    7c5e:	88 97       	sbiw	r24, 0x28	; 40
    7c60:	44 f0       	brlt	.+16     	; 0x7c72 <__vector_15+0xd82>
			PWM_BLUE  = PWM_TOP ;
    7c62:	87 e2       	ldi	r24, 0x27	; 39
    7c64:	90 e0       	ldi	r25, 0x00	; 0
    7c66:	90 93 79 00 	sts	0x0079, r25
    7c6a:	80 93 78 00 	sts	0x0078, r24
    7c6e:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[6][BLUE][g_speed6rev+g_position]);
    7c72:	80 91 27 01 	lds	r24, 0x0127
    7c76:	28 0f       	add	r18, r24
    7c78:	31 1d       	adc	r19, r1
    7c7a:	23 50       	subi	r18, 0x03	; 3
    7c7c:	39 4a       	sbci	r19, 0xA9	; 169
    7c7e:	f9 01       	movw	r30, r18
    7c80:	84 91       	lpm	r24, Z
    7c82:	99 27       	eor	r25, r25
    7c84:	90 93 79 00 	sts	0x0079, r25
    7c88:	80 93 78 00 	sts	0x0078, r24
		break;	
    7c8c:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
		
	
		case 55:				// background is changing 5 synthesis rainbow
			seconds_hand=0;
    7c90:	10 92 25 01 	sts	0x0125, r1
			
			if ((pgm_read_byte(&gm_background[8][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[8][RED][g_speed6+g_position])) > PWM_TOP)
    7c94:	50 91 2c 01 	lds	r21, 0x012C
    7c98:	2a 2f       	mov	r18, r26
    7c9a:	33 27       	eor	r19, r19
    7c9c:	f9 01       	movw	r30, r18
    7c9e:	e5 0f       	add	r30, r21
    7ca0:	f1 1d       	adc	r31, r1
    7ca2:	e3 5a       	subi	r30, 0xA3	; 163
    7ca4:	fb 4d       	sbci	r31, 0xDB	; 219
    7ca6:	94 91       	lpm	r25, Z
    7ca8:	40 91 43 01 	lds	r20, 0x0143
    7cac:	f9 01       	movw	r30, r18
    7cae:	e4 0f       	add	r30, r20
    7cb0:	f1 1d       	adc	r31, r1
    7cb2:	e3 58       	subi	r30, 0x83	; 131
    7cb4:	fd 4d       	sbci	r31, 0xDD	; 221
    7cb6:	84 91       	lpm	r24, Z
    7cb8:	89 0f       	add	r24, r25
    7cba:	91 2d       	mov	r25, r1
    7cbc:	91 1d       	adc	r25, r1
    7cbe:	88 97       	sbiw	r24, 0x28	; 40
    7cc0:	1c f0       	brlt	.+6      	; 0x7cc8 <__vector_15+0xdd8>
			PWM_RED = PWM_TOP ;
    7cc2:	87 e2       	ldi	r24, 0x27	; 39
    7cc4:	90 e0       	ldi	r25, 0x00	; 0
    7cc6:	09 c0       	rjmp	.+18     	; 0x7cda <__vector_15+0xdea>
			else
			PWM_RED =  pgm_read_byte(&gc_background[0][RED][g_speed6rev+g_position]);
    7cc8:	80 91 27 01 	lds	r24, 0x0127
    7ccc:	28 0f       	add	r18, r24
    7cce:	31 1d       	adc	r19, r1
    7cd0:	23 58       	subi	r18, 0x83	; 131
    7cd2:	3e 4c       	sbci	r19, 0xCE	; 206
    7cd4:	f9 01       	movw	r30, r18
    7cd6:	84 91       	lpm	r24, Z
    7cd8:	99 27       	eor	r25, r25
    7cda:	9b bd       	out	0x2b, r25	; 43
    7cdc:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[8][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[8][RED][g_speed6+g_position])) > PWM_TOP)
    7cde:	2a 2f       	mov	r18, r26
    7ce0:	33 27       	eor	r19, r19
    7ce2:	f9 01       	movw	r30, r18
    7ce4:	e5 0f       	add	r30, r21
    7ce6:	f1 1d       	adc	r31, r1
    7ce8:	e3 5a       	subi	r30, 0xA3	; 163
    7cea:	fb 4d       	sbci	r31, 0xDB	; 219
    7cec:	94 91       	lpm	r25, Z
    7cee:	f9 01       	movw	r30, r18
    7cf0:	e4 0f       	add	r30, r20
    7cf2:	f1 1d       	adc	r31, r1
    7cf4:	e3 58       	subi	r30, 0x83	; 131
    7cf6:	fd 4d       	sbci	r31, 0xDD	; 221
    7cf8:	84 91       	lpm	r24, Z
    7cfa:	89 0f       	add	r24, r25
    7cfc:	91 2d       	mov	r25, r1
    7cfe:	91 1d       	adc	r25, r1
    7d00:	88 97       	sbiw	r24, 0x28	; 40
    7d02:	1c f0       	brlt	.+6      	; 0x7d0a <__vector_15+0xe1a>
			PWM_GREEN = PWM_TOP ;
    7d04:	87 e2       	ldi	r24, 0x27	; 39
    7d06:	90 e0       	ldi	r25, 0x00	; 0
    7d08:	09 c0       	rjmp	.+18     	; 0x7d1c <__vector_15+0xe2c>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[0][GREEN][g_speed6rev+g_position]);
    7d0a:	80 91 27 01 	lds	r24, 0x0127
    7d0e:	28 0f       	add	r18, r24
    7d10:	31 1d       	adc	r19, r1
    7d12:	23 5a       	subi	r18, 0xA3	; 163
    7d14:	3c 4c       	sbci	r19, 0xCC	; 204
    7d16:	f9 01       	movw	r30, r18
    7d18:	84 91       	lpm	r24, Z
    7d1a:	99 27       	eor	r25, r25
    7d1c:	99 bd       	out	0x29, r25	; 41
    7d1e:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[8][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[8][RED][g_speed6+g_position])) > PWM_TOP)
    7d20:	2a 2f       	mov	r18, r26
    7d22:	33 27       	eor	r19, r19
    7d24:	f9 01       	movw	r30, r18
    7d26:	e5 0f       	add	r30, r21
    7d28:	f1 1d       	adc	r31, r1
    7d2a:	e3 5a       	subi	r30, 0xA3	; 163
    7d2c:	fb 4d       	sbci	r31, 0xDB	; 219
    7d2e:	94 91       	lpm	r25, Z
    7d30:	f9 01       	movw	r30, r18
    7d32:	e4 0f       	add	r30, r20
    7d34:	f1 1d       	adc	r31, r1
    7d36:	e3 58       	subi	r30, 0x83	; 131
    7d38:	fd 4d       	sbci	r31, 0xDD	; 221
    7d3a:	84 91       	lpm	r24, Z
    7d3c:	89 0f       	add	r24, r25
    7d3e:	91 2d       	mov	r25, r1
    7d40:	91 1d       	adc	r25, r1
    7d42:	88 97       	sbiw	r24, 0x28	; 40
    7d44:	44 f0       	brlt	.+16     	; 0x7d56 <__vector_15+0xe66>
			PWM_BLUE  = PWM_TOP ;
    7d46:	87 e2       	ldi	r24, 0x27	; 39
    7d48:	90 e0       	ldi	r25, 0x00	; 0
    7d4a:	90 93 79 00 	sts	0x0079, r25
    7d4e:	80 93 78 00 	sts	0x0078, r24
    7d52:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[0][BLUE][g_speed6rev+g_position]);	
    7d56:	80 91 27 01 	lds	r24, 0x0127
    7d5a:	28 0f       	add	r18, r24
    7d5c:	31 1d       	adc	r19, r1
    7d5e:	23 5c       	subi	r18, 0xC3	; 195
    7d60:	3a 4c       	sbci	r19, 0xCA	; 202
    7d62:	f9 01       	movw	r30, r18
    7d64:	84 91       	lpm	r24, Z
    7d66:	99 27       	eor	r25, r25
    7d68:	90 93 79 00 	sts	0x0079, r25
    7d6c:	80 93 78 00 	sts	0x0078, r24
		break;	
    7d70:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
				
		case 54:				// background is changing 5 synthesis windows
			seconds_hand=0;
    7d74:	10 92 25 01 	sts	0x0125, r1
			
			if ((pgm_read_byte(&gm_background[8][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[8][RED][g_speed6+g_position])) > PWM_TOP)
    7d78:	50 91 2c 01 	lds	r21, 0x012C
    7d7c:	2a 2f       	mov	r18, r26
    7d7e:	33 27       	eor	r19, r19
    7d80:	f9 01       	movw	r30, r18
    7d82:	e5 0f       	add	r30, r21
    7d84:	f1 1d       	adc	r31, r1
    7d86:	e3 5a       	subi	r30, 0xA3	; 163
    7d88:	fb 4d       	sbci	r31, 0xDB	; 219
    7d8a:	94 91       	lpm	r25, Z
    7d8c:	40 91 43 01 	lds	r20, 0x0143
    7d90:	f9 01       	movw	r30, r18
    7d92:	e4 0f       	add	r30, r20
    7d94:	f1 1d       	adc	r31, r1
    7d96:	e3 58       	subi	r30, 0x83	; 131
    7d98:	fd 4d       	sbci	r31, 0xDD	; 221
    7d9a:	84 91       	lpm	r24, Z
    7d9c:	89 0f       	add	r24, r25
    7d9e:	91 2d       	mov	r25, r1
    7da0:	91 1d       	adc	r25, r1
    7da2:	88 97       	sbiw	r24, 0x28	; 40
    7da4:	1c f0       	brlt	.+6      	; 0x7dac <__vector_15+0xebc>
			PWM_RED = PWM_TOP ;
    7da6:	87 e2       	ldi	r24, 0x27	; 39
    7da8:	90 e0       	ldi	r25, 0x00	; 0
    7daa:	09 c0       	rjmp	.+18     	; 0x7dbe <__vector_15+0xece>
			else
			PWM_RED =  pgm_read_byte(&gc_background[7][RED][g_speed6rev+g_position]);
    7dac:	80 91 27 01 	lds	r24, 0x0127
    7db0:	28 0f       	add	r18, r24
    7db2:	31 1d       	adc	r19, r1
    7db4:	23 52       	subi	r18, 0x23	; 35
    7db6:	37 4a       	sbci	r19, 0xA7	; 167
    7db8:	f9 01       	movw	r30, r18
    7dba:	84 91       	lpm	r24, Z
    7dbc:	99 27       	eor	r25, r25
    7dbe:	9b bd       	out	0x2b, r25	; 43
    7dc0:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[8][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[8][RED][g_speed6+g_position])) > PWM_TOP)
    7dc2:	2a 2f       	mov	r18, r26
    7dc4:	33 27       	eor	r19, r19
    7dc6:	f9 01       	movw	r30, r18
    7dc8:	e5 0f       	add	r30, r21
    7dca:	f1 1d       	adc	r31, r1
    7dcc:	e3 5a       	subi	r30, 0xA3	; 163
    7dce:	fb 4d       	sbci	r31, 0xDB	; 219
    7dd0:	94 91       	lpm	r25, Z
    7dd2:	f9 01       	movw	r30, r18
    7dd4:	e4 0f       	add	r30, r20
    7dd6:	f1 1d       	adc	r31, r1
    7dd8:	e3 58       	subi	r30, 0x83	; 131
    7dda:	fd 4d       	sbci	r31, 0xDD	; 221
    7ddc:	84 91       	lpm	r24, Z
    7dde:	89 0f       	add	r24, r25
    7de0:	91 2d       	mov	r25, r1
    7de2:	91 1d       	adc	r25, r1
    7de4:	88 97       	sbiw	r24, 0x28	; 40
    7de6:	1c f0       	brlt	.+6      	; 0x7dee <__vector_15+0xefe>
			PWM_GREEN = PWM_TOP ;
    7de8:	87 e2       	ldi	r24, 0x27	; 39
    7dea:	90 e0       	ldi	r25, 0x00	; 0
    7dec:	09 c0       	rjmp	.+18     	; 0x7e00 <__vector_15+0xf10>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[7][GREEN][g_speed6rev+g_position]);
    7dee:	80 91 27 01 	lds	r24, 0x0127
    7df2:	28 0f       	add	r18, r24
    7df4:	31 1d       	adc	r19, r1
    7df6:	23 54       	subi	r18, 0x43	; 67
    7df8:	35 4a       	sbci	r19, 0xA5	; 165
    7dfa:	f9 01       	movw	r30, r18
    7dfc:	84 91       	lpm	r24, Z
    7dfe:	99 27       	eor	r25, r25
    7e00:	99 bd       	out	0x29, r25	; 41
    7e02:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[8][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[8][RED][g_speed6+g_position])) > PWM_TOP)
    7e04:	2a 2f       	mov	r18, r26
    7e06:	33 27       	eor	r19, r19
    7e08:	f9 01       	movw	r30, r18
    7e0a:	e5 0f       	add	r30, r21
    7e0c:	f1 1d       	adc	r31, r1
    7e0e:	e3 5a       	subi	r30, 0xA3	; 163
    7e10:	fb 4d       	sbci	r31, 0xDB	; 219
    7e12:	94 91       	lpm	r25, Z
    7e14:	f9 01       	movw	r30, r18
    7e16:	e4 0f       	add	r30, r20
    7e18:	f1 1d       	adc	r31, r1
    7e1a:	e3 58       	subi	r30, 0x83	; 131
    7e1c:	fd 4d       	sbci	r31, 0xDD	; 221
    7e1e:	84 91       	lpm	r24, Z
    7e20:	89 0f       	add	r24, r25
    7e22:	91 2d       	mov	r25, r1
    7e24:	91 1d       	adc	r25, r1
    7e26:	88 97       	sbiw	r24, 0x28	; 40
    7e28:	44 f0       	brlt	.+16     	; 0x7e3a <__vector_15+0xf4a>
			PWM_BLUE  = PWM_TOP ;
    7e2a:	87 e2       	ldi	r24, 0x27	; 39
    7e2c:	90 e0       	ldi	r25, 0x00	; 0
    7e2e:	90 93 79 00 	sts	0x0079, r25
    7e32:	80 93 78 00 	sts	0x0078, r24
    7e36:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[7][BLUE][g_speed6rev+g_position]);	
    7e3a:	80 91 27 01 	lds	r24, 0x0127
    7e3e:	28 0f       	add	r18, r24
    7e40:	31 1d       	adc	r19, r1
    7e42:	23 56       	subi	r18, 0x63	; 99
    7e44:	33 4a       	sbci	r19, 0xA3	; 163
    7e46:	f9 01       	movw	r30, r18
    7e48:	84 91       	lpm	r24, Z
    7e4a:	99 27       	eor	r25, r25
    7e4c:	90 93 79 00 	sts	0x0079, r25
    7e50:	80 93 78 00 	sts	0x0078, r24
		break;	
    7e54:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			
		case 53:				// background is changing 5 synthesis africa
			seconds_hand=0;
    7e58:	10 92 25 01 	sts	0x0125, r1
			
			if ((pgm_read_byte(&gm_background[8][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[8][RED][g_speed6+g_position])) > PWM_TOP)
    7e5c:	50 91 2c 01 	lds	r21, 0x012C
    7e60:	2a 2f       	mov	r18, r26
    7e62:	33 27       	eor	r19, r19
    7e64:	f9 01       	movw	r30, r18
    7e66:	e5 0f       	add	r30, r21
    7e68:	f1 1d       	adc	r31, r1
    7e6a:	e3 5a       	subi	r30, 0xA3	; 163
    7e6c:	fb 4d       	sbci	r31, 0xDB	; 219
    7e6e:	94 91       	lpm	r25, Z
    7e70:	40 91 43 01 	lds	r20, 0x0143
    7e74:	f9 01       	movw	r30, r18
    7e76:	e4 0f       	add	r30, r20
    7e78:	f1 1d       	adc	r31, r1
    7e7a:	e3 58       	subi	r30, 0x83	; 131
    7e7c:	fd 4d       	sbci	r31, 0xDD	; 221
    7e7e:	84 91       	lpm	r24, Z
    7e80:	89 0f       	add	r24, r25
    7e82:	91 2d       	mov	r25, r1
    7e84:	91 1d       	adc	r25, r1
    7e86:	88 97       	sbiw	r24, 0x28	; 40
    7e88:	1c f0       	brlt	.+6      	; 0x7e90 <__vector_15+0xfa0>
			PWM_RED = PWM_TOP ;
    7e8a:	87 e2       	ldi	r24, 0x27	; 39
    7e8c:	90 e0       	ldi	r25, 0x00	; 0
    7e8e:	09 c0       	rjmp	.+18     	; 0x7ea2 <__vector_15+0xfb2>
			else
			PWM_RED =  pgm_read_byte(&gc_background[6][RED][g_speed6rev+g_position]);
    7e90:	80 91 27 01 	lds	r24, 0x0127
    7e94:	28 0f       	add	r18, r24
    7e96:	31 1d       	adc	r19, r1
    7e98:	23 5c       	subi	r18, 0xC3	; 195
    7e9a:	3c 4a       	sbci	r19, 0xAC	; 172
    7e9c:	f9 01       	movw	r30, r18
    7e9e:	84 91       	lpm	r24, Z
    7ea0:	99 27       	eor	r25, r25
    7ea2:	9b bd       	out	0x2b, r25	; 43
    7ea4:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[8][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[8][RED][g_speed6+g_position])) > PWM_TOP)
    7ea6:	2a 2f       	mov	r18, r26
    7ea8:	33 27       	eor	r19, r19
    7eaa:	f9 01       	movw	r30, r18
    7eac:	e5 0f       	add	r30, r21
    7eae:	f1 1d       	adc	r31, r1
    7eb0:	e3 5a       	subi	r30, 0xA3	; 163
    7eb2:	fb 4d       	sbci	r31, 0xDB	; 219
    7eb4:	94 91       	lpm	r25, Z
    7eb6:	f9 01       	movw	r30, r18
    7eb8:	e4 0f       	add	r30, r20
    7eba:	f1 1d       	adc	r31, r1
    7ebc:	e3 58       	subi	r30, 0x83	; 131
    7ebe:	fd 4d       	sbci	r31, 0xDD	; 221
    7ec0:	84 91       	lpm	r24, Z
    7ec2:	89 0f       	add	r24, r25
    7ec4:	91 2d       	mov	r25, r1
    7ec6:	91 1d       	adc	r25, r1
    7ec8:	88 97       	sbiw	r24, 0x28	; 40
    7eca:	1c f0       	brlt	.+6      	; 0x7ed2 <__vector_15+0xfe2>
			PWM_GREEN = PWM_TOP ;
    7ecc:	87 e2       	ldi	r24, 0x27	; 39
    7ece:	90 e0       	ldi	r25, 0x00	; 0
    7ed0:	09 c0       	rjmp	.+18     	; 0x7ee4 <__vector_15+0xff4>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[6][GREEN][g_speed6rev+g_position]);
    7ed2:	80 91 27 01 	lds	r24, 0x0127
    7ed6:	28 0f       	add	r18, r24
    7ed8:	31 1d       	adc	r19, r1
    7eda:	23 5e       	subi	r18, 0xE3	; 227
    7edc:	3a 4a       	sbci	r19, 0xAA	; 170
    7ede:	f9 01       	movw	r30, r18
    7ee0:	84 91       	lpm	r24, Z
    7ee2:	99 27       	eor	r25, r25
    7ee4:	99 bd       	out	0x29, r25	; 41
    7ee6:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[8][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[8][RED][g_speed6+g_position])) > PWM_TOP)
    7ee8:	2a 2f       	mov	r18, r26
    7eea:	33 27       	eor	r19, r19
    7eec:	f9 01       	movw	r30, r18
    7eee:	e5 0f       	add	r30, r21
    7ef0:	f1 1d       	adc	r31, r1
    7ef2:	e3 5a       	subi	r30, 0xA3	; 163
    7ef4:	fb 4d       	sbci	r31, 0xDB	; 219
    7ef6:	94 91       	lpm	r25, Z
    7ef8:	f9 01       	movw	r30, r18
    7efa:	e4 0f       	add	r30, r20
    7efc:	f1 1d       	adc	r31, r1
    7efe:	e3 58       	subi	r30, 0x83	; 131
    7f00:	fd 4d       	sbci	r31, 0xDD	; 221
    7f02:	84 91       	lpm	r24, Z
    7f04:	89 0f       	add	r24, r25
    7f06:	91 2d       	mov	r25, r1
    7f08:	91 1d       	adc	r25, r1
    7f0a:	88 97       	sbiw	r24, 0x28	; 40
    7f0c:	44 f0       	brlt	.+16     	; 0x7f1e <__vector_15+0x102e>
			PWM_BLUE  = PWM_TOP ;
    7f0e:	87 e2       	ldi	r24, 0x27	; 39
    7f10:	90 e0       	ldi	r25, 0x00	; 0
    7f12:	90 93 79 00 	sts	0x0079, r25
    7f16:	80 93 78 00 	sts	0x0078, r24
    7f1a:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[6][BLUE][g_speed6rev+g_position]);	
    7f1e:	80 91 27 01 	lds	r24, 0x0127
    7f22:	28 0f       	add	r18, r24
    7f24:	31 1d       	adc	r19, r1
    7f26:	23 50       	subi	r18, 0x03	; 3
    7f28:	39 4a       	sbci	r19, 0xA9	; 169
    7f2a:	f9 01       	movw	r30, r18
    7f2c:	84 91       	lpm	r24, Z
    7f2e:	99 27       	eor	r25, r25
    7f30:	90 93 79 00 	sts	0x0079, r25
    7f34:	80 93 78 00 	sts	0x0078, r24
		break;	
    7f38:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
						
				
		case 52:				// background is changing 4 synthesis rainbow
			seconds_hand=0;
    7f3c:	10 92 25 01 	sts	0x0125, r1
			
			if ((pgm_read_byte(&gm_background[7][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[7][RED][g_speed6+g_position])) > PWM_TOP)
    7f40:	50 91 2c 01 	lds	r21, 0x012C
    7f44:	2a 2f       	mov	r18, r26
    7f46:	33 27       	eor	r19, r19
    7f48:	f9 01       	movw	r30, r18
    7f4a:	e5 0f       	add	r30, r21
    7f4c:	f1 1d       	adc	r31, r1
    7f4e:	e3 56       	subi	r30, 0x63	; 99
    7f50:	ff 4d       	sbci	r31, 0xDF	; 223
    7f52:	94 91       	lpm	r25, Z
    7f54:	40 91 43 01 	lds	r20, 0x0143
    7f58:	f9 01       	movw	r30, r18
    7f5a:	e4 0f       	add	r30, r20
    7f5c:	f1 1d       	adc	r31, r1
    7f5e:	e3 54       	subi	r30, 0x43	; 67
    7f60:	f1 4e       	sbci	r31, 0xE1	; 225
    7f62:	84 91       	lpm	r24, Z
    7f64:	89 0f       	add	r24, r25
    7f66:	91 2d       	mov	r25, r1
    7f68:	91 1d       	adc	r25, r1
    7f6a:	88 97       	sbiw	r24, 0x28	; 40
    7f6c:	1c f0       	brlt	.+6      	; 0x7f74 <__vector_15+0x1084>
			PWM_RED = PWM_TOP ;
    7f6e:	87 e2       	ldi	r24, 0x27	; 39
    7f70:	90 e0       	ldi	r25, 0x00	; 0
    7f72:	09 c0       	rjmp	.+18     	; 0x7f86 <__vector_15+0x1096>
			else
			PWM_RED =  pgm_read_byte(&gc_background[0][RED][g_speed6rev+g_position]);
    7f74:	80 91 27 01 	lds	r24, 0x0127
    7f78:	28 0f       	add	r18, r24
    7f7a:	31 1d       	adc	r19, r1
    7f7c:	23 58       	subi	r18, 0x83	; 131
    7f7e:	3e 4c       	sbci	r19, 0xCE	; 206
    7f80:	f9 01       	movw	r30, r18
    7f82:	84 91       	lpm	r24, Z
    7f84:	99 27       	eor	r25, r25
    7f86:	9b bd       	out	0x2b, r25	; 43
    7f88:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[7][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[7][RED][g_speed6+g_position])) > PWM_TOP)
    7f8a:	2a 2f       	mov	r18, r26
    7f8c:	33 27       	eor	r19, r19
    7f8e:	f9 01       	movw	r30, r18
    7f90:	e5 0f       	add	r30, r21
    7f92:	f1 1d       	adc	r31, r1
    7f94:	e3 56       	subi	r30, 0x63	; 99
    7f96:	ff 4d       	sbci	r31, 0xDF	; 223
    7f98:	94 91       	lpm	r25, Z
    7f9a:	f9 01       	movw	r30, r18
    7f9c:	e4 0f       	add	r30, r20
    7f9e:	f1 1d       	adc	r31, r1
    7fa0:	e3 54       	subi	r30, 0x43	; 67
    7fa2:	f1 4e       	sbci	r31, 0xE1	; 225
    7fa4:	84 91       	lpm	r24, Z
    7fa6:	89 0f       	add	r24, r25
    7fa8:	91 2d       	mov	r25, r1
    7faa:	91 1d       	adc	r25, r1
    7fac:	88 97       	sbiw	r24, 0x28	; 40
    7fae:	1c f0       	brlt	.+6      	; 0x7fb6 <__vector_15+0x10c6>
			PWM_GREEN = PWM_TOP ;
    7fb0:	87 e2       	ldi	r24, 0x27	; 39
    7fb2:	90 e0       	ldi	r25, 0x00	; 0
    7fb4:	09 c0       	rjmp	.+18     	; 0x7fc8 <__vector_15+0x10d8>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[0][GREEN][g_speed6rev+g_position]);
    7fb6:	80 91 27 01 	lds	r24, 0x0127
    7fba:	28 0f       	add	r18, r24
    7fbc:	31 1d       	adc	r19, r1
    7fbe:	23 5a       	subi	r18, 0xA3	; 163
    7fc0:	3c 4c       	sbci	r19, 0xCC	; 204
    7fc2:	f9 01       	movw	r30, r18
    7fc4:	84 91       	lpm	r24, Z
    7fc6:	99 27       	eor	r25, r25
    7fc8:	99 bd       	out	0x29, r25	; 41
    7fca:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[7][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[7][RED][g_speed6+g_position])) > PWM_TOP)
    7fcc:	2a 2f       	mov	r18, r26
    7fce:	33 27       	eor	r19, r19
    7fd0:	f9 01       	movw	r30, r18
    7fd2:	e5 0f       	add	r30, r21
    7fd4:	f1 1d       	adc	r31, r1
    7fd6:	e3 56       	subi	r30, 0x63	; 99
    7fd8:	ff 4d       	sbci	r31, 0xDF	; 223
    7fda:	94 91       	lpm	r25, Z
    7fdc:	f9 01       	movw	r30, r18
    7fde:	e4 0f       	add	r30, r20
    7fe0:	f1 1d       	adc	r31, r1
    7fe2:	e3 54       	subi	r30, 0x43	; 67
    7fe4:	f1 4e       	sbci	r31, 0xE1	; 225
    7fe6:	84 91       	lpm	r24, Z
    7fe8:	89 0f       	add	r24, r25
    7fea:	91 2d       	mov	r25, r1
    7fec:	91 1d       	adc	r25, r1
    7fee:	88 97       	sbiw	r24, 0x28	; 40
    7ff0:	44 f0       	brlt	.+16     	; 0x8002 <__vector_15+0x1112>
			PWM_BLUE  = PWM_TOP ;
    7ff2:	87 e2       	ldi	r24, 0x27	; 39
    7ff4:	90 e0       	ldi	r25, 0x00	; 0
    7ff6:	90 93 79 00 	sts	0x0079, r25
    7ffa:	80 93 78 00 	sts	0x0078, r24
    7ffe:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[0][BLUE][g_speed6rev+g_position]);	
    8002:	80 91 27 01 	lds	r24, 0x0127
    8006:	28 0f       	add	r18, r24
    8008:	31 1d       	adc	r19, r1
    800a:	23 5c       	subi	r18, 0xC3	; 195
    800c:	3a 4c       	sbci	r19, 0xCA	; 202
    800e:	f9 01       	movw	r30, r18
    8010:	84 91       	lpm	r24, Z
    8012:	99 27       	eor	r25, r25
    8014:	90 93 79 00 	sts	0x0079, r25
    8018:	80 93 78 00 	sts	0x0078, r24
		break;		
    801c:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			
		case 51:				// background is changing 4 synthesis windows
			seconds_hand=0;
    8020:	10 92 25 01 	sts	0x0125, r1
			
			if ((pgm_read_byte(&gm_background[7][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[7][RED][g_speed6+g_position])) > PWM_TOP)
    8024:	50 91 2c 01 	lds	r21, 0x012C
    8028:	2a 2f       	mov	r18, r26
    802a:	33 27       	eor	r19, r19
    802c:	f9 01       	movw	r30, r18
    802e:	e5 0f       	add	r30, r21
    8030:	f1 1d       	adc	r31, r1
    8032:	e3 56       	subi	r30, 0x63	; 99
    8034:	ff 4d       	sbci	r31, 0xDF	; 223
    8036:	94 91       	lpm	r25, Z
    8038:	40 91 43 01 	lds	r20, 0x0143
    803c:	f9 01       	movw	r30, r18
    803e:	e4 0f       	add	r30, r20
    8040:	f1 1d       	adc	r31, r1
    8042:	e3 54       	subi	r30, 0x43	; 67
    8044:	f1 4e       	sbci	r31, 0xE1	; 225
    8046:	84 91       	lpm	r24, Z
    8048:	89 0f       	add	r24, r25
    804a:	91 2d       	mov	r25, r1
    804c:	91 1d       	adc	r25, r1
    804e:	88 97       	sbiw	r24, 0x28	; 40
    8050:	1c f0       	brlt	.+6      	; 0x8058 <__vector_15+0x1168>
			PWM_RED = PWM_TOP ;
    8052:	87 e2       	ldi	r24, 0x27	; 39
    8054:	90 e0       	ldi	r25, 0x00	; 0
    8056:	09 c0       	rjmp	.+18     	; 0x806a <__vector_15+0x117a>
			else
			PWM_RED =  pgm_read_byte(&gc_background[7][RED][g_speed6rev+g_position]);
    8058:	80 91 27 01 	lds	r24, 0x0127
    805c:	28 0f       	add	r18, r24
    805e:	31 1d       	adc	r19, r1
    8060:	23 52       	subi	r18, 0x23	; 35
    8062:	37 4a       	sbci	r19, 0xA7	; 167
    8064:	f9 01       	movw	r30, r18
    8066:	84 91       	lpm	r24, Z
    8068:	99 27       	eor	r25, r25
    806a:	9b bd       	out	0x2b, r25	; 43
    806c:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[7][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[7][RED][g_speed6+g_position])) > PWM_TOP)
    806e:	2a 2f       	mov	r18, r26
    8070:	33 27       	eor	r19, r19
    8072:	f9 01       	movw	r30, r18
    8074:	e5 0f       	add	r30, r21
    8076:	f1 1d       	adc	r31, r1
    8078:	e3 56       	subi	r30, 0x63	; 99
    807a:	ff 4d       	sbci	r31, 0xDF	; 223
    807c:	94 91       	lpm	r25, Z
    807e:	f9 01       	movw	r30, r18
    8080:	e4 0f       	add	r30, r20
    8082:	f1 1d       	adc	r31, r1
    8084:	e3 54       	subi	r30, 0x43	; 67
    8086:	f1 4e       	sbci	r31, 0xE1	; 225
    8088:	84 91       	lpm	r24, Z
    808a:	89 0f       	add	r24, r25
    808c:	91 2d       	mov	r25, r1
    808e:	91 1d       	adc	r25, r1
    8090:	88 97       	sbiw	r24, 0x28	; 40
    8092:	1c f0       	brlt	.+6      	; 0x809a <__vector_15+0x11aa>
			PWM_GREEN = PWM_TOP ;
    8094:	87 e2       	ldi	r24, 0x27	; 39
    8096:	90 e0       	ldi	r25, 0x00	; 0
    8098:	09 c0       	rjmp	.+18     	; 0x80ac <__vector_15+0x11bc>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[7][GREEN][g_speed6rev+g_position]);
    809a:	80 91 27 01 	lds	r24, 0x0127
    809e:	28 0f       	add	r18, r24
    80a0:	31 1d       	adc	r19, r1
    80a2:	23 54       	subi	r18, 0x43	; 67
    80a4:	35 4a       	sbci	r19, 0xA5	; 165
    80a6:	f9 01       	movw	r30, r18
    80a8:	84 91       	lpm	r24, Z
    80aa:	99 27       	eor	r25, r25
    80ac:	99 bd       	out	0x29, r25	; 41
    80ae:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[7][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[7][RED][g_speed6+g_position])) > PWM_TOP)
    80b0:	2a 2f       	mov	r18, r26
    80b2:	33 27       	eor	r19, r19
    80b4:	f9 01       	movw	r30, r18
    80b6:	e5 0f       	add	r30, r21
    80b8:	f1 1d       	adc	r31, r1
    80ba:	e3 56       	subi	r30, 0x63	; 99
    80bc:	ff 4d       	sbci	r31, 0xDF	; 223
    80be:	94 91       	lpm	r25, Z
    80c0:	f9 01       	movw	r30, r18
    80c2:	e4 0f       	add	r30, r20
    80c4:	f1 1d       	adc	r31, r1
    80c6:	e3 54       	subi	r30, 0x43	; 67
    80c8:	f1 4e       	sbci	r31, 0xE1	; 225
    80ca:	84 91       	lpm	r24, Z
    80cc:	89 0f       	add	r24, r25
    80ce:	91 2d       	mov	r25, r1
    80d0:	91 1d       	adc	r25, r1
    80d2:	88 97       	sbiw	r24, 0x28	; 40
    80d4:	44 f0       	brlt	.+16     	; 0x80e6 <__vector_15+0x11f6>
			PWM_BLUE  = PWM_TOP ;
    80d6:	87 e2       	ldi	r24, 0x27	; 39
    80d8:	90 e0       	ldi	r25, 0x00	; 0
    80da:	90 93 79 00 	sts	0x0079, r25
    80de:	80 93 78 00 	sts	0x0078, r24
    80e2:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[7][BLUE][g_speed6rev+g_position]);	
    80e6:	80 91 27 01 	lds	r24, 0x0127
    80ea:	28 0f       	add	r18, r24
    80ec:	31 1d       	adc	r19, r1
    80ee:	23 56       	subi	r18, 0x63	; 99
    80f0:	33 4a       	sbci	r19, 0xA3	; 163
    80f2:	f9 01       	movw	r30, r18
    80f4:	84 91       	lpm	r24, Z
    80f6:	99 27       	eor	r25, r25
    80f8:	90 93 79 00 	sts	0x0079, r25
    80fc:	80 93 78 00 	sts	0x0078, r24
		break;		
    8100:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>

	
	
		
		case 50:				// background is changing 4 synthesis africa
			seconds_hand=0;
    8104:	10 92 25 01 	sts	0x0125, r1
			
			if ((pgm_read_byte(&gm_background[7][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[7][RED][g_speed6+g_position])) > PWM_TOP)
    8108:	50 91 2c 01 	lds	r21, 0x012C
    810c:	2a 2f       	mov	r18, r26
    810e:	33 27       	eor	r19, r19
    8110:	f9 01       	movw	r30, r18
    8112:	e5 0f       	add	r30, r21
    8114:	f1 1d       	adc	r31, r1
    8116:	e3 56       	subi	r30, 0x63	; 99
    8118:	ff 4d       	sbci	r31, 0xDF	; 223
    811a:	94 91       	lpm	r25, Z
    811c:	40 91 43 01 	lds	r20, 0x0143
    8120:	f9 01       	movw	r30, r18
    8122:	e4 0f       	add	r30, r20
    8124:	f1 1d       	adc	r31, r1
    8126:	e3 54       	subi	r30, 0x43	; 67
    8128:	f1 4e       	sbci	r31, 0xE1	; 225
    812a:	84 91       	lpm	r24, Z
    812c:	89 0f       	add	r24, r25
    812e:	91 2d       	mov	r25, r1
    8130:	91 1d       	adc	r25, r1
    8132:	88 97       	sbiw	r24, 0x28	; 40
    8134:	1c f0       	brlt	.+6      	; 0x813c <__vector_15+0x124c>
			PWM_RED = PWM_TOP ;
    8136:	87 e2       	ldi	r24, 0x27	; 39
    8138:	90 e0       	ldi	r25, 0x00	; 0
    813a:	09 c0       	rjmp	.+18     	; 0x814e <__vector_15+0x125e>
			else
			PWM_RED =  pgm_read_byte(&gc_background[6][RED][g_speed6rev+g_position]);
    813c:	80 91 27 01 	lds	r24, 0x0127
    8140:	28 0f       	add	r18, r24
    8142:	31 1d       	adc	r19, r1
    8144:	23 5c       	subi	r18, 0xC3	; 195
    8146:	3c 4a       	sbci	r19, 0xAC	; 172
    8148:	f9 01       	movw	r30, r18
    814a:	84 91       	lpm	r24, Z
    814c:	99 27       	eor	r25, r25
    814e:	9b bd       	out	0x2b, r25	; 43
    8150:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[7][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[7][RED][g_speed6+g_position])) > PWM_TOP)
    8152:	2a 2f       	mov	r18, r26
    8154:	33 27       	eor	r19, r19
    8156:	f9 01       	movw	r30, r18
    8158:	e5 0f       	add	r30, r21
    815a:	f1 1d       	adc	r31, r1
    815c:	e3 56       	subi	r30, 0x63	; 99
    815e:	ff 4d       	sbci	r31, 0xDF	; 223
    8160:	94 91       	lpm	r25, Z
    8162:	f9 01       	movw	r30, r18
    8164:	e4 0f       	add	r30, r20
    8166:	f1 1d       	adc	r31, r1
    8168:	e3 54       	subi	r30, 0x43	; 67
    816a:	f1 4e       	sbci	r31, 0xE1	; 225
    816c:	84 91       	lpm	r24, Z
    816e:	89 0f       	add	r24, r25
    8170:	91 2d       	mov	r25, r1
    8172:	91 1d       	adc	r25, r1
    8174:	88 97       	sbiw	r24, 0x28	; 40
    8176:	1c f0       	brlt	.+6      	; 0x817e <__vector_15+0x128e>
			PWM_GREEN = PWM_TOP ;
    8178:	87 e2       	ldi	r24, 0x27	; 39
    817a:	90 e0       	ldi	r25, 0x00	; 0
    817c:	09 c0       	rjmp	.+18     	; 0x8190 <__vector_15+0x12a0>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[6][GREEN][g_speed6rev+g_position]);
    817e:	80 91 27 01 	lds	r24, 0x0127
    8182:	28 0f       	add	r18, r24
    8184:	31 1d       	adc	r19, r1
    8186:	23 5e       	subi	r18, 0xE3	; 227
    8188:	3a 4a       	sbci	r19, 0xAA	; 170
    818a:	f9 01       	movw	r30, r18
    818c:	84 91       	lpm	r24, Z
    818e:	99 27       	eor	r25, r25
    8190:	99 bd       	out	0x29, r25	; 41
    8192:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[7][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[7][RED][g_speed6+g_position])) > PWM_TOP)
    8194:	2a 2f       	mov	r18, r26
    8196:	33 27       	eor	r19, r19
    8198:	f9 01       	movw	r30, r18
    819a:	e5 0f       	add	r30, r21
    819c:	f1 1d       	adc	r31, r1
    819e:	e3 56       	subi	r30, 0x63	; 99
    81a0:	ff 4d       	sbci	r31, 0xDF	; 223
    81a2:	94 91       	lpm	r25, Z
    81a4:	f9 01       	movw	r30, r18
    81a6:	e4 0f       	add	r30, r20
    81a8:	f1 1d       	adc	r31, r1
    81aa:	e3 54       	subi	r30, 0x43	; 67
    81ac:	f1 4e       	sbci	r31, 0xE1	; 225
    81ae:	84 91       	lpm	r24, Z
    81b0:	89 0f       	add	r24, r25
    81b2:	91 2d       	mov	r25, r1
    81b4:	91 1d       	adc	r25, r1
    81b6:	88 97       	sbiw	r24, 0x28	; 40
    81b8:	44 f0       	brlt	.+16     	; 0x81ca <__vector_15+0x12da>
			PWM_BLUE  = PWM_TOP ;
    81ba:	87 e2       	ldi	r24, 0x27	; 39
    81bc:	90 e0       	ldi	r25, 0x00	; 0
    81be:	90 93 79 00 	sts	0x0079, r25
    81c2:	80 93 78 00 	sts	0x0078, r24
    81c6:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[6][BLUE][g_speed6rev+g_position]);	
    81ca:	80 91 27 01 	lds	r24, 0x0127
    81ce:	28 0f       	add	r18, r24
    81d0:	31 1d       	adc	r19, r1
    81d2:	23 50       	subi	r18, 0x03	; 3
    81d4:	39 4a       	sbci	r19, 0xA9	; 169
    81d6:	f9 01       	movw	r30, r18
    81d8:	84 91       	lpm	r24, Z
    81da:	99 27       	eor	r25, r25
    81dc:	90 93 79 00 	sts	0x0079, r25
    81e0:	80 93 78 00 	sts	0x0078, r24
		break;	
    81e4:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>

		case 49:				// background is changing 7 rainbow mask black
			seconds_hand=0;	
    81e8:	10 92 25 01 	sts	0x0125, r1
			
			if ((pgm_read_byte(&gm_background[6][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[6][RED][g_speed6+g_position])) > PWM_TOP)
    81ec:	50 91 2c 01 	lds	r21, 0x012C
    81f0:	2a 2f       	mov	r18, r26
    81f2:	33 27       	eor	r19, r19
    81f4:	f9 01       	movw	r30, r18
    81f6:	e5 0f       	add	r30, r21
    81f8:	f1 1d       	adc	r31, r1
    81fa:	e3 52       	subi	r30, 0x23	; 35
    81fc:	f3 4e       	sbci	r31, 0xE3	; 227
    81fe:	94 91       	lpm	r25, Z
    8200:	40 91 43 01 	lds	r20, 0x0143
    8204:	f9 01       	movw	r30, r18
    8206:	e4 0f       	add	r30, r20
    8208:	f1 1d       	adc	r31, r1
    820a:	e3 50       	subi	r30, 0x03	; 3
    820c:	f5 4e       	sbci	r31, 0xE5	; 229
    820e:	84 91       	lpm	r24, Z
    8210:	89 0f       	add	r24, r25
    8212:	91 2d       	mov	r25, r1
    8214:	91 1d       	adc	r25, r1
    8216:	88 97       	sbiw	r24, 0x28	; 40
    8218:	54 f0       	brlt	.+20     	; 0x822e <__vector_15+0x133e>
			PWM_RED =  pgm_read_byte(&gc_background[0][RED][g_speed6rev+g_position]);
    821a:	80 91 27 01 	lds	r24, 0x0127
    821e:	28 0f       	add	r18, r24
    8220:	31 1d       	adc	r19, r1
    8222:	23 58       	subi	r18, 0x83	; 131
    8224:	3e 4c       	sbci	r19, 0xCE	; 206
    8226:	f9 01       	movw	r30, r18
    8228:	84 91       	lpm	r24, Z
    822a:	99 27       	eor	r25, r25
    822c:	02 c0       	rjmp	.+4      	; 0x8232 <__vector_15+0x1342>
			else
			PWM_RED = PWM_TOP ;
    822e:	87 e2       	ldi	r24, 0x27	; 39
    8230:	90 e0       	ldi	r25, 0x00	; 0
    8232:	9b bd       	out	0x2b, r25	; 43
    8234:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[6][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[6][RED][g_speed6+g_position])) > PWM_TOP)
    8236:	2a 2f       	mov	r18, r26
    8238:	33 27       	eor	r19, r19
    823a:	f9 01       	movw	r30, r18
    823c:	e5 0f       	add	r30, r21
    823e:	f1 1d       	adc	r31, r1
    8240:	e3 52       	subi	r30, 0x23	; 35
    8242:	f3 4e       	sbci	r31, 0xE3	; 227
    8244:	94 91       	lpm	r25, Z
    8246:	f9 01       	movw	r30, r18
    8248:	e4 0f       	add	r30, r20
    824a:	f1 1d       	adc	r31, r1
    824c:	e3 50       	subi	r30, 0x03	; 3
    824e:	f5 4e       	sbci	r31, 0xE5	; 229
    8250:	84 91       	lpm	r24, Z
    8252:	89 0f       	add	r24, r25
    8254:	91 2d       	mov	r25, r1
    8256:	91 1d       	adc	r25, r1
    8258:	88 97       	sbiw	r24, 0x28	; 40
    825a:	54 f0       	brlt	.+20     	; 0x8270 <__vector_15+0x1380>
			PWM_GREEN =  pgm_read_byte(&gc_background[0][GREEN][g_speed6rev+g_position]);
    825c:	80 91 27 01 	lds	r24, 0x0127
    8260:	28 0f       	add	r18, r24
    8262:	31 1d       	adc	r19, r1
    8264:	23 5a       	subi	r18, 0xA3	; 163
    8266:	3c 4c       	sbci	r19, 0xCC	; 204
    8268:	f9 01       	movw	r30, r18
    826a:	84 91       	lpm	r24, Z
    826c:	99 27       	eor	r25, r25
    826e:	02 c0       	rjmp	.+4      	; 0x8274 <__vector_15+0x1384>
			else
			PWM_GREEN = PWM_TOP ;
    8270:	87 e2       	ldi	r24, 0x27	; 39
    8272:	90 e0       	ldi	r25, 0x00	; 0
    8274:	99 bd       	out	0x29, r25	; 41
    8276:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[6][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[6][RED][g_speed6+g_position])) > PWM_TOP)
    8278:	2a 2f       	mov	r18, r26
    827a:	33 27       	eor	r19, r19
    827c:	f9 01       	movw	r30, r18
    827e:	e5 0f       	add	r30, r21
    8280:	f1 1d       	adc	r31, r1
    8282:	e3 52       	subi	r30, 0x23	; 35
    8284:	f3 4e       	sbci	r31, 0xE3	; 227
    8286:	94 91       	lpm	r25, Z
    8288:	f9 01       	movw	r30, r18
    828a:	e4 0f       	add	r30, r20
    828c:	f1 1d       	adc	r31, r1
    828e:	e3 50       	subi	r30, 0x03	; 3
    8290:	f5 4e       	sbci	r31, 0xE5	; 229
    8292:	84 91       	lpm	r24, Z
    8294:	89 0f       	add	r24, r25
    8296:	91 2d       	mov	r25, r1
    8298:	91 1d       	adc	r25, r1
    829a:	88 97       	sbiw	r24, 0x28	; 40
    829c:	7c f0       	brlt	.+30     	; 0x82bc <__vector_15+0x13cc>
			PWM_BLUE =  pgm_read_byte(&gc_background[0][BLUE][g_speed6rev+g_position]);
    829e:	80 91 27 01 	lds	r24, 0x0127
    82a2:	28 0f       	add	r18, r24
    82a4:	31 1d       	adc	r19, r1
    82a6:	23 5c       	subi	r18, 0xC3	; 195
    82a8:	3a 4c       	sbci	r19, 0xCA	; 202
    82aa:	f9 01       	movw	r30, r18
    82ac:	84 91       	lpm	r24, Z
    82ae:	99 27       	eor	r25, r25
    82b0:	90 93 79 00 	sts	0x0079, r25
    82b4:	80 93 78 00 	sts	0x0078, r24
    82b8:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE  = PWM_TOP ;
    82bc:	87 e2       	ldi	r24, 0x27	; 39
    82be:	90 e0       	ldi	r25, 0x00	; 0
    82c0:	90 93 79 00 	sts	0x0079, r25
    82c4:	80 93 78 00 	sts	0x0078, r24
		break;
    82c8:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
		
		case 48:				// background is changing africa 7 windows mask black
			seconds_hand=0;
    82cc:	10 92 25 01 	sts	0x0125, r1
				
			if ((pgm_read_byte(&gm_background[6][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[6][RED][g_speed6+g_position])) > PWM_TOP)
    82d0:	50 91 2c 01 	lds	r21, 0x012C
    82d4:	2a 2f       	mov	r18, r26
    82d6:	33 27       	eor	r19, r19
    82d8:	f9 01       	movw	r30, r18
    82da:	e5 0f       	add	r30, r21
    82dc:	f1 1d       	adc	r31, r1
    82de:	e3 52       	subi	r30, 0x23	; 35
    82e0:	f3 4e       	sbci	r31, 0xE3	; 227
    82e2:	94 91       	lpm	r25, Z
    82e4:	40 91 43 01 	lds	r20, 0x0143
    82e8:	f9 01       	movw	r30, r18
    82ea:	e4 0f       	add	r30, r20
    82ec:	f1 1d       	adc	r31, r1
    82ee:	e3 50       	subi	r30, 0x03	; 3
    82f0:	f5 4e       	sbci	r31, 0xE5	; 229
    82f2:	84 91       	lpm	r24, Z
    82f4:	89 0f       	add	r24, r25
    82f6:	91 2d       	mov	r25, r1
    82f8:	91 1d       	adc	r25, r1
    82fa:	88 97       	sbiw	r24, 0x28	; 40
    82fc:	54 f0       	brlt	.+20     	; 0x8312 <__vector_15+0x1422>
			PWM_RED =  pgm_read_byte(&gc_background[7][RED][g_speed6rev+g_position]);
    82fe:	80 91 27 01 	lds	r24, 0x0127
    8302:	28 0f       	add	r18, r24
    8304:	31 1d       	adc	r19, r1
    8306:	23 52       	subi	r18, 0x23	; 35
    8308:	37 4a       	sbci	r19, 0xA7	; 167
    830a:	f9 01       	movw	r30, r18
    830c:	84 91       	lpm	r24, Z
    830e:	99 27       	eor	r25, r25
    8310:	02 c0       	rjmp	.+4      	; 0x8316 <__vector_15+0x1426>
			else
			PWM_RED = PWM_TOP ;
    8312:	87 e2       	ldi	r24, 0x27	; 39
    8314:	90 e0       	ldi	r25, 0x00	; 0
    8316:	9b bd       	out	0x2b, r25	; 43
    8318:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[6][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[6][RED][g_speed6+g_position])) > PWM_TOP)
    831a:	2a 2f       	mov	r18, r26
    831c:	33 27       	eor	r19, r19
    831e:	f9 01       	movw	r30, r18
    8320:	e5 0f       	add	r30, r21
    8322:	f1 1d       	adc	r31, r1
    8324:	e3 52       	subi	r30, 0x23	; 35
    8326:	f3 4e       	sbci	r31, 0xE3	; 227
    8328:	94 91       	lpm	r25, Z
    832a:	f9 01       	movw	r30, r18
    832c:	e4 0f       	add	r30, r20
    832e:	f1 1d       	adc	r31, r1
    8330:	e3 50       	subi	r30, 0x03	; 3
    8332:	f5 4e       	sbci	r31, 0xE5	; 229
    8334:	84 91       	lpm	r24, Z
    8336:	89 0f       	add	r24, r25
    8338:	91 2d       	mov	r25, r1
    833a:	91 1d       	adc	r25, r1
    833c:	88 97       	sbiw	r24, 0x28	; 40
    833e:	54 f0       	brlt	.+20     	; 0x8354 <__vector_15+0x1464>
			PWM_GREEN =  pgm_read_byte(&gc_background[7][GREEN][g_speed6rev+g_position]);
    8340:	80 91 27 01 	lds	r24, 0x0127
    8344:	28 0f       	add	r18, r24
    8346:	31 1d       	adc	r19, r1
    8348:	23 54       	subi	r18, 0x43	; 67
    834a:	35 4a       	sbci	r19, 0xA5	; 165
    834c:	f9 01       	movw	r30, r18
    834e:	84 91       	lpm	r24, Z
    8350:	99 27       	eor	r25, r25
    8352:	02 c0       	rjmp	.+4      	; 0x8358 <__vector_15+0x1468>
			else
			PWM_GREEN = PWM_TOP ;
    8354:	87 e2       	ldi	r24, 0x27	; 39
    8356:	90 e0       	ldi	r25, 0x00	; 0
    8358:	99 bd       	out	0x29, r25	; 41
    835a:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[6][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[6][RED][g_speed6+g_position])) > PWM_TOP)
    835c:	2a 2f       	mov	r18, r26
    835e:	33 27       	eor	r19, r19
    8360:	f9 01       	movw	r30, r18
    8362:	e5 0f       	add	r30, r21
    8364:	f1 1d       	adc	r31, r1
    8366:	e3 52       	subi	r30, 0x23	; 35
    8368:	f3 4e       	sbci	r31, 0xE3	; 227
    836a:	94 91       	lpm	r25, Z
    836c:	f9 01       	movw	r30, r18
    836e:	e4 0f       	add	r30, r20
    8370:	f1 1d       	adc	r31, r1
    8372:	e3 50       	subi	r30, 0x03	; 3
    8374:	f5 4e       	sbci	r31, 0xE5	; 229
    8376:	84 91       	lpm	r24, Z
    8378:	89 0f       	add	r24, r25
    837a:	91 2d       	mov	r25, r1
    837c:	91 1d       	adc	r25, r1
    837e:	88 97       	sbiw	r24, 0x28	; 40
    8380:	7c f0       	brlt	.+30     	; 0x83a0 <__vector_15+0x14b0>
			PWM_BLUE =  pgm_read_byte(&gc_background[7][BLUE][g_speed6rev+g_position]);
    8382:	80 91 27 01 	lds	r24, 0x0127
    8386:	28 0f       	add	r18, r24
    8388:	31 1d       	adc	r19, r1
    838a:	23 56       	subi	r18, 0x63	; 99
    838c:	33 4a       	sbci	r19, 0xA3	; 163
    838e:	f9 01       	movw	r30, r18
    8390:	84 91       	lpm	r24, Z
    8392:	99 27       	eor	r25, r25
    8394:	90 93 79 00 	sts	0x0079, r25
    8398:	80 93 78 00 	sts	0x0078, r24
    839c:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE  = PWM_TOP ;
    83a0:	87 e2       	ldi	r24, 0x27	; 39
    83a2:	90 e0       	ldi	r25, 0x00	; 0
    83a4:	90 93 79 00 	sts	0x0079, r25
    83a8:	80 93 78 00 	sts	0x0078, r24
		break;
    83ac:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
		
		case 47:				// background is changing africa 7 mask black
			seconds_hand=0;
    83b0:	10 92 25 01 	sts	0x0125, r1
				
			if ((pgm_read_byte(&gm_background[6][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[6][RED][g_speed6+g_position])) > PWM_TOP)
    83b4:	50 91 2c 01 	lds	r21, 0x012C
    83b8:	2a 2f       	mov	r18, r26
    83ba:	33 27       	eor	r19, r19
    83bc:	f9 01       	movw	r30, r18
    83be:	e5 0f       	add	r30, r21
    83c0:	f1 1d       	adc	r31, r1
    83c2:	e3 52       	subi	r30, 0x23	; 35
    83c4:	f3 4e       	sbci	r31, 0xE3	; 227
    83c6:	94 91       	lpm	r25, Z
    83c8:	40 91 43 01 	lds	r20, 0x0143
    83cc:	f9 01       	movw	r30, r18
    83ce:	e4 0f       	add	r30, r20
    83d0:	f1 1d       	adc	r31, r1
    83d2:	e3 50       	subi	r30, 0x03	; 3
    83d4:	f5 4e       	sbci	r31, 0xE5	; 229
    83d6:	84 91       	lpm	r24, Z
    83d8:	89 0f       	add	r24, r25
    83da:	91 2d       	mov	r25, r1
    83dc:	91 1d       	adc	r25, r1
    83de:	88 97       	sbiw	r24, 0x28	; 40
    83e0:	54 f0       	brlt	.+20     	; 0x83f6 <__vector_15+0x1506>
			PWM_RED =  pgm_read_byte(&gc_background[6][RED][g_speed6rev+g_position]);
    83e2:	80 91 27 01 	lds	r24, 0x0127
    83e6:	28 0f       	add	r18, r24
    83e8:	31 1d       	adc	r19, r1
    83ea:	23 5c       	subi	r18, 0xC3	; 195
    83ec:	3c 4a       	sbci	r19, 0xAC	; 172
    83ee:	f9 01       	movw	r30, r18
    83f0:	84 91       	lpm	r24, Z
    83f2:	99 27       	eor	r25, r25
    83f4:	02 c0       	rjmp	.+4      	; 0x83fa <__vector_15+0x150a>
			else
			PWM_RED = PWM_TOP ;
    83f6:	87 e2       	ldi	r24, 0x27	; 39
    83f8:	90 e0       	ldi	r25, 0x00	; 0
    83fa:	9b bd       	out	0x2b, r25	; 43
    83fc:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[6][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[6][RED][g_speed6+g_position])) > PWM_TOP)
    83fe:	2a 2f       	mov	r18, r26
    8400:	33 27       	eor	r19, r19
    8402:	f9 01       	movw	r30, r18
    8404:	e5 0f       	add	r30, r21
    8406:	f1 1d       	adc	r31, r1
    8408:	e3 52       	subi	r30, 0x23	; 35
    840a:	f3 4e       	sbci	r31, 0xE3	; 227
    840c:	94 91       	lpm	r25, Z
    840e:	f9 01       	movw	r30, r18
    8410:	e4 0f       	add	r30, r20
    8412:	f1 1d       	adc	r31, r1
    8414:	e3 50       	subi	r30, 0x03	; 3
    8416:	f5 4e       	sbci	r31, 0xE5	; 229
    8418:	84 91       	lpm	r24, Z
    841a:	89 0f       	add	r24, r25
    841c:	91 2d       	mov	r25, r1
    841e:	91 1d       	adc	r25, r1
    8420:	88 97       	sbiw	r24, 0x28	; 40
    8422:	54 f0       	brlt	.+20     	; 0x8438 <__vector_15+0x1548>
			PWM_GREEN =  pgm_read_byte(&gc_background[6][GREEN][g_speed6rev+g_position]);
    8424:	80 91 27 01 	lds	r24, 0x0127
    8428:	28 0f       	add	r18, r24
    842a:	31 1d       	adc	r19, r1
    842c:	23 5e       	subi	r18, 0xE3	; 227
    842e:	3a 4a       	sbci	r19, 0xAA	; 170
    8430:	f9 01       	movw	r30, r18
    8432:	84 91       	lpm	r24, Z
    8434:	99 27       	eor	r25, r25
    8436:	02 c0       	rjmp	.+4      	; 0x843c <__vector_15+0x154c>
			else
			PWM_GREEN = PWM_TOP ;
    8438:	87 e2       	ldi	r24, 0x27	; 39
    843a:	90 e0       	ldi	r25, 0x00	; 0
    843c:	99 bd       	out	0x29, r25	; 41
    843e:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[6][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[6][RED][g_speed6+g_position])) > PWM_TOP)
    8440:	2a 2f       	mov	r18, r26
    8442:	33 27       	eor	r19, r19
    8444:	f9 01       	movw	r30, r18
    8446:	e5 0f       	add	r30, r21
    8448:	f1 1d       	adc	r31, r1
    844a:	e3 52       	subi	r30, 0x23	; 35
    844c:	f3 4e       	sbci	r31, 0xE3	; 227
    844e:	94 91       	lpm	r25, Z
    8450:	f9 01       	movw	r30, r18
    8452:	e4 0f       	add	r30, r20
    8454:	f1 1d       	adc	r31, r1
    8456:	e3 50       	subi	r30, 0x03	; 3
    8458:	f5 4e       	sbci	r31, 0xE5	; 229
    845a:	84 91       	lpm	r24, Z
    845c:	89 0f       	add	r24, r25
    845e:	91 2d       	mov	r25, r1
    8460:	91 1d       	adc	r25, r1
    8462:	88 97       	sbiw	r24, 0x28	; 40
    8464:	7c f0       	brlt	.+30     	; 0x8484 <__vector_15+0x1594>
			PWM_BLUE =  pgm_read_byte(&gc_background[6][BLUE][g_speed6rev+g_position]);
    8466:	80 91 27 01 	lds	r24, 0x0127
    846a:	28 0f       	add	r18, r24
    846c:	31 1d       	adc	r19, r1
    846e:	23 50       	subi	r18, 0x03	; 3
    8470:	39 4a       	sbci	r19, 0xA9	; 169
    8472:	f9 01       	movw	r30, r18
    8474:	84 91       	lpm	r24, Z
    8476:	99 27       	eor	r25, r25
    8478:	90 93 79 00 	sts	0x0079, r25
    847c:	80 93 78 00 	sts	0x0078, r24
    8480:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE  = PWM_TOP ;
    8484:	87 e2       	ldi	r24, 0x27	; 39
    8486:	90 e0       	ldi	r25, 0x00	; 0
    8488:	90 93 79 00 	sts	0x0079, r25
    848c:	80 93 78 00 	sts	0x0078, r24
		break;
    8490:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
		
		case 46:				// background is changing rainbow 5 mask black
			seconds_hand=0;
    8494:	10 92 25 01 	sts	0x0125, r1
				
			if ((pgm_read_byte(&gm_background[5][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[5][RED][g_speed6+g_position])) > PWM_TOP)
    8498:	50 91 2c 01 	lds	r21, 0x012C
    849c:	2a 2f       	mov	r18, r26
    849e:	33 27       	eor	r19, r19
    84a0:	f9 01       	movw	r30, r18
    84a2:	e5 0f       	add	r30, r21
    84a4:	f1 1d       	adc	r31, r1
    84a6:	e3 5e       	subi	r30, 0xE3	; 227
    84a8:	f6 4e       	sbci	r31, 0xE6	; 230
    84aa:	94 91       	lpm	r25, Z
    84ac:	40 91 43 01 	lds	r20, 0x0143
    84b0:	f9 01       	movw	r30, r18
    84b2:	e4 0f       	add	r30, r20
    84b4:	f1 1d       	adc	r31, r1
    84b6:	e3 5c       	subi	r30, 0xC3	; 195
    84b8:	f8 4e       	sbci	r31, 0xE8	; 232
    84ba:	84 91       	lpm	r24, Z
    84bc:	89 0f       	add	r24, r25
    84be:	91 2d       	mov	r25, r1
    84c0:	91 1d       	adc	r25, r1
    84c2:	88 97       	sbiw	r24, 0x28	; 40
    84c4:	54 f0       	brlt	.+20     	; 0x84da <__vector_15+0x15ea>
			PWM_RED =  pgm_read_byte(&gc_background[0][RED][g_speed6rev+g_position]);
    84c6:	80 91 27 01 	lds	r24, 0x0127
    84ca:	28 0f       	add	r18, r24
    84cc:	31 1d       	adc	r19, r1
    84ce:	23 58       	subi	r18, 0x83	; 131
    84d0:	3e 4c       	sbci	r19, 0xCE	; 206
    84d2:	f9 01       	movw	r30, r18
    84d4:	84 91       	lpm	r24, Z
    84d6:	99 27       	eor	r25, r25
    84d8:	02 c0       	rjmp	.+4      	; 0x84de <__vector_15+0x15ee>
			else
			PWM_RED = PWM_TOP ;
    84da:	87 e2       	ldi	r24, 0x27	; 39
    84dc:	90 e0       	ldi	r25, 0x00	; 0
    84de:	9b bd       	out	0x2b, r25	; 43
    84e0:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[5][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[5][RED][g_speed6+g_position])) > PWM_TOP)
    84e2:	2a 2f       	mov	r18, r26
    84e4:	33 27       	eor	r19, r19
    84e6:	f9 01       	movw	r30, r18
    84e8:	e5 0f       	add	r30, r21
    84ea:	f1 1d       	adc	r31, r1
    84ec:	e3 5e       	subi	r30, 0xE3	; 227
    84ee:	f6 4e       	sbci	r31, 0xE6	; 230
    84f0:	94 91       	lpm	r25, Z
    84f2:	f9 01       	movw	r30, r18
    84f4:	e4 0f       	add	r30, r20
    84f6:	f1 1d       	adc	r31, r1
    84f8:	e3 5c       	subi	r30, 0xC3	; 195
    84fa:	f8 4e       	sbci	r31, 0xE8	; 232
    84fc:	84 91       	lpm	r24, Z
    84fe:	89 0f       	add	r24, r25
    8500:	91 2d       	mov	r25, r1
    8502:	91 1d       	adc	r25, r1
    8504:	88 97       	sbiw	r24, 0x28	; 40
    8506:	54 f0       	brlt	.+20     	; 0x851c <__vector_15+0x162c>
			PWM_GREEN =  pgm_read_byte(&gc_background[0][GREEN][g_speed6rev+g_position]);
    8508:	80 91 27 01 	lds	r24, 0x0127
    850c:	28 0f       	add	r18, r24
    850e:	31 1d       	adc	r19, r1
    8510:	23 5a       	subi	r18, 0xA3	; 163
    8512:	3c 4c       	sbci	r19, 0xCC	; 204
    8514:	f9 01       	movw	r30, r18
    8516:	84 91       	lpm	r24, Z
    8518:	99 27       	eor	r25, r25
    851a:	02 c0       	rjmp	.+4      	; 0x8520 <__vector_15+0x1630>
			else
			PWM_GREEN = PWM_TOP ;
    851c:	87 e2       	ldi	r24, 0x27	; 39
    851e:	90 e0       	ldi	r25, 0x00	; 0
    8520:	99 bd       	out	0x29, r25	; 41
    8522:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[5][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[5][RED][g_speed6+g_position])) > PWM_TOP)
    8524:	2a 2f       	mov	r18, r26
    8526:	33 27       	eor	r19, r19
    8528:	f9 01       	movw	r30, r18
    852a:	e5 0f       	add	r30, r21
    852c:	f1 1d       	adc	r31, r1
    852e:	e3 5e       	subi	r30, 0xE3	; 227
    8530:	f6 4e       	sbci	r31, 0xE6	; 230
    8532:	94 91       	lpm	r25, Z
    8534:	f9 01       	movw	r30, r18
    8536:	e4 0f       	add	r30, r20
    8538:	f1 1d       	adc	r31, r1
    853a:	e3 5c       	subi	r30, 0xC3	; 195
    853c:	f8 4e       	sbci	r31, 0xE8	; 232
    853e:	84 91       	lpm	r24, Z
    8540:	89 0f       	add	r24, r25
    8542:	91 2d       	mov	r25, r1
    8544:	91 1d       	adc	r25, r1
    8546:	88 97       	sbiw	r24, 0x28	; 40
    8548:	7c f0       	brlt	.+30     	; 0x8568 <__vector_15+0x1678>
			PWM_BLUE =  pgm_read_byte(&gc_background[0][BLUE][g_speed6rev+g_position]);
    854a:	80 91 27 01 	lds	r24, 0x0127
    854e:	28 0f       	add	r18, r24
    8550:	31 1d       	adc	r19, r1
    8552:	23 5c       	subi	r18, 0xC3	; 195
    8554:	3a 4c       	sbci	r19, 0xCA	; 202
    8556:	f9 01       	movw	r30, r18
    8558:	84 91       	lpm	r24, Z
    855a:	99 27       	eor	r25, r25
    855c:	90 93 79 00 	sts	0x0079, r25
    8560:	80 93 78 00 	sts	0x0078, r24
    8564:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE  = PWM_TOP ;
    8568:	87 e2       	ldi	r24, 0x27	; 39
    856a:	90 e0       	ldi	r25, 0x00	; 0
    856c:	90 93 79 00 	sts	0x0079, r25
    8570:	80 93 78 00 	sts	0x0078, r24
		break;
    8574:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>

		
		
		case 45:				// background is changing windows 5 mask black
			seconds_hand=0;
    8578:	10 92 25 01 	sts	0x0125, r1
				
			if ((pgm_read_byte(&gm_background[5][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[5][RED][g_speed6+g_position])) > PWM_TOP)
    857c:	50 91 2c 01 	lds	r21, 0x012C
    8580:	2a 2f       	mov	r18, r26
    8582:	33 27       	eor	r19, r19
    8584:	f9 01       	movw	r30, r18
    8586:	e5 0f       	add	r30, r21
    8588:	f1 1d       	adc	r31, r1
    858a:	e3 5e       	subi	r30, 0xE3	; 227
    858c:	f6 4e       	sbci	r31, 0xE6	; 230
    858e:	94 91       	lpm	r25, Z
    8590:	40 91 43 01 	lds	r20, 0x0143
    8594:	f9 01       	movw	r30, r18
    8596:	e4 0f       	add	r30, r20
    8598:	f1 1d       	adc	r31, r1
    859a:	e3 5c       	subi	r30, 0xC3	; 195
    859c:	f8 4e       	sbci	r31, 0xE8	; 232
    859e:	84 91       	lpm	r24, Z
    85a0:	89 0f       	add	r24, r25
    85a2:	91 2d       	mov	r25, r1
    85a4:	91 1d       	adc	r25, r1
    85a6:	88 97       	sbiw	r24, 0x28	; 40
    85a8:	54 f0       	brlt	.+20     	; 0x85be <__vector_15+0x16ce>
			PWM_RED =  pgm_read_byte(&gc_background[7][RED][g_speed6rev+g_position]);
    85aa:	80 91 27 01 	lds	r24, 0x0127
    85ae:	28 0f       	add	r18, r24
    85b0:	31 1d       	adc	r19, r1
    85b2:	23 52       	subi	r18, 0x23	; 35
    85b4:	37 4a       	sbci	r19, 0xA7	; 167
    85b6:	f9 01       	movw	r30, r18
    85b8:	84 91       	lpm	r24, Z
    85ba:	99 27       	eor	r25, r25
    85bc:	02 c0       	rjmp	.+4      	; 0x85c2 <__vector_15+0x16d2>
			else
			PWM_RED = PWM_TOP ;
    85be:	87 e2       	ldi	r24, 0x27	; 39
    85c0:	90 e0       	ldi	r25, 0x00	; 0
    85c2:	9b bd       	out	0x2b, r25	; 43
    85c4:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[5][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[5][RED][g_speed6+g_position])) > PWM_TOP)
    85c6:	2a 2f       	mov	r18, r26
    85c8:	33 27       	eor	r19, r19
    85ca:	f9 01       	movw	r30, r18
    85cc:	e5 0f       	add	r30, r21
    85ce:	f1 1d       	adc	r31, r1
    85d0:	e3 5e       	subi	r30, 0xE3	; 227
    85d2:	f6 4e       	sbci	r31, 0xE6	; 230
    85d4:	94 91       	lpm	r25, Z
    85d6:	f9 01       	movw	r30, r18
    85d8:	e4 0f       	add	r30, r20
    85da:	f1 1d       	adc	r31, r1
    85dc:	e3 5c       	subi	r30, 0xC3	; 195
    85de:	f8 4e       	sbci	r31, 0xE8	; 232
    85e0:	84 91       	lpm	r24, Z
    85e2:	89 0f       	add	r24, r25
    85e4:	91 2d       	mov	r25, r1
    85e6:	91 1d       	adc	r25, r1
    85e8:	88 97       	sbiw	r24, 0x28	; 40
    85ea:	54 f0       	brlt	.+20     	; 0x8600 <__vector_15+0x1710>
			PWM_GREEN =  pgm_read_byte(&gc_background[7][GREEN][g_speed6rev+g_position]);
    85ec:	80 91 27 01 	lds	r24, 0x0127
    85f0:	28 0f       	add	r18, r24
    85f2:	31 1d       	adc	r19, r1
    85f4:	23 54       	subi	r18, 0x43	; 67
    85f6:	35 4a       	sbci	r19, 0xA5	; 165
    85f8:	f9 01       	movw	r30, r18
    85fa:	84 91       	lpm	r24, Z
    85fc:	99 27       	eor	r25, r25
    85fe:	02 c0       	rjmp	.+4      	; 0x8604 <__vector_15+0x1714>
			else
			PWM_GREEN = PWM_TOP ;
    8600:	87 e2       	ldi	r24, 0x27	; 39
    8602:	90 e0       	ldi	r25, 0x00	; 0
    8604:	99 bd       	out	0x29, r25	; 41
    8606:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[5][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[5][RED][g_speed6+g_position])) > PWM_TOP)
    8608:	2a 2f       	mov	r18, r26
    860a:	33 27       	eor	r19, r19
    860c:	f9 01       	movw	r30, r18
    860e:	e5 0f       	add	r30, r21
    8610:	f1 1d       	adc	r31, r1
    8612:	e3 5e       	subi	r30, 0xE3	; 227
    8614:	f6 4e       	sbci	r31, 0xE6	; 230
    8616:	94 91       	lpm	r25, Z
    8618:	f9 01       	movw	r30, r18
    861a:	e4 0f       	add	r30, r20
    861c:	f1 1d       	adc	r31, r1
    861e:	e3 5c       	subi	r30, 0xC3	; 195
    8620:	f8 4e       	sbci	r31, 0xE8	; 232
    8622:	84 91       	lpm	r24, Z
    8624:	89 0f       	add	r24, r25
    8626:	91 2d       	mov	r25, r1
    8628:	91 1d       	adc	r25, r1
    862a:	88 97       	sbiw	r24, 0x28	; 40
    862c:	7c f0       	brlt	.+30     	; 0x864c <__vector_15+0x175c>
			PWM_BLUE =  pgm_read_byte(&gc_background[7][BLUE][g_speed6rev+g_position]);
    862e:	80 91 27 01 	lds	r24, 0x0127
    8632:	28 0f       	add	r18, r24
    8634:	31 1d       	adc	r19, r1
    8636:	23 56       	subi	r18, 0x63	; 99
    8638:	33 4a       	sbci	r19, 0xA3	; 163
    863a:	f9 01       	movw	r30, r18
    863c:	84 91       	lpm	r24, Z
    863e:	99 27       	eor	r25, r25
    8640:	90 93 79 00 	sts	0x0079, r25
    8644:	80 93 78 00 	sts	0x0078, r24
    8648:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE  = PWM_TOP ;
    864c:	87 e2       	ldi	r24, 0x27	; 39
    864e:	90 e0       	ldi	r25, 0x00	; 0
    8650:	90 93 79 00 	sts	0x0079, r25
    8654:	80 93 78 00 	sts	0x0078, r24
		break;
    8658:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
	
		
		
		case 44:				// background is changing africa 5 mask black
			seconds_hand=0;
    865c:	10 92 25 01 	sts	0x0125, r1
				
			if ((pgm_read_byte(&gm_background[5][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[5][RED][g_speed6+g_position])) > PWM_TOP)
    8660:	50 91 2c 01 	lds	r21, 0x012C
    8664:	2a 2f       	mov	r18, r26
    8666:	33 27       	eor	r19, r19
    8668:	f9 01       	movw	r30, r18
    866a:	e5 0f       	add	r30, r21
    866c:	f1 1d       	adc	r31, r1
    866e:	e3 5e       	subi	r30, 0xE3	; 227
    8670:	f6 4e       	sbci	r31, 0xE6	; 230
    8672:	94 91       	lpm	r25, Z
    8674:	40 91 43 01 	lds	r20, 0x0143
    8678:	f9 01       	movw	r30, r18
    867a:	e4 0f       	add	r30, r20
    867c:	f1 1d       	adc	r31, r1
    867e:	e3 5c       	subi	r30, 0xC3	; 195
    8680:	f8 4e       	sbci	r31, 0xE8	; 232
    8682:	84 91       	lpm	r24, Z
    8684:	89 0f       	add	r24, r25
    8686:	91 2d       	mov	r25, r1
    8688:	91 1d       	adc	r25, r1
    868a:	88 97       	sbiw	r24, 0x28	; 40
    868c:	54 f0       	brlt	.+20     	; 0x86a2 <__vector_15+0x17b2>
			PWM_RED =  pgm_read_byte(&gc_background[6][RED][g_speed6rev+g_position]);
    868e:	80 91 27 01 	lds	r24, 0x0127
    8692:	28 0f       	add	r18, r24
    8694:	31 1d       	adc	r19, r1
    8696:	23 5c       	subi	r18, 0xC3	; 195
    8698:	3c 4a       	sbci	r19, 0xAC	; 172
    869a:	f9 01       	movw	r30, r18
    869c:	84 91       	lpm	r24, Z
    869e:	99 27       	eor	r25, r25
    86a0:	02 c0       	rjmp	.+4      	; 0x86a6 <__vector_15+0x17b6>
			else
			PWM_RED = PWM_TOP ;
    86a2:	87 e2       	ldi	r24, 0x27	; 39
    86a4:	90 e0       	ldi	r25, 0x00	; 0
    86a6:	9b bd       	out	0x2b, r25	; 43
    86a8:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[5][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[5][RED][g_speed6+g_position])) > PWM_TOP)
    86aa:	2a 2f       	mov	r18, r26
    86ac:	33 27       	eor	r19, r19
    86ae:	f9 01       	movw	r30, r18
    86b0:	e5 0f       	add	r30, r21
    86b2:	f1 1d       	adc	r31, r1
    86b4:	e3 5e       	subi	r30, 0xE3	; 227
    86b6:	f6 4e       	sbci	r31, 0xE6	; 230
    86b8:	94 91       	lpm	r25, Z
    86ba:	f9 01       	movw	r30, r18
    86bc:	e4 0f       	add	r30, r20
    86be:	f1 1d       	adc	r31, r1
    86c0:	e3 5c       	subi	r30, 0xC3	; 195
    86c2:	f8 4e       	sbci	r31, 0xE8	; 232
    86c4:	84 91       	lpm	r24, Z
    86c6:	89 0f       	add	r24, r25
    86c8:	91 2d       	mov	r25, r1
    86ca:	91 1d       	adc	r25, r1
    86cc:	88 97       	sbiw	r24, 0x28	; 40
    86ce:	54 f0       	brlt	.+20     	; 0x86e4 <__vector_15+0x17f4>
			PWM_GREEN =  pgm_read_byte(&gc_background[6][GREEN][g_speed6rev+g_position]);
    86d0:	80 91 27 01 	lds	r24, 0x0127
    86d4:	28 0f       	add	r18, r24
    86d6:	31 1d       	adc	r19, r1
    86d8:	23 5e       	subi	r18, 0xE3	; 227
    86da:	3a 4a       	sbci	r19, 0xAA	; 170
    86dc:	f9 01       	movw	r30, r18
    86de:	84 91       	lpm	r24, Z
    86e0:	99 27       	eor	r25, r25
    86e2:	02 c0       	rjmp	.+4      	; 0x86e8 <__vector_15+0x17f8>
			else
			PWM_GREEN = PWM_TOP ;
    86e4:	87 e2       	ldi	r24, 0x27	; 39
    86e6:	90 e0       	ldi	r25, 0x00	; 0
    86e8:	99 bd       	out	0x29, r25	; 41
    86ea:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[5][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[5][RED][g_speed6+g_position])) > PWM_TOP)
    86ec:	2a 2f       	mov	r18, r26
    86ee:	33 27       	eor	r19, r19
    86f0:	f9 01       	movw	r30, r18
    86f2:	e5 0f       	add	r30, r21
    86f4:	f1 1d       	adc	r31, r1
    86f6:	e3 5e       	subi	r30, 0xE3	; 227
    86f8:	f6 4e       	sbci	r31, 0xE6	; 230
    86fa:	94 91       	lpm	r25, Z
    86fc:	f9 01       	movw	r30, r18
    86fe:	e4 0f       	add	r30, r20
    8700:	f1 1d       	adc	r31, r1
    8702:	e3 5c       	subi	r30, 0xC3	; 195
    8704:	f8 4e       	sbci	r31, 0xE8	; 232
    8706:	84 91       	lpm	r24, Z
    8708:	89 0f       	add	r24, r25
    870a:	91 2d       	mov	r25, r1
    870c:	91 1d       	adc	r25, r1
    870e:	88 97       	sbiw	r24, 0x28	; 40
    8710:	7c f0       	brlt	.+30     	; 0x8730 <__vector_15+0x1840>
			PWM_BLUE =  pgm_read_byte(&gc_background[6][BLUE][g_speed6rev+g_position]);
    8712:	80 91 27 01 	lds	r24, 0x0127
    8716:	28 0f       	add	r18, r24
    8718:	31 1d       	adc	r19, r1
    871a:	23 50       	subi	r18, 0x03	; 3
    871c:	39 4a       	sbci	r19, 0xA9	; 169
    871e:	f9 01       	movw	r30, r18
    8720:	84 91       	lpm	r24, Z
    8722:	99 27       	eor	r25, r25
    8724:	90 93 79 00 	sts	0x0079, r25
    8728:	80 93 78 00 	sts	0x0078, r24
    872c:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE  = PWM_TOP ;
    8730:	87 e2       	ldi	r24, 0x27	; 39
    8732:	90 e0       	ldi	r25, 0x00	; 0
    8734:	90 93 79 00 	sts	0x0079, r25
    8738:	80 93 78 00 	sts	0x0078, r24
		break;
    873c:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			
			
		case 43:				// background is changing sonar green with black lines
			seconds_hand=1;	
    8740:	81 e0       	ldi	r24, 0x01	; 1
    8742:	80 93 25 01 	sts	0x0125, r24
			
			if (g_position % 20 == 0)
    8746:	8a 2f       	mov	r24, r26
    8748:	64 e1       	ldi	r22, 0x14	; 20
    874a:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    874e:	99 23       	and	r25, r25
    8750:	61 f4       	brne	.+24     	; 0x876a <__vector_15+0x187a>
			{
				PWM_RED = PWM_TOP;
    8752:	87 e2       	ldi	r24, 0x27	; 39
    8754:	90 e0       	ldi	r25, 0x00	; 0
    8756:	9b bd       	out	0x2b, r25	; 43
    8758:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = PWM_TOP;
    875a:	99 bd       	out	0x29, r25	; 41
    875c:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = PWM_TOP;
    875e:	90 93 79 00 	sts	0x0079, r25
    8762:	80 93 78 00 	sts	0x0078, r24
    8766:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			}	
			else
			{	
			PWM_RED = PWM_TOP;
    876a:	87 e2       	ldi	r24, 0x27	; 39
    876c:	90 e0       	ldi	r25, 0x00	; 0
    876e:	9b bd       	out	0x2b, r25	; 43
    8770:	8a bd       	out	0x2a, r24	; 42
			if (pgm_read_byte(&gm_background[1][GREEN][g_speed6rev+g_position]) == 0x01)
    8772:	80 91 27 01 	lds	r24, 0x0127
    8776:	28 2f       	mov	r18, r24
    8778:	2a 0f       	add	r18, r26
    877a:	31 2d       	mov	r19, r1
    877c:	31 1d       	adc	r19, r1
    877e:	f9 01       	movw	r30, r18
    8780:	e3 5e       	subi	r30, 0xE3	; 227
    8782:	f5 4f       	sbci	r31, 0xF5	; 245
    8784:	24 91       	lpm	r18, Z
    8786:	21 30       	cpi	r18, 0x01	; 1
    8788:	19 f4       	brne	.+6      	; 0x8790 <__vector_15+0x18a0>
			PWM_GREEN = 0x22;
    878a:	82 e2       	ldi	r24, 0x22	; 34
    878c:	90 e0       	ldi	r25, 0x00	; 0
    878e:	04 c0       	rjmp	.+8      	; 0x8798 <__vector_15+0x18a8>
			else
			PWM_GREEN = 0x22 - pgm_read_byte(&gm_background[1][GREEN][g_speed6rev+g_position]);
    8790:	82 e2       	ldi	r24, 0x22	; 34
    8792:	90 e0       	ldi	r25, 0x00	; 0
    8794:	82 1b       	sub	r24, r18
    8796:	91 09       	sbc	r25, r1
    8798:	99 bd       	out	0x29, r25	; 41
    879a:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = PWM_TOP;
    879c:	87 e2       	ldi	r24, 0x27	; 39
    879e:	90 e0       	ldi	r25, 0x00	; 0
    87a0:	90 93 79 00 	sts	0x0079, r25
    87a4:	80 93 78 00 	sts	0x0078, r24
			}
			
		break;
    87a8:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>

		case 42:				// background is changing sonar green
			seconds_hand=1;	
    87ac:	81 e0       	ldi	r24, 0x01	; 1
    87ae:	80 93 25 01 	sts	0x0125, r24
			
			PWM_RED = PWM_TOP;
    87b2:	87 e2       	ldi	r24, 0x27	; 39
    87b4:	90 e0       	ldi	r25, 0x00	; 0
    87b6:	9b bd       	out	0x2b, r25	; 43
    87b8:	8a bd       	out	0x2a, r24	; 42
			if (pgm_read_byte(&gm_background[1][GREEN][g_speed6rev+g_position]) == 0x01)
    87ba:	80 91 27 01 	lds	r24, 0x0127
    87be:	48 2f       	mov	r20, r24
    87c0:	4a 0f       	add	r20, r26
    87c2:	51 2d       	mov	r21, r1
    87c4:	51 1d       	adc	r21, r1
    87c6:	fa 01       	movw	r30, r20
    87c8:	e3 5e       	subi	r30, 0xE3	; 227
    87ca:	f5 4f       	sbci	r31, 0xF5	; 245
    87cc:	24 91       	lpm	r18, Z
    87ce:	21 30       	cpi	r18, 0x01	; 1
    87d0:	19 f4       	brne	.+6      	; 0x87d8 <__vector_15+0x18e8>
			PWM_GREEN = 0x22;
    87d2:	82 e2       	ldi	r24, 0x22	; 34
    87d4:	90 e0       	ldi	r25, 0x00	; 0
    87d6:	04 c0       	rjmp	.+8      	; 0x87e0 <__vector_15+0x18f0>
			else
			PWM_GREEN = 0x22 - pgm_read_byte(&gm_background[1][GREEN][g_speed6rev+g_position]);
    87d8:	82 e2       	ldi	r24, 0x22	; 34
    87da:	90 e0       	ldi	r25, 0x00	; 0
    87dc:	82 1b       	sub	r24, r18
    87de:	91 09       	sbc	r25, r1
    87e0:	99 bd       	out	0x29, r25	; 41
    87e2:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = PWM_TOP;
    87e4:	87 e2       	ldi	r24, 0x27	; 39
    87e6:	90 e0       	ldi	r25, 0x00	; 0
    87e8:	90 93 79 00 	sts	0x0079, r25
    87ec:	80 93 78 00 	sts	0x0078, r24
		break;		
    87f0:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			
		case 41:				// background is changing radioactive synthesis
			seconds_hand=1;	
    87f4:	81 e0       	ldi	r24, 0x01	; 1
    87f6:	80 93 25 01 	sts	0x0125, r24
			
			if ((pgm_read_byte(&gm_background[4][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[4][RED][g_speed6+g_position])) > PWM_TOP)
    87fa:	40 91 2c 01 	lds	r20, 0x012C
    87fe:	8a 2f       	mov	r24, r26
    8800:	99 27       	eor	r25, r25
    8802:	fc 01       	movw	r30, r24
    8804:	e4 0f       	add	r30, r20
    8806:	f1 1d       	adc	r31, r1
    8808:	e3 5a       	subi	r30, 0xA3	; 163
    880a:	fa 4e       	sbci	r31, 0xEA	; 234
    880c:	24 91       	lpm	r18, Z
    880e:	30 91 43 01 	lds	r19, 0x0143
    8812:	83 0f       	add	r24, r19
    8814:	91 1d       	adc	r25, r1
    8816:	83 58       	subi	r24, 0x83	; 131
    8818:	9c 4e       	sbci	r25, 0xEC	; 236
    881a:	fc 01       	movw	r30, r24
    881c:	84 91       	lpm	r24, Z
    881e:	82 0f       	add	r24, r18
    8820:	91 2d       	mov	r25, r1
    8822:	91 1d       	adc	r25, r1
    8824:	88 97       	sbiw	r24, 0x28	; 40
    8826:	1c f0       	brlt	.+6      	; 0x882e <__vector_15+0x193e>
			PWM_RED =  0x00; 
    8828:	1b bc       	out	0x2b, r1	; 43
    882a:	1a bc       	out	0x2a, r1	; 42
    882c:	04 c0       	rjmp	.+8      	; 0x8836 <__vector_15+0x1946>
			else
			PWM_RED = PWM_TOP ;
    882e:	87 e2       	ldi	r24, 0x27	; 39
    8830:	90 e0       	ldi	r25, 0x00	; 0
    8832:	9b bd       	out	0x2b, r25	; 43
    8834:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[4][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[4][RED][g_speed6+g_position])) > PWM_TOP)
    8836:	8a 2f       	mov	r24, r26
    8838:	99 27       	eor	r25, r25
    883a:	fc 01       	movw	r30, r24
    883c:	e4 0f       	add	r30, r20
    883e:	f1 1d       	adc	r31, r1
    8840:	e3 5a       	subi	r30, 0xA3	; 163
    8842:	fa 4e       	sbci	r31, 0xEA	; 234
    8844:	24 91       	lpm	r18, Z
    8846:	83 0f       	add	r24, r19
    8848:	91 1d       	adc	r25, r1
    884a:	83 58       	subi	r24, 0x83	; 131
    884c:	9c 4e       	sbci	r25, 0xEC	; 236
    884e:	fc 01       	movw	r30, r24
    8850:	84 91       	lpm	r24, Z
    8852:	82 0f       	add	r24, r18
    8854:	91 2d       	mov	r25, r1
    8856:	91 1d       	adc	r25, r1
    8858:	88 97       	sbiw	r24, 0x28	; 40
    885a:	1c f0       	brlt	.+6      	; 0x8862 <__vector_15+0x1972>
			PWM_GREEN =  0x00; 
    885c:	19 bc       	out	0x29, r1	; 41
    885e:	18 bc       	out	0x28, r1	; 40
    8860:	04 c0       	rjmp	.+8      	; 0x886a <__vector_15+0x197a>
			else
			PWM_GREEN = PWM_TOP ;
    8862:	87 e2       	ldi	r24, 0x27	; 39
    8864:	90 e0       	ldi	r25, 0x00	; 0
    8866:	99 bd       	out	0x29, r25	; 41
    8868:	88 bd       	out	0x28, r24	; 40
				
			PWM_BLUE  = PWM_TOP ;
    886a:	87 e2       	ldi	r24, 0x27	; 39
    886c:	90 e0       	ldi	r25, 0x00	; 0
    886e:	90 93 79 00 	sts	0x0079, r25
    8872:	80 93 78 00 	sts	0x0078, r24
		break;
    8876:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			
		case 40:				// background is changing, radioactivity semi random
			seconds_hand=1;		
    887a:	81 e0       	ldi	r24, 0x01	; 1
    887c:	80 93 25 01 	sts	0x0125, r24
				//red radioactivity or black
			if ((g_speedrandom < 37) && (g_speedrandom>7) && (g_minutes%7==0))
    8880:	20 91 2a 01 	lds	r18, 0x012A
    8884:	82 2f       	mov	r24, r18
    8886:	88 50       	subi	r24, 0x08	; 8
    8888:	8d 31       	cpi	r24, 0x1D	; 29
    888a:	40 f5       	brcc	.+80     	; 0x88dc <__vector_15+0x19ec>
    888c:	80 91 22 01 	lds	r24, 0x0122
    8890:	67 e0       	ldi	r22, 0x07	; 7
    8892:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    8896:	99 23       	and	r25, r25
    8898:	09 f5       	brne	.+66     	; 0x88dc <__vector_15+0x19ec>
			{
			if (pgm_read_byte(&gc_background[1][RED][g_position+100])==0x00)
    889a:	20 91 40 01 	lds	r18, 0x0140
    889e:	e2 2f       	mov	r30, r18
    88a0:	ff 27       	eor	r31, r31
    88a2:	ef 57       	subi	r30, 0x7F	; 127
    88a4:	f8 4c       	sbci	r31, 0xC8	; 200
    88a6:	84 91       	lpm	r24, Z
    88a8:	88 23       	and	r24, r24
    88aa:	19 f4       	brne	.+6      	; 0x88b2 <__vector_15+0x19c2>
			PWM_RED = 0x17;
    88ac:	87 e1       	ldi	r24, 0x17	; 23
    88ae:	90 e0       	ldi	r25, 0x00	; 0
    88b0:	02 c0       	rjmp	.+4      	; 0x88b6 <__vector_15+0x19c6>
			else
			PWM_RED = PWM_TOP ;
    88b2:	87 e2       	ldi	r24, 0x27	; 39
    88b4:	90 e0       	ldi	r25, 0x00	; 0
    88b6:	9b bd       	out	0x2b, r25	; 43
    88b8:	8a bd       	out	0x2a, r24	; 42
			//PWM_GREEN = PWM_TOP ;
			//PWM_BLUE  = PWM_TOP ;
			PWM_GREEN = pgm_read_byte(&gc_background[1][BLUE][g_position+20]);
    88ba:	e2 2f       	mov	r30, r18
    88bc:	ff 27       	eor	r31, r31
    88be:	ef 50       	subi	r30, 0x0F	; 15
    88c0:	f5 4c       	sbci	r31, 0xC5	; 197
    88c2:	84 91       	lpm	r24, Z
    88c4:	99 27       	eor	r25, r25
    88c6:	99 bd       	out	0x29, r25	; 41
    88c8:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[1][BLUE][g_position+20]);
    88ca:	90 93 79 00 	sts	0x0079, r25
    88ce:	80 93 78 00 	sts	0x0078, r24
			radioactivity=1;
    88d2:	81 e0       	ldi	r24, 0x01	; 1
    88d4:	80 93 41 01 	sts	0x0141, r24
    88d8:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			}
			else
			{
			PWM_RED = pgm_read_byte(&gc_background[1][RED][g_speedrandom+g_position]);
    88dc:	80 91 40 01 	lds	r24, 0x0140
    88e0:	28 0f       	add	r18, r24
    88e2:	31 2d       	mov	r19, r1
    88e4:	31 1d       	adc	r19, r1
    88e6:	f9 01       	movw	r30, r18
    88e8:	e3 5e       	subi	r30, 0xE3	; 227
    88ea:	f8 4c       	sbci	r31, 0xC8	; 200
    88ec:	84 91       	lpm	r24, Z
    88ee:	99 27       	eor	r25, r25
    88f0:	9b bd       	out	0x2b, r25	; 43
    88f2:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[1][GREEN][g_speedrandom+g_position]);
    88f4:	f9 01       	movw	r30, r18
    88f6:	e3 50       	subi	r30, 0x03	; 3
    88f8:	f7 4c       	sbci	r31, 0xC7	; 199
    88fa:	84 91       	lpm	r24, Z
    88fc:	99 27       	eor	r25, r25
    88fe:	99 bd       	out	0x29, r25	; 41
    8900:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[1][BLUE][g_speedrandom+g_position]);
    8902:	23 52       	subi	r18, 0x23	; 35
    8904:	35 4c       	sbci	r19, 0xC5	; 197
    8906:	f9 01       	movw	r30, r18
    8908:	84 91       	lpm	r24, Z
    890a:	99 27       	eor	r25, r25
    890c:	90 93 79 00 	sts	0x0079, r25
    8910:	80 93 78 00 	sts	0x0078, r24
			radioactivity=0;
    8914:	10 92 41 01 	sts	0x0141, r1
			}
			
		break;
    8918:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
				
		case 39:				// background is changing pacman
			seconds_hand=0;		
    891c:	10 92 25 01 	sts	0x0125, r1
			//pacman open and shuts horizontally or vertically
			
			if (g_minutes%5 == 0)
    8920:	80 91 22 01 	lds	r24, 0x0122
    8924:	65 e0       	ldi	r22, 0x05	; 5
    8926:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    892a:	a0 91 40 01 	lds	r26, 0x0140
    892e:	30 91 37 01 	lds	r19, 0x0137
    8932:	40 91 3b 01 	lds	r20, 0x013B
    8936:	99 23       	and	r25, r25
    8938:	09 f0       	breq	.+2      	; 0x893c <__vector_15+0x1a4c>
    893a:	3e c0       	rjmp	.+124    	; 0x89b8 <__vector_15+0x1ac8>
			{
			
			//black mouth
				if ((pgm_read_byte(&gm_background[2][RED][g_speed3rev+g_position]) + pgm_read_byte(&gm_background[2][RED][g_speed3+g_position])) == 2*PWM_TOP)
    893c:	8a 2f       	mov	r24, r26
    893e:	99 27       	eor	r25, r25
    8940:	fc 01       	movw	r30, r24
    8942:	e3 0f       	add	r30, r19
    8944:	f1 1d       	adc	r31, r1
    8946:	e3 50       	subi	r30, 0x03	; 3
    8948:	f4 4f       	sbci	r31, 0xF4	; 244
    894a:	24 91       	lpm	r18, Z
    894c:	84 0f       	add	r24, r20
    894e:	91 1d       	adc	r25, r1
    8950:	83 50       	subi	r24, 0x03	; 3
    8952:	94 4f       	sbci	r25, 0xF4	; 244
    8954:	fc 01       	movw	r30, r24
    8956:	84 91       	lpm	r24, Z
    8958:	82 0f       	add	r24, r18
    895a:	91 2d       	mov	r25, r1
    895c:	91 1d       	adc	r25, r1
    895e:	8e 34       	cpi	r24, 0x4E	; 78
    8960:	91 05       	cpc	r25, r1
    8962:	19 f4       	brne	.+6      	; 0x896a <__vector_15+0x1a7a>
				PWM_RED = PWM_TOP;
    8964:	87 e2       	ldi	r24, 0x27	; 39
    8966:	90 e0       	ldi	r25, 0x00	; 0
    8968:	02 c0       	rjmp	.+4      	; 0x896e <__vector_15+0x1a7e>
				//red lips
				//else if (( pgm_read_byte(&gm_background[2][GREEN][g_speed3rev+g_position+pacmandir]) + pgm_read_byte(&gm_background[2][RED][g_speed3+g_position+pacmandir])) == 0x4d)
				//PWM_RED = 0x00 ;
				else
				PWM_RED = 0x10 ;
    896a:	80 e1       	ldi	r24, 0x10	; 16
    896c:	90 e0       	ldi	r25, 0x00	; 0
    896e:	9b bd       	out	0x2b, r25	; 43
    8970:	8a bd       	out	0x2a, r24	; 42
				//black mouth
				if ((pgm_read_byte(&gm_background[2][RED][g_speed3rev+g_position]) + pgm_read_byte(&gm_background[2][RED][g_speed3+g_position])) == 2*PWM_TOP)
    8972:	8a 2f       	mov	r24, r26
    8974:	99 27       	eor	r25, r25
    8976:	fc 01       	movw	r30, r24
    8978:	e3 0f       	add	r30, r19
    897a:	f1 1d       	adc	r31, r1
    897c:	e3 50       	subi	r30, 0x03	; 3
    897e:	f4 4f       	sbci	r31, 0xF4	; 244
    8980:	24 91       	lpm	r18, Z
    8982:	84 0f       	add	r24, r20
    8984:	91 1d       	adc	r25, r1
    8986:	83 50       	subi	r24, 0x03	; 3
    8988:	94 4f       	sbci	r25, 0xF4	; 244
    898a:	fc 01       	movw	r30, r24
    898c:	84 91       	lpm	r24, Z
    898e:	82 0f       	add	r24, r18
    8990:	91 2d       	mov	r25, r1
    8992:	91 1d       	adc	r25, r1
    8994:	8e 34       	cpi	r24, 0x4E	; 78
    8996:	91 05       	cpc	r25, r1
    8998:	19 f4       	brne	.+6      	; 0x89a0 <__vector_15+0x1ab0>
				PWM_GREEN = PWM_TOP;
    899a:	87 e2       	ldi	r24, 0x27	; 39
    899c:	90 e0       	ldi	r25, 0x00	; 0
    899e:	02 c0       	rjmp	.+4      	; 0x89a4 <__vector_15+0x1ab4>
				//red lips
				//else if (( pgm_read_byte(&gm_background[2][GREEN][g_speed3rev+g_position+pacmandir]) + pgm_read_byte(&gm_background[2][RED][g_speed3+g_position+pacmandir])) == 0x4d)
				//PWM_GREEN = PWM_TOP ;
				else
				PWM_GREEN = 0x10 ;
    89a0:	80 e1       	ldi	r24, 0x10	; 16
    89a2:	90 e0       	ldi	r25, 0x00	; 0
    89a4:	99 bd       	out	0x29, r25	; 41
    89a6:	88 bd       	out	0x28, r24	; 40
				
				PWM_BLUE = PWM_TOP;
    89a8:	87 e2       	ldi	r24, 0x27	; 39
    89aa:	90 e0       	ldi	r25, 0x00	; 0
    89ac:	90 93 79 00 	sts	0x0079, r25
    89b0:	80 93 78 00 	sts	0x0078, r24
    89b4:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			}
			else
			{
				//black mouth
				if ((pgm_read_byte(&gm_background[2][GREEN][g_speed3rev+g_position]) + pgm_read_byte(&gm_background[2][RED][g_speed3+g_position])) == 2*PWM_TOP)
    89b8:	8a 2f       	mov	r24, r26
    89ba:	99 27       	eor	r25, r25
    89bc:	fc 01       	movw	r30, r24
    89be:	e3 0f       	add	r30, r19
    89c0:	f1 1d       	adc	r31, r1
    89c2:	e3 52       	subi	r30, 0x23	; 35
    89c4:	f2 4f       	sbci	r31, 0xF2	; 242
    89c6:	24 91       	lpm	r18, Z
    89c8:	84 0f       	add	r24, r20
    89ca:	91 1d       	adc	r25, r1
    89cc:	83 50       	subi	r24, 0x03	; 3
    89ce:	94 4f       	sbci	r25, 0xF4	; 244
    89d0:	fc 01       	movw	r30, r24
    89d2:	84 91       	lpm	r24, Z
    89d4:	82 0f       	add	r24, r18
    89d6:	91 2d       	mov	r25, r1
    89d8:	91 1d       	adc	r25, r1
    89da:	8e 34       	cpi	r24, 0x4E	; 78
    89dc:	91 05       	cpc	r25, r1
    89de:	19 f4       	brne	.+6      	; 0x89e6 <__vector_15+0x1af6>
				PWM_RED = PWM_TOP;
    89e0:	87 e2       	ldi	r24, 0x27	; 39
    89e2:	90 e0       	ldi	r25, 0x00	; 0
    89e4:	02 c0       	rjmp	.+4      	; 0x89ea <__vector_15+0x1afa>
				//red lips
				//else if (( pgm_read_byte(&gm_background[2][GREEN][g_speed3rev+g_position+pacmandir]) + pgm_read_byte(&gm_background[2][RED][g_speed3+g_position+pacmandir])) == 0x4d)
				//PWM_RED = 0x00 ;
				else
				PWM_RED = 0x10 ;
    89e6:	80 e1       	ldi	r24, 0x10	; 16
    89e8:	90 e0       	ldi	r25, 0x00	; 0
    89ea:	9b bd       	out	0x2b, r25	; 43
    89ec:	8a bd       	out	0x2a, r24	; 42
				//black mouth
				if ((pgm_read_byte(&gm_background[2][GREEN][g_speed3rev+g_position]) + pgm_read_byte(&gm_background[2][RED][g_speed3+g_position])) == 2*PWM_TOP)
    89ee:	8a 2f       	mov	r24, r26
    89f0:	99 27       	eor	r25, r25
    89f2:	fc 01       	movw	r30, r24
    89f4:	e3 0f       	add	r30, r19
    89f6:	f1 1d       	adc	r31, r1
    89f8:	e3 52       	subi	r30, 0x23	; 35
    89fa:	f2 4f       	sbci	r31, 0xF2	; 242
    89fc:	24 91       	lpm	r18, Z
    89fe:	84 0f       	add	r24, r20
    8a00:	91 1d       	adc	r25, r1
    8a02:	83 50       	subi	r24, 0x03	; 3
    8a04:	94 4f       	sbci	r25, 0xF4	; 244
    8a06:	fc 01       	movw	r30, r24
    8a08:	84 91       	lpm	r24, Z
    8a0a:	82 0f       	add	r24, r18
    8a0c:	91 2d       	mov	r25, r1
    8a0e:	91 1d       	adc	r25, r1
    8a10:	8e 34       	cpi	r24, 0x4E	; 78
    8a12:	91 05       	cpc	r25, r1
    8a14:	19 f4       	brne	.+6      	; 0x8a1c <__vector_15+0x1b2c>
				PWM_GREEN = PWM_TOP;
    8a16:	87 e2       	ldi	r24, 0x27	; 39
    8a18:	90 e0       	ldi	r25, 0x00	; 0
    8a1a:	02 c0       	rjmp	.+4      	; 0x8a20 <__vector_15+0x1b30>
				//red lips
				//else if (( pgm_read_byte(&gm_background[2][GREEN][g_speed3rev+g_position+pacmandir]) + pgm_read_byte(&gm_background[2][RED][g_speed3+g_position+pacmandir])) == 0x4d)
				//PWM_GREEN = PWM_TOP ;
				else
				PWM_GREEN = 0x10 ;
    8a1c:	80 e1       	ldi	r24, 0x10	; 16
    8a1e:	90 e0       	ldi	r25, 0x00	; 0
    8a20:	99 bd       	out	0x29, r25	; 41
    8a22:	88 bd       	out	0x28, r24	; 40
				
				PWM_BLUE = PWM_TOP;
    8a24:	87 e2       	ldi	r24, 0x27	; 39
    8a26:	90 e0       	ldi	r25, 0x00	; 0
    8a28:	90 93 79 00 	sts	0x0079, r25
    8a2c:	80 93 78 00 	sts	0x0078, r24
			}
			
		break;
    8a30:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
				
		case 38:				// background is changing, umbrella corp.
			seconds_hand=1;				
    8a34:	81 e0       	ldi	r24, 0x01	; 1
    8a36:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&gc_background[5][RED][g_speedrandom+g_position]);
    8a3a:	80 91 2a 01 	lds	r24, 0x012A
    8a3e:	48 2f       	mov	r20, r24
    8a40:	4a 0f       	add	r20, r26
    8a42:	51 2d       	mov	r21, r1
    8a44:	51 1d       	adc	r21, r1
    8a46:	9a 01       	movw	r18, r20
    8a48:	fa 01       	movw	r30, r20
    8a4a:	e3 56       	subi	r30, 0x63	; 99
    8a4c:	f2 4b       	sbci	r31, 0xB2	; 178
    8a4e:	84 91       	lpm	r24, Z
    8a50:	99 27       	eor	r25, r25
    8a52:	9b bd       	out	0x2b, r25	; 43
    8a54:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[5][GREEN][g_speedrandom+g_position]);
    8a56:	fa 01       	movw	r30, r20
    8a58:	e3 58       	subi	r30, 0x83	; 131
    8a5a:	f0 4b       	sbci	r31, 0xB0	; 176
    8a5c:	84 91       	lpm	r24, Z
    8a5e:	99 27       	eor	r25, r25
    8a60:	99 bd       	out	0x29, r25	; 41
    8a62:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[5][BLUE][g_speedrandom+g_position]);
    8a64:	23 5a       	subi	r18, 0xA3	; 163
    8a66:	3e 4a       	sbci	r19, 0xAE	; 174
    8a68:	f9 01       	movw	r30, r18
    8a6a:	84 91       	lpm	r24, Z
    8a6c:	99 27       	eor	r25, r25
    8a6e:	90 93 79 00 	sts	0x0079, r25
    8a72:	80 93 78 00 	sts	0x0078, r24
		break;
    8a76:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
				
		case 37:				// background is changing android boot jb
			seconds_hand=0;
    8a7a:	10 92 25 01 	sts	0x0125, r1
			if ((pgm_read_byte(&gm_background[3][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[3][RED][g_speed6+g_position])) > PWM_TOP)
    8a7e:	50 91 2c 01 	lds	r21, 0x012C
    8a82:	2a 2f       	mov	r18, r26
    8a84:	33 27       	eor	r19, r19
    8a86:	f9 01       	movw	r30, r18
    8a88:	e5 0f       	add	r30, r21
    8a8a:	f1 1d       	adc	r31, r1
    8a8c:	e3 56       	subi	r30, 0x63	; 99
    8a8e:	fe 4e       	sbci	r31, 0xEE	; 238
    8a90:	94 91       	lpm	r25, Z
    8a92:	40 91 43 01 	lds	r20, 0x0143
    8a96:	f9 01       	movw	r30, r18
    8a98:	e4 0f       	add	r30, r20
    8a9a:	f1 1d       	adc	r31, r1
    8a9c:	e3 54       	subi	r30, 0x43	; 67
    8a9e:	f0 4f       	sbci	r31, 0xF0	; 240
    8aa0:	84 91       	lpm	r24, Z
    8aa2:	89 0f       	add	r24, r25
    8aa4:	91 2d       	mov	r25, r1
    8aa6:	91 1d       	adc	r25, r1
    8aa8:	88 97       	sbiw	r24, 0x28	; 40
    8aaa:	54 f0       	brlt	.+20     	; 0x8ac0 <__vector_15+0x1bd0>
			PWM_RED =  pgm_read_byte(&gc_background[0][RED][g_speed6rev+g_position]);
    8aac:	80 91 27 01 	lds	r24, 0x0127
    8ab0:	28 0f       	add	r18, r24
    8ab2:	31 1d       	adc	r19, r1
    8ab4:	23 58       	subi	r18, 0x83	; 131
    8ab6:	3e 4c       	sbci	r19, 0xCE	; 206
    8ab8:	f9 01       	movw	r30, r18
    8aba:	84 91       	lpm	r24, Z
    8abc:	99 27       	eor	r25, r25
    8abe:	02 c0       	rjmp	.+4      	; 0x8ac4 <__vector_15+0x1bd4>
			else
			PWM_RED = PWM_TOP ;
    8ac0:	87 e2       	ldi	r24, 0x27	; 39
    8ac2:	90 e0       	ldi	r25, 0x00	; 0
    8ac4:	9b bd       	out	0x2b, r25	; 43
    8ac6:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[3][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[3][RED][g_speed6+g_position])) > PWM_TOP)
    8ac8:	2a 2f       	mov	r18, r26
    8aca:	33 27       	eor	r19, r19
    8acc:	f9 01       	movw	r30, r18
    8ace:	e5 0f       	add	r30, r21
    8ad0:	f1 1d       	adc	r31, r1
    8ad2:	e3 56       	subi	r30, 0x63	; 99
    8ad4:	fe 4e       	sbci	r31, 0xEE	; 238
    8ad6:	94 91       	lpm	r25, Z
    8ad8:	f9 01       	movw	r30, r18
    8ada:	e4 0f       	add	r30, r20
    8adc:	f1 1d       	adc	r31, r1
    8ade:	e3 54       	subi	r30, 0x43	; 67
    8ae0:	f0 4f       	sbci	r31, 0xF0	; 240
    8ae2:	84 91       	lpm	r24, Z
    8ae4:	89 0f       	add	r24, r25
    8ae6:	91 2d       	mov	r25, r1
    8ae8:	91 1d       	adc	r25, r1
    8aea:	88 97       	sbiw	r24, 0x28	; 40
    8aec:	54 f0       	brlt	.+20     	; 0x8b02 <__vector_15+0x1c12>
			PWM_GREEN =  pgm_read_byte(&gc_background[0][GREEN][g_speed6rev+g_position]);
    8aee:	80 91 27 01 	lds	r24, 0x0127
    8af2:	28 0f       	add	r18, r24
    8af4:	31 1d       	adc	r19, r1
    8af6:	23 5a       	subi	r18, 0xA3	; 163
    8af8:	3c 4c       	sbci	r19, 0xCC	; 204
    8afa:	f9 01       	movw	r30, r18
    8afc:	84 91       	lpm	r24, Z
    8afe:	99 27       	eor	r25, r25
    8b00:	02 c0       	rjmp	.+4      	; 0x8b06 <__vector_15+0x1c16>
			else
			PWM_GREEN = PWM_TOP ;
    8b02:	87 e2       	ldi	r24, 0x27	; 39
    8b04:	90 e0       	ldi	r25, 0x00	; 0
    8b06:	99 bd       	out	0x29, r25	; 41
    8b08:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[3][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[3][RED][g_speed6+g_position])) > PWM_TOP)
    8b0a:	2a 2f       	mov	r18, r26
    8b0c:	33 27       	eor	r19, r19
    8b0e:	f9 01       	movw	r30, r18
    8b10:	e5 0f       	add	r30, r21
    8b12:	f1 1d       	adc	r31, r1
    8b14:	e3 56       	subi	r30, 0x63	; 99
    8b16:	fe 4e       	sbci	r31, 0xEE	; 238
    8b18:	94 91       	lpm	r25, Z
    8b1a:	f9 01       	movw	r30, r18
    8b1c:	e4 0f       	add	r30, r20
    8b1e:	f1 1d       	adc	r31, r1
    8b20:	e3 54       	subi	r30, 0x43	; 67
    8b22:	f0 4f       	sbci	r31, 0xF0	; 240
    8b24:	84 91       	lpm	r24, Z
    8b26:	89 0f       	add	r24, r25
    8b28:	91 2d       	mov	r25, r1
    8b2a:	91 1d       	adc	r25, r1
    8b2c:	88 97       	sbiw	r24, 0x28	; 40
    8b2e:	7c f0       	brlt	.+30     	; 0x8b4e <__vector_15+0x1c5e>
			PWM_BLUE =  pgm_read_byte(&gc_background[0][BLUE][g_speed6rev+g_position]);
    8b30:	80 91 27 01 	lds	r24, 0x0127
    8b34:	28 0f       	add	r18, r24
    8b36:	31 1d       	adc	r19, r1
    8b38:	23 5c       	subi	r18, 0xC3	; 195
    8b3a:	3a 4c       	sbci	r19, 0xCA	; 202
    8b3c:	f9 01       	movw	r30, r18
    8b3e:	84 91       	lpm	r24, Z
    8b40:	99 27       	eor	r25, r25
    8b42:	90 93 79 00 	sts	0x0079, r25
    8b46:	80 93 78 00 	sts	0x0078, r24
    8b4a:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE  = PWM_TOP ;
    8b4e:	87 e2       	ldi	r24, 0x27	; 39
    8b50:	90 e0       	ldi	r25, 0x00	; 0
    8b52:	90 93 79 00 	sts	0x0079, r25
    8b56:	80 93 78 00 	sts	0x0078, r24
		break;
    8b5a:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>

		case 36:				// background is changing android loader 2 rainbow
			seconds_hand=0;		
    8b5e:	10 92 25 01 	sts	0x0125, r1
			if ((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) == 0x27) && (pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position]) == 0x27) && ( abs(g_speed3rev-g_speed7rev)  <=1 ))
    8b62:	b0 91 4c 01 	lds	r27, 0x014C
    8b66:	6b 2f       	mov	r22, r27
    8b68:	77 27       	eor	r23, r23
    8b6a:	4a 2f       	mov	r20, r26
    8b6c:	55 27       	eor	r21, r21
    8b6e:	fb 01       	movw	r30, r22
    8b70:	e4 0f       	add	r30, r20
    8b72:	f5 1f       	adc	r31, r21
    8b74:	e3 56       	subi	r30, 0x63	; 99
    8b76:	f0 4d       	sbci	r31, 0xD0	; 208
    8b78:	84 91       	lpm	r24, Z
    8b7a:	87 32       	cpi	r24, 0x27	; 39
    8b7c:	61 f5       	brne	.+88     	; 0x8bd6 <__vector_15+0x1ce6>
    8b7e:	80 91 37 01 	lds	r24, 0x0137
    8b82:	28 2f       	mov	r18, r24
    8b84:	33 27       	eor	r19, r19
    8b86:	f9 01       	movw	r30, r18
    8b88:	e4 0f       	add	r30, r20
    8b8a:	f5 1f       	adc	r31, r21
    8b8c:	e3 54       	subi	r30, 0x43	; 67
    8b8e:	f2 4d       	sbci	r31, 0xD2	; 210
    8b90:	84 91       	lpm	r24, Z
    8b92:	87 32       	cpi	r24, 0x27	; 39
    8b94:	01 f5       	brne	.+64     	; 0x8bd6 <__vector_15+0x1ce6>
    8b96:	26 1b       	sub	r18, r22
    8b98:	37 0b       	sbc	r19, r23
    8b9a:	2f 5f       	subi	r18, 0xFF	; 255
    8b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    8b9e:	23 30       	cpi	r18, 0x03	; 3
    8ba0:	31 05       	cpc	r19, r1
    8ba2:	c8 f4       	brcc	.+50     	; 0x8bd6 <__vector_15+0x1ce6>
			{	
				if (abs(g_mark1-g_position)>6) 
    8ba4:	80 91 2b 01 	lds	r24, 0x012B
    8ba8:	99 27       	eor	r25, r25
    8baa:	84 1b       	sub	r24, r20
    8bac:	95 0b       	sbc	r25, r21
    8bae:	97 ff       	sbrs	r25, 7
    8bb0:	03 c0       	rjmp	.+6      	; 0x8bb8 <__vector_15+0x1cc8>
    8bb2:	90 95       	com	r25
    8bb4:	81 95       	neg	r24
    8bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    8bb8:	07 97       	sbiw	r24, 0x07	; 7
    8bba:	2c f0       	brlt	.+10     	; 0x8bc6 <__vector_15+0x1cd6>
				g_mark++;
    8bbc:	80 91 0e 01 	lds	r24, 0x010E
    8bc0:	8f 5f       	subi	r24, 0xFF	; 255
    8bc2:	80 93 0e 01 	sts	0x010E, r24
				if(g_mark >= 2)
    8bc6:	80 91 0e 01 	lds	r24, 0x010E
    8bca:	82 30       	cpi	r24, 0x02	; 2
    8bcc:	10 f0       	brcs	.+4      	; 0x8bd2 <__vector_15+0x1ce2>
				g_mark =0;
    8bce:	10 92 0e 01 	sts	0x010E, r1
				g_mark1=g_position;
    8bd2:	a0 93 2b 01 	sts	0x012B, r26
			}
		
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    8bd6:	2a 2f       	mov	r18, r26
    8bd8:	33 27       	eor	r19, r19
    8bda:	f9 01       	movw	r30, r18
    8bdc:	eb 0f       	add	r30, r27
    8bde:	f1 1d       	adc	r31, r1
    8be0:	e3 56       	subi	r30, 0x63	; 99
    8be2:	f0 4d       	sbci	r31, 0xD0	; 208
    8be4:	94 91       	lpm	r25, Z
    8be6:	40 91 37 01 	lds	r20, 0x0137
    8bea:	f9 01       	movw	r30, r18
    8bec:	e4 0f       	add	r30, r20
    8bee:	f1 1d       	adc	r31, r1
    8bf0:	e3 54       	subi	r30, 0x43	; 67
    8bf2:	f2 4d       	sbci	r31, 0xD2	; 210
    8bf4:	84 91       	lpm	r24, Z
    8bf6:	89 0f       	add	r24, r25
    8bf8:	91 2d       	mov	r25, r1
    8bfa:	91 1d       	adc	r25, r1
    8bfc:	0a 97       	sbiw	r24, 0x0a	; 10
    8bfe:	69 f4       	brne	.+26     	; 0x8c1a <__vector_15+0x1d2a>
    8c00:	80 91 0e 01 	lds	r24, 0x010E
    8c04:	88 23       	and	r24, r24
    8c06:	49 f4       	brne	.+18     	; 0x8c1a <__vector_15+0x1d2a>
			PWM_RED =  pgm_read_byte(&gc_background[0][RED][g_speed7+g_position]);
    8c08:	80 91 2c 01 	lds	r24, 0x012C
    8c0c:	28 0f       	add	r18, r24
    8c0e:	31 1d       	adc	r19, r1
    8c10:	23 58       	subi	r18, 0x83	; 131
    8c12:	3e 4c       	sbci	r19, 0xCE	; 206
    8c14:	f9 01       	movw	r30, r18
    8c16:	84 91       	lpm	r24, Z
    8c18:	1f c0       	rjmp	.+62     	; 0x8c58 <__vector_15+0x1d68>
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    8c1a:	2a 2f       	mov	r18, r26
    8c1c:	33 27       	eor	r19, r19
    8c1e:	f9 01       	movw	r30, r18
    8c20:	eb 0f       	add	r30, r27
    8c22:	f1 1d       	adc	r31, r1
    8c24:	e3 56       	subi	r30, 0x63	; 99
    8c26:	f0 4d       	sbci	r31, 0xD0	; 208
    8c28:	94 91       	lpm	r25, Z
    8c2a:	f9 01       	movw	r30, r18
    8c2c:	e4 0f       	add	r30, r20
    8c2e:	f1 1d       	adc	r31, r1
    8c30:	e3 54       	subi	r30, 0x43	; 67
    8c32:	f2 4d       	sbci	r31, 0xD2	; 210
    8c34:	84 91       	lpm	r24, Z
    8c36:	89 0f       	add	r24, r25
    8c38:	91 2d       	mov	r25, r1
    8c3a:	91 1d       	adc	r25, r1
    8c3c:	0c 97       	sbiw	r24, 0x0c	; 12
    8c3e:	71 f4       	brne	.+28     	; 0x8c5c <__vector_15+0x1d6c>
    8c40:	80 91 0e 01 	lds	r24, 0x010E
    8c44:	88 23       	and	r24, r24
    8c46:	51 f0       	breq	.+20     	; 0x8c5c <__vector_15+0x1d6c>
			PWM_RED =  pgm_read_byte(&gc_background[0][RED][g_speed7+g_position]);
    8c48:	80 91 2c 01 	lds	r24, 0x012C
    8c4c:	28 0f       	add	r18, r24
    8c4e:	31 1d       	adc	r19, r1
    8c50:	23 58       	subi	r18, 0x83	; 131
    8c52:	3e 4c       	sbci	r19, 0xCE	; 206
    8c54:	f9 01       	movw	r30, r18
    8c56:	84 91       	lpm	r24, Z
    8c58:	99 27       	eor	r25, r25
    8c5a:	02 c0       	rjmp	.+4      	; 0x8c60 <__vector_15+0x1d70>
			else
			PWM_RED = PWM_TOP ;
    8c5c:	87 e2       	ldi	r24, 0x27	; 39
    8c5e:	90 e0       	ldi	r25, 0x00	; 0
    8c60:	9b bd       	out	0x2b, r25	; 43
    8c62:	8a bd       	out	0x2a, r24	; 42
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    8c64:	60 91 4c 01 	lds	r22, 0x014C
    8c68:	50 91 40 01 	lds	r21, 0x0140
    8c6c:	25 2f       	mov	r18, r21
    8c6e:	33 27       	eor	r19, r19
    8c70:	f9 01       	movw	r30, r18
    8c72:	e6 0f       	add	r30, r22
    8c74:	f1 1d       	adc	r31, r1
    8c76:	e3 56       	subi	r30, 0x63	; 99
    8c78:	f0 4d       	sbci	r31, 0xD0	; 208
    8c7a:	94 91       	lpm	r25, Z
    8c7c:	40 91 37 01 	lds	r20, 0x0137
    8c80:	f9 01       	movw	r30, r18
    8c82:	e4 0f       	add	r30, r20
    8c84:	f1 1d       	adc	r31, r1
    8c86:	e3 54       	subi	r30, 0x43	; 67
    8c88:	f2 4d       	sbci	r31, 0xD2	; 210
    8c8a:	84 91       	lpm	r24, Z
    8c8c:	89 0f       	add	r24, r25
    8c8e:	91 2d       	mov	r25, r1
    8c90:	91 1d       	adc	r25, r1
    8c92:	0a 97       	sbiw	r24, 0x0a	; 10
    8c94:	69 f4       	brne	.+26     	; 0x8cb0 <__vector_15+0x1dc0>
    8c96:	80 91 0e 01 	lds	r24, 0x010E
    8c9a:	88 23       	and	r24, r24
    8c9c:	49 f4       	brne	.+18     	; 0x8cb0 <__vector_15+0x1dc0>
			PWM_GREEN =  pgm_read_byte(&gc_background[0][GREEN][g_speed7+g_position]);
    8c9e:	80 91 2c 01 	lds	r24, 0x012C
    8ca2:	28 0f       	add	r18, r24
    8ca4:	31 1d       	adc	r19, r1
    8ca6:	23 5a       	subi	r18, 0xA3	; 163
    8ca8:	3c 4c       	sbci	r19, 0xCC	; 204
    8caa:	f9 01       	movw	r30, r18
    8cac:	84 91       	lpm	r24, Z
    8cae:	1f c0       	rjmp	.+62     	; 0x8cee <__vector_15+0x1dfe>
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    8cb0:	25 2f       	mov	r18, r21
    8cb2:	33 27       	eor	r19, r19
    8cb4:	f9 01       	movw	r30, r18
    8cb6:	e6 0f       	add	r30, r22
    8cb8:	f1 1d       	adc	r31, r1
    8cba:	e3 56       	subi	r30, 0x63	; 99
    8cbc:	f0 4d       	sbci	r31, 0xD0	; 208
    8cbe:	94 91       	lpm	r25, Z
    8cc0:	f9 01       	movw	r30, r18
    8cc2:	e4 0f       	add	r30, r20
    8cc4:	f1 1d       	adc	r31, r1
    8cc6:	e3 54       	subi	r30, 0x43	; 67
    8cc8:	f2 4d       	sbci	r31, 0xD2	; 210
    8cca:	84 91       	lpm	r24, Z
    8ccc:	89 0f       	add	r24, r25
    8cce:	91 2d       	mov	r25, r1
    8cd0:	91 1d       	adc	r25, r1
    8cd2:	0c 97       	sbiw	r24, 0x0c	; 12
    8cd4:	71 f4       	brne	.+28     	; 0x8cf2 <__vector_15+0x1e02>
    8cd6:	80 91 0e 01 	lds	r24, 0x010E
    8cda:	88 23       	and	r24, r24
    8cdc:	51 f0       	breq	.+20     	; 0x8cf2 <__vector_15+0x1e02>
			PWM_GREEN =  pgm_read_byte(&gc_background[0][GREEN][g_speed7+g_position]);
    8cde:	80 91 2c 01 	lds	r24, 0x012C
    8ce2:	28 0f       	add	r18, r24
    8ce4:	31 1d       	adc	r19, r1
    8ce6:	23 5a       	subi	r18, 0xA3	; 163
    8ce8:	3c 4c       	sbci	r19, 0xCC	; 204
    8cea:	f9 01       	movw	r30, r18
    8cec:	84 91       	lpm	r24, Z
    8cee:	99 27       	eor	r25, r25
    8cf0:	02 c0       	rjmp	.+4      	; 0x8cf6 <__vector_15+0x1e06>
			else
			PWM_GREEN = PWM_TOP ;
    8cf2:	87 e2       	ldi	r24, 0x27	; 39
    8cf4:	90 e0       	ldi	r25, 0x00	; 0
    8cf6:	99 bd       	out	0x29, r25	; 41
    8cf8:	88 bd       	out	0x28, r24	; 40
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    8cfa:	60 91 4c 01 	lds	r22, 0x014C
    8cfe:	50 91 40 01 	lds	r21, 0x0140
    8d02:	25 2f       	mov	r18, r21
    8d04:	33 27       	eor	r19, r19
    8d06:	f9 01       	movw	r30, r18
    8d08:	e6 0f       	add	r30, r22
    8d0a:	f1 1d       	adc	r31, r1
    8d0c:	e3 56       	subi	r30, 0x63	; 99
    8d0e:	f0 4d       	sbci	r31, 0xD0	; 208
    8d10:	94 91       	lpm	r25, Z
    8d12:	40 91 37 01 	lds	r20, 0x0137
    8d16:	f9 01       	movw	r30, r18
    8d18:	e4 0f       	add	r30, r20
    8d1a:	f1 1d       	adc	r31, r1
    8d1c:	e3 54       	subi	r30, 0x43	; 67
    8d1e:	f2 4d       	sbci	r31, 0xD2	; 210
    8d20:	84 91       	lpm	r24, Z
    8d22:	89 0f       	add	r24, r25
    8d24:	91 2d       	mov	r25, r1
    8d26:	91 1d       	adc	r25, r1
    8d28:	0a 97       	sbiw	r24, 0x0a	; 10
    8d2a:	99 f4       	brne	.+38     	; 0x8d52 <__vector_15+0x1e62>
    8d2c:	80 91 0e 01 	lds	r24, 0x010E
    8d30:	88 23       	and	r24, r24
    8d32:	79 f4       	brne	.+30     	; 0x8d52 <__vector_15+0x1e62>
			PWM_BLUE =  pgm_read_byte(&gc_background[0][BLUE][g_speed7+g_position]);
    8d34:	80 91 2c 01 	lds	r24, 0x012C
    8d38:	28 0f       	add	r18, r24
    8d3a:	31 1d       	adc	r19, r1
    8d3c:	23 5c       	subi	r18, 0xC3	; 195
    8d3e:	3a 4c       	sbci	r19, 0xCA	; 202
    8d40:	f9 01       	movw	r30, r18
    8d42:	84 91       	lpm	r24, Z
    8d44:	99 27       	eor	r25, r25
    8d46:	90 93 79 00 	sts	0x0079, r25
    8d4a:	80 93 78 00 	sts	0x0078, r24
    8d4e:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    8d52:	25 2f       	mov	r18, r21
    8d54:	33 27       	eor	r19, r19
    8d56:	f9 01       	movw	r30, r18
    8d58:	e6 0f       	add	r30, r22
    8d5a:	f1 1d       	adc	r31, r1
    8d5c:	e3 56       	subi	r30, 0x63	; 99
    8d5e:	f0 4d       	sbci	r31, 0xD0	; 208
    8d60:	94 91       	lpm	r25, Z
    8d62:	f9 01       	movw	r30, r18
    8d64:	e4 0f       	add	r30, r20
    8d66:	f1 1d       	adc	r31, r1
    8d68:	e3 54       	subi	r30, 0x43	; 67
    8d6a:	f2 4d       	sbci	r31, 0xD2	; 210
    8d6c:	84 91       	lpm	r24, Z
    8d6e:	89 0f       	add	r24, r25
    8d70:	91 2d       	mov	r25, r1
    8d72:	91 1d       	adc	r25, r1
    8d74:	0c 97       	sbiw	r24, 0x0c	; 12
    8d76:	99 f4       	brne	.+38     	; 0x8d9e <__vector_15+0x1eae>
    8d78:	80 91 0e 01 	lds	r24, 0x010E
    8d7c:	88 23       	and	r24, r24
    8d7e:	79 f0       	breq	.+30     	; 0x8d9e <__vector_15+0x1eae>
			PWM_BLUE =  pgm_read_byte(&gc_background[0][BLUE][g_speed7+g_position]);
    8d80:	80 91 2c 01 	lds	r24, 0x012C
    8d84:	28 0f       	add	r18, r24
    8d86:	31 1d       	adc	r19, r1
    8d88:	23 5c       	subi	r18, 0xC3	; 195
    8d8a:	3a 4c       	sbci	r19, 0xCA	; 202
    8d8c:	f9 01       	movw	r30, r18
    8d8e:	84 91       	lpm	r24, Z
    8d90:	99 27       	eor	r25, r25
    8d92:	90 93 79 00 	sts	0x0079, r25
    8d96:	80 93 78 00 	sts	0x0078, r24
    8d9a:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE  = PWM_TOP ;
    8d9e:	87 e2       	ldi	r24, 0x27	; 39
    8da0:	90 e0       	ldi	r25, 0x00	; 0
    8da2:	90 93 79 00 	sts	0x0079, r25
    8da6:	80 93 78 00 	sts	0x0078, r24
			
			
			
			
		break;	
    8daa:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
		
		case 35:				// background is changing android loader 2 WINDOWS
			seconds_hand=0;		
    8dae:	10 92 25 01 	sts	0x0125, r1
			if ((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) == 0x27) && (pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position]) == 0x27) && ( abs(g_speed3rev-g_speed7rev) <=1 ))
    8db2:	b0 91 4c 01 	lds	r27, 0x014C
    8db6:	6b 2f       	mov	r22, r27
    8db8:	77 27       	eor	r23, r23
    8dba:	4a 2f       	mov	r20, r26
    8dbc:	55 27       	eor	r21, r21
    8dbe:	fb 01       	movw	r30, r22
    8dc0:	e4 0f       	add	r30, r20
    8dc2:	f5 1f       	adc	r31, r21
    8dc4:	e3 56       	subi	r30, 0x63	; 99
    8dc6:	f0 4d       	sbci	r31, 0xD0	; 208
    8dc8:	84 91       	lpm	r24, Z
    8dca:	87 32       	cpi	r24, 0x27	; 39
    8dcc:	61 f5       	brne	.+88     	; 0x8e26 <__vector_15+0x1f36>
    8dce:	80 91 37 01 	lds	r24, 0x0137
    8dd2:	28 2f       	mov	r18, r24
    8dd4:	33 27       	eor	r19, r19
    8dd6:	f9 01       	movw	r30, r18
    8dd8:	e4 0f       	add	r30, r20
    8dda:	f5 1f       	adc	r31, r21
    8ddc:	e3 54       	subi	r30, 0x43	; 67
    8dde:	f2 4d       	sbci	r31, 0xD2	; 210
    8de0:	84 91       	lpm	r24, Z
    8de2:	87 32       	cpi	r24, 0x27	; 39
    8de4:	01 f5       	brne	.+64     	; 0x8e26 <__vector_15+0x1f36>
    8de6:	26 1b       	sub	r18, r22
    8de8:	37 0b       	sbc	r19, r23
    8dea:	2f 5f       	subi	r18, 0xFF	; 255
    8dec:	3f 4f       	sbci	r19, 0xFF	; 255
    8dee:	23 30       	cpi	r18, 0x03	; 3
    8df0:	31 05       	cpc	r19, r1
    8df2:	c8 f4       	brcc	.+50     	; 0x8e26 <__vector_15+0x1f36>
			{
				if (abs(g_mark1-g_position)>6) 
    8df4:	80 91 2b 01 	lds	r24, 0x012B
    8df8:	99 27       	eor	r25, r25
    8dfa:	84 1b       	sub	r24, r20
    8dfc:	95 0b       	sbc	r25, r21
    8dfe:	97 ff       	sbrs	r25, 7
    8e00:	03 c0       	rjmp	.+6      	; 0x8e08 <__vector_15+0x1f18>
    8e02:	90 95       	com	r25
    8e04:	81 95       	neg	r24
    8e06:	9f 4f       	sbci	r25, 0xFF	; 255
    8e08:	07 97       	sbiw	r24, 0x07	; 7
    8e0a:	2c f0       	brlt	.+10     	; 0x8e16 <__vector_15+0x1f26>
				g_mark++;
    8e0c:	80 91 0e 01 	lds	r24, 0x010E
    8e10:	8f 5f       	subi	r24, 0xFF	; 255
    8e12:	80 93 0e 01 	sts	0x010E, r24
				if(g_mark >= 2)
    8e16:	80 91 0e 01 	lds	r24, 0x010E
    8e1a:	82 30       	cpi	r24, 0x02	; 2
    8e1c:	10 f0       	brcs	.+4      	; 0x8e22 <__vector_15+0x1f32>
				g_mark =0;
    8e1e:	10 92 0e 01 	sts	0x010E, r1
				g_mark1=g_position;
    8e22:	a0 93 2b 01 	sts	0x012B, r26
			}
		
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    8e26:	2a 2f       	mov	r18, r26
    8e28:	33 27       	eor	r19, r19
    8e2a:	f9 01       	movw	r30, r18
    8e2c:	eb 0f       	add	r30, r27
    8e2e:	f1 1d       	adc	r31, r1
    8e30:	e3 56       	subi	r30, 0x63	; 99
    8e32:	f0 4d       	sbci	r31, 0xD0	; 208
    8e34:	94 91       	lpm	r25, Z
    8e36:	40 91 37 01 	lds	r20, 0x0137
    8e3a:	f9 01       	movw	r30, r18
    8e3c:	e4 0f       	add	r30, r20
    8e3e:	f1 1d       	adc	r31, r1
    8e40:	e3 54       	subi	r30, 0x43	; 67
    8e42:	f2 4d       	sbci	r31, 0xD2	; 210
    8e44:	84 91       	lpm	r24, Z
    8e46:	89 0f       	add	r24, r25
    8e48:	91 2d       	mov	r25, r1
    8e4a:	91 1d       	adc	r25, r1
    8e4c:	0a 97       	sbiw	r24, 0x0a	; 10
    8e4e:	69 f4       	brne	.+26     	; 0x8e6a <__vector_15+0x1f7a>
    8e50:	80 91 0e 01 	lds	r24, 0x010E
    8e54:	88 23       	and	r24, r24
    8e56:	49 f4       	brne	.+18     	; 0x8e6a <__vector_15+0x1f7a>
			PWM_RED =  pgm_read_byte(&gc_background[7][RED][g_speed7+g_position]);
    8e58:	80 91 2c 01 	lds	r24, 0x012C
    8e5c:	28 0f       	add	r18, r24
    8e5e:	31 1d       	adc	r19, r1
    8e60:	23 52       	subi	r18, 0x23	; 35
    8e62:	37 4a       	sbci	r19, 0xA7	; 167
    8e64:	f9 01       	movw	r30, r18
    8e66:	84 91       	lpm	r24, Z
    8e68:	1f c0       	rjmp	.+62     	; 0x8ea8 <__vector_15+0x1fb8>
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    8e6a:	2a 2f       	mov	r18, r26
    8e6c:	33 27       	eor	r19, r19
    8e6e:	f9 01       	movw	r30, r18
    8e70:	eb 0f       	add	r30, r27
    8e72:	f1 1d       	adc	r31, r1
    8e74:	e3 56       	subi	r30, 0x63	; 99
    8e76:	f0 4d       	sbci	r31, 0xD0	; 208
    8e78:	94 91       	lpm	r25, Z
    8e7a:	f9 01       	movw	r30, r18
    8e7c:	e4 0f       	add	r30, r20
    8e7e:	f1 1d       	adc	r31, r1
    8e80:	e3 54       	subi	r30, 0x43	; 67
    8e82:	f2 4d       	sbci	r31, 0xD2	; 210
    8e84:	84 91       	lpm	r24, Z
    8e86:	89 0f       	add	r24, r25
    8e88:	91 2d       	mov	r25, r1
    8e8a:	91 1d       	adc	r25, r1
    8e8c:	0c 97       	sbiw	r24, 0x0c	; 12
    8e8e:	71 f4       	brne	.+28     	; 0x8eac <__vector_15+0x1fbc>
    8e90:	80 91 0e 01 	lds	r24, 0x010E
    8e94:	88 23       	and	r24, r24
    8e96:	51 f0       	breq	.+20     	; 0x8eac <__vector_15+0x1fbc>
			PWM_RED =  pgm_read_byte(&gc_background[7][RED][g_speed7+g_position]);
    8e98:	80 91 2c 01 	lds	r24, 0x012C
    8e9c:	28 0f       	add	r18, r24
    8e9e:	31 1d       	adc	r19, r1
    8ea0:	23 52       	subi	r18, 0x23	; 35
    8ea2:	37 4a       	sbci	r19, 0xA7	; 167
    8ea4:	f9 01       	movw	r30, r18
    8ea6:	84 91       	lpm	r24, Z
    8ea8:	99 27       	eor	r25, r25
    8eaa:	02 c0       	rjmp	.+4      	; 0x8eb0 <__vector_15+0x1fc0>
			else
			PWM_RED = PWM_TOP ;
    8eac:	87 e2       	ldi	r24, 0x27	; 39
    8eae:	90 e0       	ldi	r25, 0x00	; 0
    8eb0:	9b bd       	out	0x2b, r25	; 43
    8eb2:	8a bd       	out	0x2a, r24	; 42
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    8eb4:	60 91 4c 01 	lds	r22, 0x014C
    8eb8:	50 91 40 01 	lds	r21, 0x0140
    8ebc:	25 2f       	mov	r18, r21
    8ebe:	33 27       	eor	r19, r19
    8ec0:	f9 01       	movw	r30, r18
    8ec2:	e6 0f       	add	r30, r22
    8ec4:	f1 1d       	adc	r31, r1
    8ec6:	e3 56       	subi	r30, 0x63	; 99
    8ec8:	f0 4d       	sbci	r31, 0xD0	; 208
    8eca:	94 91       	lpm	r25, Z
    8ecc:	40 91 37 01 	lds	r20, 0x0137
    8ed0:	f9 01       	movw	r30, r18
    8ed2:	e4 0f       	add	r30, r20
    8ed4:	f1 1d       	adc	r31, r1
    8ed6:	e3 54       	subi	r30, 0x43	; 67
    8ed8:	f2 4d       	sbci	r31, 0xD2	; 210
    8eda:	84 91       	lpm	r24, Z
    8edc:	89 0f       	add	r24, r25
    8ede:	91 2d       	mov	r25, r1
    8ee0:	91 1d       	adc	r25, r1
    8ee2:	0a 97       	sbiw	r24, 0x0a	; 10
    8ee4:	69 f4       	brne	.+26     	; 0x8f00 <__vector_15+0x2010>
    8ee6:	80 91 0e 01 	lds	r24, 0x010E
    8eea:	88 23       	and	r24, r24
    8eec:	49 f4       	brne	.+18     	; 0x8f00 <__vector_15+0x2010>
			PWM_GREEN =  pgm_read_byte(&gc_background[7][GREEN][g_speed7+g_position]);
    8eee:	80 91 2c 01 	lds	r24, 0x012C
    8ef2:	28 0f       	add	r18, r24
    8ef4:	31 1d       	adc	r19, r1
    8ef6:	23 54       	subi	r18, 0x43	; 67
    8ef8:	35 4a       	sbci	r19, 0xA5	; 165
    8efa:	f9 01       	movw	r30, r18
    8efc:	84 91       	lpm	r24, Z
    8efe:	1f c0       	rjmp	.+62     	; 0x8f3e <__vector_15+0x204e>
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    8f00:	25 2f       	mov	r18, r21
    8f02:	33 27       	eor	r19, r19
    8f04:	f9 01       	movw	r30, r18
    8f06:	e6 0f       	add	r30, r22
    8f08:	f1 1d       	adc	r31, r1
    8f0a:	e3 56       	subi	r30, 0x63	; 99
    8f0c:	f0 4d       	sbci	r31, 0xD0	; 208
    8f0e:	94 91       	lpm	r25, Z
    8f10:	f9 01       	movw	r30, r18
    8f12:	e4 0f       	add	r30, r20
    8f14:	f1 1d       	adc	r31, r1
    8f16:	e3 54       	subi	r30, 0x43	; 67
    8f18:	f2 4d       	sbci	r31, 0xD2	; 210
    8f1a:	84 91       	lpm	r24, Z
    8f1c:	89 0f       	add	r24, r25
    8f1e:	91 2d       	mov	r25, r1
    8f20:	91 1d       	adc	r25, r1
    8f22:	0c 97       	sbiw	r24, 0x0c	; 12
    8f24:	71 f4       	brne	.+28     	; 0x8f42 <__vector_15+0x2052>
    8f26:	80 91 0e 01 	lds	r24, 0x010E
    8f2a:	88 23       	and	r24, r24
    8f2c:	51 f0       	breq	.+20     	; 0x8f42 <__vector_15+0x2052>
			PWM_GREEN =  pgm_read_byte(&gc_background[7][GREEN][g_speed7+g_position]);
    8f2e:	80 91 2c 01 	lds	r24, 0x012C
    8f32:	28 0f       	add	r18, r24
    8f34:	31 1d       	adc	r19, r1
    8f36:	23 54       	subi	r18, 0x43	; 67
    8f38:	35 4a       	sbci	r19, 0xA5	; 165
    8f3a:	f9 01       	movw	r30, r18
    8f3c:	84 91       	lpm	r24, Z
    8f3e:	99 27       	eor	r25, r25
    8f40:	02 c0       	rjmp	.+4      	; 0x8f46 <__vector_15+0x2056>
			else
			PWM_GREEN = PWM_TOP ;
    8f42:	87 e2       	ldi	r24, 0x27	; 39
    8f44:	90 e0       	ldi	r25, 0x00	; 0
    8f46:	99 bd       	out	0x29, r25	; 41
    8f48:	88 bd       	out	0x28, r24	; 40
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    8f4a:	60 91 4c 01 	lds	r22, 0x014C
    8f4e:	50 91 40 01 	lds	r21, 0x0140
    8f52:	25 2f       	mov	r18, r21
    8f54:	33 27       	eor	r19, r19
    8f56:	f9 01       	movw	r30, r18
    8f58:	e6 0f       	add	r30, r22
    8f5a:	f1 1d       	adc	r31, r1
    8f5c:	e3 56       	subi	r30, 0x63	; 99
    8f5e:	f0 4d       	sbci	r31, 0xD0	; 208
    8f60:	94 91       	lpm	r25, Z
    8f62:	40 91 37 01 	lds	r20, 0x0137
    8f66:	f9 01       	movw	r30, r18
    8f68:	e4 0f       	add	r30, r20
    8f6a:	f1 1d       	adc	r31, r1
    8f6c:	e3 54       	subi	r30, 0x43	; 67
    8f6e:	f2 4d       	sbci	r31, 0xD2	; 210
    8f70:	84 91       	lpm	r24, Z
    8f72:	89 0f       	add	r24, r25
    8f74:	91 2d       	mov	r25, r1
    8f76:	91 1d       	adc	r25, r1
    8f78:	0a 97       	sbiw	r24, 0x0a	; 10
    8f7a:	99 f4       	brne	.+38     	; 0x8fa2 <__vector_15+0x20b2>
    8f7c:	80 91 0e 01 	lds	r24, 0x010E
    8f80:	88 23       	and	r24, r24
    8f82:	79 f4       	brne	.+30     	; 0x8fa2 <__vector_15+0x20b2>
			PWM_BLUE =  pgm_read_byte(&gc_background[7][BLUE][g_speed7+g_position]);
    8f84:	80 91 2c 01 	lds	r24, 0x012C
    8f88:	28 0f       	add	r18, r24
    8f8a:	31 1d       	adc	r19, r1
    8f8c:	23 56       	subi	r18, 0x63	; 99
    8f8e:	33 4a       	sbci	r19, 0xA3	; 163
    8f90:	f9 01       	movw	r30, r18
    8f92:	84 91       	lpm	r24, Z
    8f94:	99 27       	eor	r25, r25
    8f96:	90 93 79 00 	sts	0x0079, r25
    8f9a:	80 93 78 00 	sts	0x0078, r24
    8f9e:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    8fa2:	25 2f       	mov	r18, r21
    8fa4:	33 27       	eor	r19, r19
    8fa6:	f9 01       	movw	r30, r18
    8fa8:	e6 0f       	add	r30, r22
    8faa:	f1 1d       	adc	r31, r1
    8fac:	e3 56       	subi	r30, 0x63	; 99
    8fae:	f0 4d       	sbci	r31, 0xD0	; 208
    8fb0:	94 91       	lpm	r25, Z
    8fb2:	f9 01       	movw	r30, r18
    8fb4:	e4 0f       	add	r30, r20
    8fb6:	f1 1d       	adc	r31, r1
    8fb8:	e3 54       	subi	r30, 0x43	; 67
    8fba:	f2 4d       	sbci	r31, 0xD2	; 210
    8fbc:	84 91       	lpm	r24, Z
    8fbe:	89 0f       	add	r24, r25
    8fc0:	91 2d       	mov	r25, r1
    8fc2:	91 1d       	adc	r25, r1
    8fc4:	0c 97       	sbiw	r24, 0x0c	; 12
    8fc6:	99 f4       	brne	.+38     	; 0x8fee <__vector_15+0x20fe>
    8fc8:	80 91 0e 01 	lds	r24, 0x010E
    8fcc:	88 23       	and	r24, r24
    8fce:	79 f0       	breq	.+30     	; 0x8fee <__vector_15+0x20fe>
			PWM_BLUE =  pgm_read_byte(&gc_background[7][BLUE][g_speed7+g_position]);
    8fd0:	80 91 2c 01 	lds	r24, 0x012C
    8fd4:	28 0f       	add	r18, r24
    8fd6:	31 1d       	adc	r19, r1
    8fd8:	23 56       	subi	r18, 0x63	; 99
    8fda:	33 4a       	sbci	r19, 0xA3	; 163
    8fdc:	f9 01       	movw	r30, r18
    8fde:	84 91       	lpm	r24, Z
    8fe0:	99 27       	eor	r25, r25
    8fe2:	90 93 79 00 	sts	0x0079, r25
    8fe6:	80 93 78 00 	sts	0x0078, r24
    8fea:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE  = PWM_TOP ;
    8fee:	87 e2       	ldi	r24, 0x27	; 39
    8ff0:	90 e0       	ldi	r25, 0x00	; 0
    8ff2:	90 93 79 00 	sts	0x0079, r25
    8ff6:	80 93 78 00 	sts	0x0078, r24
			
			
			
		break;	
    8ffa:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
		

		case 34:				// background is changing android loader 2 africa
			seconds_hand=0;		
    8ffe:	10 92 25 01 	sts	0x0125, r1
			if ((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) == 0x27) && (pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position]) == 0x27) && (abs(g_speed3rev-g_speed7rev) <=1 ))
    9002:	b0 91 4c 01 	lds	r27, 0x014C
    9006:	6b 2f       	mov	r22, r27
    9008:	77 27       	eor	r23, r23
    900a:	4a 2f       	mov	r20, r26
    900c:	55 27       	eor	r21, r21
    900e:	fb 01       	movw	r30, r22
    9010:	e4 0f       	add	r30, r20
    9012:	f5 1f       	adc	r31, r21
    9014:	e3 56       	subi	r30, 0x63	; 99
    9016:	f0 4d       	sbci	r31, 0xD0	; 208
    9018:	84 91       	lpm	r24, Z
    901a:	87 32       	cpi	r24, 0x27	; 39
    901c:	61 f5       	brne	.+88     	; 0x9076 <__vector_15+0x2186>
    901e:	80 91 37 01 	lds	r24, 0x0137
    9022:	28 2f       	mov	r18, r24
    9024:	33 27       	eor	r19, r19
    9026:	f9 01       	movw	r30, r18
    9028:	e4 0f       	add	r30, r20
    902a:	f5 1f       	adc	r31, r21
    902c:	e3 54       	subi	r30, 0x43	; 67
    902e:	f2 4d       	sbci	r31, 0xD2	; 210
    9030:	84 91       	lpm	r24, Z
    9032:	87 32       	cpi	r24, 0x27	; 39
    9034:	01 f5       	brne	.+64     	; 0x9076 <__vector_15+0x2186>
    9036:	26 1b       	sub	r18, r22
    9038:	37 0b       	sbc	r19, r23
    903a:	2f 5f       	subi	r18, 0xFF	; 255
    903c:	3f 4f       	sbci	r19, 0xFF	; 255
    903e:	23 30       	cpi	r18, 0x03	; 3
    9040:	31 05       	cpc	r19, r1
    9042:	c8 f4       	brcc	.+50     	; 0x9076 <__vector_15+0x2186>
			{
				if (abs(g_mark1-g_position)>6) 
    9044:	80 91 2b 01 	lds	r24, 0x012B
    9048:	99 27       	eor	r25, r25
    904a:	84 1b       	sub	r24, r20
    904c:	95 0b       	sbc	r25, r21
    904e:	97 ff       	sbrs	r25, 7
    9050:	03 c0       	rjmp	.+6      	; 0x9058 <__vector_15+0x2168>
    9052:	90 95       	com	r25
    9054:	81 95       	neg	r24
    9056:	9f 4f       	sbci	r25, 0xFF	; 255
    9058:	07 97       	sbiw	r24, 0x07	; 7
    905a:	2c f0       	brlt	.+10     	; 0x9066 <__vector_15+0x2176>
				g_mark++;
    905c:	80 91 0e 01 	lds	r24, 0x010E
    9060:	8f 5f       	subi	r24, 0xFF	; 255
    9062:	80 93 0e 01 	sts	0x010E, r24
				if(g_mark == 2)
    9066:	80 91 0e 01 	lds	r24, 0x010E
    906a:	82 30       	cpi	r24, 0x02	; 2
    906c:	11 f4       	brne	.+4      	; 0x9072 <__vector_15+0x2182>
				g_mark =0;
    906e:	10 92 0e 01 	sts	0x010E, r1
				g_mark1=g_position;
    9072:	a0 93 2b 01 	sts	0x012B, r26
			}
		
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    9076:	2a 2f       	mov	r18, r26
    9078:	33 27       	eor	r19, r19
    907a:	f9 01       	movw	r30, r18
    907c:	eb 0f       	add	r30, r27
    907e:	f1 1d       	adc	r31, r1
    9080:	e3 56       	subi	r30, 0x63	; 99
    9082:	f0 4d       	sbci	r31, 0xD0	; 208
    9084:	94 91       	lpm	r25, Z
    9086:	40 91 37 01 	lds	r20, 0x0137
    908a:	f9 01       	movw	r30, r18
    908c:	e4 0f       	add	r30, r20
    908e:	f1 1d       	adc	r31, r1
    9090:	e3 54       	subi	r30, 0x43	; 67
    9092:	f2 4d       	sbci	r31, 0xD2	; 210
    9094:	84 91       	lpm	r24, Z
    9096:	89 0f       	add	r24, r25
    9098:	91 2d       	mov	r25, r1
    909a:	91 1d       	adc	r25, r1
    909c:	0a 97       	sbiw	r24, 0x0a	; 10
    909e:	69 f4       	brne	.+26     	; 0x90ba <__vector_15+0x21ca>
    90a0:	80 91 0e 01 	lds	r24, 0x010E
    90a4:	88 23       	and	r24, r24
    90a6:	49 f4       	brne	.+18     	; 0x90ba <__vector_15+0x21ca>
			PWM_RED =  pgm_read_byte(&gc_background[6][RED][g_speed7+g_position]);
    90a8:	80 91 2c 01 	lds	r24, 0x012C
    90ac:	28 0f       	add	r18, r24
    90ae:	31 1d       	adc	r19, r1
    90b0:	23 5c       	subi	r18, 0xC3	; 195
    90b2:	3c 4a       	sbci	r19, 0xAC	; 172
    90b4:	f9 01       	movw	r30, r18
    90b6:	84 91       	lpm	r24, Z
    90b8:	1f c0       	rjmp	.+62     	; 0x90f8 <__vector_15+0x2208>
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    90ba:	2a 2f       	mov	r18, r26
    90bc:	33 27       	eor	r19, r19
    90be:	f9 01       	movw	r30, r18
    90c0:	eb 0f       	add	r30, r27
    90c2:	f1 1d       	adc	r31, r1
    90c4:	e3 56       	subi	r30, 0x63	; 99
    90c6:	f0 4d       	sbci	r31, 0xD0	; 208
    90c8:	94 91       	lpm	r25, Z
    90ca:	f9 01       	movw	r30, r18
    90cc:	e4 0f       	add	r30, r20
    90ce:	f1 1d       	adc	r31, r1
    90d0:	e3 54       	subi	r30, 0x43	; 67
    90d2:	f2 4d       	sbci	r31, 0xD2	; 210
    90d4:	84 91       	lpm	r24, Z
    90d6:	89 0f       	add	r24, r25
    90d8:	91 2d       	mov	r25, r1
    90da:	91 1d       	adc	r25, r1
    90dc:	0c 97       	sbiw	r24, 0x0c	; 12
    90de:	71 f4       	brne	.+28     	; 0x90fc <__vector_15+0x220c>
    90e0:	80 91 0e 01 	lds	r24, 0x010E
    90e4:	88 23       	and	r24, r24
    90e6:	51 f0       	breq	.+20     	; 0x90fc <__vector_15+0x220c>
			PWM_RED =  pgm_read_byte(&gc_background[6][RED][g_speed7+g_position]);
    90e8:	80 91 2c 01 	lds	r24, 0x012C
    90ec:	28 0f       	add	r18, r24
    90ee:	31 1d       	adc	r19, r1
    90f0:	23 5c       	subi	r18, 0xC3	; 195
    90f2:	3c 4a       	sbci	r19, 0xAC	; 172
    90f4:	f9 01       	movw	r30, r18
    90f6:	84 91       	lpm	r24, Z
    90f8:	99 27       	eor	r25, r25
    90fa:	02 c0       	rjmp	.+4      	; 0x9100 <__vector_15+0x2210>
			else
			PWM_RED = PWM_TOP ;
    90fc:	87 e2       	ldi	r24, 0x27	; 39
    90fe:	90 e0       	ldi	r25, 0x00	; 0
    9100:	9b bd       	out	0x2b, r25	; 43
    9102:	8a bd       	out	0x2a, r24	; 42
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    9104:	60 91 4c 01 	lds	r22, 0x014C
    9108:	50 91 40 01 	lds	r21, 0x0140
    910c:	25 2f       	mov	r18, r21
    910e:	33 27       	eor	r19, r19
    9110:	f9 01       	movw	r30, r18
    9112:	e6 0f       	add	r30, r22
    9114:	f1 1d       	adc	r31, r1
    9116:	e3 56       	subi	r30, 0x63	; 99
    9118:	f0 4d       	sbci	r31, 0xD0	; 208
    911a:	94 91       	lpm	r25, Z
    911c:	40 91 37 01 	lds	r20, 0x0137
    9120:	f9 01       	movw	r30, r18
    9122:	e4 0f       	add	r30, r20
    9124:	f1 1d       	adc	r31, r1
    9126:	e3 54       	subi	r30, 0x43	; 67
    9128:	f2 4d       	sbci	r31, 0xD2	; 210
    912a:	84 91       	lpm	r24, Z
    912c:	89 0f       	add	r24, r25
    912e:	91 2d       	mov	r25, r1
    9130:	91 1d       	adc	r25, r1
    9132:	0a 97       	sbiw	r24, 0x0a	; 10
    9134:	69 f4       	brne	.+26     	; 0x9150 <__vector_15+0x2260>
    9136:	80 91 0e 01 	lds	r24, 0x010E
    913a:	88 23       	and	r24, r24
    913c:	49 f4       	brne	.+18     	; 0x9150 <__vector_15+0x2260>
			PWM_GREEN =  pgm_read_byte(&gc_background[6][GREEN][g_speed7+g_position]);
    913e:	80 91 2c 01 	lds	r24, 0x012C
    9142:	28 0f       	add	r18, r24
    9144:	31 1d       	adc	r19, r1
    9146:	23 5e       	subi	r18, 0xE3	; 227
    9148:	3a 4a       	sbci	r19, 0xAA	; 170
    914a:	f9 01       	movw	r30, r18
    914c:	84 91       	lpm	r24, Z
    914e:	1f c0       	rjmp	.+62     	; 0x918e <__vector_15+0x229e>
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    9150:	25 2f       	mov	r18, r21
    9152:	33 27       	eor	r19, r19
    9154:	f9 01       	movw	r30, r18
    9156:	e6 0f       	add	r30, r22
    9158:	f1 1d       	adc	r31, r1
    915a:	e3 56       	subi	r30, 0x63	; 99
    915c:	f0 4d       	sbci	r31, 0xD0	; 208
    915e:	94 91       	lpm	r25, Z
    9160:	f9 01       	movw	r30, r18
    9162:	e4 0f       	add	r30, r20
    9164:	f1 1d       	adc	r31, r1
    9166:	e3 54       	subi	r30, 0x43	; 67
    9168:	f2 4d       	sbci	r31, 0xD2	; 210
    916a:	84 91       	lpm	r24, Z
    916c:	89 0f       	add	r24, r25
    916e:	91 2d       	mov	r25, r1
    9170:	91 1d       	adc	r25, r1
    9172:	0c 97       	sbiw	r24, 0x0c	; 12
    9174:	71 f4       	brne	.+28     	; 0x9192 <__vector_15+0x22a2>
    9176:	80 91 0e 01 	lds	r24, 0x010E
    917a:	88 23       	and	r24, r24
    917c:	51 f0       	breq	.+20     	; 0x9192 <__vector_15+0x22a2>
			PWM_GREEN =  pgm_read_byte(&gc_background[6][GREEN][g_speed7+g_position]);
    917e:	80 91 2c 01 	lds	r24, 0x012C
    9182:	28 0f       	add	r18, r24
    9184:	31 1d       	adc	r19, r1
    9186:	23 5e       	subi	r18, 0xE3	; 227
    9188:	3a 4a       	sbci	r19, 0xAA	; 170
    918a:	f9 01       	movw	r30, r18
    918c:	84 91       	lpm	r24, Z
    918e:	99 27       	eor	r25, r25
    9190:	02 c0       	rjmp	.+4      	; 0x9196 <__vector_15+0x22a6>
			else
			PWM_GREEN = PWM_TOP ;
    9192:	87 e2       	ldi	r24, 0x27	; 39
    9194:	90 e0       	ldi	r25, 0x00	; 0
    9196:	99 bd       	out	0x29, r25	; 41
    9198:	88 bd       	out	0x28, r24	; 40
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    919a:	60 91 4c 01 	lds	r22, 0x014C
    919e:	50 91 40 01 	lds	r21, 0x0140
    91a2:	25 2f       	mov	r18, r21
    91a4:	33 27       	eor	r19, r19
    91a6:	f9 01       	movw	r30, r18
    91a8:	e6 0f       	add	r30, r22
    91aa:	f1 1d       	adc	r31, r1
    91ac:	e3 56       	subi	r30, 0x63	; 99
    91ae:	f0 4d       	sbci	r31, 0xD0	; 208
    91b0:	94 91       	lpm	r25, Z
    91b2:	40 91 37 01 	lds	r20, 0x0137
    91b6:	f9 01       	movw	r30, r18
    91b8:	e4 0f       	add	r30, r20
    91ba:	f1 1d       	adc	r31, r1
    91bc:	e3 54       	subi	r30, 0x43	; 67
    91be:	f2 4d       	sbci	r31, 0xD2	; 210
    91c0:	84 91       	lpm	r24, Z
    91c2:	89 0f       	add	r24, r25
    91c4:	91 2d       	mov	r25, r1
    91c6:	91 1d       	adc	r25, r1
    91c8:	0a 97       	sbiw	r24, 0x0a	; 10
    91ca:	99 f4       	brne	.+38     	; 0x91f2 <__vector_15+0x2302>
    91cc:	80 91 0e 01 	lds	r24, 0x010E
    91d0:	88 23       	and	r24, r24
    91d2:	79 f4       	brne	.+30     	; 0x91f2 <__vector_15+0x2302>
			PWM_BLUE =  pgm_read_byte(&gc_background[6][BLUE][g_speed7+g_position]);
    91d4:	80 91 2c 01 	lds	r24, 0x012C
    91d8:	28 0f       	add	r18, r24
    91da:	31 1d       	adc	r19, r1
    91dc:	23 50       	subi	r18, 0x03	; 3
    91de:	39 4a       	sbci	r19, 0xA9	; 169
    91e0:	f9 01       	movw	r30, r18
    91e2:	84 91       	lpm	r24, Z
    91e4:	99 27       	eor	r25, r25
    91e6:	90 93 79 00 	sts	0x0079, r25
    91ea:	80 93 78 00 	sts	0x0078, r24
    91ee:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    91f2:	25 2f       	mov	r18, r21
    91f4:	33 27       	eor	r19, r19
    91f6:	f9 01       	movw	r30, r18
    91f8:	e6 0f       	add	r30, r22
    91fa:	f1 1d       	adc	r31, r1
    91fc:	e3 56       	subi	r30, 0x63	; 99
    91fe:	f0 4d       	sbci	r31, 0xD0	; 208
    9200:	94 91       	lpm	r25, Z
    9202:	f9 01       	movw	r30, r18
    9204:	e4 0f       	add	r30, r20
    9206:	f1 1d       	adc	r31, r1
    9208:	e3 54       	subi	r30, 0x43	; 67
    920a:	f2 4d       	sbci	r31, 0xD2	; 210
    920c:	84 91       	lpm	r24, Z
    920e:	89 0f       	add	r24, r25
    9210:	91 2d       	mov	r25, r1
    9212:	91 1d       	adc	r25, r1
    9214:	0c 97       	sbiw	r24, 0x0c	; 12
    9216:	99 f4       	brne	.+38     	; 0x923e <__vector_15+0x234e>
    9218:	80 91 0e 01 	lds	r24, 0x010E
    921c:	88 23       	and	r24, r24
    921e:	79 f0       	breq	.+30     	; 0x923e <__vector_15+0x234e>
			PWM_BLUE =  pgm_read_byte(&gc_background[6][BLUE][g_speed7+g_position]);
    9220:	80 91 2c 01 	lds	r24, 0x012C
    9224:	28 0f       	add	r18, r24
    9226:	31 1d       	adc	r19, r1
    9228:	23 50       	subi	r18, 0x03	; 3
    922a:	39 4a       	sbci	r19, 0xA9	; 169
    922c:	f9 01       	movw	r30, r18
    922e:	84 91       	lpm	r24, Z
    9230:	99 27       	eor	r25, r25
    9232:	90 93 79 00 	sts	0x0079, r25
    9236:	80 93 78 00 	sts	0x0078, r24
    923a:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE  = PWM_TOP ;
    923e:	87 e2       	ldi	r24, 0x27	; 39
    9240:	90 e0       	ldi	r25, 0x00	; 0
    9242:	90 93 79 00 	sts	0x0079, r25
    9246:	80 93 78 00 	sts	0x0078, r24
			
			
			
		break;	
    924a:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
	
		case 33:				// background is changing android loader 2 rainbow neg
			seconds_hand=0;		
    924e:	10 92 25 01 	sts	0x0125, r1
			if ((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) == 0x27) && (pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position]) == 0x27) && ( abs(g_speed3rev-g_speed7rev) <=1 ))
    9252:	b0 91 4c 01 	lds	r27, 0x014C
    9256:	6b 2f       	mov	r22, r27
    9258:	77 27       	eor	r23, r23
    925a:	4a 2f       	mov	r20, r26
    925c:	55 27       	eor	r21, r21
    925e:	fb 01       	movw	r30, r22
    9260:	e4 0f       	add	r30, r20
    9262:	f5 1f       	adc	r31, r21
    9264:	e3 56       	subi	r30, 0x63	; 99
    9266:	f0 4d       	sbci	r31, 0xD0	; 208
    9268:	84 91       	lpm	r24, Z
    926a:	87 32       	cpi	r24, 0x27	; 39
    926c:	61 f5       	brne	.+88     	; 0x92c6 <__vector_15+0x23d6>
    926e:	80 91 37 01 	lds	r24, 0x0137
    9272:	28 2f       	mov	r18, r24
    9274:	33 27       	eor	r19, r19
    9276:	f9 01       	movw	r30, r18
    9278:	e4 0f       	add	r30, r20
    927a:	f5 1f       	adc	r31, r21
    927c:	e3 54       	subi	r30, 0x43	; 67
    927e:	f2 4d       	sbci	r31, 0xD2	; 210
    9280:	84 91       	lpm	r24, Z
    9282:	87 32       	cpi	r24, 0x27	; 39
    9284:	01 f5       	brne	.+64     	; 0x92c6 <__vector_15+0x23d6>
    9286:	26 1b       	sub	r18, r22
    9288:	37 0b       	sbc	r19, r23
    928a:	2f 5f       	subi	r18, 0xFF	; 255
    928c:	3f 4f       	sbci	r19, 0xFF	; 255
    928e:	23 30       	cpi	r18, 0x03	; 3
    9290:	31 05       	cpc	r19, r1
    9292:	c8 f4       	brcc	.+50     	; 0x92c6 <__vector_15+0x23d6>
			{
				if (abs(g_mark1-g_position)>6) 
    9294:	80 91 2b 01 	lds	r24, 0x012B
    9298:	99 27       	eor	r25, r25
    929a:	84 1b       	sub	r24, r20
    929c:	95 0b       	sbc	r25, r21
    929e:	97 ff       	sbrs	r25, 7
    92a0:	03 c0       	rjmp	.+6      	; 0x92a8 <__vector_15+0x23b8>
    92a2:	90 95       	com	r25
    92a4:	81 95       	neg	r24
    92a6:	9f 4f       	sbci	r25, 0xFF	; 255
    92a8:	07 97       	sbiw	r24, 0x07	; 7
    92aa:	2c f0       	brlt	.+10     	; 0x92b6 <__vector_15+0x23c6>
				g_mark++;
    92ac:	80 91 0e 01 	lds	r24, 0x010E
    92b0:	8f 5f       	subi	r24, 0xFF	; 255
    92b2:	80 93 0e 01 	sts	0x010E, r24
				if(g_mark == 2)
    92b6:	80 91 0e 01 	lds	r24, 0x010E
    92ba:	82 30       	cpi	r24, 0x02	; 2
    92bc:	11 f4       	brne	.+4      	; 0x92c2 <__vector_15+0x23d2>
				g_mark =0;
    92be:	10 92 0e 01 	sts	0x010E, r1
				g_mark1=g_position;
    92c2:	a0 93 2b 01 	sts	0x012B, r26
			}
		
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    92c6:	8a 2f       	mov	r24, r26
    92c8:	99 27       	eor	r25, r25
    92ca:	fc 01       	movw	r30, r24
    92cc:	eb 0f       	add	r30, r27
    92ce:	f1 1d       	adc	r31, r1
    92d0:	e3 56       	subi	r30, 0x63	; 99
    92d2:	f0 4d       	sbci	r31, 0xD0	; 208
    92d4:	24 91       	lpm	r18, Z
    92d6:	30 91 37 01 	lds	r19, 0x0137
    92da:	83 0f       	add	r24, r19
    92dc:	91 1d       	adc	r25, r1
    92de:	83 54       	subi	r24, 0x43	; 67
    92e0:	92 4d       	sbci	r25, 0xD2	; 210
    92e2:	fc 01       	movw	r30, r24
    92e4:	84 91       	lpm	r24, Z
    92e6:	82 0f       	add	r24, r18
    92e8:	91 2d       	mov	r25, r1
    92ea:	91 1d       	adc	r25, r1
    92ec:	0a 97       	sbiw	r24, 0x0a	; 10
    92ee:	21 f4       	brne	.+8      	; 0x92f8 <__vector_15+0x2408>
    92f0:	80 91 0e 01 	lds	r24, 0x010E
    92f4:	88 23       	and	r24, r24
    92f6:	b9 f0       	breq	.+46     	; 0x9326 <__vector_15+0x2436>
			PWM_RED = PWM_TOP ;
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    92f8:	8a 2f       	mov	r24, r26
    92fa:	99 27       	eor	r25, r25
    92fc:	fc 01       	movw	r30, r24
    92fe:	eb 0f       	add	r30, r27
    9300:	f1 1d       	adc	r31, r1
    9302:	e3 56       	subi	r30, 0x63	; 99
    9304:	f0 4d       	sbci	r31, 0xD0	; 208
    9306:	24 91       	lpm	r18, Z
    9308:	83 0f       	add	r24, r19
    930a:	91 1d       	adc	r25, r1
    930c:	83 54       	subi	r24, 0x43	; 67
    930e:	92 4d       	sbci	r25, 0xD2	; 210
    9310:	fc 01       	movw	r30, r24
    9312:	84 91       	lpm	r24, Z
    9314:	82 0f       	add	r24, r18
    9316:	91 2d       	mov	r25, r1
    9318:	91 1d       	adc	r25, r1
    931a:	0c 97       	sbiw	r24, 0x0c	; 12
    931c:	39 f4       	brne	.+14     	; 0x932c <__vector_15+0x243c>
    931e:	80 91 0e 01 	lds	r24, 0x010E
    9322:	88 23       	and	r24, r24
    9324:	19 f0       	breq	.+6      	; 0x932c <__vector_15+0x243c>
			PWM_RED = PWM_TOP ;
    9326:	87 e2       	ldi	r24, 0x27	; 39
    9328:	90 e0       	ldi	r25, 0x00	; 0
    932a:	0b c0       	rjmp	.+22     	; 0x9342 <__vector_15+0x2452>
			else
			PWM_RED =  pgm_read_byte(&gc_background[0][RED][g_speed7+g_position]);
    932c:	80 91 2c 01 	lds	r24, 0x012C
    9330:	28 2f       	mov	r18, r24
    9332:	2a 0f       	add	r18, r26
    9334:	31 2d       	mov	r19, r1
    9336:	31 1d       	adc	r19, r1
    9338:	f9 01       	movw	r30, r18
    933a:	e3 58       	subi	r30, 0x83	; 131
    933c:	fe 4c       	sbci	r31, 0xCE	; 206
    933e:	84 91       	lpm	r24, Z
    9340:	99 27       	eor	r25, r25
    9342:	9b bd       	out	0x2b, r25	; 43
    9344:	8a bd       	out	0x2a, r24	; 42
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    9346:	50 91 4c 01 	lds	r21, 0x014C
    934a:	30 91 40 01 	lds	r19, 0x0140
    934e:	83 2f       	mov	r24, r19
    9350:	99 27       	eor	r25, r25
    9352:	fc 01       	movw	r30, r24
    9354:	e5 0f       	add	r30, r21
    9356:	f1 1d       	adc	r31, r1
    9358:	e3 56       	subi	r30, 0x63	; 99
    935a:	f0 4d       	sbci	r31, 0xD0	; 208
    935c:	24 91       	lpm	r18, Z
    935e:	40 91 37 01 	lds	r20, 0x0137
    9362:	84 0f       	add	r24, r20
    9364:	91 1d       	adc	r25, r1
    9366:	83 54       	subi	r24, 0x43	; 67
    9368:	92 4d       	sbci	r25, 0xD2	; 210
    936a:	fc 01       	movw	r30, r24
    936c:	84 91       	lpm	r24, Z
    936e:	82 0f       	add	r24, r18
    9370:	91 2d       	mov	r25, r1
    9372:	91 1d       	adc	r25, r1
    9374:	0a 97       	sbiw	r24, 0x0a	; 10
    9376:	21 f4       	brne	.+8      	; 0x9380 <__vector_15+0x2490>
    9378:	80 91 0e 01 	lds	r24, 0x010E
    937c:	88 23       	and	r24, r24
    937e:	b9 f0       	breq	.+46     	; 0x93ae <__vector_15+0x24be>
			PWM_GREEN = PWM_TOP ;
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    9380:	83 2f       	mov	r24, r19
    9382:	99 27       	eor	r25, r25
    9384:	fc 01       	movw	r30, r24
    9386:	e5 0f       	add	r30, r21
    9388:	f1 1d       	adc	r31, r1
    938a:	e3 56       	subi	r30, 0x63	; 99
    938c:	f0 4d       	sbci	r31, 0xD0	; 208
    938e:	24 91       	lpm	r18, Z
    9390:	84 0f       	add	r24, r20
    9392:	91 1d       	adc	r25, r1
    9394:	83 54       	subi	r24, 0x43	; 67
    9396:	92 4d       	sbci	r25, 0xD2	; 210
    9398:	fc 01       	movw	r30, r24
    939a:	84 91       	lpm	r24, Z
    939c:	82 0f       	add	r24, r18
    939e:	91 2d       	mov	r25, r1
    93a0:	91 1d       	adc	r25, r1
    93a2:	0c 97       	sbiw	r24, 0x0c	; 12
    93a4:	39 f4       	brne	.+14     	; 0x93b4 <__vector_15+0x24c4>
    93a6:	80 91 0e 01 	lds	r24, 0x010E
    93aa:	88 23       	and	r24, r24
    93ac:	19 f0       	breq	.+6      	; 0x93b4 <__vector_15+0x24c4>
			PWM_GREEN = PWM_TOP ;
    93ae:	87 e2       	ldi	r24, 0x27	; 39
    93b0:	90 e0       	ldi	r25, 0x00	; 0
    93b2:	0b c0       	rjmp	.+22     	; 0x93ca <__vector_15+0x24da>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[0][GREEN][g_speed7+g_position]);
    93b4:	80 91 2c 01 	lds	r24, 0x012C
    93b8:	48 2f       	mov	r20, r24
    93ba:	43 0f       	add	r20, r19
    93bc:	51 2d       	mov	r21, r1
    93be:	51 1d       	adc	r21, r1
    93c0:	fa 01       	movw	r30, r20
    93c2:	e3 5a       	subi	r30, 0xA3	; 163
    93c4:	fc 4c       	sbci	r31, 0xCC	; 204
    93c6:	84 91       	lpm	r24, Z
    93c8:	99 27       	eor	r25, r25
    93ca:	99 bd       	out	0x29, r25	; 41
    93cc:	88 bd       	out	0x28, r24	; 40
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    93ce:	50 91 4c 01 	lds	r21, 0x014C
    93d2:	30 91 40 01 	lds	r19, 0x0140
    93d6:	83 2f       	mov	r24, r19
    93d8:	99 27       	eor	r25, r25
    93da:	fc 01       	movw	r30, r24
    93dc:	e5 0f       	add	r30, r21
    93de:	f1 1d       	adc	r31, r1
    93e0:	e3 56       	subi	r30, 0x63	; 99
    93e2:	f0 4d       	sbci	r31, 0xD0	; 208
    93e4:	24 91       	lpm	r18, Z
    93e6:	40 91 37 01 	lds	r20, 0x0137
    93ea:	84 0f       	add	r24, r20
    93ec:	91 1d       	adc	r25, r1
    93ee:	83 54       	subi	r24, 0x43	; 67
    93f0:	92 4d       	sbci	r25, 0xD2	; 210
    93f2:	fc 01       	movw	r30, r24
    93f4:	84 91       	lpm	r24, Z
    93f6:	82 0f       	add	r24, r18
    93f8:	91 2d       	mov	r25, r1
    93fa:	91 1d       	adc	r25, r1
    93fc:	0a 97       	sbiw	r24, 0x0a	; 10
    93fe:	61 f4       	brne	.+24     	; 0x9418 <__vector_15+0x2528>
    9400:	80 91 0e 01 	lds	r24, 0x010E
    9404:	88 23       	and	r24, r24
    9406:	41 f4       	brne	.+16     	; 0x9418 <__vector_15+0x2528>
			PWM_BLUE  = PWM_TOP ;
    9408:	87 e2       	ldi	r24, 0x27	; 39
    940a:	90 e0       	ldi	r25, 0x00	; 0
    940c:	90 93 79 00 	sts	0x0079, r25
    9410:	80 93 78 00 	sts	0x0078, r24
    9414:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    9418:	83 2f       	mov	r24, r19
    941a:	99 27       	eor	r25, r25
    941c:	fc 01       	movw	r30, r24
    941e:	e5 0f       	add	r30, r21
    9420:	f1 1d       	adc	r31, r1
    9422:	e3 56       	subi	r30, 0x63	; 99
    9424:	f0 4d       	sbci	r31, 0xD0	; 208
    9426:	24 91       	lpm	r18, Z
    9428:	84 0f       	add	r24, r20
    942a:	91 1d       	adc	r25, r1
    942c:	83 54       	subi	r24, 0x43	; 67
    942e:	92 4d       	sbci	r25, 0xD2	; 210
    9430:	fc 01       	movw	r30, r24
    9432:	84 91       	lpm	r24, Z
    9434:	82 0f       	add	r24, r18
    9436:	91 2d       	mov	r25, r1
    9438:	91 1d       	adc	r25, r1
    943a:	0c 97       	sbiw	r24, 0x0c	; 12
    943c:	61 f4       	brne	.+24     	; 0x9456 <__vector_15+0x2566>
    943e:	80 91 0e 01 	lds	r24, 0x010E
    9442:	88 23       	and	r24, r24
    9444:	41 f0       	breq	.+16     	; 0x9456 <__vector_15+0x2566>
			PWM_BLUE  = PWM_TOP ;
    9446:	87 e2       	ldi	r24, 0x27	; 39
    9448:	90 e0       	ldi	r25, 0x00	; 0
    944a:	90 93 79 00 	sts	0x0079, r25
    944e:	80 93 78 00 	sts	0x0078, r24
    9452:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[0][BLUE][g_speed7+g_position]);
    9456:	80 91 2c 01 	lds	r24, 0x012C
    945a:	48 2f       	mov	r20, r24
    945c:	43 0f       	add	r20, r19
    945e:	51 2d       	mov	r21, r1
    9460:	51 1d       	adc	r21, r1
    9462:	fa 01       	movw	r30, r20
    9464:	e3 5c       	subi	r30, 0xC3	; 195
    9466:	fa 4c       	sbci	r31, 0xCA	; 202
    9468:	84 91       	lpm	r24, Z
    946a:	99 27       	eor	r25, r25
    946c:	90 93 79 00 	sts	0x0079, r25
    9470:	80 93 78 00 	sts	0x0078, r24
			
		break;	
    9474:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
		
		case 32:				// background is changing android loader 2 WINDOWS neg
			seconds_hand=0;		
    9478:	10 92 25 01 	sts	0x0125, r1
			if ((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) == 0x27) && (pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position]) == 0x27) && ( abs(g_speed3rev-g_speed7rev) <=1 ))
    947c:	b0 91 4c 01 	lds	r27, 0x014C
    9480:	6b 2f       	mov	r22, r27
    9482:	77 27       	eor	r23, r23
    9484:	4a 2f       	mov	r20, r26
    9486:	55 27       	eor	r21, r21
    9488:	fb 01       	movw	r30, r22
    948a:	e4 0f       	add	r30, r20
    948c:	f5 1f       	adc	r31, r21
    948e:	e3 56       	subi	r30, 0x63	; 99
    9490:	f0 4d       	sbci	r31, 0xD0	; 208
    9492:	84 91       	lpm	r24, Z
    9494:	87 32       	cpi	r24, 0x27	; 39
    9496:	61 f5       	brne	.+88     	; 0x94f0 <__vector_15+0x2600>
    9498:	80 91 37 01 	lds	r24, 0x0137
    949c:	28 2f       	mov	r18, r24
    949e:	33 27       	eor	r19, r19
    94a0:	f9 01       	movw	r30, r18
    94a2:	e4 0f       	add	r30, r20
    94a4:	f5 1f       	adc	r31, r21
    94a6:	e3 54       	subi	r30, 0x43	; 67
    94a8:	f2 4d       	sbci	r31, 0xD2	; 210
    94aa:	84 91       	lpm	r24, Z
    94ac:	87 32       	cpi	r24, 0x27	; 39
    94ae:	01 f5       	brne	.+64     	; 0x94f0 <__vector_15+0x2600>
    94b0:	26 1b       	sub	r18, r22
    94b2:	37 0b       	sbc	r19, r23
    94b4:	2f 5f       	subi	r18, 0xFF	; 255
    94b6:	3f 4f       	sbci	r19, 0xFF	; 255
    94b8:	23 30       	cpi	r18, 0x03	; 3
    94ba:	31 05       	cpc	r19, r1
    94bc:	c8 f4       	brcc	.+50     	; 0x94f0 <__vector_15+0x2600>
			{
				if (abs(g_mark1-g_position)>6) 
    94be:	80 91 2b 01 	lds	r24, 0x012B
    94c2:	99 27       	eor	r25, r25
    94c4:	84 1b       	sub	r24, r20
    94c6:	95 0b       	sbc	r25, r21
    94c8:	97 ff       	sbrs	r25, 7
    94ca:	03 c0       	rjmp	.+6      	; 0x94d2 <__vector_15+0x25e2>
    94cc:	90 95       	com	r25
    94ce:	81 95       	neg	r24
    94d0:	9f 4f       	sbci	r25, 0xFF	; 255
    94d2:	07 97       	sbiw	r24, 0x07	; 7
    94d4:	2c f0       	brlt	.+10     	; 0x94e0 <__vector_15+0x25f0>
				g_mark++;
    94d6:	80 91 0e 01 	lds	r24, 0x010E
    94da:	8f 5f       	subi	r24, 0xFF	; 255
    94dc:	80 93 0e 01 	sts	0x010E, r24
				if(g_mark == 2)
    94e0:	80 91 0e 01 	lds	r24, 0x010E
    94e4:	82 30       	cpi	r24, 0x02	; 2
    94e6:	11 f4       	brne	.+4      	; 0x94ec <__vector_15+0x25fc>
				g_mark =0;
    94e8:	10 92 0e 01 	sts	0x010E, r1
				g_mark1=g_position;
    94ec:	a0 93 2b 01 	sts	0x012B, r26
			}
		
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    94f0:	8a 2f       	mov	r24, r26
    94f2:	99 27       	eor	r25, r25
    94f4:	fc 01       	movw	r30, r24
    94f6:	eb 0f       	add	r30, r27
    94f8:	f1 1d       	adc	r31, r1
    94fa:	e3 56       	subi	r30, 0x63	; 99
    94fc:	f0 4d       	sbci	r31, 0xD0	; 208
    94fe:	24 91       	lpm	r18, Z
    9500:	30 91 37 01 	lds	r19, 0x0137
    9504:	83 0f       	add	r24, r19
    9506:	91 1d       	adc	r25, r1
    9508:	83 54       	subi	r24, 0x43	; 67
    950a:	92 4d       	sbci	r25, 0xD2	; 210
    950c:	fc 01       	movw	r30, r24
    950e:	84 91       	lpm	r24, Z
    9510:	82 0f       	add	r24, r18
    9512:	91 2d       	mov	r25, r1
    9514:	91 1d       	adc	r25, r1
    9516:	0a 97       	sbiw	r24, 0x0a	; 10
    9518:	21 f4       	brne	.+8      	; 0x9522 <__vector_15+0x2632>
    951a:	80 91 0e 01 	lds	r24, 0x010E
    951e:	88 23       	and	r24, r24
    9520:	b9 f0       	breq	.+46     	; 0x9550 <__vector_15+0x2660>
			PWM_RED = PWM_TOP ;
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    9522:	8a 2f       	mov	r24, r26
    9524:	99 27       	eor	r25, r25
    9526:	fc 01       	movw	r30, r24
    9528:	eb 0f       	add	r30, r27
    952a:	f1 1d       	adc	r31, r1
    952c:	e3 56       	subi	r30, 0x63	; 99
    952e:	f0 4d       	sbci	r31, 0xD0	; 208
    9530:	24 91       	lpm	r18, Z
    9532:	83 0f       	add	r24, r19
    9534:	91 1d       	adc	r25, r1
    9536:	83 54       	subi	r24, 0x43	; 67
    9538:	92 4d       	sbci	r25, 0xD2	; 210
    953a:	fc 01       	movw	r30, r24
    953c:	84 91       	lpm	r24, Z
    953e:	82 0f       	add	r24, r18
    9540:	91 2d       	mov	r25, r1
    9542:	91 1d       	adc	r25, r1
    9544:	0c 97       	sbiw	r24, 0x0c	; 12
    9546:	39 f4       	brne	.+14     	; 0x9556 <__vector_15+0x2666>
    9548:	80 91 0e 01 	lds	r24, 0x010E
    954c:	88 23       	and	r24, r24
    954e:	19 f0       	breq	.+6      	; 0x9556 <__vector_15+0x2666>
			PWM_RED = PWM_TOP ;
    9550:	87 e2       	ldi	r24, 0x27	; 39
    9552:	90 e0       	ldi	r25, 0x00	; 0
    9554:	0b c0       	rjmp	.+22     	; 0x956c <__vector_15+0x267c>
			else
			PWM_RED =  pgm_read_byte(&gc_background[7][RED][g_speed7+g_position]);
    9556:	80 91 2c 01 	lds	r24, 0x012C
    955a:	28 2f       	mov	r18, r24
    955c:	2a 0f       	add	r18, r26
    955e:	31 2d       	mov	r19, r1
    9560:	31 1d       	adc	r19, r1
    9562:	f9 01       	movw	r30, r18
    9564:	e3 52       	subi	r30, 0x23	; 35
    9566:	f7 4a       	sbci	r31, 0xA7	; 167
    9568:	84 91       	lpm	r24, Z
    956a:	99 27       	eor	r25, r25
    956c:	9b bd       	out	0x2b, r25	; 43
    956e:	8a bd       	out	0x2a, r24	; 42
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    9570:	50 91 4c 01 	lds	r21, 0x014C
    9574:	30 91 40 01 	lds	r19, 0x0140
    9578:	83 2f       	mov	r24, r19
    957a:	99 27       	eor	r25, r25
    957c:	fc 01       	movw	r30, r24
    957e:	e5 0f       	add	r30, r21
    9580:	f1 1d       	adc	r31, r1
    9582:	e3 56       	subi	r30, 0x63	; 99
    9584:	f0 4d       	sbci	r31, 0xD0	; 208
    9586:	24 91       	lpm	r18, Z
    9588:	40 91 37 01 	lds	r20, 0x0137
    958c:	84 0f       	add	r24, r20
    958e:	91 1d       	adc	r25, r1
    9590:	83 54       	subi	r24, 0x43	; 67
    9592:	92 4d       	sbci	r25, 0xD2	; 210
    9594:	fc 01       	movw	r30, r24
    9596:	84 91       	lpm	r24, Z
    9598:	82 0f       	add	r24, r18
    959a:	91 2d       	mov	r25, r1
    959c:	91 1d       	adc	r25, r1
    959e:	0a 97       	sbiw	r24, 0x0a	; 10
    95a0:	21 f4       	brne	.+8      	; 0x95aa <__vector_15+0x26ba>
    95a2:	80 91 0e 01 	lds	r24, 0x010E
    95a6:	88 23       	and	r24, r24
    95a8:	b9 f0       	breq	.+46     	; 0x95d8 <__vector_15+0x26e8>
			PWM_GREEN = PWM_TOP ;
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    95aa:	83 2f       	mov	r24, r19
    95ac:	99 27       	eor	r25, r25
    95ae:	fc 01       	movw	r30, r24
    95b0:	e5 0f       	add	r30, r21
    95b2:	f1 1d       	adc	r31, r1
    95b4:	e3 56       	subi	r30, 0x63	; 99
    95b6:	f0 4d       	sbci	r31, 0xD0	; 208
    95b8:	24 91       	lpm	r18, Z
    95ba:	84 0f       	add	r24, r20
    95bc:	91 1d       	adc	r25, r1
    95be:	83 54       	subi	r24, 0x43	; 67
    95c0:	92 4d       	sbci	r25, 0xD2	; 210
    95c2:	fc 01       	movw	r30, r24
    95c4:	84 91       	lpm	r24, Z
    95c6:	82 0f       	add	r24, r18
    95c8:	91 2d       	mov	r25, r1
    95ca:	91 1d       	adc	r25, r1
    95cc:	0c 97       	sbiw	r24, 0x0c	; 12
    95ce:	39 f4       	brne	.+14     	; 0x95de <__vector_15+0x26ee>
    95d0:	80 91 0e 01 	lds	r24, 0x010E
    95d4:	88 23       	and	r24, r24
    95d6:	19 f0       	breq	.+6      	; 0x95de <__vector_15+0x26ee>
			PWM_GREEN = PWM_TOP ;
    95d8:	87 e2       	ldi	r24, 0x27	; 39
    95da:	90 e0       	ldi	r25, 0x00	; 0
    95dc:	0b c0       	rjmp	.+22     	; 0x95f4 <__vector_15+0x2704>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[7][GREEN][g_speed7+g_position]);
    95de:	80 91 2c 01 	lds	r24, 0x012C
    95e2:	48 2f       	mov	r20, r24
    95e4:	43 0f       	add	r20, r19
    95e6:	51 2d       	mov	r21, r1
    95e8:	51 1d       	adc	r21, r1
    95ea:	fa 01       	movw	r30, r20
    95ec:	e3 54       	subi	r30, 0x43	; 67
    95ee:	f5 4a       	sbci	r31, 0xA5	; 165
    95f0:	84 91       	lpm	r24, Z
    95f2:	99 27       	eor	r25, r25
    95f4:	99 bd       	out	0x29, r25	; 41
    95f6:	88 bd       	out	0x28, r24	; 40
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    95f8:	50 91 4c 01 	lds	r21, 0x014C
    95fc:	30 91 40 01 	lds	r19, 0x0140
    9600:	83 2f       	mov	r24, r19
    9602:	99 27       	eor	r25, r25
    9604:	fc 01       	movw	r30, r24
    9606:	e5 0f       	add	r30, r21
    9608:	f1 1d       	adc	r31, r1
    960a:	e3 56       	subi	r30, 0x63	; 99
    960c:	f0 4d       	sbci	r31, 0xD0	; 208
    960e:	24 91       	lpm	r18, Z
    9610:	40 91 37 01 	lds	r20, 0x0137
    9614:	84 0f       	add	r24, r20
    9616:	91 1d       	adc	r25, r1
    9618:	83 54       	subi	r24, 0x43	; 67
    961a:	92 4d       	sbci	r25, 0xD2	; 210
    961c:	fc 01       	movw	r30, r24
    961e:	84 91       	lpm	r24, Z
    9620:	82 0f       	add	r24, r18
    9622:	91 2d       	mov	r25, r1
    9624:	91 1d       	adc	r25, r1
    9626:	0a 97       	sbiw	r24, 0x0a	; 10
    9628:	61 f4       	brne	.+24     	; 0x9642 <__vector_15+0x2752>
    962a:	80 91 0e 01 	lds	r24, 0x010E
    962e:	88 23       	and	r24, r24
    9630:	41 f4       	brne	.+16     	; 0x9642 <__vector_15+0x2752>
			PWM_BLUE  = PWM_TOP ;
    9632:	87 e2       	ldi	r24, 0x27	; 39
    9634:	90 e0       	ldi	r25, 0x00	; 0
    9636:	90 93 79 00 	sts	0x0079, r25
    963a:	80 93 78 00 	sts	0x0078, r24
    963e:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    9642:	83 2f       	mov	r24, r19
    9644:	99 27       	eor	r25, r25
    9646:	fc 01       	movw	r30, r24
    9648:	e5 0f       	add	r30, r21
    964a:	f1 1d       	adc	r31, r1
    964c:	e3 56       	subi	r30, 0x63	; 99
    964e:	f0 4d       	sbci	r31, 0xD0	; 208
    9650:	24 91       	lpm	r18, Z
    9652:	84 0f       	add	r24, r20
    9654:	91 1d       	adc	r25, r1
    9656:	83 54       	subi	r24, 0x43	; 67
    9658:	92 4d       	sbci	r25, 0xD2	; 210
    965a:	fc 01       	movw	r30, r24
    965c:	84 91       	lpm	r24, Z
    965e:	82 0f       	add	r24, r18
    9660:	91 2d       	mov	r25, r1
    9662:	91 1d       	adc	r25, r1
    9664:	0c 97       	sbiw	r24, 0x0c	; 12
    9666:	61 f4       	brne	.+24     	; 0x9680 <__vector_15+0x2790>
    9668:	80 91 0e 01 	lds	r24, 0x010E
    966c:	88 23       	and	r24, r24
    966e:	41 f0       	breq	.+16     	; 0x9680 <__vector_15+0x2790>
			PWM_BLUE  = PWM_TOP ;
    9670:	87 e2       	ldi	r24, 0x27	; 39
    9672:	90 e0       	ldi	r25, 0x00	; 0
    9674:	90 93 79 00 	sts	0x0079, r25
    9678:	80 93 78 00 	sts	0x0078, r24
    967c:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[7][BLUE][g_speed7+g_position]);
    9680:	80 91 2c 01 	lds	r24, 0x012C
    9684:	48 2f       	mov	r20, r24
    9686:	43 0f       	add	r20, r19
    9688:	51 2d       	mov	r21, r1
    968a:	51 1d       	adc	r21, r1
    968c:	fa 01       	movw	r30, r20
    968e:	e3 56       	subi	r30, 0x63	; 99
    9690:	f3 4a       	sbci	r31, 0xA3	; 163
    9692:	84 91       	lpm	r24, Z
    9694:	99 27       	eor	r25, r25
    9696:	90 93 79 00 	sts	0x0079, r25
    969a:	80 93 78 00 	sts	0x0078, r24
		
				
		break;	
    969e:	0c 94 32 52 	jmp	0xa464 <__vector_15+0x3574>
		
		
		case 31:				// background is changing android loader 2 africa neg
			seconds_hand=0;		
    96a2:	10 92 25 01 	sts	0x0125, r1
			if ((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) == 0x27) && (pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position]) == 0x27) && ( abs(g_speed3rev-g_speed7rev) <=1 ))
    96a6:	b0 91 4c 01 	lds	r27, 0x014C
    96aa:	6b 2f       	mov	r22, r27
    96ac:	77 27       	eor	r23, r23
    96ae:	4a 2f       	mov	r20, r26
    96b0:	55 27       	eor	r21, r21
    96b2:	fb 01       	movw	r30, r22
    96b4:	e4 0f       	add	r30, r20
    96b6:	f5 1f       	adc	r31, r21
    96b8:	e3 56       	subi	r30, 0x63	; 99
    96ba:	f0 4d       	sbci	r31, 0xD0	; 208
    96bc:	84 91       	lpm	r24, Z
    96be:	87 32       	cpi	r24, 0x27	; 39
    96c0:	61 f5       	brne	.+88     	; 0x971a <__vector_15+0x282a>
    96c2:	80 91 37 01 	lds	r24, 0x0137
    96c6:	28 2f       	mov	r18, r24
    96c8:	33 27       	eor	r19, r19
    96ca:	f9 01       	movw	r30, r18
    96cc:	e4 0f       	add	r30, r20
    96ce:	f5 1f       	adc	r31, r21
    96d0:	e3 54       	subi	r30, 0x43	; 67
    96d2:	f2 4d       	sbci	r31, 0xD2	; 210
    96d4:	84 91       	lpm	r24, Z
    96d6:	87 32       	cpi	r24, 0x27	; 39
    96d8:	01 f5       	brne	.+64     	; 0x971a <__vector_15+0x282a>
    96da:	26 1b       	sub	r18, r22
    96dc:	37 0b       	sbc	r19, r23
    96de:	2f 5f       	subi	r18, 0xFF	; 255
    96e0:	3f 4f       	sbci	r19, 0xFF	; 255
    96e2:	23 30       	cpi	r18, 0x03	; 3
    96e4:	31 05       	cpc	r19, r1
    96e6:	c8 f4       	brcc	.+50     	; 0x971a <__vector_15+0x282a>
			{
				if (abs(g_mark1-g_position)>6) 
    96e8:	80 91 2b 01 	lds	r24, 0x012B
    96ec:	99 27       	eor	r25, r25
    96ee:	84 1b       	sub	r24, r20
    96f0:	95 0b       	sbc	r25, r21
    96f2:	97 ff       	sbrs	r25, 7
    96f4:	03 c0       	rjmp	.+6      	; 0x96fc <__vector_15+0x280c>
    96f6:	90 95       	com	r25
    96f8:	81 95       	neg	r24
    96fa:	9f 4f       	sbci	r25, 0xFF	; 255
    96fc:	07 97       	sbiw	r24, 0x07	; 7
    96fe:	2c f0       	brlt	.+10     	; 0x970a <__vector_15+0x281a>
				g_mark++;
    9700:	80 91 0e 01 	lds	r24, 0x010E
    9704:	8f 5f       	subi	r24, 0xFF	; 255
    9706:	80 93 0e 01 	sts	0x010E, r24
				if(g_mark == 2)
    970a:	80 91 0e 01 	lds	r24, 0x010E
    970e:	82 30       	cpi	r24, 0x02	; 2
    9710:	11 f4       	brne	.+4      	; 0x9716 <__vector_15+0x2826>
				g_mark =0;
    9712:	10 92 0e 01 	sts	0x010E, r1
				g_mark1=g_position;
    9716:	a0 93 2b 01 	sts	0x012B, r26
			}
		
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    971a:	8a 2f       	mov	r24, r26
    971c:	99 27       	eor	r25, r25
    971e:	fc 01       	movw	r30, r24
    9720:	eb 0f       	add	r30, r27
    9722:	f1 1d       	adc	r31, r1
    9724:	e3 56       	subi	r30, 0x63	; 99
    9726:	f0 4d       	sbci	r31, 0xD0	; 208
    9728:	24 91       	lpm	r18, Z
    972a:	30 91 37 01 	lds	r19, 0x0137
    972e:	83 0f       	add	r24, r19
    9730:	91 1d       	adc	r25, r1
    9732:	83 54       	subi	r24, 0x43	; 67
    9734:	92 4d       	sbci	r25, 0xD2	; 210
    9736:	fc 01       	movw	r30, r24
    9738:	84 91       	lpm	r24, Z
    973a:	82 0f       	add	r24, r18
    973c:	91 2d       	mov	r25, r1
    973e:	91 1d       	adc	r25, r1
    9740:	0a 97       	sbiw	r24, 0x0a	; 10
    9742:	21 f4       	brne	.+8      	; 0x974c <__vector_15+0x285c>
    9744:	80 91 0e 01 	lds	r24, 0x010E
    9748:	88 23       	and	r24, r24
    974a:	b9 f0       	breq	.+46     	; 0x977a <__vector_15+0x288a>
			PWM_RED = PWM_TOP ;
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    974c:	8a 2f       	mov	r24, r26
    974e:	99 27       	eor	r25, r25
    9750:	fc 01       	movw	r30, r24
    9752:	eb 0f       	add	r30, r27
    9754:	f1 1d       	adc	r31, r1
    9756:	e3 56       	subi	r30, 0x63	; 99
    9758:	f0 4d       	sbci	r31, 0xD0	; 208
    975a:	24 91       	lpm	r18, Z
    975c:	83 0f       	add	r24, r19
    975e:	91 1d       	adc	r25, r1
    9760:	83 54       	subi	r24, 0x43	; 67
    9762:	92 4d       	sbci	r25, 0xD2	; 210
    9764:	fc 01       	movw	r30, r24
    9766:	84 91       	lpm	r24, Z
    9768:	82 0f       	add	r24, r18
    976a:	91 2d       	mov	r25, r1
    976c:	91 1d       	adc	r25, r1
    976e:	0c 97       	sbiw	r24, 0x0c	; 12
    9770:	39 f4       	brne	.+14     	; 0x9780 <__vector_15+0x2890>
    9772:	80 91 0e 01 	lds	r24, 0x010E
    9776:	88 23       	and	r24, r24
    9778:	19 f0       	breq	.+6      	; 0x9780 <__vector_15+0x2890>
			PWM_RED = PWM_TOP ;
    977a:	87 e2       	ldi	r24, 0x27	; 39
    977c:	90 e0       	ldi	r25, 0x00	; 0
    977e:	0b c0       	rjmp	.+22     	; 0x9796 <__vector_15+0x28a6>
			else
			PWM_RED =  pgm_read_byte(&gc_background[6][RED][g_speed7+g_position]);
    9780:	80 91 2c 01 	lds	r24, 0x012C
    9784:	28 2f       	mov	r18, r24
    9786:	2a 0f       	add	r18, r26
    9788:	31 2d       	mov	r19, r1
    978a:	31 1d       	adc	r19, r1
    978c:	f9 01       	movw	r30, r18
    978e:	e3 5c       	subi	r30, 0xC3	; 195
    9790:	fc 4a       	sbci	r31, 0xAC	; 172
    9792:	84 91       	lpm	r24, Z
    9794:	99 27       	eor	r25, r25
    9796:	9b bd       	out	0x2b, r25	; 43
    9798:	8a bd       	out	0x2a, r24	; 42
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    979a:	50 91 4c 01 	lds	r21, 0x014C
    979e:	30 91 40 01 	lds	r19, 0x0140
    97a2:	83 2f       	mov	r24, r19
    97a4:	99 27       	eor	r25, r25
    97a6:	fc 01       	movw	r30, r24
    97a8:	e5 0f       	add	r30, r21
    97aa:	f1 1d       	adc	r31, r1
    97ac:	e3 56       	subi	r30, 0x63	; 99
    97ae:	f0 4d       	sbci	r31, 0xD0	; 208
    97b0:	24 91       	lpm	r18, Z
    97b2:	40 91 37 01 	lds	r20, 0x0137
    97b6:	84 0f       	add	r24, r20
    97b8:	91 1d       	adc	r25, r1
    97ba:	83 54       	subi	r24, 0x43	; 67
    97bc:	92 4d       	sbci	r25, 0xD2	; 210
    97be:	fc 01       	movw	r30, r24
    97c0:	84 91       	lpm	r24, Z
    97c2:	82 0f       	add	r24, r18
    97c4:	91 2d       	mov	r25, r1
    97c6:	91 1d       	adc	r25, r1
    97c8:	0a 97       	sbiw	r24, 0x0a	; 10
    97ca:	21 f4       	brne	.+8      	; 0x97d4 <__vector_15+0x28e4>
    97cc:	80 91 0e 01 	lds	r24, 0x010E
    97d0:	88 23       	and	r24, r24
    97d2:	b9 f0       	breq	.+46     	; 0x9802 <__vector_15+0x2912>
			PWM_GREEN = PWM_TOP ;
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    97d4:	83 2f       	mov	r24, r19
    97d6:	99 27       	eor	r25, r25
    97d8:	fc 01       	movw	r30, r24
    97da:	e5 0f       	add	r30, r21
    97dc:	f1 1d       	adc	r31, r1
    97de:	e3 56       	subi	r30, 0x63	; 99
    97e0:	f0 4d       	sbci	r31, 0xD0	; 208
    97e2:	24 91       	lpm	r18, Z
    97e4:	84 0f       	add	r24, r20
    97e6:	91 1d       	adc	r25, r1
    97e8:	83 54       	subi	r24, 0x43	; 67
    97ea:	92 4d       	sbci	r25, 0xD2	; 210
    97ec:	fc 01       	movw	r30, r24
    97ee:	84 91       	lpm	r24, Z
    97f0:	82 0f       	add	r24, r18
    97f2:	91 2d       	mov	r25, r1
    97f4:	91 1d       	adc	r25, r1
    97f6:	0c 97       	sbiw	r24, 0x0c	; 12
    97f8:	39 f4       	brne	.+14     	; 0x9808 <__vector_15+0x2918>
    97fa:	80 91 0e 01 	lds	r24, 0x010E
    97fe:	88 23       	and	r24, r24
    9800:	19 f0       	breq	.+6      	; 0x9808 <__vector_15+0x2918>
			PWM_GREEN = PWM_TOP ;
    9802:	87 e2       	ldi	r24, 0x27	; 39
    9804:	90 e0       	ldi	r25, 0x00	; 0
    9806:	0b c0       	rjmp	.+22     	; 0x981e <__vector_15+0x292e>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[6][GREEN][g_speed7+g_position]);
    9808:	80 91 2c 01 	lds	r24, 0x012C
    980c:	48 2f       	mov	r20, r24
    980e:	43 0f       	add	r20, r19
    9810:	51 2d       	mov	r21, r1
    9812:	51 1d       	adc	r21, r1
    9814:	fa 01       	movw	r30, r20
    9816:	e3 5e       	subi	r30, 0xE3	; 227
    9818:	fa 4a       	sbci	r31, 0xAA	; 170
    981a:	84 91       	lpm	r24, Z
    981c:	99 27       	eor	r25, r25
    981e:	99 bd       	out	0x29, r25	; 41
    9820:	88 bd       	out	0x28, r24	; 40
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    9822:	50 91 4c 01 	lds	r21, 0x014C
    9826:	30 91 40 01 	lds	r19, 0x0140
    982a:	83 2f       	mov	r24, r19
    982c:	99 27       	eor	r25, r25
    982e:	fc 01       	movw	r30, r24
    9830:	e5 0f       	add	r30, r21
    9832:	f1 1d       	adc	r31, r1
    9834:	e3 56       	subi	r30, 0x63	; 99
    9836:	f0 4d       	sbci	r31, 0xD0	; 208
    9838:	24 91       	lpm	r18, Z
    983a:	40 91 37 01 	lds	r20, 0x0137
    983e:	84 0f       	add	r24, r20
    9840:	91 1d       	adc	r25, r1
    9842:	83 54       	subi	r24, 0x43	; 67
    9844:	92 4d       	sbci	r25, 0xD2	; 210
    9846:	fc 01       	movw	r30, r24
    9848:	84 91       	lpm	r24, Z
    984a:	82 0f       	add	r24, r18
    984c:	91 2d       	mov	r25, r1
    984e:	91 1d       	adc	r25, r1
    9850:	0a 97       	sbiw	r24, 0x0a	; 10
    9852:	59 f4       	brne	.+22     	; 0x986a <__vector_15+0x297a>
    9854:	80 91 0e 01 	lds	r24, 0x010E
    9858:	88 23       	and	r24, r24
    985a:	39 f4       	brne	.+14     	; 0x986a <__vector_15+0x297a>
			PWM_BLUE  = PWM_TOP ;
    985c:	87 e2       	ldi	r24, 0x27	; 39
    985e:	90 e0       	ldi	r25, 0x00	; 0
    9860:	90 93 79 00 	sts	0x0079, r25
    9864:	80 93 78 00 	sts	0x0078, r24
    9868:	fd c5       	rjmp	.+3066   	; 0xa464 <__vector_15+0x3574>
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    986a:	83 2f       	mov	r24, r19
    986c:	99 27       	eor	r25, r25
    986e:	fc 01       	movw	r30, r24
    9870:	e5 0f       	add	r30, r21
    9872:	f1 1d       	adc	r31, r1
    9874:	e3 56       	subi	r30, 0x63	; 99
    9876:	f0 4d       	sbci	r31, 0xD0	; 208
    9878:	24 91       	lpm	r18, Z
    987a:	84 0f       	add	r24, r20
    987c:	91 1d       	adc	r25, r1
    987e:	83 54       	subi	r24, 0x43	; 67
    9880:	92 4d       	sbci	r25, 0xD2	; 210
    9882:	fc 01       	movw	r30, r24
    9884:	84 91       	lpm	r24, Z
    9886:	82 0f       	add	r24, r18
    9888:	91 2d       	mov	r25, r1
    988a:	91 1d       	adc	r25, r1
    988c:	0c 97       	sbiw	r24, 0x0c	; 12
    988e:	59 f4       	brne	.+22     	; 0x98a6 <__vector_15+0x29b6>
    9890:	80 91 0e 01 	lds	r24, 0x010E
    9894:	88 23       	and	r24, r24
    9896:	39 f0       	breq	.+14     	; 0x98a6 <__vector_15+0x29b6>
			PWM_BLUE  = PWM_TOP ;
    9898:	87 e2       	ldi	r24, 0x27	; 39
    989a:	90 e0       	ldi	r25, 0x00	; 0
    989c:	90 93 79 00 	sts	0x0079, r25
    98a0:	80 93 78 00 	sts	0x0078, r24
    98a4:	df c5       	rjmp	.+3006   	; 0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[6][BLUE][g_speed7+g_position]);
    98a6:	80 91 2c 01 	lds	r24, 0x012C
    98aa:	48 2f       	mov	r20, r24
    98ac:	43 0f       	add	r20, r19
    98ae:	51 2d       	mov	r21, r1
    98b0:	51 1d       	adc	r21, r1
    98b2:	fa 01       	movw	r30, r20
    98b4:	e3 50       	subi	r30, 0x03	; 3
    98b6:	f9 4a       	sbci	r31, 0xA9	; 169
    98b8:	84 91       	lpm	r24, Z
    98ba:	99 27       	eor	r25, r25
    98bc:	90 93 79 00 	sts	0x0079, r25
    98c0:	80 93 78 00 	sts	0x0078, r24
		
		break;	
    98c4:	cf c5       	rjmp	.+2974   	; 0xa464 <__vector_15+0x3574>
			
		case 30:				// background is changing android loader 2 neg grey
			seconds_hand=0;		
    98c6:	10 92 25 01 	sts	0x0125, r1
			if ((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) == 0x27) && (pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position]) == 0x27) && ( abs(g_speed3rev-g_speed7rev) <=1 ))
    98ca:	b0 91 4c 01 	lds	r27, 0x014C
    98ce:	6b 2f       	mov	r22, r27
    98d0:	77 27       	eor	r23, r23
    98d2:	4a 2f       	mov	r20, r26
    98d4:	55 27       	eor	r21, r21
    98d6:	fb 01       	movw	r30, r22
    98d8:	e4 0f       	add	r30, r20
    98da:	f5 1f       	adc	r31, r21
    98dc:	e3 56       	subi	r30, 0x63	; 99
    98de:	f0 4d       	sbci	r31, 0xD0	; 208
    98e0:	84 91       	lpm	r24, Z
    98e2:	87 32       	cpi	r24, 0x27	; 39
    98e4:	61 f5       	brne	.+88     	; 0x993e <__vector_15+0x2a4e>
    98e6:	80 91 37 01 	lds	r24, 0x0137
    98ea:	28 2f       	mov	r18, r24
    98ec:	33 27       	eor	r19, r19
    98ee:	f9 01       	movw	r30, r18
    98f0:	e4 0f       	add	r30, r20
    98f2:	f5 1f       	adc	r31, r21
    98f4:	e3 54       	subi	r30, 0x43	; 67
    98f6:	f2 4d       	sbci	r31, 0xD2	; 210
    98f8:	84 91       	lpm	r24, Z
    98fa:	87 32       	cpi	r24, 0x27	; 39
    98fc:	01 f5       	brne	.+64     	; 0x993e <__vector_15+0x2a4e>
    98fe:	26 1b       	sub	r18, r22
    9900:	37 0b       	sbc	r19, r23
    9902:	2f 5f       	subi	r18, 0xFF	; 255
    9904:	3f 4f       	sbci	r19, 0xFF	; 255
    9906:	23 30       	cpi	r18, 0x03	; 3
    9908:	31 05       	cpc	r19, r1
    990a:	c8 f4       	brcc	.+50     	; 0x993e <__vector_15+0x2a4e>
			{
				if (abs(g_mark1-g_position)>6) 
    990c:	80 91 2b 01 	lds	r24, 0x012B
    9910:	99 27       	eor	r25, r25
    9912:	84 1b       	sub	r24, r20
    9914:	95 0b       	sbc	r25, r21
    9916:	97 ff       	sbrs	r25, 7
    9918:	03 c0       	rjmp	.+6      	; 0x9920 <__vector_15+0x2a30>
    991a:	90 95       	com	r25
    991c:	81 95       	neg	r24
    991e:	9f 4f       	sbci	r25, 0xFF	; 255
    9920:	07 97       	sbiw	r24, 0x07	; 7
    9922:	2c f0       	brlt	.+10     	; 0x992e <__vector_15+0x2a3e>
				g_mark++;
    9924:	80 91 0e 01 	lds	r24, 0x010E
    9928:	8f 5f       	subi	r24, 0xFF	; 255
    992a:	80 93 0e 01 	sts	0x010E, r24
				if(g_mark == 2)
    992e:	80 91 0e 01 	lds	r24, 0x010E
    9932:	82 30       	cpi	r24, 0x02	; 2
    9934:	11 f4       	brne	.+4      	; 0x993a <__vector_15+0x2a4a>
				g_mark =0;
    9936:	10 92 0e 01 	sts	0x010E, r1
				g_mark1=g_position;
    993a:	a0 93 2b 01 	sts	0x012B, r26
			}
		
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    993e:	8a 2f       	mov	r24, r26
    9940:	99 27       	eor	r25, r25
    9942:	fc 01       	movw	r30, r24
    9944:	eb 0f       	add	r30, r27
    9946:	f1 1d       	adc	r31, r1
    9948:	e3 56       	subi	r30, 0x63	; 99
    994a:	f0 4d       	sbci	r31, 0xD0	; 208
    994c:	24 91       	lpm	r18, Z
    994e:	30 91 37 01 	lds	r19, 0x0137
    9952:	83 0f       	add	r24, r19
    9954:	91 1d       	adc	r25, r1
    9956:	83 54       	subi	r24, 0x43	; 67
    9958:	92 4d       	sbci	r25, 0xD2	; 210
    995a:	fc 01       	movw	r30, r24
    995c:	84 91       	lpm	r24, Z
    995e:	82 0f       	add	r24, r18
    9960:	91 2d       	mov	r25, r1
    9962:	91 1d       	adc	r25, r1
    9964:	0a 97       	sbiw	r24, 0x0a	; 10
    9966:	21 f4       	brne	.+8      	; 0x9970 <__vector_15+0x2a80>
    9968:	80 91 0e 01 	lds	r24, 0x010E
    996c:	88 23       	and	r24, r24
    996e:	b9 f0       	breq	.+46     	; 0x999e <__vector_15+0x2aae>
			PWM_RED = PWM_TOP ;
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    9970:	8a 2f       	mov	r24, r26
    9972:	99 27       	eor	r25, r25
    9974:	fc 01       	movw	r30, r24
    9976:	eb 0f       	add	r30, r27
    9978:	f1 1d       	adc	r31, r1
    997a:	e3 56       	subi	r30, 0x63	; 99
    997c:	f0 4d       	sbci	r31, 0xD0	; 208
    997e:	24 91       	lpm	r18, Z
    9980:	83 0f       	add	r24, r19
    9982:	91 1d       	adc	r25, r1
    9984:	83 54       	subi	r24, 0x43	; 67
    9986:	92 4d       	sbci	r25, 0xD2	; 210
    9988:	fc 01       	movw	r30, r24
    998a:	84 91       	lpm	r24, Z
    998c:	82 0f       	add	r24, r18
    998e:	91 2d       	mov	r25, r1
    9990:	91 1d       	adc	r25, r1
    9992:	0c 97       	sbiw	r24, 0x0c	; 12
    9994:	39 f4       	brne	.+14     	; 0x99a4 <__vector_15+0x2ab4>
    9996:	80 91 0e 01 	lds	r24, 0x010E
    999a:	88 23       	and	r24, r24
    999c:	19 f0       	breq	.+6      	; 0x99a4 <__vector_15+0x2ab4>
			PWM_RED = PWM_TOP ;//PWM_RED =  pgm_read_byte(&gc_background[2][RED][g_speed3rev+g_position]);
    999e:	87 e2       	ldi	r24, 0x27	; 39
    99a0:	90 e0       	ldi	r25, 0x00	; 0
    99a2:	0b c0       	rjmp	.+22     	; 0x99ba <__vector_15+0x2aca>
			else
			PWM_RED =  pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
    99a4:	80 91 28 01 	lds	r24, 0x0128
    99a8:	28 2f       	mov	r18, r24
    99aa:	2a 0f       	add	r18, r26
    99ac:	31 2d       	mov	r19, r1
    99ae:	31 1d       	adc	r19, r1
    99b0:	f9 01       	movw	r30, r18
    99b2:	e3 58       	subi	r30, 0x83	; 131
    99b4:	ff 4b       	sbci	r31, 0xBF	; 191
    99b6:	84 91       	lpm	r24, Z
    99b8:	99 27       	eor	r25, r25
    99ba:	9b bd       	out	0x2b, r25	; 43
    99bc:	8a bd       	out	0x2a, r24	; 42
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    99be:	50 91 4c 01 	lds	r21, 0x014C
    99c2:	30 91 40 01 	lds	r19, 0x0140
    99c6:	83 2f       	mov	r24, r19
    99c8:	99 27       	eor	r25, r25
    99ca:	fc 01       	movw	r30, r24
    99cc:	e5 0f       	add	r30, r21
    99ce:	f1 1d       	adc	r31, r1
    99d0:	e3 56       	subi	r30, 0x63	; 99
    99d2:	f0 4d       	sbci	r31, 0xD0	; 208
    99d4:	24 91       	lpm	r18, Z
    99d6:	40 91 37 01 	lds	r20, 0x0137
    99da:	84 0f       	add	r24, r20
    99dc:	91 1d       	adc	r25, r1
    99de:	83 54       	subi	r24, 0x43	; 67
    99e0:	92 4d       	sbci	r25, 0xD2	; 210
    99e2:	fc 01       	movw	r30, r24
    99e4:	84 91       	lpm	r24, Z
    99e6:	82 0f       	add	r24, r18
    99e8:	91 2d       	mov	r25, r1
    99ea:	91 1d       	adc	r25, r1
    99ec:	0a 97       	sbiw	r24, 0x0a	; 10
    99ee:	21 f4       	brne	.+8      	; 0x99f8 <__vector_15+0x2b08>
    99f0:	80 91 0e 01 	lds	r24, 0x010E
    99f4:	88 23       	and	r24, r24
    99f6:	b9 f0       	breq	.+46     	; 0x9a26 <__vector_15+0x2b36>
			PWM_GREEN = PWM_TOP ;
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    99f8:	83 2f       	mov	r24, r19
    99fa:	99 27       	eor	r25, r25
    99fc:	fc 01       	movw	r30, r24
    99fe:	e5 0f       	add	r30, r21
    9a00:	f1 1d       	adc	r31, r1
    9a02:	e3 56       	subi	r30, 0x63	; 99
    9a04:	f0 4d       	sbci	r31, 0xD0	; 208
    9a06:	24 91       	lpm	r18, Z
    9a08:	84 0f       	add	r24, r20
    9a0a:	91 1d       	adc	r25, r1
    9a0c:	83 54       	subi	r24, 0x43	; 67
    9a0e:	92 4d       	sbci	r25, 0xD2	; 210
    9a10:	fc 01       	movw	r30, r24
    9a12:	84 91       	lpm	r24, Z
    9a14:	82 0f       	add	r24, r18
    9a16:	91 2d       	mov	r25, r1
    9a18:	91 1d       	adc	r25, r1
    9a1a:	0c 97       	sbiw	r24, 0x0c	; 12
    9a1c:	39 f4       	brne	.+14     	; 0x9a2c <__vector_15+0x2b3c>
    9a1e:	80 91 0e 01 	lds	r24, 0x010E
    9a22:	88 23       	and	r24, r24
    9a24:	19 f0       	breq	.+6      	; 0x9a2c <__vector_15+0x2b3c>
			PWM_GREEN = PWM_TOP ;//PWM_GREEN =  pgm_read_byte(&gc_background[2][RED][g_speed3rev+g_position]);
    9a26:	87 e2       	ldi	r24, 0x27	; 39
    9a28:	90 e0       	ldi	r25, 0x00	; 0
    9a2a:	0b c0       	rjmp	.+22     	; 0x9a42 <__vector_15+0x2b52>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
    9a2c:	80 91 28 01 	lds	r24, 0x0128
    9a30:	48 2f       	mov	r20, r24
    9a32:	43 0f       	add	r20, r19
    9a34:	51 2d       	mov	r21, r1
    9a36:	51 1d       	adc	r21, r1
    9a38:	fa 01       	movw	r30, r20
    9a3a:	e3 58       	subi	r30, 0x83	; 131
    9a3c:	ff 4b       	sbci	r31, 0xBF	; 191
    9a3e:	84 91       	lpm	r24, Z
    9a40:	99 27       	eor	r25, r25
    9a42:	99 bd       	out	0x29, r25	; 41
    9a44:	88 bd       	out	0x28, r24	; 40
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    9a46:	50 91 4c 01 	lds	r21, 0x014C
    9a4a:	30 91 40 01 	lds	r19, 0x0140
    9a4e:	83 2f       	mov	r24, r19
    9a50:	99 27       	eor	r25, r25
    9a52:	fc 01       	movw	r30, r24
    9a54:	e5 0f       	add	r30, r21
    9a56:	f1 1d       	adc	r31, r1
    9a58:	e3 56       	subi	r30, 0x63	; 99
    9a5a:	f0 4d       	sbci	r31, 0xD0	; 208
    9a5c:	24 91       	lpm	r18, Z
    9a5e:	40 91 37 01 	lds	r20, 0x0137
    9a62:	84 0f       	add	r24, r20
    9a64:	91 1d       	adc	r25, r1
    9a66:	83 54       	subi	r24, 0x43	; 67
    9a68:	92 4d       	sbci	r25, 0xD2	; 210
    9a6a:	fc 01       	movw	r30, r24
    9a6c:	84 91       	lpm	r24, Z
    9a6e:	82 0f       	add	r24, r18
    9a70:	91 2d       	mov	r25, r1
    9a72:	91 1d       	adc	r25, r1
    9a74:	0a 97       	sbiw	r24, 0x0a	; 10
    9a76:	59 f4       	brne	.+22     	; 0x9a8e <__vector_15+0x2b9e>
    9a78:	80 91 0e 01 	lds	r24, 0x010E
    9a7c:	88 23       	and	r24, r24
    9a7e:	39 f4       	brne	.+14     	; 0x9a8e <__vector_15+0x2b9e>
			PWM_BLUE  = PWM_TOP ;
    9a80:	87 e2       	ldi	r24, 0x27	; 39
    9a82:	90 e0       	ldi	r25, 0x00	; 0
    9a84:	90 93 79 00 	sts	0x0079, r25
    9a88:	80 93 78 00 	sts	0x0078, r24
    9a8c:	eb c4       	rjmp	.+2518   	; 0xa464 <__vector_15+0x3574>
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    9a8e:	83 2f       	mov	r24, r19
    9a90:	99 27       	eor	r25, r25
    9a92:	fc 01       	movw	r30, r24
    9a94:	e5 0f       	add	r30, r21
    9a96:	f1 1d       	adc	r31, r1
    9a98:	e3 56       	subi	r30, 0x63	; 99
    9a9a:	f0 4d       	sbci	r31, 0xD0	; 208
    9a9c:	24 91       	lpm	r18, Z
    9a9e:	84 0f       	add	r24, r20
    9aa0:	91 1d       	adc	r25, r1
    9aa2:	83 54       	subi	r24, 0x43	; 67
    9aa4:	92 4d       	sbci	r25, 0xD2	; 210
    9aa6:	fc 01       	movw	r30, r24
    9aa8:	84 91       	lpm	r24, Z
    9aaa:	82 0f       	add	r24, r18
    9aac:	91 2d       	mov	r25, r1
    9aae:	91 1d       	adc	r25, r1
    9ab0:	0c 97       	sbiw	r24, 0x0c	; 12
    9ab2:	59 f4       	brne	.+22     	; 0x9aca <__vector_15+0x2bda>
    9ab4:	80 91 0e 01 	lds	r24, 0x010E
    9ab8:	88 23       	and	r24, r24
    9aba:	39 f0       	breq	.+14     	; 0x9aca <__vector_15+0x2bda>
			PWM_BLUE  = PWM_TOP ;//PWM_BLUE =  pgm_read_byte(&gc_background[2][RED][g_speed3rev+g_position]);
    9abc:	87 e2       	ldi	r24, 0x27	; 39
    9abe:	90 e0       	ldi	r25, 0x00	; 0
    9ac0:	90 93 79 00 	sts	0x0079, r25
    9ac4:	80 93 78 00 	sts	0x0078, r24
    9ac8:	cd c4       	rjmp	.+2458   	; 0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
    9aca:	80 91 28 01 	lds	r24, 0x0128
    9ace:	48 2f       	mov	r20, r24
    9ad0:	43 0f       	add	r20, r19
    9ad2:	51 2d       	mov	r21, r1
    9ad4:	51 1d       	adc	r21, r1
    9ad6:	fa 01       	movw	r30, r20
    9ad8:	e3 58       	subi	r30, 0x83	; 131
    9ada:	ff 4b       	sbci	r31, 0xBF	; 191
    9adc:	84 91       	lpm	r24, Z
    9ade:	99 27       	eor	r25, r25
    9ae0:	90 93 79 00 	sts	0x0079, r25
    9ae4:	80 93 78 00 	sts	0x0078, r24
		
			
		break;	
    9ae8:	bd c4       	rjmp	.+2426   	; 0xa464 <__vector_15+0x3574>
		
		case 29:				// background is changing grey, android loader 1 with black lines
			seconds_hand=0;				
    9aea:	10 92 25 01 	sts	0x0125, r1
			if (g_position % 20 == 0)
    9aee:	8a 2f       	mov	r24, r26
    9af0:	64 e1       	ldi	r22, 0x14	; 20
    9af2:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    9af6:	99 23       	and	r25, r25
    9af8:	59 f4       	brne	.+22     	; 0x9b10 <__vector_15+0x2c20>
			{
				PWM_RED = PWM_TOP;
    9afa:	87 e2       	ldi	r24, 0x27	; 39
    9afc:	90 e0       	ldi	r25, 0x00	; 0
    9afe:	9b bd       	out	0x2b, r25	; 43
    9b00:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = PWM_TOP;
    9b02:	99 bd       	out	0x29, r25	; 41
    9b04:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = PWM_TOP;
    9b06:	90 93 79 00 	sts	0x0079, r25
    9b0a:	80 93 78 00 	sts	0x0078, r24
    9b0e:	aa c4       	rjmp	.+2388   	; 0xa464 <__vector_15+0x3574>
			}
			
			else	
			{	
				if ( (pgm_read_byte(&gm_background[0][RED][g_speed2rev+g_position]) == PWM_TOP ) || ( pgm_read_byte(&gm_background[0][GREEN][g_speed3+g_position]) == PWM_TOP)) 
    9b10:	80 91 21 01 	lds	r24, 0x0121
    9b14:	2a 2f       	mov	r18, r26
    9b16:	33 27       	eor	r19, r19
    9b18:	f9 01       	movw	r30, r18
    9b1a:	e8 0f       	add	r30, r24
    9b1c:	f1 1d       	adc	r31, r1
    9b1e:	e3 58       	subi	r30, 0x83	; 131
    9b20:	fb 4f       	sbci	r31, 0xFB	; 251
    9b22:	84 91       	lpm	r24, Z
    9b24:	87 32       	cpi	r24, 0x27	; 39
    9b26:	51 f0       	breq	.+20     	; 0x9b3c <__vector_15+0x2c4c>
    9b28:	80 91 3b 01 	lds	r24, 0x013B
    9b2c:	f9 01       	movw	r30, r18
    9b2e:	e8 0f       	add	r30, r24
    9b30:	f1 1d       	adc	r31, r1
    9b32:	e3 5a       	subi	r30, 0xA3	; 163
    9b34:	f9 4f       	sbci	r31, 0xF9	; 249
    9b36:	84 91       	lpm	r24, Z
    9b38:	87 32       	cpi	r24, 0x27	; 39
    9b3a:	59 f4       	brne	.+22     	; 0x9b52 <__vector_15+0x2c62>
				{
					PWM_RED = 0x25 ;
    9b3c:	85 e2       	ldi	r24, 0x25	; 37
    9b3e:	90 e0       	ldi	r25, 0x00	; 0
    9b40:	9b bd       	out	0x2b, r25	; 43
    9b42:	8a bd       	out	0x2a, r24	; 42
					PWM_GREEN = 0x25 ;
    9b44:	99 bd       	out	0x29, r25	; 41
    9b46:	88 bd       	out	0x28, r24	; 40
					PWM_BLUE = 0x25 ;
    9b48:	90 93 79 00 	sts	0x0079, r25
    9b4c:	80 93 78 00 	sts	0x0078, r24
    9b50:	89 c4       	rjmp	.+2322   	; 0xa464 <__vector_15+0x3574>
				}
				else
				{
					PWM_RED = pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]) ;
    9b52:	80 91 28 01 	lds	r24, 0x0128
    9b56:	28 0f       	add	r18, r24
    9b58:	31 1d       	adc	r19, r1
    9b5a:	23 58       	subi	r18, 0x83	; 131
    9b5c:	3f 4b       	sbci	r19, 0xBF	; 191
    9b5e:	f9 01       	movw	r30, r18
    9b60:	84 91       	lpm	r24, Z
    9b62:	99 27       	eor	r25, r25
    9b64:	9b bd       	out	0x2b, r25	; 43
    9b66:	8a bd       	out	0x2a, r24	; 42
					PWM_GREEN =  pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]); 
    9b68:	99 bd       	out	0x29, r25	; 41
    9b6a:	88 bd       	out	0x28, r24	; 40
					PWM_BLUE = pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]) ;
    9b6c:	90 93 79 00 	sts	0x0079, r25
    9b70:	80 93 78 00 	sts	0x0078, r24
				}

			}
			
		break;
    9b74:	77 c4       	rjmp	.+2286   	; 0xa464 <__vector_15+0x3574>
			
		case 28:				// background is changing grey, android loader 1
			seconds_hand=0;				
    9b76:	10 92 25 01 	sts	0x0125, r1
			if ( (pgm_read_byte(&gm_background[0][RED][g_speed2rev+g_position]) == PWM_TOP ) || (pgm_read_byte(&gm_background[0][GREEN][g_speed3+g_position]) == PWM_TOP)) 
    9b7a:	80 91 21 01 	lds	r24, 0x0121
    9b7e:	2a 2f       	mov	r18, r26
    9b80:	33 27       	eor	r19, r19
    9b82:	f9 01       	movw	r30, r18
    9b84:	e8 0f       	add	r30, r24
    9b86:	f1 1d       	adc	r31, r1
    9b88:	e3 58       	subi	r30, 0x83	; 131
    9b8a:	fb 4f       	sbci	r31, 0xFB	; 251
    9b8c:	84 91       	lpm	r24, Z
    9b8e:	87 32       	cpi	r24, 0x27	; 39
    9b90:	51 f0       	breq	.+20     	; 0x9ba6 <__vector_15+0x2cb6>
    9b92:	80 91 3b 01 	lds	r24, 0x013B
    9b96:	f9 01       	movw	r30, r18
    9b98:	e8 0f       	add	r30, r24
    9b9a:	f1 1d       	adc	r31, r1
    9b9c:	e3 5a       	subi	r30, 0xA3	; 163
    9b9e:	f9 4f       	sbci	r31, 0xF9	; 249
    9ba0:	84 91       	lpm	r24, Z
    9ba2:	87 32       	cpi	r24, 0x27	; 39
    9ba4:	59 f4       	brne	.+22     	; 0x9bbc <__vector_15+0x2ccc>
			{
				PWM_RED = 0x25 ;
    9ba6:	85 e2       	ldi	r24, 0x25	; 37
    9ba8:	90 e0       	ldi	r25, 0x00	; 0
    9baa:	9b bd       	out	0x2b, r25	; 43
    9bac:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = 0x25 ;
    9bae:	99 bd       	out	0x29, r25	; 41
    9bb0:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = 0x25 ;
    9bb2:	90 93 79 00 	sts	0x0079, r25
    9bb6:	80 93 78 00 	sts	0x0078, r24
    9bba:	54 c4       	rjmp	.+2216   	; 0xa464 <__vector_15+0x3574>
			}
			else
			{
				PWM_RED = pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]) ;
    9bbc:	80 91 28 01 	lds	r24, 0x0128
    9bc0:	28 0f       	add	r18, r24
    9bc2:	31 1d       	adc	r19, r1
    9bc4:	23 58       	subi	r18, 0x83	; 131
    9bc6:	3f 4b       	sbci	r19, 0xBF	; 191
    9bc8:	f9 01       	movw	r30, r18
    9bca:	84 91       	lpm	r24, Z
    9bcc:	99 27       	eor	r25, r25
    9bce:	9b bd       	out	0x2b, r25	; 43
    9bd0:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN =  pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]); 
    9bd2:	99 bd       	out	0x29, r25	; 41
    9bd4:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]) ;
    9bd6:	90 93 79 00 	sts	0x0079, r25
    9bda:	80 93 78 00 	sts	0x0078, r24
			}
			
		break;
    9bde:	42 c4       	rjmp	.+2180   	; 0xa464 <__vector_15+0x3574>
		
		case 27:				// background is changing LSD, or kaleidoscope mode with pacyfic
			seconds_hand=0;
    9be0:	10 92 25 01 	sts	0x0125, r1
			if (pgm_read_byte(&gc_background[0][RED][g_speed3+g_position]) + pgm_read_byte(&gc_background[4][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[1][RED][g_speed7+g_position]) < PWM_TOP)
    9be4:	b0 91 3b 01 	lds	r27, 0x013B
    9be8:	4a 2f       	mov	r20, r26
    9bea:	55 27       	eor	r21, r21
    9bec:	fa 01       	movw	r30, r20
    9bee:	eb 0f       	add	r30, r27
    9bf0:	f1 1d       	adc	r31, r1
    9bf2:	e3 58       	subi	r30, 0x83	; 131
    9bf4:	fe 4c       	sbci	r31, 0xCE	; 206
    9bf6:	34 91       	lpm	r19, Z
    9bf8:	70 91 2c 01 	lds	r23, 0x012C
    9bfc:	ca 01       	movw	r24, r20
    9bfe:	87 0f       	add	r24, r23
    9c00:	91 1d       	adc	r25, r1
    9c02:	fc 01       	movw	r30, r24
    9c04:	e3 52       	subi	r30, 0x23	; 35
    9c06:	f6 4b       	sbci	r31, 0xB6	; 182
    9c08:	24 91       	lpm	r18, Z
    9c0a:	23 0f       	add	r18, r19
    9c0c:	31 2d       	mov	r19, r1
    9c0e:	31 1d       	adc	r19, r1
    9c10:	83 5c       	subi	r24, 0xC3	; 195
    9c12:	97 4f       	sbci	r25, 0xF7	; 247
    9c14:	fc 01       	movw	r30, r24
    9c16:	64 91       	lpm	r22, Z
    9c18:	c9 01       	movw	r24, r18
    9c1a:	86 0f       	add	r24, r22
    9c1c:	91 1d       	adc	r25, r1
    9c1e:	87 97       	sbiw	r24, 0x27	; 39
    9c20:	1c f4       	brge	.+6      	; 0x9c28 <__vector_15+0x2d38>
			PWM_RED = pgm_read_byte(&gc_background[0][RED][g_speed3+g_position]) + pgm_read_byte(&gc_background[4][GREEN][g_speed7+g_position]);
    9c22:	3b bd       	out	0x2b, r19	; 43
    9c24:	2a bd       	out	0x2a, r18	; 42
    9c26:	13 c0       	rjmp	.+38     	; 0x9c4e <__vector_15+0x2d5e>
			//pacific sign
			else if (pgm_read_byte(&gm_background[1][RED][g_speed7+g_position]) == 0x26)
    9c28:	66 32       	cpi	r22, 0x26	; 38
    9c2a:	19 f4       	brne	.+6      	; 0x9c32 <__vector_15+0x2d42>
			PWM_RED = 0x22;
    9c2c:	82 e2       	ldi	r24, 0x22	; 34
    9c2e:	90 e0       	ldi	r25, 0x00	; 0
    9c30:	0c c0       	rjmp	.+24     	; 0x9c4a <__vector_15+0x2d5a>
			else
			PWM_RED = PWM_TOP - pgm_read_byte(&gc_background[0][RED][g_speed7rev+g_position]);
    9c32:	80 91 4c 01 	lds	r24, 0x014C
    9c36:	48 0f       	add	r20, r24
    9c38:	51 1d       	adc	r21, r1
    9c3a:	43 58       	subi	r20, 0x83	; 131
    9c3c:	5e 4c       	sbci	r21, 0xCE	; 206
    9c3e:	fa 01       	movw	r30, r20
    9c40:	24 91       	lpm	r18, Z
    9c42:	87 e2       	ldi	r24, 0x27	; 39
    9c44:	90 e0       	ldi	r25, 0x00	; 0
    9c46:	82 1b       	sub	r24, r18
    9c48:	91 09       	sbc	r25, r1
    9c4a:	9b bd       	out	0x2b, r25	; 43
    9c4c:	8a bd       	out	0x2a, r24	; 42
				
			if (pgm_read_byte(&gc_background[0][GREEN][g_speed3+g_position]) + pgm_read_byte(&gc_background[4][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[1][RED][g_speed7+g_position]) < PWM_TOP)
    9c4e:	4a 2f       	mov	r20, r26
    9c50:	55 27       	eor	r21, r21
    9c52:	fa 01       	movw	r30, r20
    9c54:	eb 0f       	add	r30, r27
    9c56:	f1 1d       	adc	r31, r1
    9c58:	e3 5a       	subi	r30, 0xA3	; 163
    9c5a:	fc 4c       	sbci	r31, 0xCC	; 204
    9c5c:	34 91       	lpm	r19, Z
    9c5e:	ca 01       	movw	r24, r20
    9c60:	87 0f       	add	r24, r23
    9c62:	91 1d       	adc	r25, r1
    9c64:	fc 01       	movw	r30, r24
    9c66:	e3 52       	subi	r30, 0x23	; 35
    9c68:	f6 4b       	sbci	r31, 0xB6	; 182
    9c6a:	24 91       	lpm	r18, Z
    9c6c:	23 0f       	add	r18, r19
    9c6e:	31 2d       	mov	r19, r1
    9c70:	31 1d       	adc	r19, r1
    9c72:	83 5c       	subi	r24, 0xC3	; 195
    9c74:	97 4f       	sbci	r25, 0xF7	; 247
    9c76:	fc 01       	movw	r30, r24
    9c78:	64 91       	lpm	r22, Z
    9c7a:	c9 01       	movw	r24, r18
    9c7c:	86 0f       	add	r24, r22
    9c7e:	91 1d       	adc	r25, r1
    9c80:	87 97       	sbiw	r24, 0x27	; 39
    9c82:	1c f4       	brge	.+6      	; 0x9c8a <__vector_15+0x2d9a>
			PWM_GREEN = pgm_read_byte(&gc_background[0][GREEN][g_speed3+g_position]) + pgm_read_byte(&gc_background[4][GREEN][g_speed7+g_position]);
    9c84:	39 bd       	out	0x29, r19	; 41
    9c86:	28 bd       	out	0x28, r18	; 40
    9c88:	13 c0       	rjmp	.+38     	; 0x9cb0 <__vector_15+0x2dc0>
			//pacific sign
			else if (pgm_read_byte(&gm_background[1][RED][g_speed7+g_position]) == 0x26)
    9c8a:	66 32       	cpi	r22, 0x26	; 38
    9c8c:	19 f4       	brne	.+6      	; 0x9c94 <__vector_15+0x2da4>
			PWM_GREEN = 0x22;
    9c8e:	82 e2       	ldi	r24, 0x22	; 34
    9c90:	90 e0       	ldi	r25, 0x00	; 0
    9c92:	0c c0       	rjmp	.+24     	; 0x9cac <__vector_15+0x2dbc>
			else
			PWM_GREEN = PWM_TOP - pgm_read_byte(&gc_background[0][GREEN][g_speed7rev+g_position]);
    9c94:	80 91 4c 01 	lds	r24, 0x014C
    9c98:	48 0f       	add	r20, r24
    9c9a:	51 1d       	adc	r21, r1
    9c9c:	43 5a       	subi	r20, 0xA3	; 163
    9c9e:	5c 4c       	sbci	r21, 0xCC	; 204
    9ca0:	fa 01       	movw	r30, r20
    9ca2:	24 91       	lpm	r18, Z
    9ca4:	87 e2       	ldi	r24, 0x27	; 39
    9ca6:	90 e0       	ldi	r25, 0x00	; 0
    9ca8:	82 1b       	sub	r24, r18
    9caa:	91 09       	sbc	r25, r1
    9cac:	99 bd       	out	0x29, r25	; 41
    9cae:	88 bd       	out	0x28, r24	; 40
				
			if (pgm_read_byte(&gc_background[0][BLUE][g_speed3+g_position]) + pgm_read_byte(&gc_background[4][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[1][RED][g_speed7+g_position]) < PWM_TOP)
    9cb0:	4a 2f       	mov	r20, r26
    9cb2:	55 27       	eor	r21, r21
    9cb4:	fa 01       	movw	r30, r20
    9cb6:	eb 0f       	add	r30, r27
    9cb8:	f1 1d       	adc	r31, r1
    9cba:	e3 5c       	subi	r30, 0xC3	; 195
    9cbc:	fa 4c       	sbci	r31, 0xCA	; 202
    9cbe:	34 91       	lpm	r19, Z
    9cc0:	ca 01       	movw	r24, r20
    9cc2:	87 0f       	add	r24, r23
    9cc4:	91 1d       	adc	r25, r1
    9cc6:	fc 01       	movw	r30, r24
    9cc8:	e3 52       	subi	r30, 0x23	; 35
    9cca:	f6 4b       	sbci	r31, 0xB6	; 182
    9ccc:	24 91       	lpm	r18, Z
    9cce:	23 0f       	add	r18, r19
    9cd0:	31 2d       	mov	r19, r1
    9cd2:	31 1d       	adc	r19, r1
    9cd4:	83 5c       	subi	r24, 0xC3	; 195
    9cd6:	97 4f       	sbci	r25, 0xF7	; 247
    9cd8:	fc 01       	movw	r30, r24
    9cda:	64 91       	lpm	r22, Z
    9cdc:	c9 01       	movw	r24, r18
    9cde:	86 0f       	add	r24, r22
    9ce0:	91 1d       	adc	r25, r1
    9ce2:	87 97       	sbiw	r24, 0x27	; 39
    9ce4:	2c f4       	brge	.+10     	; 0x9cf0 <__vector_15+0x2e00>
			PWM_BLUE = pgm_read_byte(&gc_background[0][BLUE][g_speed3+g_position]) + pgm_read_byte(&gc_background[4][GREEN][g_speed7+g_position]);
    9ce6:	30 93 79 00 	sts	0x0079, r19
    9cea:	20 93 78 00 	sts	0x0078, r18
    9cee:	ba c3       	rjmp	.+1908   	; 0xa464 <__vector_15+0x3574>
			//pacific sign
			else if (pgm_read_byte(&gm_background[1][RED][g_speed7+g_position]) == 0x26)
    9cf0:	66 32       	cpi	r22, 0x26	; 38
    9cf2:	39 f4       	brne	.+14     	; 0x9d02 <__vector_15+0x2e12>
			PWM_BLUE = 0x22;
    9cf4:	82 e2       	ldi	r24, 0x22	; 34
    9cf6:	90 e0       	ldi	r25, 0x00	; 0
    9cf8:	90 93 79 00 	sts	0x0079, r25
    9cfc:	80 93 78 00 	sts	0x0078, r24
    9d00:	b1 c3       	rjmp	.+1890   	; 0xa464 <__vector_15+0x3574>
			else
			PWM_BLUE = PWM_TOP - pgm_read_byte(&gc_background[0][BLUE][g_speed7rev+g_position]);
    9d02:	80 91 4c 01 	lds	r24, 0x014C
    9d06:	48 0f       	add	r20, r24
    9d08:	51 1d       	adc	r21, r1
    9d0a:	43 5c       	subi	r20, 0xC3	; 195
    9d0c:	5a 4c       	sbci	r21, 0xCA	; 202
    9d0e:	fa 01       	movw	r30, r20
    9d10:	24 91       	lpm	r18, Z
    9d12:	87 e2       	ldi	r24, 0x27	; 39
    9d14:	90 e0       	ldi	r25, 0x00	; 0
    9d16:	82 1b       	sub	r24, r18
    9d18:	91 09       	sbc	r25, r1
    9d1a:	90 93 79 00 	sts	0x0079, r25
    9d1e:	80 93 78 00 	sts	0x0078, r24
			break;
    9d22:	a0 c3       	rjmp	.+1856   	; 0xa464 <__vector_15+0x3574>
			
		case 26:				// background is changing fast, with black lines grey 7x2 light
			seconds_hand=1;			
    9d24:	81 e0       	ldi	r24, 0x01	; 1
    9d26:	80 93 25 01 	sts	0x0125, r24
			if (g_position % 20 == 0)
    9d2a:	8a 2f       	mov	r24, r26
    9d2c:	64 e1       	ldi	r22, 0x14	; 20
    9d2e:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    9d32:	99 23       	and	r25, r25
    9d34:	59 f4       	brne	.+22     	; 0x9d4c <__vector_15+0x2e5c>
			{
				PWM_RED = PWM_TOP;
    9d36:	87 e2       	ldi	r24, 0x27	; 39
    9d38:	90 e0       	ldi	r25, 0x00	; 0
    9d3a:	9b bd       	out	0x2b, r25	; 43
    9d3c:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = PWM_TOP;
    9d3e:	99 bd       	out	0x29, r25	; 41
    9d40:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = PWM_TOP;
    9d42:	90 93 79 00 	sts	0x0079, r25
    9d46:	80 93 78 00 	sts	0x0078, r24
    9d4a:	8c c3       	rjmp	.+1816   	; 0xa464 <__vector_15+0x3574>
			}
			else
			{
			PWM_RED = pgm_read_byte(&gc_background[4][RED][g_speed2+g_position]);
    9d4c:	80 91 13 01 	lds	r24, 0x0113
    9d50:	28 2f       	mov	r18, r24
    9d52:	2a 0f       	add	r18, r26
    9d54:	31 2d       	mov	r19, r1
    9d56:	31 1d       	adc	r19, r1
    9d58:	f9 01       	movw	r30, r18
    9d5a:	e3 50       	subi	r30, 0x03	; 3
    9d5c:	f8 4b       	sbci	r31, 0xB8	; 184
    9d5e:	84 91       	lpm	r24, Z
    9d60:	99 27       	eor	r25, r25
    9d62:	9b bd       	out	0x2b, r25	; 43
    9d64:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[4][RED][g_speed2+g_position]);
    9d66:	99 bd       	out	0x29, r25	; 41
    9d68:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[4][RED][g_speed2+g_position]);
    9d6a:	90 93 79 00 	sts	0x0079, r25
    9d6e:	80 93 78 00 	sts	0x0078, r24
			}	
			
		break;
    9d72:	78 c3       	rjmp	.+1776   	; 0xa464 <__vector_15+0x3574>
				
		case 25:				// background is changing fast, grey 7x2 light
			seconds_hand=1;				
    9d74:	81 e0       	ldi	r24, 0x01	; 1
    9d76:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&gc_background[4][RED][g_speed2+g_position]);
    9d7a:	80 91 13 01 	lds	r24, 0x0113
    9d7e:	48 2f       	mov	r20, r24
    9d80:	4a 0f       	add	r20, r26
    9d82:	51 2d       	mov	r21, r1
    9d84:	51 1d       	adc	r21, r1
    9d86:	fa 01       	movw	r30, r20
    9d88:	e3 50       	subi	r30, 0x03	; 3
    9d8a:	f8 4b       	sbci	r31, 0xB8	; 184
    9d8c:	84 91       	lpm	r24, Z
    9d8e:	99 27       	eor	r25, r25
    9d90:	9b bd       	out	0x2b, r25	; 43
    9d92:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[4][RED][g_speed2+g_position]);
    9d94:	99 bd       	out	0x29, r25	; 41
    9d96:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[4][RED][g_speed2+g_position]);
    9d98:	90 93 79 00 	sts	0x0079, r25
    9d9c:	80 93 78 00 	sts	0x0078, r24
		break;
    9da0:	61 c3       	rjmp	.+1730   	; 0xa464 <__vector_15+0x3574>
		
		case 24:				// background is changing fast, with black lines grey 5x2 light
			seconds_hand=1;			
    9da2:	81 e0       	ldi	r24, 0x01	; 1
    9da4:	80 93 25 01 	sts	0x0125, r24
			if (g_position % 20 == 0)
    9da8:	8a 2f       	mov	r24, r26
    9daa:	64 e1       	ldi	r22, 0x14	; 20
    9dac:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    9db0:	99 23       	and	r25, r25
    9db2:	59 f4       	brne	.+22     	; 0x9dca <__vector_15+0x2eda>
			{
				PWM_RED = PWM_TOP;
    9db4:	87 e2       	ldi	r24, 0x27	; 39
    9db6:	90 e0       	ldi	r25, 0x00	; 0
    9db8:	9b bd       	out	0x2b, r25	; 43
    9dba:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = PWM_TOP;
    9dbc:	99 bd       	out	0x29, r25	; 41
    9dbe:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = PWM_TOP;
    9dc0:	90 93 79 00 	sts	0x0079, r25
    9dc4:	80 93 78 00 	sts	0x0078, r24
    9dc8:	4d c3       	rjmp	.+1690   	; 0xa464 <__vector_15+0x3574>
			}
			else
			{
			PWM_RED = pgm_read_byte(&gc_background[3][RED][g_speed2+g_position]);
    9dca:	80 91 13 01 	lds	r24, 0x0113
    9dce:	68 2f       	mov	r22, r24
    9dd0:	6a 0f       	add	r22, r26
    9dd2:	71 2d       	mov	r23, r1
    9dd4:	71 1d       	adc	r23, r1
    9dd6:	fb 01       	movw	r30, r22
    9dd8:	e3 5a       	subi	r30, 0xA3	; 163
    9dda:	fd 4b       	sbci	r31, 0xBD	; 189
    9ddc:	84 91       	lpm	r24, Z
    9dde:	99 27       	eor	r25, r25
    9de0:	9b bd       	out	0x2b, r25	; 43
    9de2:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[3][RED][g_speed2+g_position]);
    9de4:	99 bd       	out	0x29, r25	; 41
    9de6:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[3][RED][g_speed2+g_position]);
    9de8:	90 93 79 00 	sts	0x0079, r25
    9dec:	80 93 78 00 	sts	0x0078, r24
			}
				
		break;
    9df0:	39 c3       	rjmp	.+1650   	; 0xa464 <__vector_15+0x3574>
				
		case 23:				// background is changing fast, grey 5x2 light
			seconds_hand=1;				
    9df2:	81 e0       	ldi	r24, 0x01	; 1
    9df4:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&gc_background[3][RED][g_speed2+g_position]);
    9df8:	80 91 13 01 	lds	r24, 0x0113
    9dfc:	28 2f       	mov	r18, r24
    9dfe:	2a 0f       	add	r18, r26
    9e00:	31 2d       	mov	r19, r1
    9e02:	31 1d       	adc	r19, r1
    9e04:	f9 01       	movw	r30, r18
    9e06:	e3 5a       	subi	r30, 0xA3	; 163
    9e08:	fd 4b       	sbci	r31, 0xBD	; 189
    9e0a:	84 91       	lpm	r24, Z
    9e0c:	99 27       	eor	r25, r25
    9e0e:	9b bd       	out	0x2b, r25	; 43
    9e10:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[3][RED][g_speed2+g_position]);
    9e12:	99 bd       	out	0x29, r25	; 41
    9e14:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[3][RED][g_speed2+g_position]);
    9e16:	90 93 79 00 	sts	0x0079, r25
    9e1a:	80 93 78 00 	sts	0x0078, r24
		break;
    9e1e:	22 c3       	rjmp	.+1604   	; 0xa464 <__vector_15+0x3574>
	
		case 22:				// background is changing fast, with black lines grey x2 light
			seconds_hand=1;			
    9e20:	81 e0       	ldi	r24, 0x01	; 1
    9e22:	80 93 25 01 	sts	0x0125, r24
			if (g_position % 20 == 0)
    9e26:	8a 2f       	mov	r24, r26
    9e28:	64 e1       	ldi	r22, 0x14	; 20
    9e2a:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    9e2e:	99 23       	and	r25, r25
    9e30:	59 f4       	brne	.+22     	; 0x9e48 <__vector_15+0x2f58>
			{
				PWM_RED = PWM_TOP;
    9e32:	87 e2       	ldi	r24, 0x27	; 39
    9e34:	90 e0       	ldi	r25, 0x00	; 0
    9e36:	9b bd       	out	0x2b, r25	; 43
    9e38:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = PWM_TOP;
    9e3a:	99 bd       	out	0x29, r25	; 41
    9e3c:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = PWM_TOP;
    9e3e:	90 93 79 00 	sts	0x0079, r25
    9e42:	80 93 78 00 	sts	0x0078, r24
    9e46:	0e c3       	rjmp	.+1564   	; 0xa464 <__vector_15+0x3574>
			}
			else
			{
			PWM_RED = pgm_read_byte(&gc_background[2][BLUE][g_speed2+g_position]);
    9e48:	80 91 13 01 	lds	r24, 0x0113
    9e4c:	48 2f       	mov	r20, r24
    9e4e:	4a 0f       	add	r20, r26
    9e50:	51 2d       	mov	r21, r1
    9e52:	51 1d       	adc	r21, r1
    9e54:	fa 01       	movw	r30, r20
    9e56:	e3 58       	subi	r30, 0x83	; 131
    9e58:	ff 4b       	sbci	r31, 0xBF	; 191
    9e5a:	84 91       	lpm	r24, Z
    9e5c:	99 27       	eor	r25, r25
    9e5e:	9b bd       	out	0x2b, r25	; 43
    9e60:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[2][BLUE][g_speed2+g_position]);
    9e62:	99 bd       	out	0x29, r25	; 41
    9e64:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[2][BLUE][g_speed2+g_position]);
    9e66:	90 93 79 00 	sts	0x0079, r25
    9e6a:	80 93 78 00 	sts	0x0078, r24
			}	
			
		break;
    9e6e:	fa c2       	rjmp	.+1524   	; 0xa464 <__vector_15+0x3574>
				
		case 21:				// background is changing fast, grey x2 light
			seconds_hand=1;				
    9e70:	81 e0       	ldi	r24, 0x01	; 1
    9e72:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&gc_background[2][BLUE][g_speed2+g_position]);
    9e76:	80 91 13 01 	lds	r24, 0x0113
    9e7a:	68 2f       	mov	r22, r24
    9e7c:	6a 0f       	add	r22, r26
    9e7e:	71 2d       	mov	r23, r1
    9e80:	71 1d       	adc	r23, r1
    9e82:	fb 01       	movw	r30, r22
    9e84:	e3 58       	subi	r30, 0x83	; 131
    9e86:	ff 4b       	sbci	r31, 0xBF	; 191
    9e88:	84 91       	lpm	r24, Z
    9e8a:	99 27       	eor	r25, r25
    9e8c:	9b bd       	out	0x2b, r25	; 43
    9e8e:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[2][BLUE][g_speed2+g_position]);
    9e90:	99 bd       	out	0x29, r25	; 41
    9e92:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[2][BLUE][g_speed2+g_position]);
    9e94:	90 93 79 00 	sts	0x0079, r25
    9e98:	80 93 78 00 	sts	0x0078, r24
		break;
    9e9c:	e3 c2       	rjmp	.+1478   	; 0xa464 <__vector_15+0x3574>
			
		case 20:				// background is changing slow, with black lines grey 7x2 light
			seconds_hand=1;				
    9e9e:	81 e0       	ldi	r24, 0x01	; 1
    9ea0:	80 93 25 01 	sts	0x0125, r24
			if (g_position % 20 == 0)
    9ea4:	8a 2f       	mov	r24, r26
    9ea6:	64 e1       	ldi	r22, 0x14	; 20
    9ea8:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    9eac:	99 23       	and	r25, r25
    9eae:	59 f4       	brne	.+22     	; 0x9ec6 <__vector_15+0x2fd6>
			{
				PWM_RED = PWM_TOP;
    9eb0:	87 e2       	ldi	r24, 0x27	; 39
    9eb2:	90 e0       	ldi	r25, 0x00	; 0
    9eb4:	9b bd       	out	0x2b, r25	; 43
    9eb6:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = PWM_TOP;
    9eb8:	99 bd       	out	0x29, r25	; 41
    9eba:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = PWM_TOP;
    9ebc:	90 93 79 00 	sts	0x0079, r25
    9ec0:	80 93 78 00 	sts	0x0078, r24
    9ec4:	cf c2       	rjmp	.+1438   	; 0xa464 <__vector_15+0x3574>
			}
			else
			{	
			PWM_RED = pgm_read_byte(&gc_background[4][RED][g_speed12+g_position]);
    9ec6:	80 91 28 01 	lds	r24, 0x0128
    9eca:	28 2f       	mov	r18, r24
    9ecc:	2a 0f       	add	r18, r26
    9ece:	31 2d       	mov	r19, r1
    9ed0:	31 1d       	adc	r19, r1
    9ed2:	f9 01       	movw	r30, r18
    9ed4:	e3 50       	subi	r30, 0x03	; 3
    9ed6:	f8 4b       	sbci	r31, 0xB8	; 184
    9ed8:	84 91       	lpm	r24, Z
    9eda:	99 27       	eor	r25, r25
    9edc:	9b bd       	out	0x2b, r25	; 43
    9ede:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[4][RED][g_speed12+g_position]);
    9ee0:	99 bd       	out	0x29, r25	; 41
    9ee2:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[4][RED][g_speed12+g_position]);
    9ee4:	90 93 79 00 	sts	0x0079, r25
    9ee8:	80 93 78 00 	sts	0x0078, r24
			}	
			
		break;
    9eec:	bb c2       	rjmp	.+1398   	; 0xa464 <__vector_15+0x3574>
			
		case 19:				// background is changing slow, grey 7 x2 lihgt
			seconds_hand=1;				
    9eee:	81 e0       	ldi	r24, 0x01	; 1
    9ef0:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&gc_background[4][RED][g_speed12+g_position]);
    9ef4:	80 91 28 01 	lds	r24, 0x0128
    9ef8:	48 2f       	mov	r20, r24
    9efa:	4a 0f       	add	r20, r26
    9efc:	51 2d       	mov	r21, r1
    9efe:	51 1d       	adc	r21, r1
    9f00:	fa 01       	movw	r30, r20
    9f02:	e3 50       	subi	r30, 0x03	; 3
    9f04:	f8 4b       	sbci	r31, 0xB8	; 184
    9f06:	84 91       	lpm	r24, Z
    9f08:	99 27       	eor	r25, r25
    9f0a:	9b bd       	out	0x2b, r25	; 43
    9f0c:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[4][RED][g_speed12+g_position]);
    9f0e:	99 bd       	out	0x29, r25	; 41
    9f10:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[4][RED][g_speed12+g_position]);
    9f12:	90 93 79 00 	sts	0x0079, r25
    9f16:	80 93 78 00 	sts	0x0078, r24
		break;
    9f1a:	a4 c2       	rjmp	.+1352   	; 0xa464 <__vector_15+0x3574>
				
	
			
		case 18:				// background is changing slow, with black lines grey 5x2 light
			seconds_hand=1;				
    9f1c:	81 e0       	ldi	r24, 0x01	; 1
    9f1e:	80 93 25 01 	sts	0x0125, r24
			if (g_position % 20 == 0)
    9f22:	8a 2f       	mov	r24, r26
    9f24:	64 e1       	ldi	r22, 0x14	; 20
    9f26:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    9f2a:	99 23       	and	r25, r25
    9f2c:	59 f4       	brne	.+22     	; 0x9f44 <__vector_15+0x3054>
			{
				PWM_RED = PWM_TOP;
    9f2e:	87 e2       	ldi	r24, 0x27	; 39
    9f30:	90 e0       	ldi	r25, 0x00	; 0
    9f32:	9b bd       	out	0x2b, r25	; 43
    9f34:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = PWM_TOP;
    9f36:	99 bd       	out	0x29, r25	; 41
    9f38:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = PWM_TOP;
    9f3a:	90 93 79 00 	sts	0x0079, r25
    9f3e:	80 93 78 00 	sts	0x0078, r24
    9f42:	90 c2       	rjmp	.+1312   	; 0xa464 <__vector_15+0x3574>
			}
			else
			{
			PWM_RED = pgm_read_byte(&gc_background[3][RED][g_speed12+g_position]);
    9f44:	80 91 28 01 	lds	r24, 0x0128
    9f48:	68 2f       	mov	r22, r24
    9f4a:	6a 0f       	add	r22, r26
    9f4c:	71 2d       	mov	r23, r1
    9f4e:	71 1d       	adc	r23, r1
    9f50:	fb 01       	movw	r30, r22
    9f52:	e3 5a       	subi	r30, 0xA3	; 163
    9f54:	fd 4b       	sbci	r31, 0xBD	; 189
    9f56:	84 91       	lpm	r24, Z
    9f58:	99 27       	eor	r25, r25
    9f5a:	9b bd       	out	0x2b, r25	; 43
    9f5c:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[3][RED][g_speed12+g_position]);
    9f5e:	99 bd       	out	0x29, r25	; 41
    9f60:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[3][RED][g_speed12+g_position]);
    9f62:	90 93 79 00 	sts	0x0079, r25
    9f66:	80 93 78 00 	sts	0x0078, r24
			}	
			
		break;
    9f6a:	7c c2       	rjmp	.+1272   	; 0xa464 <__vector_15+0x3574>
			
		case 17:				// background is changing slow, grey 5 x2 light
			seconds_hand=1;				
    9f6c:	81 e0       	ldi	r24, 0x01	; 1
    9f6e:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&gc_background[3][RED][g_speed12+g_position]);
    9f72:	80 91 28 01 	lds	r24, 0x0128
    9f76:	28 2f       	mov	r18, r24
    9f78:	2a 0f       	add	r18, r26
    9f7a:	31 2d       	mov	r19, r1
    9f7c:	31 1d       	adc	r19, r1
    9f7e:	f9 01       	movw	r30, r18
    9f80:	e3 5a       	subi	r30, 0xA3	; 163
    9f82:	fd 4b       	sbci	r31, 0xBD	; 189
    9f84:	84 91       	lpm	r24, Z
    9f86:	99 27       	eor	r25, r25
    9f88:	9b bd       	out	0x2b, r25	; 43
    9f8a:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[3][RED][g_speed12+g_position]);
    9f8c:	99 bd       	out	0x29, r25	; 41
    9f8e:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[3][RED][g_speed12+g_position]);
    9f90:	90 93 79 00 	sts	0x0079, r25
    9f94:	80 93 78 00 	sts	0x0078, r24
		break;
    9f98:	65 c2       	rjmp	.+1226   	; 0xa464 <__vector_15+0x3574>
				
		case 16:				// background is changing slow, with black lines grey x2 light
			seconds_hand=1;			
    9f9a:	81 e0       	ldi	r24, 0x01	; 1
    9f9c:	80 93 25 01 	sts	0x0125, r24
			if (g_position % 20 == 0)
    9fa0:	8a 2f       	mov	r24, r26
    9fa2:	64 e1       	ldi	r22, 0x14	; 20
    9fa4:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    9fa8:	99 23       	and	r25, r25
    9faa:	59 f4       	brne	.+22     	; 0x9fc2 <__vector_15+0x30d2>
			{
				PWM_RED = PWM_TOP;
    9fac:	87 e2       	ldi	r24, 0x27	; 39
    9fae:	90 e0       	ldi	r25, 0x00	; 0
    9fb0:	9b bd       	out	0x2b, r25	; 43
    9fb2:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = PWM_TOP;
    9fb4:	99 bd       	out	0x29, r25	; 41
    9fb6:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = PWM_TOP;
    9fb8:	90 93 79 00 	sts	0x0079, r25
    9fbc:	80 93 78 00 	sts	0x0078, r24
    9fc0:	51 c2       	rjmp	.+1186   	; 0xa464 <__vector_15+0x3574>
			}	
			else
			{
			PWM_RED = pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
    9fc2:	80 91 28 01 	lds	r24, 0x0128
    9fc6:	48 2f       	mov	r20, r24
    9fc8:	4a 0f       	add	r20, r26
    9fca:	51 2d       	mov	r21, r1
    9fcc:	51 1d       	adc	r21, r1
    9fce:	fa 01       	movw	r30, r20
    9fd0:	e3 58       	subi	r30, 0x83	; 131
    9fd2:	ff 4b       	sbci	r31, 0xBF	; 191
    9fd4:	84 91       	lpm	r24, Z
    9fd6:	99 27       	eor	r25, r25
    9fd8:	9b bd       	out	0x2b, r25	; 43
    9fda:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
    9fdc:	99 bd       	out	0x29, r25	; 41
    9fde:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
    9fe0:	90 93 79 00 	sts	0x0079, r25
    9fe4:	80 93 78 00 	sts	0x0078, r24
			}	
			
		break;
    9fe8:	3d c2       	rjmp	.+1146   	; 0xa464 <__vector_15+0x3574>
			
		case 15:				// background is changing slow, grey x2 light
			seconds_hand=1;				
    9fea:	81 e0       	ldi	r24, 0x01	; 1
    9fec:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
    9ff0:	80 91 28 01 	lds	r24, 0x0128
    9ff4:	68 2f       	mov	r22, r24
    9ff6:	6a 0f       	add	r22, r26
    9ff8:	71 2d       	mov	r23, r1
    9ffa:	71 1d       	adc	r23, r1
    9ffc:	fb 01       	movw	r30, r22
    9ffe:	e3 58       	subi	r30, 0x83	; 131
    a000:	ff 4b       	sbci	r31, 0xBF	; 191
    a002:	84 91       	lpm	r24, Z
    a004:	99 27       	eor	r25, r25
    a006:	9b bd       	out	0x2b, r25	; 43
    a008:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
    a00a:	99 bd       	out	0x29, r25	; 41
    a00c:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
    a00e:	90 93 79 00 	sts	0x0079, r25
    a012:	80 93 78 00 	sts	0x0078, r24
		break;
    a016:	26 c2       	rjmp	.+1100   	; 0xa464 <__vector_15+0x3574>
		
		case 14:				// background is changing fast, with black lines africa
			seconds_hand=1;				
    a018:	81 e0       	ldi	r24, 0x01	; 1
    a01a:	80 93 25 01 	sts	0x0125, r24
			if (g_position % 20 == 0)
    a01e:	8a 2f       	mov	r24, r26
    a020:	64 e1       	ldi	r22, 0x14	; 20
    a022:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    a026:	99 23       	and	r25, r25
    a028:	59 f4       	brne	.+22     	; 0xa040 <__vector_15+0x3150>
			{
				PWM_RED = PWM_TOP;
    a02a:	87 e2       	ldi	r24, 0x27	; 39
    a02c:	90 e0       	ldi	r25, 0x00	; 0
    a02e:	9b bd       	out	0x2b, r25	; 43
    a030:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = PWM_TOP;
    a032:	99 bd       	out	0x29, r25	; 41
    a034:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = PWM_TOP;
    a036:	90 93 79 00 	sts	0x0079, r25
    a03a:	80 93 78 00 	sts	0x0078, r24
    a03e:	12 c2       	rjmp	.+1060   	; 0xa464 <__vector_15+0x3574>
			}
			else
			{	
			PWM_RED = pgm_read_byte(&gc_background[6][RED][g_speed3+g_position]);
    a040:	80 91 3b 01 	lds	r24, 0x013B
    a044:	e8 2f       	mov	r30, r24
    a046:	ea 0f       	add	r30, r26
    a048:	f1 2d       	mov	r31, r1
    a04a:	f1 1d       	adc	r31, r1
    a04c:	9f 01       	movw	r18, r30
    a04e:	e3 5c       	subi	r30, 0xC3	; 195
    a050:	fc 4a       	sbci	r31, 0xAC	; 172
    a052:	84 91       	lpm	r24, Z
    a054:	99 27       	eor	r25, r25
    a056:	9b bd       	out	0x2b, r25	; 43
    a058:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[6][GREEN][g_speed3+g_position]);
    a05a:	f9 01       	movw	r30, r18
    a05c:	e3 5e       	subi	r30, 0xE3	; 227
    a05e:	fa 4a       	sbci	r31, 0xAA	; 170
    a060:	84 91       	lpm	r24, Z
    a062:	99 27       	eor	r25, r25
    a064:	99 bd       	out	0x29, r25	; 41
    a066:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[6][BLUE][g_speed3+g_position]);
    a068:	23 50       	subi	r18, 0x03	; 3
    a06a:	39 4a       	sbci	r19, 0xA9	; 169
    a06c:	f9 01       	movw	r30, r18
    a06e:	84 91       	lpm	r24, Z
    a070:	99 27       	eor	r25, r25
    a072:	90 93 79 00 	sts	0x0079, r25
    a076:	80 93 78 00 	sts	0x0078, r24
			}	
			
		break;
    a07a:	f4 c1       	rjmp	.+1000   	; 0xa464 <__vector_15+0x3574>
				
		case 13:				// background is changing fast, africa
			seconds_hand=1;				
    a07c:	81 e0       	ldi	r24, 0x01	; 1
    a07e:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&gc_background[6][RED][g_speed3+g_position]);
    a082:	80 91 3b 01 	lds	r24, 0x013B
    a086:	48 2f       	mov	r20, r24
    a088:	4a 0f       	add	r20, r26
    a08a:	51 2d       	mov	r21, r1
    a08c:	51 1d       	adc	r21, r1
    a08e:	9a 01       	movw	r18, r20
    a090:	fa 01       	movw	r30, r20
    a092:	e3 5c       	subi	r30, 0xC3	; 195
    a094:	fc 4a       	sbci	r31, 0xAC	; 172
    a096:	84 91       	lpm	r24, Z
    a098:	99 27       	eor	r25, r25
    a09a:	9b bd       	out	0x2b, r25	; 43
    a09c:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[6][GREEN][g_speed3+g_position]);
    a09e:	fa 01       	movw	r30, r20
    a0a0:	e3 5e       	subi	r30, 0xE3	; 227
    a0a2:	fa 4a       	sbci	r31, 0xAA	; 170
    a0a4:	84 91       	lpm	r24, Z
    a0a6:	99 27       	eor	r25, r25
    a0a8:	99 bd       	out	0x29, r25	; 41
    a0aa:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[6][BLUE][g_speed3+g_position]);
    a0ac:	23 50       	subi	r18, 0x03	; 3
    a0ae:	39 4a       	sbci	r19, 0xA9	; 169
    a0b0:	f9 01       	movw	r30, r18
    a0b2:	84 91       	lpm	r24, Z
    a0b4:	99 27       	eor	r25, r25
    a0b6:	90 93 79 00 	sts	0x0079, r25
    a0ba:	80 93 78 00 	sts	0x0078, r24
		break;
    a0be:	d2 c1       	rjmp	.+932    	; 0xa464 <__vector_15+0x3574>
	
		
		
		case 12:				// background is changing fast, with black lines windows
			seconds_hand=1;			
    a0c0:	81 e0       	ldi	r24, 0x01	; 1
    a0c2:	80 93 25 01 	sts	0x0125, r24
			if (g_position % 20 == 0)
    a0c6:	8a 2f       	mov	r24, r26
    a0c8:	64 e1       	ldi	r22, 0x14	; 20
    a0ca:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    a0ce:	99 23       	and	r25, r25
    a0d0:	59 f4       	brne	.+22     	; 0xa0e8 <__vector_15+0x31f8>
			{
				PWM_RED = PWM_TOP;
    a0d2:	87 e2       	ldi	r24, 0x27	; 39
    a0d4:	90 e0       	ldi	r25, 0x00	; 0
    a0d6:	9b bd       	out	0x2b, r25	; 43
    a0d8:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = PWM_TOP;
    a0da:	99 bd       	out	0x29, r25	; 41
    a0dc:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = PWM_TOP;
    a0de:	90 93 79 00 	sts	0x0079, r25
    a0e2:	80 93 78 00 	sts	0x0078, r24
    a0e6:	be c1       	rjmp	.+892    	; 0xa464 <__vector_15+0x3574>
			}	
			else
			{
			PWM_RED = pgm_read_byte(&gc_background[7][RED][g_speed3+g_position]);
    a0e8:	80 91 3b 01 	lds	r24, 0x013B
    a0ec:	48 2f       	mov	r20, r24
    a0ee:	4a 0f       	add	r20, r26
    a0f0:	51 2d       	mov	r21, r1
    a0f2:	51 1d       	adc	r21, r1
    a0f4:	9a 01       	movw	r18, r20
    a0f6:	fa 01       	movw	r30, r20
    a0f8:	e3 52       	subi	r30, 0x23	; 35
    a0fa:	f7 4a       	sbci	r31, 0xA7	; 167
    a0fc:	84 91       	lpm	r24, Z
    a0fe:	99 27       	eor	r25, r25
    a100:	9b bd       	out	0x2b, r25	; 43
    a102:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[7][GREEN][g_speed3+g_position]);
    a104:	fa 01       	movw	r30, r20
    a106:	e3 54       	subi	r30, 0x43	; 67
    a108:	f5 4a       	sbci	r31, 0xA5	; 165
    a10a:	84 91       	lpm	r24, Z
    a10c:	99 27       	eor	r25, r25
    a10e:	99 bd       	out	0x29, r25	; 41
    a110:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[7][BLUE][g_speed3+g_position]);
    a112:	23 56       	subi	r18, 0x63	; 99
    a114:	33 4a       	sbci	r19, 0xA3	; 163
    a116:	f9 01       	movw	r30, r18
    a118:	84 91       	lpm	r24, Z
    a11a:	99 27       	eor	r25, r25
    a11c:	90 93 79 00 	sts	0x0079, r25
    a120:	80 93 78 00 	sts	0x0078, r24
			}	
			
		break;
    a124:	9f c1       	rjmp	.+830    	; 0xa464 <__vector_15+0x3574>
	
		case 11:				// background is changing fast, windows
			seconds_hand=1;			
    a126:	81 e0       	ldi	r24, 0x01	; 1
    a128:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&gc_background[7][RED][g_speed3+g_position]);
    a12c:	80 91 3b 01 	lds	r24, 0x013B
    a130:	48 2f       	mov	r20, r24
    a132:	4a 0f       	add	r20, r26
    a134:	51 2d       	mov	r21, r1
    a136:	51 1d       	adc	r21, r1
    a138:	9a 01       	movw	r18, r20
    a13a:	fa 01       	movw	r30, r20
    a13c:	e3 52       	subi	r30, 0x23	; 35
    a13e:	f7 4a       	sbci	r31, 0xA7	; 167
    a140:	84 91       	lpm	r24, Z
    a142:	99 27       	eor	r25, r25
    a144:	9b bd       	out	0x2b, r25	; 43
    a146:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[7][GREEN][g_speed3+g_position]);
    a148:	fa 01       	movw	r30, r20
    a14a:	e3 54       	subi	r30, 0x43	; 67
    a14c:	f5 4a       	sbci	r31, 0xA5	; 165
    a14e:	84 91       	lpm	r24, Z
    a150:	99 27       	eor	r25, r25
    a152:	99 bd       	out	0x29, r25	; 41
    a154:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[7][BLUE][g_speed3+g_position]);
    a156:	23 56       	subi	r18, 0x63	; 99
    a158:	33 4a       	sbci	r19, 0xA3	; 163
    a15a:	f9 01       	movw	r30, r18
    a15c:	84 91       	lpm	r24, Z
    a15e:	99 27       	eor	r25, r25
    a160:	90 93 79 00 	sts	0x0079, r25
    a164:	80 93 78 00 	sts	0x0078, r24
			break;
    a168:	7d c1       	rjmp	.+762    	; 0xa464 <__vector_15+0x3574>
	
		case 10:				// background is changing fast, with black lines rainbow
			seconds_hand=1;		
    a16a:	81 e0       	ldi	r24, 0x01	; 1
    a16c:	80 93 25 01 	sts	0x0125, r24
			if (g_position % 20 == 0)
    a170:	8a 2f       	mov	r24, r26
    a172:	64 e1       	ldi	r22, 0x14	; 20
    a174:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    a178:	99 23       	and	r25, r25
    a17a:	59 f4       	brne	.+22     	; 0xa192 <__vector_15+0x32a2>
			{
				PWM_RED = PWM_TOP;
    a17c:	87 e2       	ldi	r24, 0x27	; 39
    a17e:	90 e0       	ldi	r25, 0x00	; 0
    a180:	9b bd       	out	0x2b, r25	; 43
    a182:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = PWM_TOP;
    a184:	99 bd       	out	0x29, r25	; 41
    a186:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = PWM_TOP;
    a188:	90 93 79 00 	sts	0x0079, r25
    a18c:	80 93 78 00 	sts	0x0078, r24
    a190:	69 c1       	rjmp	.+722    	; 0xa464 <__vector_15+0x3574>
			}
			else
			{
			PWM_RED = pgm_read_byte(&gc_background[0][RED][g_speed3+g_position]);
    a192:	80 91 3b 01 	lds	r24, 0x013B
    a196:	48 2f       	mov	r20, r24
    a198:	4a 0f       	add	r20, r26
    a19a:	51 2d       	mov	r21, r1
    a19c:	51 1d       	adc	r21, r1
    a19e:	9a 01       	movw	r18, r20
    a1a0:	fa 01       	movw	r30, r20
    a1a2:	e3 58       	subi	r30, 0x83	; 131
    a1a4:	fe 4c       	sbci	r31, 0xCE	; 206
    a1a6:	84 91       	lpm	r24, Z
    a1a8:	99 27       	eor	r25, r25
    a1aa:	9b bd       	out	0x2b, r25	; 43
    a1ac:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[0][GREEN][g_speed3+g_position]);
    a1ae:	fa 01       	movw	r30, r20
    a1b0:	e3 5a       	subi	r30, 0xA3	; 163
    a1b2:	fc 4c       	sbci	r31, 0xCC	; 204
    a1b4:	84 91       	lpm	r24, Z
    a1b6:	99 27       	eor	r25, r25
    a1b8:	99 bd       	out	0x29, r25	; 41
    a1ba:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[0][BLUE][g_speed3+g_position]);
    a1bc:	23 5c       	subi	r18, 0xC3	; 195
    a1be:	3a 4c       	sbci	r19, 0xCA	; 202
    a1c0:	f9 01       	movw	r30, r18
    a1c2:	84 91       	lpm	r24, Z
    a1c4:	99 27       	eor	r25, r25
    a1c6:	90 93 79 00 	sts	0x0079, r25
    a1ca:	80 93 78 00 	sts	0x0078, r24
			}
			
			
		break;
    a1ce:	4a c1       	rjmp	.+660    	; 0xa464 <__vector_15+0x3574>
			
		case 9:				// background is changing fast, rainbowx2
			seconds_hand=1;			
    a1d0:	81 e0       	ldi	r24, 0x01	; 1
    a1d2:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&gc_background[0][RED][g_speed3+g_position]);
    a1d6:	80 91 3b 01 	lds	r24, 0x013B
    a1da:	48 2f       	mov	r20, r24
    a1dc:	4a 0f       	add	r20, r26
    a1de:	51 2d       	mov	r21, r1
    a1e0:	51 1d       	adc	r21, r1
    a1e2:	9a 01       	movw	r18, r20
    a1e4:	fa 01       	movw	r30, r20
    a1e6:	e3 58       	subi	r30, 0x83	; 131
    a1e8:	fe 4c       	sbci	r31, 0xCE	; 206
    a1ea:	84 91       	lpm	r24, Z
    a1ec:	99 27       	eor	r25, r25
    a1ee:	9b bd       	out	0x2b, r25	; 43
    a1f0:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[0][GREEN][g_speed3+g_position]);
    a1f2:	fa 01       	movw	r30, r20
    a1f4:	e3 5a       	subi	r30, 0xA3	; 163
    a1f6:	fc 4c       	sbci	r31, 0xCC	; 204
    a1f8:	84 91       	lpm	r24, Z
    a1fa:	99 27       	eor	r25, r25
    a1fc:	99 bd       	out	0x29, r25	; 41
    a1fe:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[0][BLUE][g_speed3+g_position]);
    a200:	23 5c       	subi	r18, 0xC3	; 195
    a202:	3a 4c       	sbci	r19, 0xCA	; 202
    a204:	f9 01       	movw	r30, r18
    a206:	84 91       	lpm	r24, Z
    a208:	99 27       	eor	r25, r25
    a20a:	90 93 79 00 	sts	0x0079, r25
    a20e:	80 93 78 00 	sts	0x0078, r24
		break;
    a212:	28 c1       	rjmp	.+592    	; 0xa464 <__vector_15+0x3574>
	
		case 8:				// background is changing slow, with black lines africa
			seconds_hand=1;			
    a214:	81 e0       	ldi	r24, 0x01	; 1
    a216:	80 93 25 01 	sts	0x0125, r24
			if (g_position % 20 == 0)
    a21a:	8a 2f       	mov	r24, r26
    a21c:	64 e1       	ldi	r22, 0x14	; 20
    a21e:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    a222:	99 23       	and	r25, r25
    a224:	59 f4       	brne	.+22     	; 0xa23c <__vector_15+0x334c>
			{
				PWM_RED = PWM_TOP;
    a226:	87 e2       	ldi	r24, 0x27	; 39
    a228:	90 e0       	ldi	r25, 0x00	; 0
    a22a:	9b bd       	out	0x2b, r25	; 43
    a22c:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = PWM_TOP;
    a22e:	99 bd       	out	0x29, r25	; 41
    a230:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = PWM_TOP;
    a232:	90 93 79 00 	sts	0x0079, r25
    a236:	80 93 78 00 	sts	0x0078, r24
    a23a:	14 c1       	rjmp	.+552    	; 0xa464 <__vector_15+0x3574>
			}
			else	
			{
			PWM_RED = pgm_read_byte(&gc_background[6][RED][g_speed12+g_position]);
    a23c:	80 91 28 01 	lds	r24, 0x0128
    a240:	48 2f       	mov	r20, r24
    a242:	4a 0f       	add	r20, r26
    a244:	51 2d       	mov	r21, r1
    a246:	51 1d       	adc	r21, r1
    a248:	9a 01       	movw	r18, r20
    a24a:	fa 01       	movw	r30, r20
    a24c:	e3 5c       	subi	r30, 0xC3	; 195
    a24e:	fc 4a       	sbci	r31, 0xAC	; 172
    a250:	84 91       	lpm	r24, Z
    a252:	99 27       	eor	r25, r25
    a254:	9b bd       	out	0x2b, r25	; 43
    a256:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[6][GREEN][g_speed12+g_position]);
    a258:	fa 01       	movw	r30, r20
    a25a:	e3 5e       	subi	r30, 0xE3	; 227
    a25c:	fa 4a       	sbci	r31, 0xAA	; 170
    a25e:	84 91       	lpm	r24, Z
    a260:	99 27       	eor	r25, r25
    a262:	99 bd       	out	0x29, r25	; 41
    a264:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[6][BLUE][g_speed12+g_position]);
    a266:	23 50       	subi	r18, 0x03	; 3
    a268:	39 4a       	sbci	r19, 0xA9	; 169
    a26a:	f9 01       	movw	r30, r18
    a26c:	84 91       	lpm	r24, Z
    a26e:	99 27       	eor	r25, r25
    a270:	90 93 79 00 	sts	0x0079, r25
    a274:	80 93 78 00 	sts	0x0078, r24
			}	
			
		break;
    a278:	f5 c0       	rjmp	.+490    	; 0xa464 <__vector_15+0x3574>
				
		case 7:				// background is changing slow, africa
			seconds_hand=1;				
    a27a:	81 e0       	ldi	r24, 0x01	; 1
    a27c:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&gc_background[6][RED][g_speed12+g_position]);
    a280:	80 91 28 01 	lds	r24, 0x0128
    a284:	48 2f       	mov	r20, r24
    a286:	4a 0f       	add	r20, r26
    a288:	51 2d       	mov	r21, r1
    a28a:	51 1d       	adc	r21, r1
    a28c:	9a 01       	movw	r18, r20
    a28e:	fa 01       	movw	r30, r20
    a290:	e3 5c       	subi	r30, 0xC3	; 195
    a292:	fc 4a       	sbci	r31, 0xAC	; 172
    a294:	84 91       	lpm	r24, Z
    a296:	99 27       	eor	r25, r25
    a298:	9b bd       	out	0x2b, r25	; 43
    a29a:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[6][GREEN][g_speed12+g_position]);
    a29c:	fa 01       	movw	r30, r20
    a29e:	e3 5e       	subi	r30, 0xE3	; 227
    a2a0:	fa 4a       	sbci	r31, 0xAA	; 170
    a2a2:	84 91       	lpm	r24, Z
    a2a4:	99 27       	eor	r25, r25
    a2a6:	99 bd       	out	0x29, r25	; 41
    a2a8:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[6][BLUE][g_speed12+g_position]);
    a2aa:	23 50       	subi	r18, 0x03	; 3
    a2ac:	39 4a       	sbci	r19, 0xA9	; 169
    a2ae:	f9 01       	movw	r30, r18
    a2b0:	84 91       	lpm	r24, Z
    a2b2:	99 27       	eor	r25, r25
    a2b4:	90 93 79 00 	sts	0x0079, r25
    a2b8:	80 93 78 00 	sts	0x0078, r24
		break;
    a2bc:	d3 c0       	rjmp	.+422    	; 0xa464 <__vector_15+0x3574>
		
		case 6:				// background is changing slow, with black lines windows
			seconds_hand=1;			
    a2be:	81 e0       	ldi	r24, 0x01	; 1
    a2c0:	80 93 25 01 	sts	0x0125, r24
			if (g_position % 20 == 0)
    a2c4:	8a 2f       	mov	r24, r26
    a2c6:	64 e1       	ldi	r22, 0x14	; 20
    a2c8:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    a2cc:	99 23       	and	r25, r25
    a2ce:	59 f4       	brne	.+22     	; 0xa2e6 <__vector_15+0x33f6>
			{
				PWM_RED = PWM_TOP;
    a2d0:	87 e2       	ldi	r24, 0x27	; 39
    a2d2:	90 e0       	ldi	r25, 0x00	; 0
    a2d4:	9b bd       	out	0x2b, r25	; 43
    a2d6:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = PWM_TOP;
    a2d8:	99 bd       	out	0x29, r25	; 41
    a2da:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = PWM_TOP;
    a2dc:	90 93 79 00 	sts	0x0079, r25
    a2e0:	80 93 78 00 	sts	0x0078, r24
    a2e4:	bf c0       	rjmp	.+382    	; 0xa464 <__vector_15+0x3574>
			}	
			else
			{
			PWM_RED = pgm_read_byte(&gc_background[7][RED][g_speed12+g_position]);
    a2e6:	80 91 28 01 	lds	r24, 0x0128
    a2ea:	48 2f       	mov	r20, r24
    a2ec:	4a 0f       	add	r20, r26
    a2ee:	51 2d       	mov	r21, r1
    a2f0:	51 1d       	adc	r21, r1
    a2f2:	9a 01       	movw	r18, r20
    a2f4:	fa 01       	movw	r30, r20
    a2f6:	e3 52       	subi	r30, 0x23	; 35
    a2f8:	f7 4a       	sbci	r31, 0xA7	; 167
    a2fa:	84 91       	lpm	r24, Z
    a2fc:	99 27       	eor	r25, r25
    a2fe:	9b bd       	out	0x2b, r25	; 43
    a300:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[7][GREEN][g_speed12+g_position]);
    a302:	fa 01       	movw	r30, r20
    a304:	e3 54       	subi	r30, 0x43	; 67
    a306:	f5 4a       	sbci	r31, 0xA5	; 165
    a308:	84 91       	lpm	r24, Z
    a30a:	99 27       	eor	r25, r25
    a30c:	99 bd       	out	0x29, r25	; 41
    a30e:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[7][BLUE][g_speed12+g_position]);
    a310:	23 56       	subi	r18, 0x63	; 99
    a312:	33 4a       	sbci	r19, 0xA3	; 163
    a314:	f9 01       	movw	r30, r18
    a316:	84 91       	lpm	r24, Z
    a318:	99 27       	eor	r25, r25
    a31a:	90 93 79 00 	sts	0x0079, r25
    a31e:	80 93 78 00 	sts	0x0078, r24
			}	
			
		break;
    a322:	a0 c0       	rjmp	.+320    	; 0xa464 <__vector_15+0x3574>
		
		case 5:				// background is changing slow, windows
			seconds_hand=1;			
    a324:	81 e0       	ldi	r24, 0x01	; 1
    a326:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&gc_background[7][RED][g_speed12+g_position]);
    a32a:	80 91 28 01 	lds	r24, 0x0128
    a32e:	48 2f       	mov	r20, r24
    a330:	4a 0f       	add	r20, r26
    a332:	51 2d       	mov	r21, r1
    a334:	51 1d       	adc	r21, r1
    a336:	9a 01       	movw	r18, r20
    a338:	fa 01       	movw	r30, r20
    a33a:	e3 52       	subi	r30, 0x23	; 35
    a33c:	f7 4a       	sbci	r31, 0xA7	; 167
    a33e:	84 91       	lpm	r24, Z
    a340:	99 27       	eor	r25, r25
    a342:	9b bd       	out	0x2b, r25	; 43
    a344:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[7][GREEN][g_speed12+g_position]);
    a346:	fa 01       	movw	r30, r20
    a348:	e3 54       	subi	r30, 0x43	; 67
    a34a:	f5 4a       	sbci	r31, 0xA5	; 165
    a34c:	84 91       	lpm	r24, Z
    a34e:	99 27       	eor	r25, r25
    a350:	99 bd       	out	0x29, r25	; 41
    a352:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[7][BLUE][g_speed12+g_position]);
    a354:	23 56       	subi	r18, 0x63	; 99
    a356:	33 4a       	sbci	r19, 0xA3	; 163
    a358:	f9 01       	movw	r30, r18
    a35a:	84 91       	lpm	r24, Z
    a35c:	99 27       	eor	r25, r25
    a35e:	90 93 79 00 	sts	0x0079, r25
    a362:	80 93 78 00 	sts	0x0078, r24
			break;
    a366:	7e c0       	rjmp	.+252    	; 0xa464 <__vector_15+0x3574>



		case 4:				// background is changing slow, with black lines rainbowx2
			seconds_hand=1;					
    a368:	81 e0       	ldi	r24, 0x01	; 1
    a36a:	80 93 25 01 	sts	0x0125, r24
			if (g_position % 20 == 0)
    a36e:	8a 2f       	mov	r24, r26
    a370:	64 e1       	ldi	r22, 0x14	; 20
    a372:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    a376:	99 23       	and	r25, r25
    a378:	59 f4       	brne	.+22     	; 0xa390 <__vector_15+0x34a0>
			{
				PWM_RED = PWM_TOP;
    a37a:	87 e2       	ldi	r24, 0x27	; 39
    a37c:	90 e0       	ldi	r25, 0x00	; 0
    a37e:	9b bd       	out	0x2b, r25	; 43
    a380:	8a bd       	out	0x2a, r24	; 42
				PWM_GREEN = PWM_TOP;
    a382:	99 bd       	out	0x29, r25	; 41
    a384:	88 bd       	out	0x28, r24	; 40
				PWM_BLUE = PWM_TOP;
    a386:	90 93 79 00 	sts	0x0079, r25
    a38a:	80 93 78 00 	sts	0x0078, r24
    a38e:	6a c0       	rjmp	.+212    	; 0xa464 <__vector_15+0x3574>
			}
			else
			{
			PWM_RED = pgm_read_byte(&gc_background[0][RED][g_speed12+g_position]);
    a390:	80 91 28 01 	lds	r24, 0x0128
    a394:	48 2f       	mov	r20, r24
    a396:	4a 0f       	add	r20, r26
    a398:	51 2d       	mov	r21, r1
    a39a:	51 1d       	adc	r21, r1
    a39c:	9a 01       	movw	r18, r20
    a39e:	fa 01       	movw	r30, r20
    a3a0:	e3 58       	subi	r30, 0x83	; 131
    a3a2:	fe 4c       	sbci	r31, 0xCE	; 206
    a3a4:	84 91       	lpm	r24, Z
    a3a6:	99 27       	eor	r25, r25
    a3a8:	9b bd       	out	0x2b, r25	; 43
    a3aa:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[0][GREEN][g_speed12+g_position]);
    a3ac:	fa 01       	movw	r30, r20
    a3ae:	e3 5a       	subi	r30, 0xA3	; 163
    a3b0:	fc 4c       	sbci	r31, 0xCC	; 204
    a3b2:	84 91       	lpm	r24, Z
    a3b4:	99 27       	eor	r25, r25
    a3b6:	99 bd       	out	0x29, r25	; 41
    a3b8:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[0][BLUE][g_speed12+g_position]);
    a3ba:	23 5c       	subi	r18, 0xC3	; 195
    a3bc:	3a 4c       	sbci	r19, 0xCA	; 202
    a3be:	f9 01       	movw	r30, r18
    a3c0:	84 91       	lpm	r24, Z
    a3c2:	99 27       	eor	r25, r25
    a3c4:	90 93 79 00 	sts	0x0079, r25
    a3c8:	80 93 78 00 	sts	0x0078, r24
			}
			
		break;
    a3cc:	4b c0       	rjmp	.+150    	; 0xa464 <__vector_15+0x3574>
				
		case 3:				// background is changing slow, rainbowx2
			seconds_hand=1;				
    a3ce:	81 e0       	ldi	r24, 0x01	; 1
    a3d0:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&gc_background[0][RED][g_speed12+g_position]);
    a3d4:	80 91 28 01 	lds	r24, 0x0128
    a3d8:	48 2f       	mov	r20, r24
    a3da:	4a 0f       	add	r20, r26
    a3dc:	51 2d       	mov	r21, r1
    a3de:	51 1d       	adc	r21, r1
    a3e0:	9a 01       	movw	r18, r20
    a3e2:	fa 01       	movw	r30, r20
    a3e4:	e3 58       	subi	r30, 0x83	; 131
    a3e6:	fe 4c       	sbci	r31, 0xCE	; 206
    a3e8:	84 91       	lpm	r24, Z
    a3ea:	99 27       	eor	r25, r25
    a3ec:	9b bd       	out	0x2b, r25	; 43
    a3ee:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[0][GREEN][g_speed12+g_position]);
    a3f0:	fa 01       	movw	r30, r20
    a3f2:	e3 5a       	subi	r30, 0xA3	; 163
    a3f4:	fc 4c       	sbci	r31, 0xCC	; 204
    a3f6:	84 91       	lpm	r24, Z
    a3f8:	99 27       	eor	r25, r25
    a3fa:	99 bd       	out	0x29, r25	; 41
    a3fc:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[0][BLUE][g_speed12+g_position]);
    a3fe:	23 5c       	subi	r18, 0xC3	; 195
    a400:	3a 4c       	sbci	r19, 0xCA	; 202
    a402:	f9 01       	movw	r30, r18
    a404:	84 91       	lpm	r24, Z
    a406:	99 27       	eor	r25, r25
    a408:	90 93 79 00 	sts	0x0079, r25
    a40c:	80 93 78 00 	sts	0x0078, r24
		break;
    a410:	29 c0       	rjmp	.+82     	; 0xa464 <__vector_15+0x3574>
			
		//case 4:				// background is changing, one color with black lines
		//	seconds_hand=1;					
		//	if (g_position % 20 == 0)
		//	{
		//		PWM_RED = PWM_TOP;
		//		PWM_GREEN = PWM_TOP;
		//		PWM_BLUE = PWM_TOP;
		//	}
		//	else
		//	{
		//	PWM_RED = pgm_read_byte(&g_background[3][RED][g_seconds]);
		//	PWM_GREEN = pgm_read_byte(&g_background[3][GREEN][g_seconds]);
		//	PWM_BLUE = pgm_read_byte(&g_background[3][BLUE][g_seconds]);
		//	}
			
		//break;
			
		//case 3:				// background is changing, one color 
		
				// background is changing android loader 2 neg grey
		//	seconds_hand=0;		
		//		if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) == 0x27) && (pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position]) == 0x27)) && (abs(g_speed3rev-g_speed7rev)<=1) )
		//	{
		//		if (((abs(g_mark1-g_position)>=58) && (abs(g_mark1-g_position)<=62)) || ((abs(g_mark1-g_position)>=178) && (abs(g_mark1-g_position)<=182)) || (((abs(g_mark1-g_position)>=238) && (abs(g_mark1-g_position)<=240)) && ((abs(g_mark1-g_position)>=0) && (abs(g_mark1-g_position)<=2))))
				
		//		g_mark++;
			
		//		if(g_mark == 2)
		//		g_mark =0;
		//		g_mark1=g_position;
		//		PWM_RED =0x00;
		//		PWM_GREEN =0x00;
		//		PWM_BLUE  =0x00;
		//	}
		
		//	if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
		//	{
		//		PWM_RED = PWM_TOP ;
		//		PWM_GREEN = PWM_TOP ;
		//		PWM_BLUE  = PWM_TOP ;
		//	}
			
		//	else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
		//	{
		//		PWM_RED = PWM_TOP ;
		//		PWM_GREEN = PWM_TOP ;
		//		PWM_BLUE  = PWM_TOP ;
		//	}
			
		//	else
		//	{
		//		PWM_RED =  pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
		//		PWM_GREEN =  pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
		//		PWM_BLUE =  pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
		//	}
		
			
			//if ((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) == 0x27) && (pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position]) == 0x27) )
			//{
			////PWM_RED =0x00;
			//PWM_GREEN =0x00;
			//PWM_BLUE  =0x00;
		//	}
			
		//break;	
	
			//seconds_hand=1;				
		//	PWM_RED = pgm_read_byte(&g_background[3][RED][g_seconds]);
		//	PWM_GREEN = pgm_read_byte(&g_background[3][GREEN][g_seconds]);
		//	PWM_BLUE = pgm_read_byte(&g_background[3][BLUE][g_seconds]);
		//break;
			
		default:		// basic modes
			seconds_hand=1;				
    a412:	81 e0       	ldi	r24, 0x01	; 1
    a414:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&g_background[g_mode][RED][g_position]);
    a418:	33 27       	eor	r19, r19
    a41a:	80 ed       	ldi	r24, 0xD0	; 208
    a41c:	92 e0       	ldi	r25, 0x02	; 2
    a41e:	28 9f       	mul	r18, r24
    a420:	a0 01       	movw	r20, r0
    a422:	29 9f       	mul	r18, r25
    a424:	50 0d       	add	r21, r0
    a426:	38 9f       	mul	r19, r24
    a428:	50 0d       	add	r21, r0
    a42a:	11 24       	eor	r1, r1
    a42c:	ca 01       	movw	r24, r20
    a42e:	20 91 40 01 	lds	r18, 0x0140
    a432:	82 0f       	add	r24, r18
    a434:	91 1d       	adc	r25, r1
    a436:	fc 01       	movw	r30, r24
    a438:	e3 58       	subi	r30, 0x83	; 131
    a43a:	f1 4a       	sbci	r31, 0xA1	; 161
    a43c:	24 91       	lpm	r18, Z
    a43e:	33 27       	eor	r19, r19
    a440:	3b bd       	out	0x2b, r19	; 43
    a442:	2a bd       	out	0x2a, r18	; 42
			PWM_GREEN = pgm_read_byte(&g_background[g_mode][GREEN][g_position]);
    a444:	fc 01       	movw	r30, r24
    a446:	e3 59       	subi	r30, 0x93	; 147
    a448:	f0 4a       	sbci	r31, 0xA0	; 160
    a44a:	24 91       	lpm	r18, Z
    a44c:	33 27       	eor	r19, r19
    a44e:	39 bd       	out	0x29, r19	; 41
    a450:	28 bd       	out	0x28, r18	; 40
			PWM_BLUE = pgm_read_byte(&g_background[g_mode][BLUE][g_position]);
    a452:	83 5a       	subi	r24, 0xA3	; 163
    a454:	9f 49       	sbci	r25, 0x9F	; 159
    a456:	fc 01       	movw	r30, r24
    a458:	84 91       	lpm	r24, Z
    a45a:	99 27       	eor	r25, r25
    a45c:	90 93 79 00 	sts	0x0079, r25
    a460:	80 93 78 00 	sts	0x0078, r24
		break;			
		}
	}
	
	g_position++;		//increase position
    a464:	80 91 40 01 	lds	r24, 0x0140
    a468:	8f 5f       	subi	r24, 0xFF	; 255
    a46a:	80 93 40 01 	sts	0x0140, r24
	g_reminder--;	//decrease reminder
    a46e:	c1 50       	subi	r28, 0x01	; 1
    a470:	c0 93 24 01 	sts	0x0124, r28
	
	
	//demo mode
	if (g_s_rc_state == STATE_DEMO)
    a474:	80 91 00 01 	lds	r24, 0x0100
    a478:	82 30       	cpi	r24, 0x02	; 2
    a47a:	41 f4       	brne	.+16     	; 0xa48c <__vector_15+0x359c>
	{
		g_temp_mode=g_mode;
    a47c:	80 91 1f 01 	lds	r24, 0x011F
    a480:	80 93 0b 01 	sts	0x010B, r24
		g_mode=g_speeddemo;		
    a484:	80 91 01 01 	lds	r24, 0x0101
    a488:	80 93 1f 01 	sts	0x011F, r24
	}
	
	//	for various speed, mode background changing
	timer2tmp=TCNT2;
    a48c:	84 b5       	in	r24, 0x24	; 36
    a48e:	80 93 39 01 	sts	0x0139, r24
	if (TCNT2 % 85 == 0)	
    a492:	84 b5       	in	r24, 0x24	; 36
    a494:	65 e5       	ldi	r22, 0x55	; 85
    a496:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    a49a:	29 2f       	mov	r18, r25
    a49c:	99 23       	and	r25, r25
    a49e:	09 f0       	breq	.+2      	; 0xa4a2 <__vector_15+0x35b2>
    a4a0:	3b c1       	rjmp	.+630    	; 0xa718 <__vector_15+0x3828>
	{
		g_timer2_speed2++;
    a4a2:	80 91 26 01 	lds	r24, 0x0126
    a4a6:	8f 5f       	subi	r24, 0xFF	; 255
    a4a8:	80 93 26 01 	sts	0x0126, r24
		g_timer2_speed3++;
    a4ac:	80 91 3f 01 	lds	r24, 0x013F
    a4b0:	8f 5f       	subi	r24, 0xFF	; 255
    a4b2:	80 93 3f 01 	sts	0x013F, r24
		g_timer2_speed6++;
    a4b6:	80 91 2f 01 	lds	r24, 0x012F
    a4ba:	8f 5f       	subi	r24, 0xFF	; 255
    a4bc:	80 93 2f 01 	sts	0x012F, r24
		g_timer2_speed7++;
    a4c0:	80 91 32 01 	lds	r24, 0x0132
    a4c4:	8f 5f       	subi	r24, 0xFF	; 255
    a4c6:	80 93 32 01 	sts	0x0132, r24
		g_timer2_speed8++;
    a4ca:	80 91 3a 01 	lds	r24, 0x013A
    a4ce:	8f 5f       	subi	r24, 0xFF	; 255
    a4d0:	80 93 3a 01 	sts	0x013A, r24
		g_timer2_speed9++;
    a4d4:	80 91 23 01 	lds	r24, 0x0123
    a4d8:	8f 5f       	subi	r24, 0xFF	; 255
    a4da:	80 93 23 01 	sts	0x0123, r24
		g_timer2_speed12++;
    a4de:	80 91 31 01 	lds	r24, 0x0131
    a4e2:	8f 5f       	subi	r24, 0xFF	; 255
    a4e4:	80 93 31 01 	sts	0x0131, r24
		g_timer2_speeddemo1++;
    a4e8:	90 91 36 01 	lds	r25, 0x0136
    a4ec:	9f 5f       	subi	r25, 0xFF	; 255
    a4ee:	90 93 36 01 	sts	0x0136, r25
		g_timer2_speedrandom1++;
    a4f2:	80 91 11 01 	lds	r24, 0x0111
    a4f6:	8f 5f       	subi	r24, 0xFF	; 255
    a4f8:	80 93 11 01 	sts	0x0111, r24
		

		
		if(g_timer2_speeddemo1 == 248)		// very slow, every 20s, demo mode
    a4fc:	98 3f       	cpi	r25, 0xF8	; 248
    a4fe:	a9 f4       	brne	.+42     	; 0xa52a <__vector_15+0x363a>
		{	
			g_timer2_speeddemo2++;
    a500:	80 91 12 01 	lds	r24, 0x0112
    a504:	8f 5f       	subi	r24, 0xFF	; 255
    a506:	80 93 12 01 	sts	0x0112, r24
			
			if(g_timer2_speeddemo2 == 14)
    a50a:	8e 30       	cpi	r24, 0x0E	; 14
    a50c:	61 f4       	brne	.+24     	; 0xa526 <__vector_15+0x3636>
			{
				g_speeddemo++;
    a50e:	80 91 01 01 	lds	r24, 0x0101
    a512:	8f 5f       	subi	r24, 0xFF	; 255
    a514:	80 93 01 01 	sts	0x0101, r24
				if(g_speeddemo == NUMBER_OF_MODES)
    a518:	8e 33       	cpi	r24, 0x3E	; 62
    a51a:	19 f4       	brne	.+6      	; 0xa522 <__vector_15+0x3632>
				g_speeddemo =2;
    a51c:	82 e0       	ldi	r24, 0x02	; 2
    a51e:	80 93 01 01 	sts	0x0101, r24
				
				g_timer2_speeddemo2=0;
    a522:	20 93 12 01 	sts	0x0112, r18
			}
			
			g_timer2_speeddemo1=0;	
    a526:	10 92 36 01 	sts	0x0136, r1
		}

		if (g_timer2_speed12 == 12)		// slow background change
    a52a:	80 91 31 01 	lds	r24, 0x0131
    a52e:	8c 30       	cpi	r24, 0x0C	; 12
    a530:	b9 f4       	brne	.+46     	; 0xa560 <__vector_15+0x3670>
		{
			if(g_speed12rev == 0)
    a532:	80 91 3e 01 	lds	r24, 0x013E
    a536:	88 23       	and	r24, r24
    a538:	19 f4       	brne	.+6      	; 0xa540 <__vector_15+0x3650>
			g_speed12rev  =RESOLUTION;
    a53a:	80 ef       	ldi	r24, 0xF0	; 240
    a53c:	80 93 3e 01 	sts	0x013E, r24
			g_speed12rev --;
    a540:	80 91 3e 01 	lds	r24, 0x013E
    a544:	81 50       	subi	r24, 0x01	; 1
    a546:	80 93 3e 01 	sts	0x013E, r24
			
			g_speed12++;
    a54a:	80 91 28 01 	lds	r24, 0x0128
    a54e:	8f 5f       	subi	r24, 0xFF	; 255
    a550:	80 93 28 01 	sts	0x0128, r24
			if(g_speed12 == RESOLUTION)
    a554:	80 3f       	cpi	r24, 0xF0	; 240
    a556:	11 f4       	brne	.+4      	; 0xa55c <__vector_15+0x366c>
			g_speed12 =0;
    a558:	10 92 28 01 	sts	0x0128, r1

			g_timer2_speed12=0;
    a55c:	10 92 31 01 	sts	0x0131, r1
		}
	
		if (g_timer2_speed9 == 9)		// slow background change
    a560:	80 91 23 01 	lds	r24, 0x0123
    a564:	89 30       	cpi	r24, 0x09	; 9
    a566:	b9 f4       	brne	.+46     	; 0xa596 <__vector_15+0x36a6>
		{
			if(g_speed9rev == 0)
    a568:	80 91 2d 01 	lds	r24, 0x012D
    a56c:	88 23       	and	r24, r24
    a56e:	19 f4       	brne	.+6      	; 0xa576 <__vector_15+0x3686>
			g_speed9rev  =RESOLUTION;
    a570:	80 ef       	ldi	r24, 0xF0	; 240
    a572:	80 93 2d 01 	sts	0x012D, r24
			g_speed9rev --;
    a576:	80 91 2d 01 	lds	r24, 0x012D
    a57a:	81 50       	subi	r24, 0x01	; 1
    a57c:	80 93 2d 01 	sts	0x012D, r24
			
			g_speed9++;
    a580:	80 91 3c 01 	lds	r24, 0x013C
    a584:	8f 5f       	subi	r24, 0xFF	; 255
    a586:	80 93 3c 01 	sts	0x013C, r24
			if(g_speed9 == RESOLUTION)
    a58a:	80 3f       	cpi	r24, 0xF0	; 240
    a58c:	11 f4       	brne	.+4      	; 0xa592 <__vector_15+0x36a2>
			g_speed9 =0;
    a58e:	10 92 3c 01 	sts	0x013C, r1

			g_timer2_speed9=0;
    a592:	10 92 23 01 	sts	0x0123, r1
		}
	
		if (g_timer2_speed8 == 8)		// slow background change
    a596:	80 91 3a 01 	lds	r24, 0x013A
    a59a:	88 30       	cpi	r24, 0x08	; 8
    a59c:	b9 f4       	brne	.+46     	; 0xa5cc <__vector_15+0x36dc>
		{
			if(g_speed8rev == 0)
    a59e:	80 91 33 01 	lds	r24, 0x0133
    a5a2:	88 23       	and	r24, r24
    a5a4:	19 f4       	brne	.+6      	; 0xa5ac <__vector_15+0x36bc>
			g_speed8rev  =RESOLUTION;
    a5a6:	80 ef       	ldi	r24, 0xF0	; 240
    a5a8:	80 93 33 01 	sts	0x0133, r24
			g_speed8rev --;
    a5ac:	80 91 33 01 	lds	r24, 0x0133
    a5b0:	81 50       	subi	r24, 0x01	; 1
    a5b2:	80 93 33 01 	sts	0x0133, r24
			
			g_speed8++;
    a5b6:	80 91 14 01 	lds	r24, 0x0114
    a5ba:	8f 5f       	subi	r24, 0xFF	; 255
    a5bc:	80 93 14 01 	sts	0x0114, r24
			if(g_speed8 == RESOLUTION)
    a5c0:	80 3f       	cpi	r24, 0xF0	; 240
    a5c2:	11 f4       	brne	.+4      	; 0xa5c8 <__vector_15+0x36d8>
			g_speed8 =0;
    a5c4:	10 92 14 01 	sts	0x0114, r1

			g_timer2_speed8=0;
    a5c8:	10 92 3a 01 	sts	0x013A, r1
		}
	
		if (g_timer2_speed7 == 7)		// slow background change
    a5cc:	80 91 32 01 	lds	r24, 0x0132
    a5d0:	87 30       	cpi	r24, 0x07	; 7
    a5d2:	b9 f4       	brne	.+46     	; 0xa602 <__vector_15+0x3712>
		{
			if(g_speed7rev == 0)
    a5d4:	80 91 4c 01 	lds	r24, 0x014C
    a5d8:	88 23       	and	r24, r24
    a5da:	19 f4       	brne	.+6      	; 0xa5e2 <__vector_15+0x36f2>
			g_speed7rev  =RESOLUTION;
    a5dc:	80 ef       	ldi	r24, 0xF0	; 240
    a5de:	80 93 4c 01 	sts	0x014C, r24
			g_speed7rev --;
    a5e2:	80 91 4c 01 	lds	r24, 0x014C
    a5e6:	81 50       	subi	r24, 0x01	; 1
    a5e8:	80 93 4c 01 	sts	0x014C, r24
			
			g_speed7++;
    a5ec:	80 91 2c 01 	lds	r24, 0x012C
    a5f0:	8f 5f       	subi	r24, 0xFF	; 255
    a5f2:	80 93 2c 01 	sts	0x012C, r24
			if(g_speed7 == RESOLUTION)
    a5f6:	80 3f       	cpi	r24, 0xF0	; 240
    a5f8:	11 f4       	brne	.+4      	; 0xa5fe <__vector_15+0x370e>
			g_speed7 =0;
    a5fa:	10 92 2c 01 	sts	0x012C, r1

			g_timer2_speed7=0;
    a5fe:	10 92 32 01 	sts	0x0132, r1
		}
		
		if (g_timer2_speed6 == 6)		// slow1 background change
    a602:	80 91 2f 01 	lds	r24, 0x012F
    a606:	86 30       	cpi	r24, 0x06	; 6
    a608:	b9 f4       	brne	.+46     	; 0xa638 <__vector_15+0x3748>
		{
			if(g_speed6rev == 0)
    a60a:	80 91 27 01 	lds	r24, 0x0127
    a60e:	88 23       	and	r24, r24
    a610:	19 f4       	brne	.+6      	; 0xa618 <__vector_15+0x3728>
			g_speed6rev  =RESOLUTION;
    a612:	80 ef       	ldi	r24, 0xF0	; 240
    a614:	80 93 27 01 	sts	0x0127, r24
			g_speed6rev --;
    a618:	80 91 27 01 	lds	r24, 0x0127
    a61c:	81 50       	subi	r24, 0x01	; 1
    a61e:	80 93 27 01 	sts	0x0127, r24
			
			g_speed6++;
    a622:	80 91 43 01 	lds	r24, 0x0143
    a626:	8f 5f       	subi	r24, 0xFF	; 255
    a628:	80 93 43 01 	sts	0x0143, r24
			if(g_speed6 == RESOLUTION)
    a62c:	80 3f       	cpi	r24, 0xF0	; 240
    a62e:	11 f4       	brne	.+4      	; 0xa634 <__vector_15+0x3744>
			g_speed6 =0;
    a630:	10 92 43 01 	sts	0x0143, r1

			g_timer2_speed6=0;
    a634:	10 92 2f 01 	sts	0x012F, r1
		}
		
		if (g_timer2_speed3 == 3)	
    a638:	80 91 3f 01 	lds	r24, 0x013F
    a63c:	83 30       	cpi	r24, 0x03	; 3
    a63e:	b9 f4       	brne	.+46     	; 0xa66e <__vector_15+0x377e>
		{
			g_speed3++;
    a640:	80 91 3b 01 	lds	r24, 0x013B
    a644:	8f 5f       	subi	r24, 0xFF	; 255
    a646:	80 93 3b 01 	sts	0x013B, r24
			if(g_speed3 >= RESOLUTION)		// fast1 background change
    a64a:	80 3f       	cpi	r24, 0xF0	; 240
    a64c:	10 f0       	brcs	.+4      	; 0xa652 <__vector_15+0x3762>
			g_speed3 =0;
    a64e:	10 92 3b 01 	sts	0x013B, r1
			
			if(g_speed3rev == 0)
    a652:	80 91 37 01 	lds	r24, 0x0137
    a656:	88 23       	and	r24, r24
    a658:	19 f4       	brne	.+6      	; 0xa660 <__vector_15+0x3770>
			g_speed3rev  =RESOLUTION;
    a65a:	80 ef       	ldi	r24, 0xF0	; 240
    a65c:	80 93 37 01 	sts	0x0137, r24
			g_speed3rev --;
    a660:	80 91 37 01 	lds	r24, 0x0137
    a664:	81 50       	subi	r24, 0x01	; 1
    a666:	80 93 37 01 	sts	0x0137, r24

			g_timer2_speed3=0;
    a66a:	10 92 3f 01 	sts	0x013F, r1
		}

		if (g_timer2_speed2 == 2)	
    a66e:	80 91 26 01 	lds	r24, 0x0126
    a672:	82 30       	cpi	r24, 0x02	; 2
    a674:	b9 f4       	brne	.+46     	; 0xa6a4 <__vector_15+0x37b4>
		{
			g_speed2++;
    a676:	80 91 13 01 	lds	r24, 0x0113
    a67a:	8f 5f       	subi	r24, 0xFF	; 255
    a67c:	80 93 13 01 	sts	0x0113, r24
			if(g_speed2 == RESOLUTION)		// fast background change
    a680:	80 3f       	cpi	r24, 0xF0	; 240
    a682:	11 f4       	brne	.+4      	; 0xa688 <__vector_15+0x3798>
			g_speed2 =0;
    a684:	10 92 13 01 	sts	0x0113, r1
			
			if(g_speed2rev == 0)
    a688:	80 91 21 01 	lds	r24, 0x0121
    a68c:	88 23       	and	r24, r24
    a68e:	19 f4       	brne	.+6      	; 0xa696 <__vector_15+0x37a6>
			g_speed2rev  =RESOLUTION;
    a690:	80 ef       	ldi	r24, 0xF0	; 240
    a692:	80 93 21 01 	sts	0x0121, r24
			g_speed2rev --;
    a696:	80 91 21 01 	lds	r24, 0x0121
    a69a:	81 50       	subi	r24, 0x01	; 1
    a69c:	80 93 21 01 	sts	0x0121, r24

			g_timer2_speed2=0;
    a6a0:	10 92 26 01 	sts	0x0126, r1
		}
		
		if(g_timer2_speedrandom1 == 5)		// radioactivity background change - semi random direction
    a6a4:	80 91 11 01 	lds	r24, 0x0111
    a6a8:	85 30       	cpi	r24, 0x05	; 5
    a6aa:	b1 f5       	brne	.+108    	; 0xa718 <__vector_15+0x3828>
		{	
			g_timer2_speedrandom2++;	
    a6ac:	80 91 30 01 	lds	r24, 0x0130
    a6b0:	8f 5f       	subi	r24, 0xFF	; 255
    a6b2:	80 93 30 01 	sts	0x0130, r24
			if(g_timer2_speedrandom2 == 3)
    a6b6:	83 30       	cpi	r24, 0x03	; 3
    a6b8:	69 f5       	brne	.+90     	; 0xa714 <__vector_15+0x3824>
			{
				if (TCNT2 % 33 == 0) 
    a6ba:	84 b5       	in	r24, 0x24	; 36
    a6bc:	61 e2       	ldi	r22, 0x21	; 33
    a6be:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    a6c2:	99 23       	and	r25, r25
    a6c4:	51 f4       	brne	.+20     	; 0xa6da <__vector_15+0x37ea>
				{
					if (g_speedrandom % 2 == 0)
    a6c6:	80 91 2a 01 	lds	r24, 0x012A
    a6ca:	80 fd       	sbrc	r24, 0
    a6cc:	03 c0       	rjmp	.+6      	; 0xa6d4 <__vector_15+0x37e4>
					g_speedrandom=g_speed7;
    a6ce:	80 91 2c 01 	lds	r24, 0x012C
    a6d2:	1c c0       	rjmp	.+56     	; 0xa70c <__vector_15+0x381c>
					else
					g_speedrandom=g_speed7rev;
    a6d4:	80 91 4c 01 	lds	r24, 0x014C
    a6d8:	19 c0       	rjmp	.+50     	; 0xa70c <__vector_15+0x381c>
				}
				else	
					if (timer2tmp % 2 == 0)
    a6da:	80 91 39 01 	lds	r24, 0x0139
    a6de:	90 91 2a 01 	lds	r25, 0x012A
    a6e2:	28 2f       	mov	r18, r24
    a6e4:	21 70       	andi	r18, 0x01	; 1
    a6e6:	80 fd       	sbrc	r24, 0
    a6e8:	09 c0       	rjmp	.+18     	; 0xa6fc <__vector_15+0x380c>
					{
						g_speedrandom++;
    a6ea:	89 2f       	mov	r24, r25
    a6ec:	8f 5f       	subi	r24, 0xFF	; 255
    a6ee:	80 93 2a 01 	sts	0x012A, r24
						if(g_speedrandom == RESOLUTION)
    a6f2:	80 3f       	cpi	r24, 0xF0	; 240
    a6f4:	69 f4       	brne	.+26     	; 0xa710 <__vector_15+0x3820>
						g_speedrandom = 0;
    a6f6:	20 93 2a 01 	sts	0x012A, r18
    a6fa:	0a c0       	rjmp	.+20     	; 0xa710 <__vector_15+0x3820>
					}
					else
					{
						if(g_speedrandom == 0)
    a6fc:	99 23       	and	r25, r25
    a6fe:	19 f4       	brne	.+6      	; 0xa706 <__vector_15+0x3816>
						g_speedrandom =RESOLUTION;
    a700:	80 ef       	ldi	r24, 0xF0	; 240
    a702:	80 93 2a 01 	sts	0x012A, r24
						g_speedrandom--;
    a706:	80 91 2a 01 	lds	r24, 0x012A
    a70a:	81 50       	subi	r24, 0x01	; 1
    a70c:	80 93 2a 01 	sts	0x012A, r24
					}
					
				g_timer2_speedrandom2=0;
    a710:	10 92 30 01 	sts	0x0130, r1
			}
			
			g_timer2_speedrandom1=0;	
    a714:	10 92 11 01 	sts	0x0111, r1
    a718:	ff 91       	pop	r31
    a71a:	ef 91       	pop	r30
    a71c:	cf 91       	pop	r28
    a71e:	bf 91       	pop	r27
    a720:	af 91       	pop	r26
    a722:	9f 91       	pop	r25
    a724:	8f 91       	pop	r24
    a726:	7f 91       	pop	r23
    a728:	6f 91       	pop	r22
    a72a:	5f 91       	pop	r21
    a72c:	4f 91       	pop	r20
    a72e:	3f 91       	pop	r19
    a730:	2f 91       	pop	r18
    a732:	0f 90       	pop	r0
    a734:	0f be       	out	0x3f, r0	; 63
    a736:	0f 90       	pop	r0
    a738:	1f 90       	pop	r1
    a73a:	18 95       	reti

0000a73c <__vector_10>:
		}
	}
}

//################# TIMER2 overflow interupt routine #######################
//Timer2 is clocked using external 4096Hz generator (square wave from RTC)
//this routine updates internal time registers and clear some general purpose registers
ISR(TIMER2_OVF_vect)
{
    a73c:	1f 92       	push	r1
    a73e:	0f 92       	push	r0
    a740:	0f b6       	in	r0, 0x3f	; 63
    a742:	0f 92       	push	r0
    a744:	11 24       	eor	r1, r1
    a746:	2f 93       	push	r18
    a748:	6f 93       	push	r22
    a74a:	7f 93       	push	r23
    a74c:	8f 93       	push	r24
    a74e:	9f 93       	push	r25
	g_timer2_ovf++;  		//increase overflows counter
    a750:	80 91 29 01 	lds	r24, 0x0129
    a754:	8f 5f       	subi	r24, 0xFF	; 255
    a756:	80 93 29 01 	sts	0x0129, r24
	
	static uint8_t last_rc_bit_counter = 0;
	
	if(last_rc_bit_counter == g_rc_bit_counter) 	//this indicates error, transmission was stopped
    a75a:	90 91 04 01 	lds	r25, 0x0104
    a75e:	80 91 3d 01 	lds	r24, 0x013D
    a762:	98 17       	cp	r25, r24
    a764:	11 f4       	brne	.+4      	; 0xa76a <__vector_10+0x2e>
		g_rc_bit_counter = 0;						//clear remote control bit counter
    a766:	10 92 3d 01 	sts	0x013D, r1
	
	last_rc_bit_counter = g_rc_bit_counter;
    a76a:	80 91 3d 01 	lds	r24, 0x013D
    a76e:	80 93 04 01 	sts	0x0104, r24
	if(g_s_rc_state == STATE_SETTING)
    a772:	20 91 00 01 	lds	r18, 0x0100
    a776:	21 30       	cpi	r18, 0x01	; 1
    a778:	29 f4       	brne	.+10     	; 0xa784 <__vector_10+0x48>
	{
		c_timer2_ovf=16;
    a77a:	80 e1       	ldi	r24, 0x10	; 16
    a77c:	80 93 10 01 	sts	0x0110, r24
		c_rc_idle_counter=4;
    a780:	84 e0       	ldi	r24, 0x04	; 4
    a782:	03 c0       	rjmp	.+6      	; 0xa78a <__vector_10+0x4e>
	}
	else
	{
		c_timer2_ovf=4;
    a784:	84 e0       	ldi	r24, 0x04	; 4
    a786:	80 93 10 01 	sts	0x0110, r24
		c_rc_idle_counter=4;
    a78a:	80 93 38 01 	sts	0x0138, r24
	}

	if(g_timer2_ovf == c_timer2_ovf)	// 4*255*(1/4096Hz) = 0,25s elapsed
    a78e:	90 91 29 01 	lds	r25, 0x0129
    a792:	80 91 10 01 	lds	r24, 0x0110
    a796:	98 17       	cp	r25, r24
    a798:	09 f0       	breq	.+2      	; 0xa79c <__vector_10+0x60>
    a79a:	47 c0       	rjmp	.+142    	; 0xa82a <__vector_10+0xee>
	{	
		g_uart_counter = 0;  //clear uart char counter
    a79c:	10 92 34 01 	sts	0x0134, r1
		g_timer2_ovf = 0;    //clear timer2 overflow counter	
    a7a0:	10 92 29 01 	sts	0x0129, r1
		g_rc_idle_counter++; //increase remote control idle counter
    a7a4:	80 91 2e 01 	lds	r24, 0x012E
    a7a8:	8f 5f       	subi	r24, 0xFF	; 255
    a7aa:	80 93 2e 01 	sts	0x012E, r24
		
		if(g_rc_idle_counter == c_rc_idle_counter)
    a7ae:	90 91 38 01 	lds	r25, 0x0138
    a7b2:	89 17       	cp	r24, r25
    a7b4:	39 f4       	brne	.+14     	; 0xa7c4 <__vector_10+0x88>
		{	
			g_rc_idle_counter = 0;	
    a7b6:	10 92 2e 01 	sts	0x012E, r1
			g_rc_hold_counter = 0;	//clear button hold counter
    a7ba:	10 92 0d 01 	sts	0x010D, r1
			EIMSK |= _BV(RC_IN);
    a7be:	89 b7       	in	r24, 0x39	; 57
    a7c0:	80 62       	ori	r24, 0x20	; 32
    a7c2:	89 bf       	out	0x39, r24	; 57
		}
	if(g_rc_state != STATE_SETTING) //if time is being set don't update time registers
    a7c4:	80 91 02 01 	lds	r24, 0x0102
    a7c8:	81 30       	cpi	r24, 0x01	; 1
    a7ca:	79 f1       	breq	.+94     	; 0xa82a <__vector_10+0xee>
    a7cc:	80 91 42 01 	lds	r24, 0x0142
		{
			//remember that these valuse are already preprocessed so one full circle = 240 steps
		if(g_s_rc_state == STATE_SETTING)
    a7d0:	21 30       	cpi	r18, 0x01	; 1
    a7d2:	11 f4       	brne	.+4      	; 0xa7d8 <__vector_10+0x9c>
			g_seconds+=4;
    a7d4:	8c 5f       	subi	r24, 0xFC	; 252
    a7d6:	01 c0       	rjmp	.+2      	; 0xa7da <__vector_10+0x9e>
		else
			g_seconds++;
    a7d8:	8f 5f       	subi	r24, 0xFF	; 255
    a7da:	80 93 42 01 	sts	0x0142, r24
			if(g_seconds == RESOLUTION)
    a7de:	80 91 42 01 	lds	r24, 0x0142
    a7e2:	80 3f       	cpi	r24, 0xF0	; 240
    a7e4:	11 f4       	brne	.+4      	; 0xa7ea <__vector_10+0xae>
				g_seconds = 0;
    a7e6:	10 92 42 01 	sts	0x0142, r1
			if(g_seconds % 60 == 0)
    a7ea:	80 91 42 01 	lds	r24, 0x0142
    a7ee:	6c e3       	ldi	r22, 0x3C	; 60
    a7f0:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    a7f4:	99 23       	and	r25, r25
    a7f6:	c9 f4       	brne	.+50     	; 0xa82a <__vector_10+0xee>
			{		
				g_minutes++;
    a7f8:	80 91 22 01 	lds	r24, 0x0122
    a7fc:	8f 5f       	subi	r24, 0xFF	; 255
    a7fe:	80 93 22 01 	sts	0x0122, r24
				if(g_minutes == RESOLUTION)
    a802:	80 3f       	cpi	r24, 0xF0	; 240
    a804:	11 f4       	brne	.+4      	; 0xa80a <__vector_10+0xce>
					g_minutes = 0;
    a806:	90 93 22 01 	sts	0x0122, r25
				if(g_minutes % 12 == 0)
    a80a:	80 91 22 01 	lds	r24, 0x0122
    a80e:	6c e0       	ldi	r22, 0x0C	; 12
    a810:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    a814:	99 23       	and	r25, r25
    a816:	49 f4       	brne	.+18     	; 0xa82a <__vector_10+0xee>
				{
					g_hours++;
    a818:	80 91 4d 01 	lds	r24, 0x014D
    a81c:	8f 5f       	subi	r24, 0xFF	; 255
    a81e:	80 93 4d 01 	sts	0x014D, r24
					if(g_hours == RESOLUTION)
    a822:	80 3f       	cpi	r24, 0xF0	; 240
    a824:	11 f4       	brne	.+4      	; 0xa82a <__vector_10+0xee>
					g_hours = 0;
    a826:	90 93 4d 01 	sts	0x014D, r25
    a82a:	9f 91       	pop	r25
    a82c:	8f 91       	pop	r24
    a82e:	7f 91       	pop	r23
    a830:	6f 91       	pop	r22
    a832:	2f 91       	pop	r18
    a834:	0f 90       	pop	r0
    a836:	0f be       	out	0x3f, r0	; 63
    a838:	0f 90       	pop	r0
    a83a:	1f 90       	pop	r1
    a83c:	18 95       	reti

0000a83e <__vector_6>:
				}
			}	
		}
	}
}

//################# External interupt5 routine #######################
//Input INT5 is conntected to the IR receiver
//this routine is called either rising or falling edge comes on INT5
//Philips RC5 code is manchester linear code
ISR(INT5_vect)
{
    a83e:	1f 92       	push	r1
    a840:	0f 92       	push	r0
    a842:	0f b6       	in	r0, 0x3f	; 63
    a844:	0f 92       	push	r0
    a846:	11 24       	eor	r1, r1
    a848:	2f 93       	push	r18
    a84a:	3f 93       	push	r19
    a84c:	4f 93       	push	r20
    a84e:	5f 93       	push	r21
    a850:	6f 93       	push	r22
    a852:	7f 93       	push	r23
    a854:	8f 93       	push	r24
    a856:	9f 93       	push	r25
    a858:	af 93       	push	r26
    a85a:	bf 93       	push	r27
    a85c:	ef 93       	push	r30
    a85e:	ff 93       	push	r31
	static uint8_t timer2_buf_a = 0;
	static uint8_t timer2_buf_b = 0;		
	static uint8_t timer2_ovf_buf = 0;
	static uint16_t data_buf = 0;			//static buffer regeisters
	static uint8_t edge_position = 0;		//edge position indicator
											//if even the edge is at the begining of a bit
											//if odd the edge is in the of a bit
											//for more details see Manchester code specification
	
	uint8_t tmp_time;	
	uint8_t tmp_command;	//helpful registers

	g_rc_idle_counter = 0; 		//something is being received so clear rc idle register
    a860:	10 92 2e 01 	sts	0x012E, r1
	
	if(g_rc_bit_counter == 0)	//transmission has just begun
    a864:	40 91 3d 01 	lds	r20, 0x013D
    a868:	30 91 29 01 	lds	r19, 0x0129
    a86c:	44 23       	and	r20, r20
    a86e:	c1 f4       	brne	.+48     	; 0xa8a0 <__vector_6+0x62>
	{
		timer2_buf_a = TCNT2;			//store timer2 data register
    a870:	84 b5       	in	r24, 0x24	; 36
    a872:	80 93 05 01 	sts	0x0105, r24
		timer2_ovf_buf = g_timer2_ovf;	//and timer2 overflow counter
    a876:	30 93 07 01 	sts	0x0107, r19

		if(PINE & _BV(RC_IN))			//if RC_IN pin is high
    a87a:	0d 9b       	sbis	0x01, 5	; 1
    a87c:	05 c0       	rjmp	.+10     	; 0xa888 <__vector_6+0x4a>
			data_buf = 0x0000;			//error occured, this situation isn't correct
    a87e:	10 92 09 01 	sts	0x0109, r1
    a882:	10 92 08 01 	sts	0x0108, r1
    a886:	70 c0       	rjmp	.+224    	; 0xa968 <__vector_6+0x12a>
		else
		{
			data_buf = 0x8000;			//first start bit received
    a888:	80 e0       	ldi	r24, 0x00	; 0
    a88a:	90 e8       	ldi	r25, 0x80	; 128
    a88c:	90 93 09 01 	sts	0x0109, r25
    a890:	80 93 08 01 	sts	0x0108, r24
			g_rc_bit_counter++;			//increase bit counder
    a894:	81 e0       	ldi	r24, 0x01	; 1
    a896:	80 93 3d 01 	sts	0x013D, r24
			edge_position = 1;			//first received egde is in the middle of the bit
    a89a:	80 93 0a 01 	sts	0x010A, r24
    a89e:	64 c0       	rjmp	.+200    	; 0xa968 <__vector_6+0x12a>
		}
	}
	else
	{
		timer2_buf_b = TCNT2;		//store in register 'b'
    a8a0:	94 b5       	in	r25, 0x24	; 36
    a8a2:	90 93 06 01 	sts	0x0106, r25
		
		if(timer2_ovf_buf != g_timer2_ovf)	//if timer2 overflowed meanwhile
    a8a6:	80 91 07 01 	lds	r24, 0x0107
    a8aa:	20 91 05 01 	lds	r18, 0x0105
    a8ae:	83 17       	cp	r24, r19
    a8b0:	21 f0       	breq	.+8      	; 0xa8ba <__vector_6+0x7c>
		{
			tmp_time =  255 - timer2_buf_a + timer2_buf_b + 1;	//compute time since last edge
    a8b2:	92 1b       	sub	r25, r18
			timer2_ovf_buf = g_timer2_ovf;
    a8b4:	30 93 07 01 	sts	0x0107, r19
    a8b8:	01 c0       	rjmp	.+2      	; 0xa8bc <__vector_6+0x7e>
		}
		else
			tmp_time =  timer2_buf_b - timer2_buf_a;			//compute time since last edge
    a8ba:	92 1b       	sub	r25, r18
			
		timer2_buf_a = timer2_buf_b;							//update register 'a'
    a8bc:	80 91 06 01 	lds	r24, 0x0106
    a8c0:	80 93 05 01 	sts	0x0105, r24
		
		//if half of a bit time elapsed
		if((tmp_time >= HALF_BIT - DELTA) && (tmp_time <= HALF_BIT + DELTA)) 
    a8c4:	89 2f       	mov	r24, r25
    a8c6:	82 50       	subi	r24, 0x02	; 2
    a8c8:	83 30       	cpi	r24, 0x03	; 3
    a8ca:	20 f4       	brcc	.+8      	; 0xa8d4 <__vector_6+0x96>
		{
			edge_position++;			//increase edge position
    a8cc:	80 91 0a 01 	lds	r24, 0x010A
    a8d0:	8f 5f       	subi	r24, 0xFF	; 255
    a8d2:	06 c0       	rjmp	.+12     	; 0xa8e0 <__vector_6+0xa2>
			if(edge_position & 0x01)	//decode if it's middle-bit edge
			{
				if(!(PINE & _BV(RC_IN)))
					data_buf |= _BV(15 - g_rc_bit_counter);
					
				g_rc_bit_counter++;	
			}
		}
		//if one bit time elapsed
		else if((tmp_time >= ONE_BIT - DELTA) && (tmp_time <= ONE_BIT + DELTA))
    a8d4:	96 50       	subi	r25, 0x06	; 6
    a8d6:	93 30       	cpi	r25, 0x03	; 3
    a8d8:	20 f5       	brcc	.+72     	; 0xa922 <__vector_6+0xe4>
		{
			edge_position += 2;			//increase edge position with 2
    a8da:	80 91 0a 01 	lds	r24, 0x010A
    a8de:	8e 5f       	subi	r24, 0xFE	; 254
    a8e0:	80 93 0a 01 	sts	0x010A, r24
			
			if(edge_position & 0x01)	//decode if it's middle-bit edge
    a8e4:	80 ff       	sbrs	r24, 0
    a8e6:	1f c0       	rjmp	.+62     	; 0xa926 <__vector_6+0xe8>
			{
				if(!(PINE & _BV(RC_IN)))
    a8e8:	0d 99       	sbic	0x01, 5	; 1
    a8ea:	15 c0       	rjmp	.+42     	; 0xa916 <__vector_6+0xd8>
					data_buf |= _BV(15 - g_rc_bit_counter);
    a8ec:	8f e0       	ldi	r24, 0x0F	; 15
    a8ee:	90 e0       	ldi	r25, 0x00	; 0
    a8f0:	84 1b       	sub	r24, r20
    a8f2:	91 09       	sbc	r25, r1
    a8f4:	21 e0       	ldi	r18, 0x01	; 1
    a8f6:	30 e0       	ldi	r19, 0x00	; 0
    a8f8:	02 c0       	rjmp	.+4      	; 0xa8fe <__vector_6+0xc0>
    a8fa:	22 0f       	add	r18, r18
    a8fc:	33 1f       	adc	r19, r19
    a8fe:	8a 95       	dec	r24
    a900:	e2 f7       	brpl	.-8      	; 0xa8fa <__vector_6+0xbc>
    a902:	80 91 08 01 	lds	r24, 0x0108
    a906:	90 91 09 01 	lds	r25, 0x0109
    a90a:	82 2b       	or	r24, r18
    a90c:	93 2b       	or	r25, r19
    a90e:	90 93 09 01 	sts	0x0109, r25
    a912:	80 93 08 01 	sts	0x0108, r24
					
				g_rc_bit_counter++;	
    a916:	80 91 3d 01 	lds	r24, 0x013D
    a91a:	8f 5f       	subi	r24, 0xFF	; 255
    a91c:	80 93 3d 01 	sts	0x013D, r24
    a920:	02 c0       	rjmp	.+4      	; 0xa926 <__vector_6+0xe8>
			}			
		}
		else
			g_rc_bit_counter = 0;		//erroc ocurred, clear bit counter register
    a922:	10 92 3d 01 	sts	0x013D, r1
		
		if(g_rc_bit_counter == 14)		//if 14 bits are received
    a926:	80 91 3d 01 	lds	r24, 0x013D
    a92a:	8e 30       	cpi	r24, 0x0E	; 14
    a92c:	e9 f4       	brne	.+58     	; 0xa968 <__vector_6+0x12a>
		{
			//validate received data
			if((data_buf & _BV(15)) && (data_buf & _BV(14)))	//start bits are both '1'
    a92e:	20 91 08 01 	lds	r18, 0x0108
    a932:	30 91 09 01 	lds	r19, 0x0109
    a936:	37 ff       	sbrs	r19, 7
    a938:	15 c0       	rjmp	.+42     	; 0xa964 <__vector_6+0x126>
    a93a:	36 ff       	sbrs	r19, 6
    a93c:	13 c0       	rjmp	.+38     	; 0xa964 <__vector_6+0x126>
			{
				if(((data_buf >> 8) & 0b00011111) == DEVICE_ADDRESS)  //the message is addressed to the clock
    a93e:	83 2f       	mov	r24, r19
    a940:	99 27       	eor	r25, r25
    a942:	8f 71       	andi	r24, 0x1F	; 31
    a944:	90 70       	andi	r25, 0x00	; 0
    a946:	89 2b       	or	r24, r25
    a948:	69 f4       	brne	.+26     	; 0xa964 <__vector_6+0x126>
    a94a:	c9 01       	movw	r24, r18
    a94c:	96 95       	lsr	r25
    a94e:	87 95       	ror	r24
    a950:	96 95       	lsr	r25
    a952:	87 95       	ror	r24
				{
					if(data_buf & _BV(13)) //toogle bit is '1'
    a954:	35 ff       	sbrs	r19, 5
    a956:	03 c0       	rjmp	.+6      	; 0xa95e <__vector_6+0x120>
						tmp_command = 0b10000000 | ((data_buf >> 2) & 0b00111111);
    a958:	8f 73       	andi	r24, 0x3F	; 63
    a95a:	80 68       	ori	r24, 0x80	; 128
    a95c:	01 c0       	rjmp	.+2      	; 0xa960 <__vector_6+0x122>
					else
						tmp_command = ((data_buf >> 2) & 0b00111111);
    a95e:	8f 73       	andi	r24, 0x3F	; 63
					
					rc_process_command(tmp_command); //process received command	
    a960:	0e 94 2b 35 	call	0x6a56 <rc_process_command>
				}
			}
			
			g_rc_bit_counter = 0;
    a964:	10 92 3d 01 	sts	0x013D, r1
    a968:	ff 91       	pop	r31
    a96a:	ef 91       	pop	r30
    a96c:	bf 91       	pop	r27
    a96e:	af 91       	pop	r26
    a970:	9f 91       	pop	r25
    a972:	8f 91       	pop	r24
    a974:	7f 91       	pop	r23
    a976:	6f 91       	pop	r22
    a978:	5f 91       	pop	r21
    a97a:	4f 91       	pop	r20
    a97c:	3f 91       	pop	r19
    a97e:	2f 91       	pop	r18
    a980:	0f 90       	pop	r0
    a982:	0f be       	out	0x3f, r0	; 63
    a984:	0f 90       	pop	r0
    a986:	1f 90       	pop	r1
    a988:	18 95       	reti

0000a98a <init_timers>:
		}
		
	}
}

void init_timers(void)
{
	TCCR3B |= _BV(CS31);		//}
    a98a:	80 91 8a 00 	lds	r24, 0x008A
    a98e:	82 60       	ori	r24, 0x02	; 2
    a990:	80 93 8a 00 	sts	0x008A, r24
	ETIMSK |= _BV(TICIE3);		//}enable timer3 input capture interrupt on falling edge
    a994:	80 91 7d 00 	lds	r24, 0x007D
    a998:	80 62       	ori	r24, 0x20	; 32
    a99a:	80 93 7d 00 	sts	0x007D, r24
	
	TCCR0 |= _BV(WGM01) | _BV(CS01);	//}
    a99e:	83 b7       	in	r24, 0x33	; 51
    a9a0:	8a 60       	ori	r24, 0x0A	; 10
    a9a2:	83 bf       	out	0x33, r24	; 51
	OCR0 = 255;							//}enable timer0 output compare feature (LEDs PWM driving)
    a9a4:	8f ef       	ldi	r24, 0xFF	; 255
    a9a6:	81 bf       	out	0x31, r24	; 49
	
	TCCR2 |= _BV(CS22) | _BV(CS21); 	//}configure timer2 as a external clocked counter
    a9a8:	85 b5       	in	r24, 0x25	; 37
    a9aa:	86 60       	ori	r24, 0x06	; 6
    a9ac:	85 bd       	out	0x25, r24	; 37
	TIMSK |= _BV(TOIE2);				//}and enable overflow interupt
    a9ae:	87 b7       	in	r24, 0x37	; 55
    a9b0:	80 64       	ori	r24, 0x40	; 64
    a9b2:	87 bf       	out	0x37, r24	; 55
	
	TCCR1A |= (_BV(WGM11) | _BV(COM1A1) | _BV(COM1B1) | _BV(COM1C1)| 	//}enable timer1 
    a9b4:	8f b5       	in	r24, 0x2f	; 47
    a9b6:	8e 6f       	ori	r24, 0xFE	; 254
    a9b8:	8f bd       	out	0x2f, r24	; 47
	_BV(COM1A0) | _BV(COM1B0) | _BV(COM1C0));							//}output compare
																		//}mode
	TCCR1B |= (_BV(WGM13) | _BV(WGM12) |  _BV(CS10));					//}negative polarity
    a9ba:	8e b5       	in	r24, 0x2e	; 46
    a9bc:	89 61       	ori	r24, 0x19	; 25
    a9be:	8e bd       	out	0x2e, r24	; 46
																		
	ICR1 = PWM_TOP;														//set PWM top value
    a9c0:	87 e2       	ldi	r24, 0x27	; 39
    a9c2:	90 e0       	ldi	r25, 0x00	; 0
    a9c4:	97 bd       	out	0x27, r25	; 39
    a9c6:	86 bd       	out	0x26, r24	; 38
	PWM_RED = PWM_TOP;													//}
    a9c8:	9b bd       	out	0x2b, r25	; 43
    a9ca:	8a bd       	out	0x2a, r24	; 42
	PWM_GREEN = PWM_TOP;												//}turn off all leds
    a9cc:	99 bd       	out	0x29, r25	; 41
    a9ce:	88 bd       	out	0x28, r24	; 40
	PWM_BLUE = PWM_TOP;													//}
    a9d0:	90 93 79 00 	sts	0x0079, r25
    a9d4:	80 93 78 00 	sts	0x0078, r24
    a9d8:	08 95       	ret

0000a9da <main>:
	
}

int main(void)
{
    a9da:	cf ef       	ldi	r28, 0xFF	; 255
    a9dc:	d0 e1       	ldi	r29, 0x10	; 16
    a9de:	de bf       	out	0x3e, r29	; 62
    a9e0:	cd bf       	out	0x3d, r28	; 61
	//initialization
	MOTDDR |= _BV(MOTPIN);
    a9e2:	d0 9a       	sbi	0x1a, 0	; 26
	LEDDDR |= _BV(RED_LED) | _BV(GREEN_LED) | _BV(BLUE_LED) ; 
    a9e4:	87 b3       	in	r24, 0x17	; 23
    a9e6:	80 6e       	ori	r24, 0xE0	; 224
    a9e8:	87 bb       	out	0x17, r24	; 23
	MOT_OFF();
    a9ea:	d8 98       	cbi	0x1b, 0	; 27
	init_i2c();
    a9ec:	0e 94 5e 55 	call	0xaabc <init_i2c>
	init_timers();
    a9f0:	0e 94 c5 54 	call	0xa98a <init_timers>
	USART1_Init ( MYUBRR );
    a9f4:	89 e1       	ldi	r24, 0x19	; 25
    a9f6:	90 e0       	ldi	r25, 0x00	; 0
    a9f8:	0e 94 fe 34 	call	0x69fc <USART1_Init>
	
	EICRB |= _BV(ISC50);
    a9fc:	8a b7       	in	r24, 0x3a	; 58
    a9fe:	84 60       	ori	r24, 0x04	; 4
    aa00:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= _BV(RC_IN); //enable RC interrupt, both edges
    aa02:	89 b7       	in	r24, 0x39	; 57
    aa04:	80 62       	ori	r24, 0x20	; 32
    aa06:	89 bf       	out	0x39, r24	; 57
	
	//g_mode = 42; 		//radioactivity mode at start 42
	g_mh_mode = 5;		//white hands at start
    aa08:	85 e0       	ldi	r24, 0x05	; 5
    aa0a:	80 93 0c 01 	sts	0x010C, r24
	g_hh_mode = 5;		//white hands at start
    aa0e:	80 93 35 01 	sts	0x0135, r24
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
    aa12:	80 e0       	ldi	r24, 0x00	; 0
    aa14:	90 e0       	ldi	r25, 0x00	; 0
    aa16:	fc 01       	movw	r30, r24
    aa18:	31 97       	sbiw	r30, 0x01	; 1
    aa1a:	f1 f7       	brne	.-4      	; 0xaa18 <main+0x3e>
	
	_delay_ms(200);	
	_delay_ms(200);	//wait for all devices to warm up

	
	SetPointer(0x00);					//set i2c pointer to the begin
    aa1c:	01 97       	sbiw	r24, 0x01	; 1
    aa1e:	f1 f7       	brne	.-4      	; 0xaa1c <main+0x42>
    aa20:	80 e0       	ldi	r24, 0x00	; 0
    aa22:	0e 94 64 55 	call	0xaac8 <SetPointer>
	ReadBufI2C(g_data_rtc, 8);			//read all data
    aa26:	68 e0       	ldi	r22, 0x08	; 8
    aa28:	84 e4       	ldi	r24, 0x44	; 68
    aa2a:	91 e0       	ldi	r25, 0x01	; 1
    aa2c:	0e 94 73 56 	call	0xace6 <ReadBufI2C>

	WriteI2C(SECONDS_ADDR, 0b01111111 & g_data_rtc[SECONDS_ADDR]); //enable oscilator
    aa30:	80 91 44 01 	lds	r24, 0x0144
    aa34:	8f 77       	andi	r24, 0x7F	; 127
    aa36:	68 2f       	mov	r22, r24
    aa38:	80 e0       	ldi	r24, 0x00	; 0
    aa3a:	0e 94 a1 55 	call	0xab42 <WriteI2C>
	WriteI2C(CONTROL_ADDR, 0b10010001); 							//enable RTC square wave output,
    aa3e:	61 e9       	ldi	r22, 0x91	; 145
    aa40:	87 e0       	ldi	r24, 0x07	; 7
    aa42:	0e 94 a1 55 	call	0xab42 <WriteI2C>
																	//without these lines RC will not work
																	//and all hands will stay still
	
	g_data_rtc[HOURS_ADDR] &= 0b00011111; //mask am/pm bit
    aa46:	80 91 46 01 	lds	r24, 0x0146
    aa4a:	8f 71       	andi	r24, 0x1F	; 31
    aa4c:	80 93 46 01 	sts	0x0146, r24
    aa50:	c4 e4       	ldi	r28, 0x44	; 68
    aa52:	d1 e0       	ldi	r29, 0x01	; 1
    aa54:	17 e0       	ldi	r17, 0x07	; 7
	
	uint8_t i;
	for(i = 0; i < 8; i++)
		g_data_rtc[i] = BCDtoDEC(g_data_rtc[i]); //convert to decimal format
    aa56:	88 81       	ld	r24, Y
    aa58:	0e 94 c4 56 	call	0xad88 <BCDtoDEC>
    aa5c:	89 93       	st	Y+, r24
    aa5e:	11 50       	subi	r17, 0x01	; 1
    aa60:	17 ff       	sbrs	r17, 7
    aa62:	f9 cf       	rjmp	.-14     	; 0xaa56 <main+0x7c>
	
	//now these values must be preprocessed to RESOLUTIONsteps/cicrle format
	g_seconds = 4*g_data_rtc[SECONDS_ADDR] ;
    aa64:	30 91 44 01 	lds	r19, 0x0144
    aa68:	83 2f       	mov	r24, r19
    aa6a:	99 27       	eor	r25, r25
    aa6c:	88 0f       	add	r24, r24
    aa6e:	99 1f       	adc	r25, r25
    aa70:	88 0f       	add	r24, r24
    aa72:	99 1f       	adc	r25, r25
    aa74:	80 93 42 01 	sts	0x0142, r24
	g_minutes = 4*g_data_rtc[MINUTES_ADDR] + (g_data_rtc[SECONDS_ADDR] / 15);
    aa78:	40 91 45 01 	lds	r20, 0x0145
    aa7c:	24 2f       	mov	r18, r20
    aa7e:	22 0f       	add	r18, r18
    aa80:	22 0f       	add	r18, r18
    aa82:	83 2f       	mov	r24, r19
    aa84:	6f e0       	ldi	r22, 0x0F	; 15
    aa86:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    aa8a:	28 0f       	add	r18, r24
    aa8c:	20 93 22 01 	sts	0x0122, r18
	g_hours   = 20*(g_data_rtc[HOURS_ADDR]%12) + (g_data_rtc[MINUTES_ADDR]/3);
    aa90:	80 91 46 01 	lds	r24, 0x0146
    aa94:	6c e0       	ldi	r22, 0x0C	; 12
    aa96:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    aa9a:	84 e1       	ldi	r24, 0x14	; 20
    aa9c:	98 9f       	mul	r25, r24
    aa9e:	90 01       	movw	r18, r0
    aaa0:	11 24       	eor	r1, r1
    aaa2:	84 2f       	mov	r24, r20
    aaa4:	63 e0       	ldi	r22, 0x03	; 3
    aaa6:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    aaaa:	82 0f       	add	r24, r18
    aaac:	80 93 4d 01 	sts	0x014D, r24
		
	MOT_ON(); 		//start the motor
    aab0:	d8 9a       	sbi	0x1b, 0	; 27
	g_power_on = 1;	//set power indicator
    aab2:	81 e0       	ldi	r24, 0x01	; 1
    aab4:	80 93 20 01 	sts	0x0120, r24
	sei();			//enable interrupts
    aab8:	78 94       	sei
	

	
	while(1);		//and let them do all the job
    aaba:	ff cf       	rjmp	.-2      	; 0xaaba <main+0xe0>

0000aabc <init_i2c>:

//###################################################################
void init_i2c(void)
{
	TWBR = 72;
    aabc:	88 e4       	ldi	r24, 0x48	; 72
    aabe:	80 93 70 00 	sts	0x0070, r24
	TWSR = 0; 
    aac2:	10 92 71 00 	sts	0x0071, r1
    aac6:	08 95       	ret

0000aac8 <SetPointer>:
}
//###################################################################
uint8_t SetPointer(uint8_t Address)
{
    aac8:	48 2f       	mov	r20, r24
	TWCR = TW_MT_SEND_START;
    aaca:	84 ea       	ldi	r24, 0xA4	; 164
    aacc:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    aad0:	80 91 74 00 	lds	r24, 0x0074
    aad4:	88 23       	and	r24, r24
    aad6:	e4 f7       	brge	.-8      	; 0xaad0 <SetPointer+0x8>
	
	if(!(TWSR & TW_START))
    aad8:	80 91 71 00 	lds	r24, 0x0071
    aadc:	99 27       	eor	r25, r25
    aade:	9c 01       	movw	r18, r24
    aae0:	28 70       	andi	r18, 0x08	; 8
    aae2:	30 70       	andi	r19, 0x00	; 0
    aae4:	83 fd       	sbrc	r24, 3
    aae6:	02 c0       	rjmp	.+4      	; 0xaaec <SetPointer+0x24>
		return 0;
    aae8:	c9 01       	movw	r24, r18
    aaea:	08 95       	ret

	TWDR = SLA_W;
    aaec:	80 ed       	ldi	r24, 0xD0	; 208
    aaee:	80 93 73 00 	sts	0x0073, r24
	TWCR = _BV(TWINT) | _BV(TWEN);
    aaf2:	84 e8       	ldi	r24, 0x84	; 132
    aaf4:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    aaf8:	80 91 74 00 	lds	r24, 0x0074
    aafc:	88 23       	and	r24, r24
    aafe:	e4 f7       	brge	.-8      	; 0xaaf8 <SetPointer+0x30>

	if(!(TWSR & TW_MT_SLA_ACK))
    ab00:	80 91 71 00 	lds	r24, 0x0071
    ab04:	99 27       	eor	r25, r25
    ab06:	88 71       	andi	r24, 0x18	; 24
    ab08:	90 70       	andi	r25, 0x00	; 0
    ab0a:	00 97       	sbiw	r24, 0x00	; 0
    ab0c:	c9 f0       	breq	.+50     	; 0xab40 <SetPointer+0x78>
		return 0;
		
	TWDR = Address;
    ab0e:	40 93 73 00 	sts	0x0073, r20
	TWCR = _BV(TWINT) | _BV(TWEN);	
    ab12:	84 e8       	ldi	r24, 0x84	; 132
    ab14:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    ab18:	80 91 74 00 	lds	r24, 0x0074
    ab1c:	88 23       	and	r24, r24
    ab1e:	e4 f7       	brge	.-8      	; 0xab18 <SetPointer+0x50>
			 
	if(!(TWSR & TW_MT_DATA_ACK))
    ab20:	80 91 71 00 	lds	r24, 0x0071
    ab24:	99 27       	eor	r25, r25
    ab26:	88 72       	andi	r24, 0x28	; 40
    ab28:	90 70       	andi	r25, 0x00	; 0
    ab2a:	00 97       	sbiw	r24, 0x00	; 0
    ab2c:	49 f0       	breq	.+18     	; 0xab40 <SetPointer+0x78>
		return 0;
		
	TWCR = TW_MT_SEND_STOP;
    ab2e:	84 e9       	ldi	r24, 0x94	; 148
    ab30:	80 93 74 00 	sts	0x0074, r24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
    ab34:	80 ea       	ldi	r24, 0xA0	; 160
    ab36:	9f e0       	ldi	r25, 0x0F	; 15
    ab38:	01 97       	sbiw	r24, 0x01	; 1
    ab3a:	f1 f7       	brne	.-4      	; 0xab38 <SetPointer+0x70>
	_delay_ms(1);
	return 1;
    ab3c:	81 e0       	ldi	r24, 0x01	; 1
    ab3e:	90 e0       	ldi	r25, 0x00	; 0
}
    ab40:	08 95       	ret

0000ab42 <WriteI2C>:
//###################################################################
uint8_t WriteI2C(uint8_t Address, uint8_t Data)
{
    ab42:	48 2f       	mov	r20, r24
	TWCR = TW_MT_SEND_START;
    ab44:	84 ea       	ldi	r24, 0xA4	; 164
    ab46:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    ab4a:	80 91 74 00 	lds	r24, 0x0074
    ab4e:	88 23       	and	r24, r24
    ab50:	e4 f7       	brge	.-8      	; 0xab4a <WriteI2C+0x8>
	
	if(!(TWSR & TW_START))
    ab52:	80 91 71 00 	lds	r24, 0x0071
    ab56:	99 27       	eor	r25, r25
    ab58:	9c 01       	movw	r18, r24
    ab5a:	28 70       	andi	r18, 0x08	; 8
    ab5c:	30 70       	andi	r19, 0x00	; 0
    ab5e:	83 fd       	sbrc	r24, 3
    ab60:	02 c0       	rjmp	.+4      	; 0xab66 <WriteI2C+0x24>
		return 0;
    ab62:	c9 01       	movw	r24, r18
    ab64:	08 95       	ret
	

	TWDR = SLA_W;
    ab66:	80 ed       	ldi	r24, 0xD0	; 208
    ab68:	80 93 73 00 	sts	0x0073, r24
	TWCR = _BV(TWINT) | _BV(TWEN);
    ab6c:	84 e8       	ldi	r24, 0x84	; 132
    ab6e:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    ab72:	80 91 74 00 	lds	r24, 0x0074
    ab76:	88 23       	and	r24, r24
    ab78:	e4 f7       	brge	.-8      	; 0xab72 <WriteI2C+0x30>

	if(!(TWSR & TW_MT_SLA_ACK))
    ab7a:	80 91 71 00 	lds	r24, 0x0071
    ab7e:	99 27       	eor	r25, r25
    ab80:	88 71       	andi	r24, 0x18	; 24
    ab82:	90 70       	andi	r25, 0x00	; 0
    ab84:	00 97       	sbiw	r24, 0x00	; 0
    ab86:	49 f1       	breq	.+82     	; 0xabda <WriteI2C+0x98>
		return 0;
		
	TWDR = Address;
    ab88:	40 93 73 00 	sts	0x0073, r20
	TWCR = _BV(TWINT) | _BV(TWEN);	
    ab8c:	84 e8       	ldi	r24, 0x84	; 132
    ab8e:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    ab92:	80 91 74 00 	lds	r24, 0x0074
    ab96:	88 23       	and	r24, r24
    ab98:	e4 f7       	brge	.-8      	; 0xab92 <WriteI2C+0x50>
			
	if(!(TWSR & TW_MT_DATA_ACK))
    ab9a:	80 91 71 00 	lds	r24, 0x0071
    ab9e:	99 27       	eor	r25, r25
    aba0:	88 72       	andi	r24, 0x28	; 40
    aba2:	90 70       	andi	r25, 0x00	; 0
    aba4:	00 97       	sbiw	r24, 0x00	; 0
    aba6:	c9 f0       	breq	.+50     	; 0xabda <WriteI2C+0x98>
		return 0;
		
	TWDR = Data;
    aba8:	60 93 73 00 	sts	0x0073, r22
	TWCR = _BV(TWINT) | _BV(TWEN);	
    abac:	84 e8       	ldi	r24, 0x84	; 132
    abae:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));	
    abb2:	80 91 74 00 	lds	r24, 0x0074
    abb6:	88 23       	and	r24, r24
    abb8:	e4 f7       	brge	.-8      	; 0xabb2 <WriteI2C+0x70>

	if(!(TWSR & TW_MT_DATA_ACK))
    abba:	80 91 71 00 	lds	r24, 0x0071
    abbe:	99 27       	eor	r25, r25
    abc0:	88 72       	andi	r24, 0x28	; 40
    abc2:	90 70       	andi	r25, 0x00	; 0
    abc4:	00 97       	sbiw	r24, 0x00	; 0
    abc6:	49 f0       	breq	.+18     	; 0xabda <WriteI2C+0x98>
		return 0;
	
	TWCR = TW_MT_SEND_STOP;
    abc8:	84 e9       	ldi	r24, 0x94	; 148
    abca:	80 93 74 00 	sts	0x0074, r24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
    abce:	80 ea       	ldi	r24, 0xA0	; 160
    abd0:	9f e0       	ldi	r25, 0x0F	; 15
    abd2:	01 97       	sbiw	r24, 0x01	; 1
    abd4:	f1 f7       	brne	.-4      	; 0xabd2 <WriteI2C+0x90>
	_delay_ms(1);
	return 1;
    abd6:	81 e0       	ldi	r24, 0x01	; 1
    abd8:	90 e0       	ldi	r25, 0x00	; 0
}
    abda:	08 95       	ret

0000abdc <WriteBufI2C>:
//###################################################################
uint8_t WriteBufI2C(uint8_t Address, uint8_t *Data, uint8_t Len)
{
    abdc:	58 2f       	mov	r21, r24
	uint8_t Poz;
	TWCR = TW_MT_SEND_START;
    abde:	84 ea       	ldi	r24, 0xA4	; 164
    abe0:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    abe4:	80 91 74 00 	lds	r24, 0x0074
    abe8:	88 23       	and	r24, r24
    abea:	e4 f7       	brge	.-8      	; 0xabe4 <WriteBufI2C+0x8>
	
	if(!(TWSR & TW_START))
    abec:	80 91 71 00 	lds	r24, 0x0071
    abf0:	99 27       	eor	r25, r25
    abf2:	9c 01       	movw	r18, r24
    abf4:	28 70       	andi	r18, 0x08	; 8
    abf6:	30 70       	andi	r19, 0x00	; 0
    abf8:	83 fd       	sbrc	r24, 3
    abfa:	02 c0       	rjmp	.+4      	; 0xac00 <WriteBufI2C+0x24>
		return 0;
    abfc:	c9 01       	movw	r24, r18
    abfe:	08 95       	ret

	TWDR = SLA_W;
    ac00:	80 ed       	ldi	r24, 0xD0	; 208
    ac02:	80 93 73 00 	sts	0x0073, r24
	TWCR = _BV(TWINT) | _BV(TWEN);
    ac06:	84 e8       	ldi	r24, 0x84	; 132
    ac08:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    ac0c:	80 91 74 00 	lds	r24, 0x0074
    ac10:	88 23       	and	r24, r24
    ac12:	e4 f7       	brge	.-8      	; 0xac0c <WriteBufI2C+0x30>

	if(!(TWSR & TW_MT_SLA_ACK))
    ac14:	80 91 71 00 	lds	r24, 0x0071
    ac18:	99 27       	eor	r25, r25
    ac1a:	88 71       	andi	r24, 0x18	; 24
    ac1c:	90 70       	andi	r25, 0x00	; 0
    ac1e:	00 97       	sbiw	r24, 0x00	; 0
    ac20:	99 f1       	breq	.+102    	; 0xac88 <WriteBufI2C+0xac>
		return 0;
		
	TWDR = Address;
    ac22:	50 93 73 00 	sts	0x0073, r21
	TWCR = _BV(TWINT) | _BV(TWEN);	
    ac26:	84 e8       	ldi	r24, 0x84	; 132
    ac28:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    ac2c:	80 91 74 00 	lds	r24, 0x0074
    ac30:	88 23       	and	r24, r24
    ac32:	e4 f7       	brge	.-8      	; 0xac2c <WriteBufI2C+0x50>
			
	if(!(TWSR & TW_MT_DATA_ACK))
    ac34:	80 91 71 00 	lds	r24, 0x0071
    ac38:	99 27       	eor	r25, r25
    ac3a:	88 72       	andi	r24, 0x28	; 40
    ac3c:	90 70       	andi	r25, 0x00	; 0
    ac3e:	00 97       	sbiw	r24, 0x00	; 0
    ac40:	19 f1       	breq	.+70     	; 0xac88 <WriteBufI2C+0xac>
		return 0;
	
	for(Poz = 0; Poz < Len; Poz++)
    ac42:	20 e0       	ldi	r18, 0x00	; 0
    ac44:	24 17       	cp	r18, r20
    ac46:	b8 f4       	brcc	.+46     	; 0xac76 <WriteBufI2C+0x9a>
    ac48:	34 e8       	ldi	r19, 0x84	; 132
	{
		TWDR = Data[Poz];
    ac4a:	fb 01       	movw	r30, r22
    ac4c:	e2 0f       	add	r30, r18
    ac4e:	f1 1d       	adc	r31, r1
    ac50:	80 81       	ld	r24, Z
    ac52:	80 93 73 00 	sts	0x0073, r24
		TWCR = _BV(TWINT) | _BV(TWEN);	
    ac56:	30 93 74 00 	sts	0x0074, r19
		while(!(TWCR & _BV(TWINT)));	
    ac5a:	80 91 74 00 	lds	r24, 0x0074
    ac5e:	88 23       	and	r24, r24
    ac60:	e4 f7       	brge	.-8      	; 0xac5a <WriteBufI2C+0x7e>
	
		if(!(TWSR & TW_MT_DATA_ACK))
    ac62:	80 91 71 00 	lds	r24, 0x0071
    ac66:	99 27       	eor	r25, r25
    ac68:	88 72       	andi	r24, 0x28	; 40
    ac6a:	90 70       	andi	r25, 0x00	; 0
    ac6c:	00 97       	sbiw	r24, 0x00	; 0
    ac6e:	61 f0       	breq	.+24     	; 0xac88 <WriteBufI2C+0xac>
    ac70:	2f 5f       	subi	r18, 0xFF	; 255
    ac72:	24 17       	cp	r18, r20
    ac74:	50 f3       	brcs	.-44     	; 0xac4a <WriteBufI2C+0x6e>
			return 0;
	}
	
	TWCR = TW_MT_SEND_STOP;
    ac76:	84 e9       	ldi	r24, 0x94	; 148
    ac78:	80 93 74 00 	sts	0x0074, r24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
    ac7c:	80 ea       	ldi	r24, 0xA0	; 160
    ac7e:	9f e0       	ldi	r25, 0x0F	; 15
    ac80:	01 97       	sbiw	r24, 0x01	; 1
    ac82:	f1 f7       	brne	.-4      	; 0xac80 <WriteBufI2C+0xa4>
	_delay_ms(1);
	return 1;
    ac84:	81 e0       	ldi	r24, 0x01	; 1
    ac86:	90 e0       	ldi	r25, 0x00	; 0
}
    ac88:	08 95       	ret

0000ac8a <ReadI2C>:
//###################################################################
uint8_t ReadI2C(void)
{
	uint8_t Result = 0x01;
    ac8a:	21 e0       	ldi	r18, 0x01	; 1
	TWCR = TW_MR_SEND_START;
    ac8c:	84 ea       	ldi	r24, 0xA4	; 164
    ac8e:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    ac92:	80 91 74 00 	lds	r24, 0x0074
    ac96:	88 23       	and	r24, r24
    ac98:	e4 f7       	brge	.-8      	; 0xac92 <ReadI2C+0x8>
	
	if(TWSR & TW_START)
    ac9a:	80 91 71 00 	lds	r24, 0x0071
    ac9e:	83 ff       	sbrs	r24, 3
    aca0:	1b c0       	rjmp	.+54     	; 0xacd8 <ReadI2C+0x4e>
	{
		Result = 0xf0;
    aca2:	20 ef       	ldi	r18, 0xF0	; 240
		TWDR = SLA_R;
    aca4:	81 ed       	ldi	r24, 0xD1	; 209
    aca6:	80 93 73 00 	sts	0x0073, r24
		TWCR = _BV(TWINT) | _BV(TWEN);
    acaa:	84 e8       	ldi	r24, 0x84	; 132
    acac:	80 93 74 00 	sts	0x0074, r24
		while(!(TWCR & _BV(TWINT)));	
    acb0:	80 91 74 00 	lds	r24, 0x0074
    acb4:	88 23       	and	r24, r24
    acb6:	e4 f7       	brge	.-8      	; 0xacb0 <ReadI2C+0x26>
		
		if(TWSR & TW_MR_SLA_ACK)
    acb8:	80 91 71 00 	lds	r24, 0x0071
    acbc:	86 ff       	sbrs	r24, 6
    acbe:	0c c0       	rjmp	.+24     	; 0xacd8 <ReadI2C+0x4e>
		{
			TWCR = _BV(TWINT) | _BV(TWEN);
    acc0:	84 e8       	ldi	r24, 0x84	; 132
    acc2:	80 93 74 00 	sts	0x0074, r24
			
			while(!(TWCR & _BV(TWINT)));
    acc6:	80 91 74 00 	lds	r24, 0x0074
    acca:	88 23       	and	r24, r24
    accc:	e4 f7       	brge	.-8      	; 0xacc6 <ReadI2C+0x3c>
			
			Result = TWDR;
    acce:	20 91 73 00 	lds	r18, 0x0073
			TWCR = TW_MR_SEND_STOP;
    acd2:	84 e9       	ldi	r24, 0x94	; 148
    acd4:	80 93 74 00 	sts	0x0074, r24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
    acd8:	80 ea       	ldi	r24, 0xA0	; 160
    acda:	9f e0       	ldi	r25, 0x0F	; 15
    acdc:	01 97       	sbiw	r24, 0x01	; 1
    acde:	f1 f7       	brne	.-4      	; 0xacdc <ReadI2C+0x52>
			
		}
	}
	_delay_ms(1);
	return Result;
}
    ace0:	82 2f       	mov	r24, r18
    ace2:	99 27       	eor	r25, r25
    ace4:	08 95       	ret

0000ace6 <ReadBufI2C>:
//###################################################################
void ReadBufI2C(uint8_t *Buf, uint8_t Len)
{
    ace6:	dc 01       	movw	r26, r24
	uint8_t Poz;
	TWCR = TW_MR_SEND_START;
    ace8:	84 ea       	ldi	r24, 0xA4	; 164
    acea:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    acee:	80 91 74 00 	lds	r24, 0x0074
    acf2:	88 23       	and	r24, r24
    acf4:	e4 f7       	brge	.-8      	; 0xacee <ReadBufI2C+0x8>
	
	if(TWSR & TW_START)
    acf6:	80 91 71 00 	lds	r24, 0x0071
    acfa:	83 ff       	sbrs	r24, 3
    acfc:	37 c0       	rjmp	.+110    	; 0xad6c <ReadBufI2C+0x86>
	{
		TWDR = SLA_R;
    acfe:	81 ed       	ldi	r24, 0xD1	; 209
    ad00:	80 93 73 00 	sts	0x0073, r24
		TWCR = _BV(TWINT) | _BV(TWEN);
    ad04:	84 e8       	ldi	r24, 0x84	; 132
    ad06:	80 93 74 00 	sts	0x0074, r24
		while(!(TWCR & _BV(TWINT)));	
    ad0a:	80 91 74 00 	lds	r24, 0x0074
    ad0e:	88 23       	and	r24, r24
    ad10:	e4 f7       	brge	.-8      	; 0xad0a <ReadBufI2C+0x24>
		
		if(TWSR & TW_MR_SLA_ACK)
    ad12:	80 91 71 00 	lds	r24, 0x0071
    ad16:	86 ff       	sbrs	r24, 6
    ad18:	29 c0       	rjmp	.+82     	; 0xad6c <ReadBufI2C+0x86>
		{
			
			for(Poz = 0; Poz < Len - 1; Poz++)
    ad1a:	20 e0       	ldi	r18, 0x00	; 0
    ad1c:	77 27       	eor	r23, r23
    ad1e:	61 50       	subi	r22, 0x01	; 1
    ad20:	70 40       	sbci	r23, 0x00	; 0
    ad22:	16 16       	cp	r1, r22
    ad24:	17 06       	cpc	r1, r23
    ad26:	9c f4       	brge	.+38     	; 0xad4e <ReadBufI2C+0x68>
    ad28:	34 ec       	ldi	r19, 0xC4	; 196
			{	
				TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
    ad2a:	30 93 74 00 	sts	0x0074, r19
				while(!(TWCR & _BV(TWINT)));
    ad2e:	80 91 74 00 	lds	r24, 0x0074
    ad32:	88 23       	and	r24, r24
    ad34:	e4 f7       	brge	.-8      	; 0xad2e <ReadBufI2C+0x48>
			
				Buf[Poz] = TWDR;
    ad36:	fd 01       	movw	r30, r26
    ad38:	e2 0f       	add	r30, r18
    ad3a:	f1 1d       	adc	r31, r1
    ad3c:	80 91 73 00 	lds	r24, 0x0073
    ad40:	80 83       	st	Z, r24
    ad42:	2f 5f       	subi	r18, 0xFF	; 255
    ad44:	82 2f       	mov	r24, r18
    ad46:	99 27       	eor	r25, r25
    ad48:	86 17       	cp	r24, r22
    ad4a:	97 07       	cpc	r25, r23
    ad4c:	74 f3       	brlt	.-36     	; 0xad2a <ReadBufI2C+0x44>
			}
			
			TWCR = _BV(TWINT) | _BV(TWEN);
    ad4e:	84 e8       	ldi	r24, 0x84	; 132
    ad50:	80 93 74 00 	sts	0x0074, r24
			while(!(TWCR & _BV(TWINT)));
    ad54:	80 91 74 00 	lds	r24, 0x0074
    ad58:	88 23       	and	r24, r24
    ad5a:	e4 f7       	brge	.-8      	; 0xad54 <ReadBufI2C+0x6e>
			
			Buf[Poz] = TWDR;
    ad5c:	a2 0f       	add	r26, r18
    ad5e:	b1 1d       	adc	r27, r1
    ad60:	80 91 73 00 	lds	r24, 0x0073
    ad64:	8c 93       	st	X, r24
			TWCR = TW_MR_SEND_STOP;
    ad66:	84 e9       	ldi	r24, 0x94	; 148
    ad68:	80 93 74 00 	sts	0x0074, r24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
    ad6c:	80 ea       	ldi	r24, 0xA0	; 160
    ad6e:	9f e0       	ldi	r25, 0x0F	; 15
    ad70:	01 97       	sbiw	r24, 0x01	; 1
    ad72:	f1 f7       	brne	.-4      	; 0xad70 <ReadBufI2C+0x8a>
    ad74:	08 95       	ret

0000ad76 <RTC_SetValue>:

//I2C handling procedures
void RTC_SetValue(uint8_t Address, uint8_t Value)
{
	WriteI2C(Address, Value);
    ad76:	0e 94 a1 55 	call	0xab42 <WriteI2C>
    ad7a:	08 95       	ret

0000ad7c <RTC_ReadValue>:
}

uint8_t RTC_ReadValue(uint8_t Address)
{
	SetPointer(Address);
    ad7c:	0e 94 64 55 	call	0xaac8 <SetPointer>
	return ReadI2C();
    ad80:	0e 94 45 56 	call	0xac8a <ReadI2C>
}
    ad84:	99 27       	eor	r25, r25
    ad86:	08 95       	ret

0000ad88 <BCDtoDEC>:

//Binary-coded-decimal to decimal converting procedure
uint8_t BCDtoDEC(uint8_t BCDValue)
{
    ad88:	48 2f       	mov	r20, r24
	return ((BCDValue & 0x0f) + (10 * ((BCDValue >> 4) & 0x0f)));
    ad8a:	82 95       	swap	r24
    ad8c:	8f 70       	andi	r24, 0x0F	; 15
    ad8e:	28 2f       	mov	r18, r24
    ad90:	33 27       	eor	r19, r19
    ad92:	c9 01       	movw	r24, r18
    ad94:	53 e0       	ldi	r21, 0x03	; 3
    ad96:	88 0f       	add	r24, r24
    ad98:	99 1f       	adc	r25, r25
    ad9a:	5a 95       	dec	r21
    ad9c:	e1 f7       	brne	.-8      	; 0xad96 <BCDtoDEC+0xe>
    ad9e:	82 0f       	add	r24, r18
    ada0:	93 1f       	adc	r25, r19
    ada2:	82 0f       	add	r24, r18
    ada4:	93 1f       	adc	r25, r19
    ada6:	4f 70       	andi	r20, 0x0F	; 15
    ada8:	48 0f       	add	r20, r24
}
    adaa:	84 2f       	mov	r24, r20
    adac:	99 27       	eor	r25, r25
    adae:	08 95       	ret

0000adb0 <DECtoBCD>:
//Decimal to binary-coded-decimal to converting procedure
uint8_t DECtoBCD(uint8_t DecValue)
{
    adb0:	38 2f       	mov	r19, r24
	return ((DecValue % 10) | ((DecValue / 10) << 4));
    adb2:	4a e0       	ldi	r20, 0x0A	; 10
    adb4:	64 2f       	mov	r22, r20
    adb6:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    adba:	29 2f       	mov	r18, r25
    adbc:	83 2f       	mov	r24, r19
    adbe:	0e 94 eb 56 	call	0xadd6 <__udivmodqi4>
    adc2:	99 27       	eor	r25, r25
    adc4:	64 e0       	ldi	r22, 0x04	; 4
    adc6:	88 0f       	add	r24, r24
    adc8:	99 1f       	adc	r25, r25
    adca:	6a 95       	dec	r22
    adcc:	e1 f7       	brne	.-8      	; 0xadc6 <DECtoBCD+0x16>
    adce:	28 2b       	or	r18, r24
}
    add0:	82 2f       	mov	r24, r18
    add2:	99 27       	eor	r25, r25
    add4:	08 95       	ret

0000add6 <__udivmodqi4>:
    add6:	99 1b       	sub	r25, r25
    add8:	79 e0       	ldi	r23, 0x09	; 9
    adda:	04 c0       	rjmp	.+8      	; 0xade4 <__udivmodqi4_ep>

0000addc <__udivmodqi4_loop>:
    addc:	99 1f       	adc	r25, r25
    adde:	96 17       	cp	r25, r22
    ade0:	08 f0       	brcs	.+2      	; 0xade4 <__udivmodqi4_ep>
    ade2:	96 1b       	sub	r25, r22

0000ade4 <__udivmodqi4_ep>:
    ade4:	88 1f       	adc	r24, r24
    ade6:	7a 95       	dec	r23
    ade8:	c9 f7       	brne	.-14     	; 0xaddc <__udivmodqi4_loop>
    adea:	80 95       	com	r24
    adec:	08 95       	ret

0000adee <__udivmodhi4>:
    adee:	aa 1b       	sub	r26, r26
    adf0:	bb 1b       	sub	r27, r27
    adf2:	51 e1       	ldi	r21, 0x11	; 17
    adf4:	07 c0       	rjmp	.+14     	; 0xae04 <__udivmodhi4_ep>

0000adf6 <__udivmodhi4_loop>:
    adf6:	aa 1f       	adc	r26, r26
    adf8:	bb 1f       	adc	r27, r27
    adfa:	a6 17       	cp	r26, r22
    adfc:	b7 07       	cpc	r27, r23
    adfe:	10 f0       	brcs	.+4      	; 0xae04 <__udivmodhi4_ep>
    ae00:	a6 1b       	sub	r26, r22
    ae02:	b7 0b       	sbc	r27, r23

0000ae04 <__udivmodhi4_ep>:
    ae04:	88 1f       	adc	r24, r24
    ae06:	99 1f       	adc	r25, r25
    ae08:	5a 95       	dec	r21
    ae0a:	a9 f7       	brne	.-22     	; 0xadf6 <__udivmodhi4_loop>
    ae0c:	80 95       	com	r24
    ae0e:	90 95       	com	r25
    ae10:	bc 01       	movw	r22, r24
    ae12:	cd 01       	movw	r24, r26
    ae14:	08 95       	ret
