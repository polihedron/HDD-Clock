
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000095f6  0000968a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000095f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  00800102  00800102  0000968c  2**0
                  ALLOC
  3 .noinit       00000000  0080014e  0080014e  0000968c  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  0000968c  2**0
                  CONTENTS
  5 .stab         00000408  00000000  00000000  0000968c  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  00009a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 0000003c  00000000  00000000  00009b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000585  00000000  00000000  00009b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000036df  00000000  00000000  0000a0d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000377  00000000  00000000  0000d7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001641  00000000  00000000  0000db2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000005b7  00000000  00000000  0000f170  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c4 34 	jmp	0x6988 <__init>
       4:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
       8:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
       c:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      10:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      14:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      18:	0c 94 0f 48 	jmp	0x901e <__vector_6>
      1c:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      20:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      24:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      28:	0c 94 8e 47 	jmp	0x8f1c <__vector_10>
      2c:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      30:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      34:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      38:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      3c:	0c 94 58 37 	jmp	0x6eb0 <__vector_15>
      40:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      44:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      48:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      4c:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      50:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      54:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      58:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      5c:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      60:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      64:	0c 94 fc 36 	jmp	0x6df8 <__vector_25>
      68:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      6c:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      70:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      74:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      78:	0c 94 bb 36 	jmp	0x6d76 <__vector_30>
      7c:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      80:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      84:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>
      88:	0c 94 e1 34 	jmp	0x69c2 <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	e9 45       	sbci	r30, 0x59	; 89
      8e:	d2 45       	sbci	r29, 0x52	; 82
      90:	c4 45       	sbci	r28, 0x54	; 84
      92:	b0 45       	sbci	r27, 0x50	; 80
      94:	a2 45       	sbci	r26, 0x52	; 82
      96:	8d 45       	sbci	r24, 0x5D	; 93
      98:	7f 45       	sbci	r23, 0x5F	; 95
      9a:	6a 45       	sbci	r22, 0x5A	; 90
      9c:	5c 45       	sbci	r21, 0x5C	; 92
      9e:	47 45       	sbci	r20, 0x57	; 87
      a0:	39 45       	sbci	r19, 0x59	; 89
      a2:	24 45       	sbci	r18, 0x54	; 84
      a4:	03 45       	sbci	r16, 0x53	; 83
      a6:	d4 44       	sbci	r29, 0x44	; 68
      a8:	d1 43       	sbci	r29, 0x31	; 49
      aa:	d0 42       	sbci	r29, 0x20	; 32
      ac:	cf 41       	sbci	r28, 0x1F	; 31
      ae:	b9 40       	sbci	r27, 0x09	; 9
      b0:	a3 3f       	cpi	r26, 0xF3	; 243
      b2:	08 3f       	cpi	r16, 0xF8	; 248
      b4:	ea 3e       	cpi	r30, 0xEA	; 234
      b6:	7c 3e       	cpi	r23, 0xEC	; 236
      b8:	2b 3e       	cpi	r18, 0xEB	; 235
      ba:	f3 3d       	cpi	r31, 0xD3	; 211
      bc:	dd 3d       	cpi	r29, 0xDD	; 221
      be:	b9 3d       	cpi	r27, 0xD9	; 217
      c0:	54 3d       	cpi	r21, 0xD4	; 212
      c2:	ee 3c       	cpi	r30, 0xCE	; 206
      c4:	88 3c       	cpi	r24, 0xC8	; 200
      c6:	22 3c       	cpi	r18, 0xC2	; 194
      c8:	bc 3b       	cpi	r27, 0xBC	; 188
      ca:	56 3b       	cpi	r21, 0xB6	; 182

000000cc <g_hour_hand>:
      cc:	27 27 27 27 27 27 27 27 27 27 27 00 00 00 00 00     '''''''''''.....
      dc:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
      ec:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
      fc:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     10c:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 27     ''''''''''.....'
     11c:	27 27 27 24 24 24 24 24 27 27 27 27 27 27 27 27     '''$$$$$''''''''
     12c:	27 27 27 27 27 08 08 08 08 08 27 27 27 27 27 27     '''''.....''''''
     13c:	27 27 27 27 27 27 27 14 14 14 14 14 27 27 27 27     '''''''.....''''
     14c:	00 00 00 00 00 27 27 27 27 00 00 00 00 00 27 27     .....''''.....''
     15c:	27 27 00 00 00 00 00 27 27 27 27 00 00 00 00 00     ''.....''''.....
     16c:	27 27 27 27 00 00 00 00 00 27 27 27 27 24 24 24     ''''.....''''$$$
     17c:	24 24 27 27 27 27 27 27 27 27 27 27 27 27 27 00     $$'''''''''''''.
     18c:	00 00 00 00 27 27 27 27 00 00 00 00 00 27 27 27     ....''''.....'''
     19c:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 27     ''''''''''.....'
     1ac:	27 27 27 27 27 27 27 27 27 27 27 27 14 14 14 14     ''''''''''''....
     1bc:	14 27 27 27 27 16 16 16 16 16 27 27 27 27 27 27     .''''.....''''''
     1cc:	27 27 27 27 27 27 27 20 20 20 20 20 27 27 28 27     '''''''     ''('
     1dc:	27 27 27 27 27 27 28 28 27 27 27 27 27 27 27 28     ''''''(('''''''(
     1ec:	28 27 27 27 27 27 27 27 28                          ('''''''(

000001f5 <g_minute_hand>:
     1f5:	28 28 27 27 27 27 27 28 28 28 27 27 00 00 00 27     (('''''(((''...'
     205:	27 28 28 28 27 27 27 27 27 28 28 28 28 27 00 00     '((('''''(((('..
     215:	00 27 28 28 28 27 27 27 27 27 27 27 28 28 28 27     .'((('''''''((('
     225:	27 27 27 27 28 28 28 28 27 27 27 27 27 28 28 28     ''''(((('''''(((
     235:	27 27 27 27 27 27 27 28 28 28 27 00 00 00 27 28     '''''''((('...'(
     245:	28 28 27 27 24 24 24 27 27 28 28 27 27 27 27 27     ((''$$$''(('''''
     255:	27 27 28 28 28 27 08 08 08 27 28 28 28 28 27 27     ''((('...'((((''
     265:	27 27 27 28 28 28 27 27 14 14 14 27 27 28 28 28     '''(((''...''(((
     275:	27 00 00 00 27 28 28 28 28 27 00 00 00 27 28 28     '...'(((('...'((
     285:	28 27 27 00 00 00 27 27 28 28 28 27 00 00 00 27     (''...''((('...'
     295:	28 28 28 27 27 00 00 00 27 27 28 28 27 27 24 24     (((''...''((''$$
     2a5:	24 27 27 28 28 28 27 27 27 27 27 28 28 28 27 27     $''((('''''(((''
     2b5:	00 00 00 27 27 28 28 27 27 00 00 00 27 27 28 28     ...''((''...''((
     2c5:	28 27 27 27 27 27 28 28 28 27 27 00 00 00 27 27     ('''''(((''...''
     2d5:	28 28 28 27 27 27 27 27 28 28 28 27 27 14 14 14     ((('''''(((''...
     2e5:	27 27 28 28 27 27 16 16 16 27 27 28 28 28 27 27     ''((''...''(((''
     2f5:	27 27 27 28 28 28 27 27 20 20 20 27 27 28 28 28     '''(((''   ''(((
     305:	27 27 27 27 27 28 28 28 28 27 27 27 27 27 28 28     '''''(((('''''((
     315:	28 28 27 27 27 27 27 28 28                          (('''''((

0000031e <g_second_hand>:
     31e:	28 28 27 27 00 27 27 28 28 28 28 27 27 27 27 27     ((''.''(((('''''
     32e:	28 28 28 28 27 27 27 27 27 28 28 28 28 27 27 00     (((('''''((((''.
     33e:	27 27 28 28 28 28 27 27 27 27 27 28 28 28 28 27     ''(((('''''(((('
     34e:	27 27 27 27 28 28 28 28 27 27 00 27 27 28 28 28     ''''((((''.''(((
     35e:	28 27 27 27 27 27 28 28 28 28 27 27 27 27 27 28     ('''''(((('''''(
     36e:	28 28 28 27 27 00 27 27 28 28 28 28 27 27 27 27     (((''.''((((''''
     37e:	27 28 28 28 28 27 27 27 27 27 28 28 28 28 27 27     '(((('''''((((''
     38e:	00 27 27 28 28 28 28 27 27 27 27 27 28 28 28 28     .''(((('''''((((
     39e:	27 27 27 27 27 28 28 28 28 27 27 00 27 27 28 28     '''''((((''.''((
     3ae:	28 28 27 27 27 27 27 28 28 28 28 27 27 27 27 27     (('''''(((('''''
     3be:	28 28 28 28 27 27 00 27 27 28 28 28 28 27 27 27     ((((''.''(((('''
     3ce:	27 27 28 28 28 28 27 27 27 27 27 28 28 28 28 27     ''(((('''''(((('
     3de:	27 00 27 27 28 28 28 28 27 27 27 27 27 28 28 28     '.''(((('''''(((
     3ee:	28 27 27 27 27 27 28 28 28 28 27 27 00 27 27 28     ('''''((((''.''(
     3fe:	28 28 28 27 27 27 27 27 28 28 28 28 27 27 27 27     ((('''''((((''''
     40e:	27 28 28 28 28 27 27 00 27 27 28 28 28 28 27 27     '((((''.''((((''
     41e:	27 27 27 28 28 28 28 27 27 27 27 27 28 28 28 28     '''(((('''''((((
     42e:	28 27 00 27 28 28 28 28 28 28 27 27 27 28 28 28     ('.'(((((('''(((
     43e:	28 28 28 27 27 27 28 28 28                          ((('''(((

00000447 <gm_background>:
	...
     46b:	27 27 27 27 27 27 00 00 00 00 00 00 00 00 00 00     ''''''..........
	...
     55b:	27 27 27 27 27 27 00 00 00 00 00 00 00 00 00 00     ''''''..........
	...
     6c7:	00 00 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ..''''''........
	...
     7b7:	00 00 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ..''''''........
	...
     807:	27 27 27 27 27 27 26 00 00 00 00 00 00 00 00 00     ''''''&.........
	...
     85f:	26 27 27 27 27 27 27 26 00 00 00 00 00 00 00 00     &''''''&........
	...
     87b:	00 00 00 26 27 27 27 27 27 27 26 00 00 00 00 00     ...&''''''&.....
	...
     89b:	00 00 26 27 27 27 27 27 27 26 00 00 00 00 00 00     ..&''''''&......
	...
     8f3:	00 00 00 26 27 27 27 27 27 27 26 00 00 00 00 00     ...&''''''&.....
	...
     94f:	26 27 27 27 27 27 27 26 00 00 00 00 00 00 00 00     &''''''&........
	...
     96b:	00 00 00 26 27 27 27 27 27 27 26 00 00 00 00 00     ...&''''''&.....
	...
     98b:	00 00 26 27 27 27 27 27 27 26 00 00 00 00 00 00     ..&''''''&......
	...
     9e3:	00 00 00 26 01 01 01 01 01 01 01 01 01 01 01 01     ...&............
     9f3:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a03:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a13:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a23:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a33:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a43:	02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11     ................
     a53:	12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 00 00     ................
	...
     ad7:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     ae7:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     af7:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     b07:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     b17:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     b27:	01 01 01 01 01 01 01 01 01 01 01 01 02 03 04 05     ................
     b37:	06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15     ................
     b47:	16 17 18 19 1a 1b 1c 1d 1e 1f 00 00 00 00 00 00     ................
	...
     bc7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     bd7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     be7:	27 27 27 27 27 27 27 26 00 00 00 00 00 00 00 00     '''''''&........
	...
     c8f:	26 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     &'''''''''''''''
     c9f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     caf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     cbf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     ccf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 26     '''''''''''''''&
	...
     d7f:	26 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     &'''''''''''''''
     d8f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     d9f:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
     df7:	26 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     &'''''''''''''''
     e07:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     e17:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     e27:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     e37:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 26     '''''''''''''''&
	...
     ee7:	26 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     &'''''''''''''''
     ef7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     f07:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     f17:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
     f27:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 26     '''''''''''''''&
	...
     f87:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     ''''''''''''''..
	...
     fb3:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
     fc3:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     ''''''''''''''..
	...
     fef:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
     fff:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     ''''''''''''''..
	...
    102b:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    103b:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     ''''''''''''''..
	...
    1067:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1077:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     ''''''''''''''..
	...
    10a3:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    10b3:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     ''''''''''''''..
	...
    10df:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    10ef:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     ''''''''''''''..
	...
    111b:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    112b:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     ''''''''''''''..
	...
    1157:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
	...
    1177:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1187:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
	...
    11b3:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    11c3:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
	...
    11ef:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    11ff:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
	...
    122b:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    123b:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
	...
    1267:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1277:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
	...
    12a3:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    12b3:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
	...
    12df:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    12ef:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
	...
    131b:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    132b:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
	...
    1347:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1357:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1367:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1377:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    1397:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    13a7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    13b7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    13c7:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    13e7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    13f7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1407:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1417:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    1437:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1447:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1457:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1467:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    1487:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1497:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    14a7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    14b7:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    14d7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    14e7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    14f7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1507:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    153f:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    154f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    155f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    156f:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    158f:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    159f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    15af:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    15bf:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    15df:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    15ef:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    15ff:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    160f:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    162f:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    163f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    164f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    165f:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    167f:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    168f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    169f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    16af:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    16cf:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    16df:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    16ef:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    16ff:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    170f:	27 27 27 27 27 00 00 00 00 00 00 00 00 00 00 00     '''''...........
	...
    172b:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    173b:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 00 00     '''''''''.......
	...
    175b:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    176b:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 00 00     '''''''''.......
	...
    178b:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    179b:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 00 00     '''''''''.......
	...
    17bb:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    17cb:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 00 00     '''''''''.......
	...
    17eb:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    17fb:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 00 00     '''''''''.......
	...
    181b:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    182b:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 00 00     '''''''''.......
	...
    184b:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    185b:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 00 00     '''''''''.......
	...
    187b:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    188b:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 00 00     '''''''''.......
	...
    18ab:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    18bb:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 00 00     '''''''''.......
	...
    18db:	00 00 00 27 27 27 27 27 27 27 27 27 00 00 00 00     ...'''''''''....
	...
    18f3:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1903:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
	...
    1923:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1933:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
	...
    1953:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1963:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
	...
    1983:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1993:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
	...
    19b3:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    19c3:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
	...
    19e3:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    19f3:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
	...
    1a13:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1a23:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
	...
    1a43:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1a53:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
	...
    1a73:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1a83:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
	...
    1aa3:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1ab3:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
    1ac3:	00 00 00 00 27 27 27 27 27 27 27 27 27 27 27 00     ....'''''''''''.
	...
    1ae3:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1af3:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     '...............
    1b03:	00 00 00 00 00 27 27 27 27 27 27 27 27 27 27 27     .....'''''''''''
    1b13:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    1b23:	00 00 00 00 00 00 00 27 27 27 27 27 27 27 27 27     .......'''''''''
    1b33:	27 27 27 27 27 27 00 00 00 00 00 00 00 00 00 00     ''''''..........
	...
    1b4b:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
	...
    1b6b:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    1b7b:	27 27 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ''..............
    1b8b:	00 00 00 00 00 00 27 27 27 27 27 27 27 27 27 27     ......''''''''''
    1b9b:	27 27 27 27 27 00 00 00 00 00 00 00 00 00 00 00     '''''...........
	...
    1bb3:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
	...
    1bd3:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1be3:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     '...............
    1bf3:	00 00 00 00 00 27 27 27 27 27 27 27 27 27 27 27     .....'''''''''''
    1c03:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    1c13:	00 00 00 00 00 00 00 27 27 27 27 27 27 27 27 27     .......'''''''''
    1c23:	27 27 27 27 27 27 00 00 00 00 00 00 00 00 00 00     ''''''..........
	...
    1c3b:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
	...
    1c5b:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    1c6b:	27 27 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ''..............
    1c7b:	00 00 00 00 00 00 27 27 27 27 27 27 27 27 27 27     ......''''''''''
    1c8b:	27 27 27 27 27 00 00 00 00 00 00 00 00 00 00 00     '''''...........
	...
    1ca3:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    1cb3:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1cc3:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     '...............
    1cd3:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1ce3:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    1cf3:	00 00 00 00 00 27 27 27 27 27 27 27 27 27 27 27     .....'''''''''''
    1d03:	27 27 27 27 27 27 00 00 00 00 00 00 00 00 00 00     ''''''..........
    1d13:	00 00 00 00 00 00 00 27 27 27 27 27 27 27 27 27     .......'''''''''
    1d23:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    1d3b:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    1d4b:	27 27 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ''..............
    1d5b:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    1d6b:	27 27 27 27 27 00 00 00 00 00 00 00 00 00 00 00     '''''...........
    1d7b:	00 00 00 00 00 00 27 27 27 27 27 27 27 27 27 27     ......''''''''''
    1d8b:	27 27 27 27 27 27 27 00 00 00 00 00 00 00 00 00     '''''''.........
	...
    1da3:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1db3:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     '...............
    1dc3:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    1dd3:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    1de3:	00 00 00 00 00 27 27 27 27 27 27 27 27 27 27 27     .....'''''''''''
    1df3:	27 27 27 27 27 27 00 00 00 00 00 00 00 00 00 00     ''''''..........
    1e03:	00 00 00 00 00 00 00 27 27 27 27 27 27 27 27 27     .......'''''''''
    1e13:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    1e2b:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    1e3b:	27 27 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ''..............
    1e4b:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    1e5b:	27 27 27 27 27 00 00 00 00 00 00 00 00 00 00 00     '''''...........
    1e6b:	00 00 00 00 00 00 27 27 27 27 27 27 27 27 27 27     ......''''''''''
    1e7b:	27 27 27 27 27 27 27 00 00 00 00 00 27 27 27 27     '''''''.....''''
    1e8b:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1e9b:	27 27 27 00 00 00 00 00 00 00 00 00 00 00 00 00     '''.............
    1eab:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    1ebb:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1ecb:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
	...
    1ee7:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    1ef7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1f07:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
	...
    1f23:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    1f33:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1f43:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
	...
    1f5f:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    1f6f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1f7f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
	...
    1f9b:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    1fab:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1fbb:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
	...
    1fd7:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    1fe7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    1ff7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
	...
    2013:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    2023:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2033:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
	...
    204f:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    205f:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 27     ''''''''.......'
    206f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    207f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    208f:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
	...
    20a7:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    20b7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    20c7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    20d7:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 27     '..............'
    20e7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    20f7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2107:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
	...
    211f:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    212f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    213f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    214f:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 27     '..............'
    215f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    216f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    217f:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
	...
    2197:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    21a7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    21b7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    21c7:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 27     '..............'
    21d7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    21e7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    21f7:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
	...
    220f:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    221f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    222f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    223f:	27 00 00 00 00 00 00 00 27 27 27 27 27 27 27 27     '.......''''''''
    224f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    225f:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
	...
    2277:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2287:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2297:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    22a7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    22b7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    22c7:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    22d7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    22e7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    22f7:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    2307:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2317:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2327:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    2337:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2347:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2357:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    2367:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2377:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2387:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    2397:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    23a7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    23b7:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    23c7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    23d7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    23e7:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    23f7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2407:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2417:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
	...
    2433:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2443:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2453:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    2463:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2473:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2483:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    2493:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    24a3:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    24b3:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    24c3:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    24d3:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    24e3:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    24f3:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2503:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2513:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    2523:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2533:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2543:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    2553:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2563:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2573:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    2583:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2593:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    25a3:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    25b3:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    25c3:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    25d3:	27 27 27 27 00 00 00 00 00 00 00 00 00 00 00 00     ''''............
    25e3:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    25f3:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2603:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2613:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
    2623:	00 00 00 00 00 00 27 27 27 27 27 27 27 27 27 27     ......''''''''''
    2633:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2643:	27 00 00 00 00 00 00 00 00 27 27 27 27 27 27 27     '........'''''''
    2653:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2663:	27 27 27 27 00 00 00 00 00 00 00 27 27 27 27 27     ''''.......'''''
    2673:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2683:	27 27 27 27 27 27 00 00 00 00 00 00 00 27 27 27     ''''''.......'''
    2693:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    26a3:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 27     ''''''''.......'
    26b3:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    26c3:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
    26d3:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    26e3:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
    26f3:	00 00 00 00 27 27 27 27 27 27 27 27 27 27 27 27     ....''''''''''''
    2703:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
    2713:	00 00 00 00 00 00 27 27 27 27 27 27 27 27 27 27     ......''''''''''
    2723:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2733:	27 00 00 00 00 00 00 00 00 27 27 27 27 27 27 27     '........'''''''
    2743:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2753:	27 27 27 27 00 00 00 00 00 00 00 27 27 27 27 27     ''''.......'''''
    2763:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2773:	27 27 27 27 27 27 00 00 00 00 00 00 00 27 27 27     ''''''.......'''
    2783:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2793:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 27     ''''''''.......'
    27a3:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    27b3:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
    27c3:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    27d3:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
	...
    27ef:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    27ff:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
    280f:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    281f:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
    282f:	00 00 00 00 00 27 27 27 27 27 27 27 27 27 27 27     .....'''''''''''
    283f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
    284f:	00 00 00 00 00 00 00 27 27 27 27 27 27 27 27 27     .......'''''''''
    285f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    286f:	27 00 00 00 00 00 00 00 00 27 27 27 27 27 27 27     '........'''''''
    287f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    288f:	27 27 27 00 00 00 00 00 00 00 00 27 27 27 27 27     '''........'''''
    289f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    28af:	27 27 27 27 27 27 00 00 00 00 00 00 00 00 27 27     ''''''........''
    28bf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    28cf:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
    28df:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    28ef:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 00     ''''''''''......
    28ff:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    290f:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
    291f:	00 00 00 00 00 27 27 27 27 27 27 27 27 27 27 27     .....'''''''''''
    292f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
    293f:	00 00 00 00 00 00 00 27 27 27 27 27 27 27 27 27     .......'''''''''
    294f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    295f:	27 00 00 00 00 00 00 00 00 27 27 27 27 27 27 27     '........'''''''
    296f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    297f:	27 27 27 00 00 00 00 00 00 00 00 27 27 27 27 27     '''........'''''
    298f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    299f:	27 27 27 27 27 27 00 00 00 00 00 00 00 00 27 27     ''''''........''
    29af:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    29bf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    29cf:	27 27 27 27 27 27 27 27 00 00 00 00 00 27 27 27     ''''''''.....'''
    29df:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     ''''''''''''''..
    29ef:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    29ff:	27 27 27 27 00 00 00 00 00 27 27 27 27 27 27 27     ''''.....'''''''
    2a0f:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 27     ''''''''''.....'
    2a1f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2a2f:	00 00 00 00 00 27 27 27 27 27 27 27 27 27 27 27     .....'''''''''''
    2a3f:	27 27 27 27 27 27 00 00 00 00 00 27 27 27 27 27     ''''''.....'''''
    2a4f:	27 27 27 27 27 27 27 27 27 27 27 00 00 00 00 00     '''''''''''.....
    2a5f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2a6f:	27 00 00 00 00 00 27 27 27 27 27 27 27 27 27 27     '.....''''''''''
    2a7f:	27 27 27 27 27 27 27 00 00 00 00 00 27 27 27 27     '''''''.....''''
    2a8f:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
    2a9f:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    2aaf:	27 27 27 00 00 00 00 00 27 27 27 27 27 27 27 27     '''.....''''''''
    2abf:	27 27 27 27 27 27 27 27 00 00 00 00 00 27 27 27     ''''''''.....'''
    2acf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 00 00     ''''''''''''''..
    2adf:	00 00 00 27 27 27 27 27 27 27 27 27 27 27 27 27     ...'''''''''''''
    2aef:	27 27 27 27 00 00 00 00 00 27 27 27 27 27 27 27     ''''.....'''''''
    2aff:	27 27 27 27 27 27 27 27 27 27 00 00 00 00 00 27     ''''''''''.....'
    2b0f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2b1f:	00 00 00 00 00 27 27 27 27 27 27 27 27 27 27 27     .....'''''''''''
    2b2f:	27 27 27 27 27 27 00 00 00 00 00 27 27 27 27 27     ''''''.....'''''
    2b3f:	27 27 27 27 27 27 27 27 27 27 27 00 00 00 00 00     '''''''''''.....
    2b4f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2b5f:	27 00 00 00 00 00 27 27 27 27 27 27 27 27 27 27     '.....''''''''''
    2b6f:	27 27 27 27 27 27 27 00 00 00 00 00 27 27 27 27     '''''''.....''''
    2b7f:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
    2b8f:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    2b9f:	27 27 27 00 00 00 00 00 00 00 00 00 00 27 27 27     '''..........'''
    2baf:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
    2bbf:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    2bcf:	27 27 27 00 00 00 00 00 27 27 27 27 27 27 27 27     '''.....''''''''
    2bdf:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 27 27     '''''''''.....''
    2bef:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
    2bff:	00 00 00 00 27 27 27 27 27 27 27 27 27 27 27 27     ....''''''''''''
    2c0f:	27 27 27 27 27 00 00 00 00 00 27 27 27 27 27 27     '''''.....''''''
    2c1f:	27 27 27 27 27 27 27 27 27 27 27 00 00 00 00 00     '''''''''''.....
    2c2f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2c3f:	00 00 00 00 00 27 27 27 27 27 27 27 27 27 27 27     .....'''''''''''
    2c4f:	27 27 27 27 27 27 00 00 00 00 00 27 27 27 27 27     ''''''.....'''''
    2c5f:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
    2c6f:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    2c7f:	27 27 00 00 00 00 00 27 27 27 27 27 27 27 27 27     ''.....'''''''''
    2c8f:	27 27 27 27 27 27 27 27 00 00 00 00 00 27 27 27     ''''''''.....'''
    2c9f:	27 27 27 27 27 27 27 27 27 27 27 27 27 00 00 00     '''''''''''''...
    2caf:	00 00 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ..''''''''''''''
    2cbf:	27 27 27 00 00 00 00 00 27 27 27 27 27 27 27 27     '''.....''''''''
    2ccf:	27 27 27 27 27 27 27 27 27 00 00 00 00 00 27 27     '''''''''.....''
    2cdf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 00     '''''''''''''''.
    2cef:	00 00 00 00 27 27 27 27 27 27 27 27 27 27 27 27     ....''''''''''''
    2cff:	27 27 27 27 27 00 00 00 00 00 27 27 27 27 27 27     '''''.....''''''
    2d0f:	27 27 27 27 27 27 27 27 27 27 27 00 00 00 00 00     '''''''''''.....
    2d1f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    2d2f:	00 00 00 00 00 27 27 27 27 27 27 27 27 27 27 27     .....'''''''''''
    2d3f:	27 27 27 27 27 27 00 00 00 00 00 27 27 27 27 27     ''''''.....'''''
    2d4f:	27 27 27 27 27 27 27 27 27 27 27 27 00 00 00 00     ''''''''''''....
    2d5f:	00 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     .'''''''''''''''
    2d6f:	27 27 00 00 00 00 00 27 27 27 27 27 27 27 27 27     ''.....'''''''''
    2d7f:	27 27 27 27 27 27 27 27 27 01 01 01 01 01 01 01     '''''''''.......
    2d8f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2d9f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2daf:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2dbf:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2dcf:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2ddf:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2def:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2dff:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2e0f:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2e1f:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2e2f:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2e3f:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2e4f:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2e5f:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2e6f:	03 03 03 03 03 03 03 03 27 01 01 01 01 01 01 01     ........'.......
    2e7f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2e8f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2e9f:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2eaf:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2ebf:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2ecf:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2edf:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2eef:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2eff:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2f0f:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2f1f:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2f2f:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2f3f:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2f4f:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    2f5f:	03 03 03 03 03 03 03 03 27 07 07 07 07 07 07 07     ........'.......
    2f6f:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    2f7f:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    2f8f:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    2f9f:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    2faf:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    2fbf:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    2fcf:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    2fdf:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    2fef:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    2fff:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    300f:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    301f:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    302f:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    303f:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    304f:	0b 0b 0b 0b 0b 0b 0b 0b 27 07 07 07 07 07 07 07     ........'.......
    305f:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    306f:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    307f:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    308f:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    309f:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    30af:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    30bf:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    30cf:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    30df:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    30ef:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    30ff:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    310f:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    311f:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    312f:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
    313f:	0b 0b 0b 0b 0b 0b 0b 0b                             ........

00003147 <gc_background>:
	...
    316b:	00 00 00 01 01 01 02 03 04 05 06 07 08 09 0a 0b     ................
    317b:	0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b     ................
    318b:	1c 1d 1e 1f 20 21 22 23 24 25 26 27 27 27 27 27     .... !"#$%&'''''
    319b:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    31ab:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    31bb:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    31cb:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    31db:	27 27 27 27 27 27 27 27 27 27 27 27 27 26 25 24     '''''''''''''&%$
    31eb:	23 22 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14     #"! ............
    31fb:	13 12 11 10 0f 0e 0d 0c 0b 0a 09 08 07 06 05 04     ................
    320b:	03 02 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    325b:	00 00 00 01 01 01 02 03 04 05 06 07 08 09 0a 0b     ................
    326b:	0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b     ................
    327b:	1c 1d 1e 1f 20 21 22 23 24 25 26 27 27 27 27 27     .... !"#$%&'''''
    328b:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    329b:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    32ab:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    32bb:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    32cb:	27 27 27 27 27 27 27 27 27 27 27 27 27 26 25 24     '''''''''''''&%$
    32db:	23 22 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14     #"! ............
    32eb:	13 12 11 10 0f 0e 0d 0c 0b 0a 09 08 07 06 05 04     ................
    32fb:	03 02 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3327:	27 26 25 24 23 22 21 20 1f 1e 1d 1c 1b 1a 19 18     '&%$#"! ........
    3337:	17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a 09 08     ................
    3347:	07 06 05 04 03 02 01 01 01 00 00 00 00 00 00 00     ................
	...
    339b:	00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01     ................
    33ab:	02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11     ................
    33bb:	12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21     .............. !
    33cb:	22 23 24 25 26 27 27 27 27 27 27 27 27 27 27 27     "#$%&'''''''''''
    33db:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    33eb:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    33fb:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    340b:	27 27 27 27 27 27 27 27 27 27 27 27 27 26 25 24     '''''''''''''&%$
    341b:	23 22 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14     #"! ............
    342b:	13 12 11 10 0f 0e 0d 0c 0b 0a 09 08 07 06 05 04     ................
    343b:	03 02 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    348b:	00 00 00 01 00 00 00 00 00 00 00 00 00 00 01 01     ................
    349b:	02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11     ................
    34ab:	12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21     .............. !
    34bb:	22 23 24 25 26 27 27 27 27 27 27 27 27 27 27 27     "#$%&'''''''''''
    34cb:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    34db:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    34eb:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    34fb:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    350b:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    351b:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    352b:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    353b:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    354b:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    355b:	27 27 27 27 27 27 27 25 23 21 1f 1d 1b 19 17 15     '''''''%#!......
    356b:	14 13 12 11 10 0f 0e 0d 0c 0b 0a 09 08 07 06 05     ................
    357b:	04 03 02 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    35cb:	00 00 00 01 01 01 02 03 04 05 06 07 08 09 0a 0c     ................
    35db:	0e 10 12 14 16 18 1a 1c 1d 1e 1f 20 21 22 23 24     ........... !"#$
    35eb:	25 26 27 27 27 27 27 27 27 27 27 27 27 27 27 27     %&''''''''''''''
    35fb:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    360b:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    361b:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    362b:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    363b:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    364b:	27 27 27 27 27 27 27 25 23 21 1f 1d 1b 19 17 15     '''''''%#!......
    365b:	14 13 12 11 10 0f 0e 0d 0c 0b 0a 09 08 07 06 05     ................
    366b:	04 03 02 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    36bb:	00 00 00 01 01 01 02 03 04 05 06 07 08 09 0a 0c     ................
    36cb:	0e 10 12 14 16 18 1a 1c 1d 1e 1f 20 21 22 23 24     ........... !"#$
    36db:	25 26 27 27 27 27 27 27 27 27 27 27 00 00 00 00     %&''''''''''....
	...
    370f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    371f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    372f:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    375f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    376f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    377f:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    37af:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    37bf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    37cf:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    37ff:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    380f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    381f:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    384f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    385f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    386f:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    389f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    38af:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    38bf:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    38ef:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    38ff:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    390f:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    393f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    394f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    395f:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    398f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    399f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    39af:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    39df:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    39ef:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    39ff:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    3a2f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3a3f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3a4f:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    3a7f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3a8f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3a9f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3aaf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3abf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3acf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3adf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3aef:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3aff:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3b0f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3b1f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3b2f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3b3f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3b4f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3b5f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3b6f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3b7f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3b8f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3b9f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3baf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3bbf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3bcf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3bdf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3bef:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3bff:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3c0f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3c1f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3c2f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3c3f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3c4f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3c5f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3c6f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    3c7f:	27 27 27 27 27 27 27 27 0c 0c 0c 0d 0d 0e 0e 0f     ''''''''........
    3c8f:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    3c9f:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    3caf:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    3cbf:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    3ccf:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    3cdf:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    3cef:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    3cff:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    3d0f:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    3d1f:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    3d2f:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    3d3f:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    3d4f:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    3d5f:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    3d6f:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    3d7f:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    3d8f:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    3d9f:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    3daf:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    3dbf:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    3dcf:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    3ddf:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    3def:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    3dff:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    3e0f:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    3e1f:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    3e2f:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    3e3f:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    3e4f:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    3e5f:	0f 0e 0e 0d 0d 0c 0c 0c 25 24 24 23 23 22 22 21     ........%$$##""!
    3e6f:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    3e7f:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    3e8f:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    3e9f:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    3eaf:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    3ebf:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    3ecf:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    3edf:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    3eef:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    3eff:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    3f0f:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    3f1f:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    3f2f:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    3f3f:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    3f4f:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    3f5f:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    3f6f:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    3f7f:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    3f8f:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    3f9f:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    3faf:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    3fbf:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    3fcf:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    3fdf:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    3fef:	21 22 22 23 23 24 24 25 25 24 24 23 23 22 22 21     !""##$$%%$$##""!
    3fff:	21 21 20 20 20 1f 1f 1f 1e 1e 1e 1d 1d 1d 1c 1c     !!   ...........
    400f:	1c 1b 1b 1b 1a 1a 1a 19 19 19 18 18 18 17 17 17     ................
    401f:	17 17 17 18 18 18 19 19 19 1a 1a 1a 1b 1b 1b 1c     ................
    402f:	1c 1c 1d 1d 1d 1e 1e 1e 1f 1f 1f 20 20 20 21 21     ...........   !!
    403f:	21 22 22 23 23 24 24 25 0c 0c 0c 0d 0d 0e 0e 0f     !""##$$%........
    404f:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    405f:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    406f:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    407f:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    408f:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    409f:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    40af:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    40bf:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    40cf:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    40df:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    40ef:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    40ff:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    410f:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    411f:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    412f:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    413f:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    414f:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    415f:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    416f:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    417f:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    418f:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    419f:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    41af:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    41bf:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    41cf:	0f 0e 0e 0d 0d 0c 0c 0c 0c 0c 0c 0d 0d 0e 0e 0f     ................
    41df:	0f 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17     ................
    41ef:	17 18 18 19 19 1a 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f     ................
    41ff:	1f 1e 1e 1d 1d 1c 1c 1b 1b 1a 1a 19 19 18 18 17     ................
    420f:	17 16 16 15 15 14 14 13 13 12 12 11 11 10 10 0f     ................
    421f:	0f 0e 0e 0d 0d 0c 0c 0c 21 20 1f 1e 1d 1c 1b 1a     ........! ......
    422f:	19 18 17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a     ................
    423f:	0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19     ................
    424f:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    425f:	19 18 17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a     ................
    426f:	0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19     ................
    427f:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    428f:	19 18 17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a     ................
    429f:	0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19     ................
    42af:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    42bf:	19 18 17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a     ................
    42cf:	0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19     ................
    42df:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    42ef:	19 18 17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a     ................
    42ff:	0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19     ................
    430f:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    431f:	19 18 17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a     ................
    432f:	0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19     ................
    433f:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    434f:	19 18 17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a     ................
    435f:	0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19     ................
    436f:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    437f:	19 18 17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a     ................
    438f:	0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19     ................
    439f:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    43af:	19 18 17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a     ................
    43bf:	0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19     ................
    43cf:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    43df:	19 18 17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a     ................
    43ef:	0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19     ................
    43ff:	1a 1b 1c 1d 1e 1f 20 21 25 24 23 22 21 20 1f 1e     ...... !%$#"! ..
    440f:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    441f:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    442f:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    443f:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    444f:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    445f:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    446f:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    447f:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    448f:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    449f:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    44af:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    44bf:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    44cf:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    44df:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    44ef:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    44ff:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    450f:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    451f:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    452f:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    453f:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    454f:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    455f:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    456f:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    457f:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    458f:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    459f:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    45af:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    45bf:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    45cf:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    45df:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    45ef:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    45ff:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    460f:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    461f:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    462f:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    463f:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    464f:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    465f:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    466f:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    467f:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    468f:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    469f:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    46af:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    46bf:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    46cf:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    46df:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    46ef:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    46ff:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    470f:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    471f:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    472f:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    473f:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    474f:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    475f:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    476f:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    477f:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    478f:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    479f:	1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10 0f 0e     ................
    47af:	0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d     ................
    47bf:	1e 1f 20 21 22 23 24 25 21 20 1f 1e 1d 1c 1b 1a     .. !"#$%! ......
    47cf:	19 18 17 16 15 14 13 12 11 11 12 13 14 15 16 17     ................
    47df:	18 19 1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c     ........ !! ....
    47ef:	1b 1a 19 18 17 16 15 14 13 12 11 11 11 12 13 14     ................
    47ff:	15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 21 20 1f     ........... !! .
    480f:	1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 11 12     ................
    481f:	13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 21     ............. !!
    482f:	20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11      ...............
    483f:	11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20     ............... 
    484f:	21 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13     !! .............
    485f:	12 11 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e     ................
    486f:	1f 20 21 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15     . !! ...........
    487f:	14 13 12 11 11 11 12 13 14 15 16 17 18 19 1a 1b     ................
    488f:	1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a 19 18     .... !! ........
    489f:	17 16 15 14 13 12 11 11 12 13 14 15 16 17 18 19     ................
    48af:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    48bf:	19 18 17 16 15 14 13 12 11 11 12 13 14 15 16 17     ................
    48cf:	18 19 1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c     ........ !! ....
    48df:	1b 1a 19 18 17 16 15 14 13 12 11 11 11 12 13 14     ................
    48ef:	15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 21 20 1f     ........... !! .
    48ff:	1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 11 12     ................
    490f:	13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 21     ............. !!
    491f:	20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11      ...............
    492f:	11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20     ............... 
    493f:	21 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13     !! .............
    494f:	12 11 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e     ................
    495f:	1f 20 21 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15     . !! ...........
    496f:	14 13 12 11 11 11 12 13 14 15 16 17 18 19 1a 1b     ................
    497f:	1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a 19 18     .... !! ........
    498f:	17 16 15 14 13 12 11 11 12 13 14 15 16 17 18 19     ................
    499f:	1a 1b 1c 1d 1e 1f 20 21 25 24 23 22 21 20 1f 1e     ...... !%$#"! ..
    49af:	1d 1c 1b 1a 19 18 17 16 15 15 16 17 18 19 1a 1b     ................
    49bf:	1c 1d 1e 1f 20 21 22 23 24 25 25 24 23 22 21 20     .... !"#$%%$#"! 
    49cf:	1f 1e 1d 1c 1b 1a 19 18 17 16 15 15 15 16 17 18     ................
    49df:	19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25 25 24 23     ....... !"#$%%$#
    49ef:	22 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 15 16     "! .............
    49ff:	17 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25 25     ......... !"#$%%
    4a0f:	24 23 22 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15     $#"! ...........
    4a1f:	15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24     ........... !"#$
    4a2f:	25 25 24 23 22 21 20 1f 1e 1d 1c 1b 1a 19 18 17     %%$#"! .........
    4a3f:	16 15 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 22     ............. !"
    4a4f:	23 24 25 25 24 23 22 21 20 1f 1e 1d 1c 1b 1a 19     #$%%$#"! .......
    4a5f:	18 17 16 15 15 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
    4a6f:	20 21 22 23 24 25 25 24 23 22 21 20 1f 1e 1d 1c      !"#$%%$#"! ....
    4a7f:	1b 1a 19 18 17 16 15 15 16 17 18 19 1a 1b 1c 1d     ................
    4a8f:	1e 1f 20 21 22 23 24 25 25 24 23 22 21 20 1f 1e     .. !"#$%%$#"! ..
    4a9f:	1d 1c 1b 1a 19 18 17 16 15 15 16 17 18 19 1a 1b     ................
    4aaf:	1c 1d 1e 1f 20 21 22 23 24 25 25 24 23 22 21 20     .... !"#$%%$#"! 
    4abf:	1f 1e 1d 1c 1b 1a 19 18 17 16 15 15 15 16 17 18     ................
    4acf:	19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25 25 24 23     ....... !"#$%%$#
    4adf:	22 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 15 16     "! .............
    4aef:	17 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25 25     ......... !"#$%%
    4aff:	24 23 22 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15     $#"! ...........
    4b0f:	15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24     ........... !"#$
    4b1f:	25 25 24 23 22 21 20 1f 1e 1d 1c 1b 1a 19 18 17     %%$#"! .........
    4b2f:	16 15 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 22     ............. !"
    4b3f:	23 24 25 25 24 23 22 21 20 1f 1e 1d 1c 1b 1a 19     #$%%$#"! .......
    4b4f:	18 17 16 15 15 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
    4b5f:	20 21 22 23 24 25 25 24 23 22 21 20 1f 1e 1d 1c      !"#$%%$#"! ....
    4b6f:	1b 1a 19 18 17 16 15 15 16 17 18 19 1a 1b 1c 1d     ................
    4b7f:	1e 1f 20 21 22 23 24 25 21 20 1f 1e 1d 1c 1b 1a     .. !"#$%! ......
    4b8f:	19 18 17 16 15 14 13 12 11 11 12 13 14 15 16 17     ................
    4b9f:	18 19 1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c     ........ !! ....
    4baf:	1b 1a 19 18 17 16 15 14 13 12 11 11 11 12 13 14     ................
    4bbf:	15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 21 20 1f     ........... !! .
    4bcf:	1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 11 12     ................
    4bdf:	13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 21     ............. !!
    4bef:	22 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11     "...............
    4bff:	11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20     ............... 
    4c0f:	21 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13     !! .............
    4c1f:	12 11 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e     ................
    4c2f:	1f 20 21 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15     . !! ...........
    4c3f:	14 13 12 11 11 11 12 13 14 15 16 17 18 19 1a 1b     ................
    4c4f:	1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a 19 18     .... !! ........
    4c5f:	17 16 15 14 13 12 11 11 12 13 14 15 16 17 18 19     ................
    4c6f:	1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a     ...... !! ......
    4c7f:	19 18 17 16 15 14 13 12 11 11 12 13 14 15 16 17     ................
    4c8f:	18 19 1a 1b 1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c     ........ !! ....
    4c9f:	1b 1a 19 18 17 16 15 14 13 12 11 11 11 12 13 14     ................
    4caf:	15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 21 20 1f     ........... !! .
    4cbf:	1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 11 12     ................
    4ccf:	13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 21     ............. !!
    4cdf:	22 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11     "...............
    4cef:	11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20     ............... 
    4cff:	21 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13     !! .............
    4d0f:	12 11 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e     ................
    4d1f:	1f 20 21 21 20 1f 1e 1d 1c 1b 1a 19 18 17 16 15     . !! ...........
    4d2f:	14 13 12 11 11 11 12 13 14 15 16 17 18 19 1a 1b     ................
    4d3f:	1c 1d 1e 1f 20 21 21 20 1f 1e 1d 1c 1b 1a 19 18     .... !! ........
    4d4f:	17 16 15 14 13 12 11 11 12 13 14 15 16 17 18 19     ................
    4d5f:	1a 1b 1c 1d 1e 1f 20 21 27 27 22 22 22 22 22 22     ...... !''""""""
    4d6f:	22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22     """"""""""""""""
    4d7f:	22 22 22 22 22 22 27 27 19 19 19 19 19 19 19 19     """"""''........
    4d8f:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4d9f:	19 19 19 19 27 27 22 22 22 22 22 22 22 22 22 22     ....''""""""""""
    4daf:	22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22     """"""""""""""""
    4dbf:	22 22 27 27 19 19 19 19 19 19 19 19 19 19 19 19     ""''............
    4dcf:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4ddf:	27 27 22 22 22 22 22 22 22 22 22 22 22 22 22 22     ''""""""""""""""
    4def:	22 22 22 22 22 22 22 22 22 22 22 22 22 22 27 27     """"""""""""""''
    4dff:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4e0f:	19 19 19 19 19 19 19 19 19 19 19 19 27 27 22 22     ............''""
    4e1f:	22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22     """"""""""""""""
    4e2f:	22 22 22 22 22 22 22 22 22 22 27 27 19 19 19 19     """"""""""''....
    4e3f:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4e4f:	19 19 19 19 19 19 19 19 27 27 22 22 22 22 22 22     ........''""""""
    4e5f:	22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22     """"""""""""""""
    4e6f:	22 22 22 22 22 22 27 27 19 19 19 19 19 19 19 19     """"""''........
    4e7f:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4e8f:	19 19 19 19 27 27 22 22 22 22 22 22 22 22 22 22     ....''""""""""""
    4e9f:	22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22     """"""""""""""""
    4eaf:	22 22 27 27 19 19 19 19 19 19 19 19 19 19 19 19     ""''............
    4ebf:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4ecf:	27 27 22 22 22 22 22 22 22 22 22 22 22 22 22 22     ''""""""""""""""
    4edf:	22 22 22 22 22 22 22 22 22 22 22 22 22 22 27 27     """"""""""""""''
    4eef:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4eff:	19 19 19 19 19 19 19 19 19 19 19 19 27 27 22 22     ............''""
    4f0f:	22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22     """"""""""""""""
    4f1f:	22 22 22 22 22 22 22 22 22 22 27 27 19 19 19 19     """"""""""''....
    4f2f:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4f3f:	19 19 19 19 19 19 19 19 27 27 27 27 27 27 27 27     ........''''''''
    4f4f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    4f5f:	27 27 27 27 27 27 27 27 19 19 19 19 19 19 19 19     ''''''''........
    4f6f:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4f7f:	19 19 19 19 27 27 27 27 27 27 27 27 27 27 27 27     ....''''''''''''
    4f8f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    4f9f:	27 27 27 27 19 19 19 19 19 19 19 19 19 19 19 19     ''''............
    4faf:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4fbf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    4fcf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    4fdf:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    4fef:	19 19 19 19 19 19 19 19 19 19 19 19 27 27 27 27     ............''''
    4fff:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    500f:	27 27 27 27 27 27 27 27 27 27 27 27 19 19 19 19     ''''''''''''....
    501f:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    502f:	19 19 19 19 19 19 19 19 27 27 27 27 27 27 27 27     ........''''''''
    503f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    504f:	27 27 27 27 27 27 27 27 19 19 19 19 19 19 19 19     ''''''''........
    505f:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    506f:	19 19 19 19 27 27 27 27 27 27 27 27 27 27 27 27     ....''''''''''''
    507f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    508f:	27 27 27 27 19 19 19 19 19 19 19 19 19 19 19 19     ''''............
    509f:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    50af:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    50bf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    50cf:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    50df:	19 19 19 19 19 19 19 19 19 19 19 19 27 27 27 27     ............''''
    50ef:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    50ff:	27 27 27 27 27 27 27 27 27 27 27 27 19 19 19 19     ''''''''''''....
    510f:	19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19     ................
    511f:	19 19 19 19 19 19 19 19 27 27 27 27 27 27 27 27     ........''''''''
    512f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    513f:	27 27 27 27 27 27 27 27 1f 1f 1f 1f 1f 1f 1f 1f     ''''''''........
    514f:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    515f:	1f 1f 1f 1f 27 27 27 27 27 27 27 27 27 27 27 27     ....''''''''''''
    516f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    517f:	27 27 27 27 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ''''............
    518f:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    519f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    51af:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    51bf:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    51cf:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 27 27 27 27     ............''''
    51df:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    51ef:	27 27 27 27 27 27 27 27 27 27 27 27 1f 1f 1f 1f     ''''''''''''....
    51ff:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    520f:	1f 1f 1f 1f 1f 1f 1f 1f 27 27 27 27 27 27 27 27     ........''''''''
    521f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    522f:	27 27 27 27 27 27 27 27 1f 1f 1f 1f 1f 1f 1f 1f     ''''''''........
    523f:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    524f:	1f 1f 1f 1f 27 27 27 27 27 27 27 27 27 27 27 27     ....''''''''''''
    525f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    526f:	27 27 27 27 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ''''............
    527f:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    528f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    529f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    52af:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    52bf:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 27 27 27 27     ............''''
    52cf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    52df:	27 27 27 27 27 27 27 27 27 27 27 27 1f 1f 1f 1f     ''''''''''''....
    52ef:	1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
    52ff:	1f 1f 1f 1f 1f 1f 1f 1f 00 00 00 00 00 00 00 00     ................
	...
    532f:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
    533f:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
    534f:	20 21 22 23 24 25 26 27 27 27 27 27 27 27 27 27      !"#$%&'''''''''
    535f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    536f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    537f:	27 26 25 24 23 22 21 20 1f 1e 1d 1c 1b 1a 19 18     '&%$#"! ........
    538f:	17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a 09 08     ................
    539f:	07 06 05 04 03 02 01 00 00 00 00 00 00 00 00 00     ................
	...
    541f:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
    542f:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
    543f:	20 21 22 23 24 25 26 27 27 27 27 27 27 27 27 27      !"#$%&'''''''''
    544f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    545f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    546f:	27 26 25 24 23 22 21 20 1f 1e 1d 1c 1b 1a 19 18     '&%$#"! ........
    547f:	17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a 09 08     ................
    548f:	07 06 05 04 03 02 01 00 00 00 00 00 00 00 00 00     ................
	...
    54e7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    54f7:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5507:	27 27 27 27 27 27 27 27 27 26 25 24 23 22 21 20     '''''''''&%$#"! 
    5517:	1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10     ................
    5527:	0f 0e 0d 0c 0b 0a 09 08 07 06 05 04 03 02 01 00     ................
	...
    55af:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
    55bf:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
    55cf:	20 21 22 23 24 25 26 27 27 27 27 27 27 27 27 27      !"#$%&'''''''''
    55df:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    55ef:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    55ff:	27 26 25 24 23 22 21 20 1f 1e 1d 1c 1b 1a 19 18     '&%$#"! ........
    560f:	17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a 09 08     ................
    561f:	07 06 05 04 03 02 01 00 00 00 00 00 00 00 00 00     ................
	...
    569f:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
    56af:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
    56bf:	20 21 22 23 24 25 26 27 27 27 27 27 27 27 27 27      !"#$%&'''''''''
    56cf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    56df:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    56ef:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    56ff:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    570f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    571f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    572f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    573f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    574f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    575f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    576f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    577f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    578f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    579f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    57af:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    57bf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    57cf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    57df:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    57ef:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    57ff:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    580f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    581f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    582f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    583f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    584f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    585f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    586f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    587f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    588f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    589f:	27 27 27 27 27 27 27 27 12 12 12 12 12 12 12 12     ''''''''........
    58af:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    58bf:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    58cf:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    58df:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    58ef:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    58ff:	12 12 12 12 12 12 12 12 12 12 12 13 14 15 16 17     ................
    590f:	18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 24 24 24     ........ !"#$$$$
    591f:	24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24     $$$$$$$$$$$$$$$$
    592f:	24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24     $$$$$$$$$$$$$$$$
    593f:	24 24 24 24 24 24 24 24 24 24 24 24 23 22 21 20     $$$$$$$$$$$$#"! 
    594f:	1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 12 12     ................
    595f:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    596f:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    597f:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    598f:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    599f:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    59af:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    59bf:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    59cf:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    59df:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    59ef:	12 12 12 12 12 12 12 12 12 12 12 13 14 15 16 17     ................
    59ff:	18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 24 24 24     ........ !"#$$$$
    5a0f:	24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24     $$$$$$$$$$$$$$$$
    5a1f:	24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24     $$$$$$$$$$$$$$$$
    5a2f:	24 24 24 24 24 24 24 24 24 24 24 24 23 22 21 20     $$$$$$$$$$$$#"! 
    5a3f:	1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 12 12     ................
    5a4f:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    5a5f:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    5a6f:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
    5a7f:	12 12 12 12 12 12 12 12 27 27 27 27 27 27 27 27     ........''''''''
    5a8f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5a9f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5aaf:	27 27 27 27 27 27 27 27 27 27 27 26 25 24 23 22     '''''''''''&%$#"
    5abf:	21 20 1f 1f 1e 1e 1d 1c 1b 1b 1a 1a 19 19 18 18     ! ..............
    5acf:	17 17 16 16 15 15 14 14 14 14 15 15 16 16 17 17     ................
    5adf:	18 18 19 19 1a 1a 1b 1b 1c 1d 1e 1e 1f 1f 20 21     .............. !
    5aef:	22 23 24 25 26 27 27 27 27 27 27 27 27 27 27 27     "#$%&'''''''''''
    5aff:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5b0f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5b1f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5b2f:	27 27 27 26 25 24 23 22 21 20 1f 1f 1e 1e 1d 1c     '''&%$#"! ......
    5b3f:	1b 1b 1a 1a 19 19 18 18 17 17 16 16 15 15 14 14     ................
    5b4f:	14 14 15 15 16 16 17 17 18 18 19 19 1a 1a 1b 1b     ................
    5b5f:	1c 1d 1e 1e 1f 1f 20 21 22 23 24 25 26 27 27 27     ...... !"#$%&'''
    5b6f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5b7f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5b8f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5b9f:	27 27 27 27 27 27 27 27 27 27 27 26 25 24 23 22     '''''''''''&%$#"
    5baf:	21 20 1f 1f 1e 1e 1d 1c 1b 1b 1a 1a 19 19 18 18     ! ..............
    5bbf:	17 17 16 16 15 15 14 14 14 14 15 15 16 16 17 17     ................
    5bcf:	18 18 19 19 1a 1a 1b 1b 1c 1d 1e 1e 1f 1f 20 21     .............. !
    5bdf:	22 23 24 25 26 27 27 27 27 27 27 27 27 27 27 27     "#$%&'''''''''''
    5bef:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5bff:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5c0f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5c1f:	27 27 27 26 25 24 23 22 21 20 1f 1f 1e 1e 1d 1c     '''&%$#"! ......
    5c2f:	1b 1b 1a 1a 19 19 18 18 17 17 16 16 15 15 14 14     ................
    5c3f:	14 14 15 15 16 16 17 17 18 18 19 19 1a 1a 1b 1b     ................
    5c4f:	1c 1d 1e 1e 1f 1f 20 21 22 23 24 25 26 27 27 27     ...... !"#$%&'''
    5c5f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5c6f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5c7f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5c8f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5c9f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5caf:	27 27 27 27 27 27 27 27 27 26 25 24 23 22 21 20     '''''''''&%$#"! 
    5cbf:	1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10     ................
    5ccf:	0f 0e 0d 0c 0b 0a 09 08 08 08 08 08 08 08 08 08     ................
    5cdf:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    5cef:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    5cff:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    5d0f:	08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17     ................
    5d1f:	18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25 26 27     ........ !"#$%&'
    5d2f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5d3f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5d4f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5d5f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5d6f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5d7f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5d8f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5d9f:	27 27 27 27 27 27 27 27 27 26 25 24 23 22 21 20     '''''''''&%$#"! 
    5daf:	1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10     ................
    5dbf:	0f 0e 0d 0c 0b 0a 09 08 08 08 08 08 08 08 08 08     ................
    5dcf:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    5ddf:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    5def:	08 08 08 08 08 08 08 08 08 08 08 08 08 08 08 08     ................
    5dff:	08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17     ................
    5e0f:	18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25 26 27     ........ !"#$%&'
    5e1f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5e2f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    5e3f:	27 27 27 27 27 27 27 27                             ''''''''

00005e47 <g_background>:
	...
    6027:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    6037:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    6047:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    6057:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    6067:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    6077:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    6087:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    6097:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    60a7:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    60b7:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    60c7:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    60d7:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    60e7:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    60f7:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    6107:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
    6117:	27 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     '...............
    6127:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    6137:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    614f:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    615f:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    6177:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    6187:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    619f:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    61af:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    61c7:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    61d7:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    61ef:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    61ff:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    6217:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    6227:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    623f:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    624f:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    6267:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    6277:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    628f:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    629f:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    62b7:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    62c7:	00 00 00 00 00 00 00 27 27 00 00 00 00 00 00 00     .......''.......
	...
    62df:	00 00 00 27 27 00 00 00 00 00 00 00 00 00 00 00     ...''...........
    62ef:	00 00 00 00 00 00 00 27 27 0f 0f 0f 0f 0f 0f 0f     .......''.......
    62ff:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 27 27 0f 0f 0f     ...........''...
    630f:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 27     ...............'
    631f:	27 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     '...............
    632f:	0f 0f 0f 27 27 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ...''...........
    633f:	0f 0f 0f 0f 0f 0f 0f 27 27 0f 0f 0f 0f 0f 0f 0f     .......''.......
    634f:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 27 27 0f 0f 0f     ...........''...
    635f:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 27     ...............'
    636f:	27 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     '...............
    637f:	0f 0f 0f 27 27 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ...''...........
    638f:	0f 0f 0f 0f 0f 0f 0f 27 27 0f 0f 0f 0f 0f 0f 0f     .......''.......
    639f:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 27 27 0f 0f 0f     ...........''...
    63af:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 27     ...............'
    63bf:	27 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     '...............
    63cf:	0f 0f 0f 27 27 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ...''...........
    63df:	0f 0f 0f 0f 0f 0f 0f 27 27 27 27 27 27 27 27 27     .......'''''''''
    63ef:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    63ff:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    640f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    641f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    642f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    643f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    644f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    645f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    646f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    647f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    648f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    649f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    64af:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    64bf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    64cf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    64df:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    64ef:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    64ff:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    650f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    651f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    652f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    653f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    654f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    655f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    656f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    657f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    658f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    659f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    65af:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    65bf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    65cf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    65df:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    65ef:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    65ff:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    660f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    661f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    662f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    663f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    664f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    665f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    666f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    667f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    668f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    669f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    66af:	27 27 27 27 27 27 27 27 00 00 00 00 00 00 00 00     ''''''''........
	...
    66df:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
    66ef:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
    66ff:	20 21 22 23 24 25 26 27 27 27 27 27 27 27 27 27      !"#$%&'''''''''
    670f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    671f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    672f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    673f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    674f:	27 27 27 27 27 27 27 27 27 26 25 24 23 22 21 20     '''''''''&%$#"! 
    675f:	1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10     ................
    676f:	0f 0e 0d 0c 0b 0a 09 08 07 06 05 04 03 02 01 00     ................
	...
    67a7:	27 26 25 24 23 22 21 20 1f 1e 1d 1c 1b 1a 19 18     '&%$#"! ........
    67b7:	17 16 15 14 13 12 11 10 0f 0e 0d 0c 0b 0a 09 08     ................
    67c7:	07 06 05 04 03 02 01 00 00 00 00 00 00 00 00 00     ................
	...
    681f:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
    682f:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
    683f:	20 21 22 23 24 25 26 27 27 27 27 27 27 27 27 27      !"#$%&'''''''''
    684f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    685f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    686f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    687f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    688f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    689f:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    68af:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    68bf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    68cf:	27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27     ''''''''''''''''
    68df:	27 27 27 27 27 27 27 27 27 26 25 24 23 22 21 20     '''''''''&%$#"! 
    68ef:	1f 1e 1d 1c 1b 1a 19 18 17 16 15 14 13 12 11 10     ................
    68ff:	0f 0e 0d 0c 0b 0a 09 08 07 06 05 04 03 02 01 00     ................
	...
    695f:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
    696f:	10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
    697f:	20 21 22 23 24 25 26 27 00                           !"#$%&'.

00006988 <__init>:
    6988:	11 24       	eor	r1, r1
    698a:	1f be       	out	0x3f, r1	; 63
    698c:	cf ef       	ldi	r28, 0xFF	; 255
    698e:	d0 e1       	ldi	r29, 0x10	; 16
    6990:	de bf       	out	0x3e, r29	; 62
    6992:	cd bf       	out	0x3d, r28	; 61

00006994 <__do_copy_data>:
    6994:	11 e0       	ldi	r17, 0x01	; 1
    6996:	a0 e0       	ldi	r26, 0x00	; 0
    6998:	b1 e0       	ldi	r27, 0x01	; 1
    699a:	e6 ef       	ldi	r30, 0xF6	; 246
    699c:	f5 e9       	ldi	r31, 0x95	; 149
    699e:	00 e0       	ldi	r16, 0x00	; 0
    69a0:	0b bf       	out	0x3b, r16	; 59
    69a2:	02 c0       	rjmp	.+4      	; 0x69a8 <__do_copy_data+0x14>
    69a4:	07 90       	elpm	r0, Z+
    69a6:	0d 92       	st	X+, r0
    69a8:	a2 30       	cpi	r26, 0x02	; 2
    69aa:	b1 07       	cpc	r27, r17
    69ac:	d9 f7       	brne	.-10     	; 0x69a4 <__do_copy_data+0x10>

000069ae <__do_clear_bss>:
    69ae:	11 e0       	ldi	r17, 0x01	; 1
    69b0:	a2 e0       	ldi	r26, 0x02	; 2
    69b2:	b1 e0       	ldi	r27, 0x01	; 1
    69b4:	01 c0       	rjmp	.+2      	; 0x69b8 <.do_clear_bss_start>

000069b6 <.do_clear_bss_loop>:
    69b6:	1d 92       	st	X+, r1

000069b8 <.do_clear_bss_start>:
    69b8:	ae 34       	cpi	r26, 0x4E	; 78
    69ba:	b1 07       	cpc	r27, r17
    69bc:	e1 f7       	brne	.-8      	; 0x69b6 <.do_clear_bss_loop>
    69be:	0c 94 dd 48 	jmp	0x91ba <main>

000069c2 <__bad_interrupt>:
    69c2:	0c 94 00 00 	jmp	0x0 <__vectors>

000069c6 <USART1_Init>:
void rc_process_command(uint8_t command);

//############# UART functions, useful for debugging ##########
void USART1_Init( unsigned int ubrr )
{
    69c6:	9c 01       	movw	r18, r24
	/* Set baud rate */
	UBRR1H = (unsigned char)(ubrr>>8);
    69c8:	83 2f       	mov	r24, r19
    69ca:	99 27       	eor	r25, r25
    69cc:	80 93 98 00 	sts	0x0098, r24
	UBRR1L = (unsigned char)ubrr;
    69d0:	20 93 99 00 	sts	0x0099, r18
	/* Enable receiver and transmitter */
	UCSR1B = (1<<RXEN1) | (1<<TXEN1) | _BV(RXCIE1);
    69d4:	88 e9       	ldi	r24, 0x98	; 152
    69d6:	80 93 9a 00 	sts	0x009A, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR1C =  (1<<UCSZ11) | (1<<UCSZ10);
    69da:	86 e0       	ldi	r24, 0x06	; 6
    69dc:	80 93 9d 00 	sts	0x009D, r24
    69e0:	08 95       	ret

000069e2 <USART1_Receive>:
}

unsigned char USART1_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR1A & (1<<RXC1)) )
    69e2:	80 91 9b 00 	lds	r24, 0x009B
    69e6:	88 23       	and	r24, r24
    69e8:	e4 f7       	brge	.-8      	; 0x69e2 <USART1_Receive>
	;
	/* Get and return received data from buffer */
	return UDR1;
    69ea:	80 91 9c 00 	lds	r24, 0x009C
}
    69ee:	99 27       	eor	r25, r25
    69f0:	08 95       	ret

000069f2 <USART1_Transmit>:

void USART1_Transmit( unsigned char data )
{
    69f2:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) )
    69f4:	80 91 9b 00 	lds	r24, 0x009B
    69f8:	85 ff       	sbrs	r24, 5
    69fa:	fc cf       	rjmp	.-8      	; 0x69f4 <USART1_Transmit+0x2>
	;
	/* Put data into buffer, sends the data */
	UDR1 = data;
    69fc:	90 93 9c 00 	sts	0x009C, r25
    6a00:	08 95       	ret

00006a02 <send_str>:
}

void send_str( unsigned char *str )
{
    6a02:	cf 93       	push	r28
    6a04:	df 93       	push	r29
    6a06:	ec 01       	movw	r28, r24
	while(*str)
	{
		USART1_Transmit(*str);
		str++;
    6a08:	88 81       	ld	r24, Y
    6a0a:	88 23       	and	r24, r24
    6a0c:	31 f0       	breq	.+12     	; 0x6a1a <send_str+0x18>
    6a0e:	89 91       	ld	r24, Y+
    6a10:	0e 94 f9 34 	call	0x69f2 <USART1_Transmit>
    6a14:	88 81       	ld	r24, Y
    6a16:	88 23       	and	r24, r24
    6a18:	d1 f7       	brne	.-12     	; 0x6a0e <send_str+0xc>
    6a1a:	df 91       	pop	r29
    6a1c:	cf 91       	pop	r28
    6a1e:	08 95       	ret

00006a20 <rc_process_command>:
	}
}


//######################## RC command processing function ############
void rc_process_command(uint8_t command)
{
    6a20:	1f 93       	push	r17
    6a22:	cf 93       	push	r28
    6a24:	df 93       	push	r29
    6a26:	98 2f       	mov	r25, r24
	static uint8_t last_command = 0;
	uint8_t i;
	
	if(last_command == command)		//if last command was the same
    6a28:	80 91 03 01 	lds	r24, 0x0103
    6a2c:	89 17       	cp	r24, r25
    6a2e:	59 f4       	brne	.+22     	; 0x6a46 <rc_process_command+0x26>
	{
		g_rc_hold_counter++;			//increase the counter
    6a30:	80 91 0d 01 	lds	r24, 0x010D
    6a34:	8f 5f       	subi	r24, 0xFF	; 255
    6a36:	80 93 0d 01 	sts	0x010D, r24
		if(g_rc_hold_counter > 20)		//and don't let it overflow
    6a3a:	85 31       	cpi	r24, 0x15	; 21
    6a3c:	30 f0       	brcs	.+12     	; 0x6a4a <rc_process_command+0x2a>
			g_rc_hold_counter = 20;
    6a3e:	84 e1       	ldi	r24, 0x14	; 20
    6a40:	80 93 0d 01 	sts	0x010D, r24
    6a44:	02 c0       	rjmp	.+4      	; 0x6a4a <rc_process_command+0x2a>
	}
	else
		g_rc_hold_counter = 0;
    6a46:	10 92 0d 01 	sts	0x010D, r1
	
	last_command = command;	
    6a4a:	90 93 03 01 	sts	0x0103, r25
	
	
	switch(command & 0b01111111)		//mask the toggle bit
    6a4e:	89 2f       	mov	r24, r25
    6a50:	99 27       	eor	r25, r25
    6a52:	8f 77       	andi	r24, 0x7F	; 127
    6a54:	90 70       	andi	r25, 0x00	; 0
    6a56:	81 31       	cpi	r24, 0x11	; 17
    6a58:	91 05       	cpc	r25, r1
    6a5a:	09 f4       	brne	.+2      	; 0x6a5e <rc_process_command+0x3e>
    6a5c:	75 c1       	rjmp	.+746    	; 0x6d48 <rc_process_command+0x328>
    6a5e:	82 31       	cpi	r24, 0x12	; 18
    6a60:	91 05       	cpc	r25, r1
    6a62:	6c f4       	brge	.+26     	; 0x6a7e <rc_process_command+0x5e>
    6a64:	8d 30       	cpi	r24, 0x0D	; 13
    6a66:	91 05       	cpc	r25, r1
    6a68:	59 f1       	breq	.+86     	; 0x6ac0 <rc_process_command+0xa0>
    6a6a:	8e 30       	cpi	r24, 0x0E	; 14
    6a6c:	91 05       	cpc	r25, r1
    6a6e:	1c f4       	brge	.+6      	; 0x6a76 <rc_process_command+0x56>
    6a70:	0c 97       	sbiw	r24, 0x0c	; 12
    6a72:	a1 f0       	breq	.+40     	; 0x6a9c <rc_process_command+0x7c>
    6a74:	7c c1       	rjmp	.+760    	; 0x6d6e <rc_process_command+0x34e>
    6a76:	40 97       	sbiw	r24, 0x10	; 16
    6a78:	09 f4       	brne	.+2      	; 0x6a7c <rc_process_command+0x5c>
    6a7a:	57 c1       	rjmp	.+686    	; 0x6d2a <rc_process_command+0x30a>
    6a7c:	78 c1       	rjmp	.+752    	; 0x6d6e <rc_process_command+0x34e>
    6a7e:	81 32       	cpi	r24, 0x21	; 33
    6a80:	91 05       	cpc	r25, r1
    6a82:	09 f4       	brne	.+2      	; 0x6a86 <rc_process_command+0x66>
    6a84:	ec c0       	rjmp	.+472    	; 0x6c5e <rc_process_command+0x23e>
    6a86:	82 32       	cpi	r24, 0x22	; 34
    6a88:	91 05       	cpc	r25, r1
    6a8a:	24 f4       	brge	.+8      	; 0x6a94 <rc_process_command+0x74>
    6a8c:	80 97       	sbiw	r24, 0x20	; 32
    6a8e:	09 f4       	brne	.+2      	; 0x6a92 <rc_process_command+0x72>
    6a90:	7f c0       	rjmp	.+254    	; 0x6b90 <rc_process_command+0x170>
    6a92:	6d c1       	rjmp	.+730    	; 0x6d6e <rc_process_command+0x34e>
    6a94:	c8 97       	sbiw	r24, 0x38	; 56
    6a96:	09 f4       	brne	.+2      	; 0x6a9a <rc_process_command+0x7a>
    6a98:	5d c0       	rjmp	.+186    	; 0x6b54 <rc_process_command+0x134>
    6a9a:	69 c1       	rjmp	.+722    	; 0x6d6e <rc_process_command+0x34e>
	{
	case RC_POWER:						//POWER button is pressed
		if(g_power_on == 1)
    6a9c:	80 91 20 01 	lds	r24, 0x0120
    6aa0:	81 30       	cpi	r24, 0x01	; 1
    6aa2:	21 f4       	brne	.+8      	; 0x6aac <rc_process_command+0x8c>
		{
			g_power_on = 0;			
    6aa4:	10 92 20 01 	sts	0x0120, r1
			MOT_OFF();					//stop the motor
    6aa8:	d8 98       	cbi	0x1b, 0	; 27
    6aaa:	04 c0       	rjmp	.+8      	; 0x6ab4 <rc_process_command+0x94>
		}
		else
		{
			g_power_on = 1;
    6aac:	81 e0       	ldi	r24, 0x01	; 1
    6aae:	80 93 20 01 	sts	0x0120, r24
			MOT_ON();					//start the motor
    6ab2:	d8 9a       	sbi	0x1b, 0	; 27
		}
		g_rc_state = STATE_NORMAL;		//set state as NORMAL
    6ab4:	10 92 02 01 	sts	0x0102, r1
		g_s_rc_state = STATE_DEMO;		//set state as DEMO
    6ab8:	82 e0       	ldi	r24, 0x02	; 2
    6aba:	80 93 00 01 	sts	0x0100, r24
    6abe:	54 c1       	rjmp	.+680    	; 0x6d68 <rc_process_command+0x348>
		EIMSK &= ~_BV(RC_IN);			//disable RC feature for a while
		break;
	
	case RC_SET:						//SET button is pressed
		if(g_power_on)					//react only if power is on (motor spins)
    6ac0:	80 91 20 01 	lds	r24, 0x0120
    6ac4:	88 23       	and	r24, r24
    6ac6:	09 f4       	brne	.+2      	; 0x6aca <rc_process_command+0xaa>
    6ac8:	45 c0       	rjmp	.+138    	; 0x6b54 <rc_process_command+0x134>
		{
			switch(g_rc_state)			//reaction depends on current state
    6aca:	80 91 02 01 	lds	r24, 0x0102
    6ace:	99 27       	eor	r25, r25
    6ad0:	00 97       	sbiw	r24, 0x00	; 0
    6ad2:	19 f0       	breq	.+6      	; 0x6ada <rc_process_command+0xba>
    6ad4:	01 97       	sbiw	r24, 0x01	; 1
    6ad6:	91 f0       	breq	.+36     	; 0x6afc <rc_process_command+0xdc>
    6ad8:	47 c1       	rjmp	.+654    	; 0x6d68 <rc_process_command+0x348>
			{
			case STATE_NORMAL:						//in normal state
				g_rc_state = STATE_SETTING;			
    6ada:	81 e0       	ldi	r24, 0x01	; 1
    6adc:	80 93 02 01 	sts	0x0102, r24
				g_seconds = 0;						//clear seconds register
    6ae0:	10 92 42 01 	sts	0x0142, r1
				g_minutes = (g_minutes / 4) * 4; 	//adjust minute hand
    6ae4:	80 91 22 01 	lds	r24, 0x0122
    6ae8:	86 95       	lsr	r24
    6aea:	86 95       	lsr	r24
    6aec:	99 27       	eor	r25, r25
    6aee:	88 0f       	add	r24, r24
    6af0:	99 1f       	adc	r25, r25
    6af2:	88 0f       	add	r24, r24
    6af4:	99 1f       	adc	r25, r25
    6af6:	80 93 22 01 	sts	0x0122, r24
				break;
    6afa:	36 c1       	rjmp	.+620    	; 0x6d68 <rc_process_command+0x348>
			case STATE_SETTING:						//in time setting state
				g_rc_state = STATE_NORMAL;
    6afc:	10 92 02 01 	sts	0x0102, r1
				g_data_rtc[SECONDS_ADDR] = 0;				//prepare
    6b00:	10 92 44 01 	sts	0x0144, r1
				g_data_rtc[MINUTES_ADDR] = g_minutes / 4;	//data before
    6b04:	80 91 22 01 	lds	r24, 0x0122
    6b08:	86 95       	lsr	r24
    6b0a:	86 95       	lsr	r24
    6b0c:	80 93 45 01 	sts	0x0145, r24
				g_data_rtc[HOURS_ADDR] = g_hours / 20;		//sending it to RTC
    6b10:	80 91 4d 01 	lds	r24, 0x014D
    6b14:	64 e1       	ldi	r22, 0x14	; 20
    6b16:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    6b1a:	80 93 46 01 	sts	0x0146, r24
				
				if(g_data_rtc[HOURS_ADDR] == 0)			//RTC is working in 1-12 am/pm
    6b1e:	88 23       	and	r24, r24
    6b20:	19 f4       	brne	.+6      	; 0x6b28 <rc_process_command+0x108>
					g_data_rtc[HOURS_ADDR] = 12;
    6b22:	8c e0       	ldi	r24, 0x0C	; 12
    6b24:	80 93 46 01 	sts	0x0146, r24
    6b28:	c4 e4       	ldi	r28, 0x44	; 68
    6b2a:	d1 e0       	ldi	r29, 0x01	; 1
    6b2c:	12 e0       	ldi	r17, 0x02	; 2

				for(i = 0; i < 3; i++)
					g_data_rtc[i] = DECtoBCD(g_data_rtc[i]);	//convert to RCD format
    6b2e:	88 81       	ld	r24, Y
    6b30:	0e 94 c8 4a 	call	0x9590 <DECtoBCD>
    6b34:	89 93       	st	Y+, r24
    6b36:	11 50       	subi	r17, 0x01	; 1
    6b38:	17 ff       	sbrs	r17, 7
    6b3a:	f9 cf       	rjmp	.-14     	; 0x6b2e <rc_process_command+0x10e>
				
				g_data_rtc[HOURS_ADDR] |= 0b00100000;		//set am/pm mode bit
    6b3c:	80 91 46 01 	lds	r24, 0x0146
    6b40:	80 62       	ori	r24, 0x20	; 32
    6b42:	80 93 46 01 	sts	0x0146, r24
	
				WriteBufI2C(0x00, g_data_rtc, 7);			//send it to RTC
    6b46:	47 e0       	ldi	r20, 0x07	; 7
    6b48:	64 e4       	ldi	r22, 0x44	; 68
    6b4a:	71 e0       	ldi	r23, 0x01	; 1
    6b4c:	80 e0       	ldi	r24, 0x00	; 0
    6b4e:	0e 94 de 49 	call	0x93bc <WriteBufI2C>
    6b52:	0a c1       	rjmp	.+532    	; 0x6d68 <rc_process_command+0x348>
				break;
			}	
			EIMSK &= ~_BV(RC_IN);							//disable RC feature for a while
			break;
		}
	
	case RC_SET2:						//SET button is pressed
		if(g_power_on)					//react only if power is on (motor spins)
    6b54:	80 91 20 01 	lds	r24, 0x0120
    6b58:	88 23       	and	r24, r24
    6b5a:	d1 f0       	breq	.+52     	; 0x6b90 <rc_process_command+0x170>
		{
			switch(g_s_rc_state)			//reaction depends on current state
    6b5c:	80 91 00 01 	lds	r24, 0x0100
    6b60:	99 27       	eor	r25, r25
    6b62:	81 30       	cpi	r24, 0x01	; 1
    6b64:	91 05       	cpc	r25, r1
    6b66:	71 f0       	breq	.+28     	; 0x6b84 <rc_process_command+0x164>
    6b68:	82 30       	cpi	r24, 0x02	; 2
    6b6a:	91 05       	cpc	r25, r1
    6b6c:	1c f4       	brge	.+6      	; 0x6b74 <rc_process_command+0x154>
    6b6e:	89 2b       	or	r24, r25
    6b70:	39 f0       	breq	.+14     	; 0x6b80 <rc_process_command+0x160>
    6b72:	fa c0       	rjmp	.+500    	; 0x6d68 <rc_process_command+0x348>
    6b74:	02 97       	sbiw	r24, 0x02	; 2
    6b76:	09 f0       	breq	.+2      	; 0x6b7a <rc_process_command+0x15a>
    6b78:	f7 c0       	rjmp	.+494    	; 0x6d68 <rc_process_command+0x348>
			{
			case STATE_DEMO:						//in time demo state
				g_s_rc_state = STATE_NORMAL;
    6b7a:	10 92 00 01 	sts	0x0100, r1
    6b7e:	05 c0       	rjmp	.+10     	; 0x6b8a <rc_process_command+0x16a>
				g_seconds = 0;
				//g_mode=g_temp_mode ;
				break;	
			case STATE_NORMAL:						//in normal state
				g_s_rc_state = STATE_SETTING;
    6b80:	81 e0       	ldi	r24, 0x01	; 1
    6b82:	01 c0       	rjmp	.+2      	; 0x6b86 <rc_process_command+0x166>
				g_seconds = 0;
				
				//g_mode=g_temp_mode ;
				break;
			case STATE_SETTING:						//clock seconds hand step by 1s
				g_s_rc_state = STATE_DEMO;
    6b84:	82 e0       	ldi	r24, 0x02	; 2
    6b86:	80 93 00 01 	sts	0x0100, r24
				g_seconds = 0;
    6b8a:	10 92 42 01 	sts	0x0142, r1
    6b8e:	ec c0       	rjmp	.+472    	; 0x6d68 <rc_process_command+0x348>
				//g_mode=0 ;
				//g_mode=g_temp_mode ;
				break;
			}	
			
			EIMSK &= ~_BV(RC_IN);							//disable RC feature for a while
			break;
		}
	
	case RC_PLUS:						//PLUS button is pressed
		if(g_power_on)					//react only if power is on (motor spins)
    6b90:	80 91 20 01 	lds	r24, 0x0120
    6b94:	88 23       	and	r24, r24
    6b96:	09 f4       	brne	.+2      	; 0x6b9a <rc_process_command+0x17a>
    6b98:	ea c0       	rjmp	.+468    	; 0x6d6e <rc_process_command+0x34e>
		{
			switch(g_rc_state)			//reaction depends on current state
    6b9a:	80 91 02 01 	lds	r24, 0x0102
    6b9e:	99 27       	eor	r25, r25
    6ba0:	00 97       	sbiw	r24, 0x00	; 0
    6ba2:	19 f0       	breq	.+6      	; 0x6baa <rc_process_command+0x18a>
    6ba4:	01 97       	sbiw	r24, 0x01	; 1
    6ba6:	51 f0       	breq	.+20     	; 0x6bbc <rc_process_command+0x19c>
    6ba8:	e2 c0       	rjmp	.+452    	; 0x6d6e <rc_process_command+0x34e>
			{
			case STATE_NORMAL:			//in normal state change displaying mode
				if(g_mode == NUMBER_OF_MODES - 1)
    6baa:	80 91 1f 01 	lds	r24, 0x011F
    6bae:	82 32       	cpi	r24, 0x22	; 34
    6bb0:	19 f4       	brne	.+6      	; 0x6bb8 <rc_process_command+0x198>
					g_mode = 0;
    6bb2:	10 92 1f 01 	sts	0x011F, r1
    6bb6:	d5 c0       	rjmp	.+426    	; 0x6d62 <rc_process_command+0x342>
				else
					g_mode++;
    6bb8:	8f 5f       	subi	r24, 0xFF	; 255
    6bba:	65 c0       	rjmp	.+202    	; 0x6c86 <rc_process_command+0x266>
				g_rc_idle_counter = 2;	
				EIMSK &= ~_BV(RC_IN);			//disable RC feature for a while	
				break;
			case STATE_SETTING:				//in time setting mode
				if(g_rc_hold_counter < 20)	//if PLUS button is not held for a long time
    6bbc:	80 91 0d 01 	lds	r24, 0x010D
    6bc0:	20 91 22 01 	lds	r18, 0x0122
    6bc4:	84 31       	cpi	r24, 0x14	; 20
    6bc6:	c8 f4       	brcc	.+50     	; 0x6bfa <rc_process_command+0x1da>
				{
					g_minutes += 4;			//move second hand 4 steps forward	
    6bc8:	82 2f       	mov	r24, r18
    6bca:	8c 5f       	subi	r24, 0xFC	; 252
    6bcc:	80 93 22 01 	sts	0x0122, r24
					if(g_minutes == RESOLUTION)	
    6bd0:	80 3f       	cpi	r24, 0xF0	; 240
    6bd2:	11 f4       	brne	.+4      	; 0x6bd8 <rc_process_command+0x1b8>
						g_minutes = 0;
    6bd4:	10 92 22 01 	sts	0x0122, r1
					if(g_minutes % 12 == 0) //if divisible
    6bd8:	80 91 22 01 	lds	r24, 0x0122
    6bdc:	6c e0       	ldi	r22, 0x0C	; 12
    6bde:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    6be2:	99 23       	and	r25, r25
    6be4:	09 f0       	breq	.+2      	; 0x6be8 <rc_process_command+0x1c8>
    6be6:	c3 c0       	rjmp	.+390    	; 0x6d6e <rc_process_command+0x34e>
					{
						g_hours++;			//move hour hand one step forward
    6be8:	80 91 4d 01 	lds	r24, 0x014D
    6bec:	8f 5f       	subi	r24, 0xFF	; 255
    6bee:	80 93 4d 01 	sts	0x014D, r24
						if(g_hours == RESOLUTION)
    6bf2:	80 3f       	cpi	r24, 0xF0	; 240
    6bf4:	09 f0       	breq	.+2      	; 0x6bf8 <rc_process_command+0x1d8>
    6bf6:	bb c0       	rjmp	.+374    	; 0x6d6e <rc_process_command+0x34e>
    6bf8:	2f c0       	rjmp	.+94     	; 0x6c58 <rc_process_command+0x238>
							g_hours = 0;
					}
				}
				else		//PLUS button is held for a long time
				{
					if(g_minutes % 24)		//while not divisible do the same as above
    6bfa:	82 2f       	mov	r24, r18
    6bfc:	68 e1       	ldi	r22, 0x18	; 24
    6bfe:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    6c02:	99 23       	and	r25, r25
    6c04:	c9 f0       	breq	.+50     	; 0x6c38 <rc_process_command+0x218>
					{
						g_minutes += 4;
    6c06:	82 2f       	mov	r24, r18
    6c08:	8c 5f       	subi	r24, 0xFC	; 252
    6c0a:	80 93 22 01 	sts	0x0122, r24
						if(g_minutes == RESOLUTION)
    6c0e:	80 3f       	cpi	r24, 0xF0	; 240
    6c10:	11 f4       	brne	.+4      	; 0x6c16 <rc_process_command+0x1f6>
							g_minutes = 0;
    6c12:	10 92 22 01 	sts	0x0122, r1
						if(g_minutes % 12 == 0)
    6c16:	80 91 22 01 	lds	r24, 0x0122
    6c1a:	6c e0       	ldi	r22, 0x0C	; 12
    6c1c:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    6c20:	99 23       	and	r25, r25
    6c22:	09 f0       	breq	.+2      	; 0x6c26 <rc_process_command+0x206>
    6c24:	a4 c0       	rjmp	.+328    	; 0x6d6e <rc_process_command+0x34e>
						{
							g_hours++;
    6c26:	80 91 4d 01 	lds	r24, 0x014D
    6c2a:	8f 5f       	subi	r24, 0xFF	; 255
    6c2c:	80 93 4d 01 	sts	0x014D, r24
							if(g_hours == RESOLUTION)
    6c30:	80 3f       	cpi	r24, 0xF0	; 240
    6c32:	09 f0       	breq	.+2      	; 0x6c36 <rc_process_command+0x216>
    6c34:	9c c0       	rjmp	.+312    	; 0x6d6e <rc_process_command+0x34e>
    6c36:	10 c0       	rjmp	.+32     	; 0x6c58 <rc_process_command+0x238>
							g_hours = 0;
						}					
					}
					else
					{
						g_minutes += 24;		//move minute hand 24 step forward
    6c38:	82 2f       	mov	r24, r18
    6c3a:	88 5e       	subi	r24, 0xE8	; 232
    6c3c:	80 93 22 01 	sts	0x0122, r24
						if(g_minutes == RESOLUTION)
    6c40:	80 3f       	cpi	r24, 0xF0	; 240
    6c42:	11 f4       	brne	.+4      	; 0x6c48 <rc_process_command+0x228>
							g_minutes = 0;
    6c44:	90 93 22 01 	sts	0x0122, r25
						g_hours += 2;			//move hour hand 	
    6c48:	80 91 4d 01 	lds	r24, 0x014D
    6c4c:	8e 5f       	subi	r24, 0xFE	; 254
    6c4e:	80 93 4d 01 	sts	0x014D, r24
						if(g_hours == RESOLUTION)
    6c52:	80 3f       	cpi	r24, 0xF0	; 240
    6c54:	09 f0       	breq	.+2      	; 0x6c58 <rc_process_command+0x238>
    6c56:	8b c0       	rjmp	.+278    	; 0x6d6e <rc_process_command+0x34e>
							g_hours = 0;						
    6c58:	90 93 4d 01 	sts	0x014D, r25
					}
				}
				break;
			}
		}
		break;
    6c5c:	88 c0       	rjmp	.+272    	; 0x6d6e <rc_process_command+0x34e>
	
	case RC_MINUS:						//MINUS button is pressed
		if(g_power_on)					//react only if power is on (motor spins)
    6c5e:	80 91 20 01 	lds	r24, 0x0120
    6c62:	88 23       	and	r24, r24
    6c64:	09 f4       	brne	.+2      	; 0x6c68 <rc_process_command+0x248>
    6c66:	61 c0       	rjmp	.+194    	; 0x6d2a <rc_process_command+0x30a>
		{
			switch(g_rc_state)
    6c68:	80 91 02 01 	lds	r24, 0x0102
    6c6c:	99 27       	eor	r25, r25
    6c6e:	00 97       	sbiw	r24, 0x00	; 0
    6c70:	19 f0       	breq	.+6      	; 0x6c78 <rc_process_command+0x258>
    6c72:	01 97       	sbiw	r24, 0x01	; 1
    6c74:	59 f0       	breq	.+22     	; 0x6c8c <rc_process_command+0x26c>
    6c76:	7b c0       	rjmp	.+246    	; 0x6d6e <rc_process_command+0x34e>
			{
			case STATE_NORMAL:			//in normal state change displaying mode
				if(g_mode == 0)
    6c78:	80 91 1f 01 	lds	r24, 0x011F
    6c7c:	88 23       	and	r24, r24
    6c7e:	11 f4       	brne	.+4      	; 0x6c84 <rc_process_command+0x264>
					g_mode = NUMBER_OF_MODES - 1;
    6c80:	82 e2       	ldi	r24, 0x22	; 34
    6c82:	01 c0       	rjmp	.+2      	; 0x6c86 <rc_process_command+0x266>
				else
					g_mode--;
    6c84:	81 50       	subi	r24, 0x01	; 1
    6c86:	80 93 1f 01 	sts	0x011F, r24
    6c8a:	6b c0       	rjmp	.+214    	; 0x6d62 <rc_process_command+0x342>
				g_rc_idle_counter = 2;
				EIMSK &= ~_BV(RC_IN);		//disable RC feature for a while
				break;

			case STATE_SETTING:				//in time setting mode
				if(g_rc_hold_counter < 20)	//if MINUS button is not held for a long time
    6c8c:	80 91 0d 01 	lds	r24, 0x010D
    6c90:	20 91 22 01 	lds	r18, 0x0122
    6c94:	84 31       	cpi	r24, 0x14	; 20
    6c96:	88 f4       	brcc	.+34     	; 0x6cba <rc_process_command+0x29a>
				{
					if(g_minutes == 0)
    6c98:	22 23       	and	r18, r18
    6c9a:	19 f4       	brne	.+6      	; 0x6ca2 <rc_process_command+0x282>
						g_minutes = RESOLUTION;
    6c9c:	80 ef       	ldi	r24, 0xF0	; 240
    6c9e:	80 93 22 01 	sts	0x0122, r24
						
					g_minutes -= 4;				//move minute hand 4 steps back
    6ca2:	80 91 22 01 	lds	r24, 0x0122
    6ca6:	84 50       	subi	r24, 0x04	; 4
    6ca8:	80 93 22 01 	sts	0x0122, r24
						
					if(g_minutes % 12 == 0)	//if divisible
    6cac:	6c e0       	ldi	r22, 0x0C	; 12
    6cae:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    6cb2:	99 23       	and	r25, r25
    6cb4:	09 f0       	breq	.+2      	; 0x6cb8 <rc_process_command+0x298>
    6cb6:	5b c0       	rjmp	.+182    	; 0x6d6e <rc_process_command+0x34e>
    6cb8:	16 c0       	rjmp	.+44     	; 0x6ce6 <rc_process_command+0x2c6>
					{
						if(g_hours == 0)
							g_hours = RESOLUTION;
						g_hours--;				//move hour hand one step back
					}
				}
				else			//MINUS button is held for a long time
				{
					if(g_minutes % 24)	//while not divisible do the same as above
    6cba:	82 2f       	mov	r24, r18
    6cbc:	68 e1       	ldi	r22, 0x18	; 24
    6cbe:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    6cc2:	99 23       	and	r25, r25
    6cc4:	d9 f0       	breq	.+54     	; 0x6cfc <rc_process_command+0x2dc>
					{
						if(g_minutes == 0)
    6cc6:	22 23       	and	r18, r18
    6cc8:	19 f4       	brne	.+6      	; 0x6cd0 <rc_process_command+0x2b0>
							g_minutes = RESOLUTION;
    6cca:	80 ef       	ldi	r24, 0xF0	; 240
    6ccc:	80 93 22 01 	sts	0x0122, r24
						g_minutes -= 4;
    6cd0:	80 91 22 01 	lds	r24, 0x0122
    6cd4:	84 50       	subi	r24, 0x04	; 4
    6cd6:	80 93 22 01 	sts	0x0122, r24
							
						if(g_minutes % 12 == 0)
    6cda:	6c e0       	ldi	r22, 0x0C	; 12
    6cdc:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    6ce0:	99 23       	and	r25, r25
    6ce2:	09 f0       	breq	.+2      	; 0x6ce6 <rc_process_command+0x2c6>
    6ce4:	44 c0       	rjmp	.+136    	; 0x6d6e <rc_process_command+0x34e>
						{
							if(g_hours == 0)
    6ce6:	80 91 4d 01 	lds	r24, 0x014D
    6cea:	88 23       	and	r24, r24
    6cec:	19 f4       	brne	.+6      	; 0x6cf4 <rc_process_command+0x2d4>
								g_hours = RESOLUTION;	
    6cee:	80 ef       	ldi	r24, 0xF0	; 240
    6cf0:	80 93 4d 01 	sts	0x014D, r24
							g_hours--;		
    6cf4:	80 91 4d 01 	lds	r24, 0x014D
    6cf8:	81 50       	subi	r24, 0x01	; 1
    6cfa:	14 c0       	rjmp	.+40     	; 0x6d24 <rc_process_command+0x304>
						}					
					}
					else
					{
						if(g_minutes == 0)
    6cfc:	22 23       	and	r18, r18
    6cfe:	19 f4       	brne	.+6      	; 0x6d06 <rc_process_command+0x2e6>
							g_minutes = RESOLUTION;
    6d00:	80 ef       	ldi	r24, 0xF0	; 240
    6d02:	80 93 22 01 	sts	0x0122, r24
						g_minutes -= 24;	//move minute hand 24 steps back
    6d06:	80 91 22 01 	lds	r24, 0x0122
    6d0a:	88 51       	subi	r24, 0x18	; 24
    6d0c:	80 93 22 01 	sts	0x0122, r24
						
						if(g_hours == 0)
    6d10:	80 91 4d 01 	lds	r24, 0x014D
    6d14:	88 23       	and	r24, r24
    6d16:	19 f4       	brne	.+6      	; 0x6d1e <rc_process_command+0x2fe>
							g_hours = RESOLUTION;	
    6d18:	80 ef       	ldi	r24, 0xF0	; 240
    6d1a:	80 93 4d 01 	sts	0x014D, r24
					 	
						g_hours -= 2;		//move hour hand 2 steps back
    6d1e:	80 91 4d 01 	lds	r24, 0x014D
    6d22:	82 50       	subi	r24, 0x02	; 2
    6d24:	80 93 4d 01 	sts	0x014D, r24
					}
				}			
				break;
			}	
			break;
    6d28:	22 c0       	rjmp	.+68     	; 0x6d6e <rc_process_command+0x34e>
		}
	
	case RC_VPLUS:						//PLUS button is pressed
		if(g_power_on)					//react only if power is on (motor spins)
    6d2a:	80 91 20 01 	lds	r24, 0x0120
    6d2e:	88 23       	and	r24, r24
    6d30:	f1 f0       	breq	.+60     	; 0x6d6e <rc_process_command+0x34e>
		{
				if(g_hh_mode == NUMBER_OF_HH_MODES - 1)
    6d32:	80 91 35 01 	lds	r24, 0x0135
    6d36:	8a 30       	cpi	r24, 0x0A	; 10
    6d38:	19 f4       	brne	.+6      	; 0x6d40 <rc_process_command+0x320>
					g_hh_mode = 0;
    6d3a:	10 92 35 01 	sts	0x0135, r1
    6d3e:	11 c0       	rjmp	.+34     	; 0x6d62 <rc_process_command+0x342>
				else
					g_hh_mode++;
    6d40:	8f 5f       	subi	r24, 0xFF	; 255
    6d42:	80 93 35 01 	sts	0x0135, r24
    6d46:	0d c0       	rjmp	.+26     	; 0x6d62 <rc_process_command+0x342>
				g_rc_idle_counter = 2;	
				EIMSK &= ~_BV(RC_IN);			//disable RC feature for a while	
		}
		break;
	
	case RC_VMINUS:						//MINUS button is pressed
		if(g_power_on)					//react only if power is on (motor spins)
    6d48:	80 91 20 01 	lds	r24, 0x0120
    6d4c:	88 23       	and	r24, r24
    6d4e:	79 f0       	breq	.+30     	; 0x6d6e <rc_process_command+0x34e>
		{
				if(g_mh_mode == 0)
    6d50:	80 91 0c 01 	lds	r24, 0x010C
    6d54:	88 23       	and	r24, r24
    6d56:	11 f4       	brne	.+4      	; 0x6d5c <rc_process_command+0x33c>
					g_mh_mode = NUMBER_OF_MH_MODES - 1;
    6d58:	8a e0       	ldi	r24, 0x0A	; 10
    6d5a:	01 c0       	rjmp	.+2      	; 0x6d5e <rc_process_command+0x33e>
				else
					g_mh_mode--;
    6d5c:	81 50       	subi	r24, 0x01	; 1
    6d5e:	80 93 0c 01 	sts	0x010C, r24
				g_rc_idle_counter = 2;
    6d62:	82 e0       	ldi	r24, 0x02	; 2
    6d64:	80 93 2e 01 	sts	0x012E, r24
				EIMSK &= ~_BV(RC_IN);		//disable RC feature for a while
    6d68:	89 b7       	in	r24, 0x39	; 57
    6d6a:	8f 7d       	andi	r24, 0xDF	; 223
    6d6c:	89 bf       	out	0x39, r24	; 57
    6d6e:	df 91       	pop	r29
    6d70:	cf 91       	pop	r28
    6d72:	1f 91       	pop	r17
    6d74:	08 95       	ret

00006d76 <__vector_30>:
		}
		break;
	}
}

//################## UART receive completed interrupt routine ###############
ISR(USART1_RX_vect)
{
    6d76:	1f 92       	push	r1
    6d78:	0f 92       	push	r0
    6d7a:	0f b6       	in	r0, 0x3f	; 63
    6d7c:	0f 92       	push	r0
    6d7e:	11 24       	eor	r1, r1
    6d80:	2f 93       	push	r18
    6d82:	8f 93       	push	r24
    6d84:	9f 93       	push	r25
    6d86:	ef 93       	push	r30
    6d88:	ff 93       	push	r31
	g_uart_buffer[g_uart_counter] = UDR1;
    6d8a:	90 91 34 01 	lds	r25, 0x0134
    6d8e:	e9 2f       	mov	r30, r25
    6d90:	ff 27       	eor	r31, r31
    6d92:	eb 5e       	subi	r30, 0xEB	; 235
    6d94:	fe 4f       	sbci	r31, 0xFE	; 254
    6d96:	80 91 9c 00 	lds	r24, 0x009C
    6d9a:	80 83       	st	Z, r24
	g_uart_counter++;
    6d9c:	89 2f       	mov	r24, r25
    6d9e:	8f 5f       	subi	r24, 0xFF	; 255
    6da0:	80 93 34 01 	sts	0x0134, r24
	
	//if string 'RESET' is received enable the watchdog and wait for the chip reset
	//this feature is used to programm ATMEGA via bootloader
	//bootloader used in this project (MegaLoad) can be downloaded from http://www.microsyl.com/
	if(g_uart_counter == 5)
    6da4:	85 30       	cpi	r24, 0x05	; 5
    6da6:	f1 f4       	brne	.+60     	; 0x6de4 <__vector_30+0x6e>
	{
		if( g_uart_buffer[0] == 'R' &&
    6da8:	80 91 15 01 	lds	r24, 0x0115
    6dac:	82 35       	cpi	r24, 0x52	; 82
    6dae:	d1 f4       	brne	.+52     	; 0x6de4 <__vector_30+0x6e>
    6db0:	80 91 16 01 	lds	r24, 0x0116
    6db4:	85 34       	cpi	r24, 0x45	; 69
    6db6:	b1 f4       	brne	.+44     	; 0x6de4 <__vector_30+0x6e>
    6db8:	80 91 17 01 	lds	r24, 0x0117
    6dbc:	83 35       	cpi	r24, 0x53	; 83
    6dbe:	91 f4       	brne	.+36     	; 0x6de4 <__vector_30+0x6e>
    6dc0:	80 91 18 01 	lds	r24, 0x0118
    6dc4:	85 34       	cpi	r24, 0x45	; 69
    6dc6:	71 f4       	brne	.+28     	; 0x6de4 <__vector_30+0x6e>
    6dc8:	80 91 19 01 	lds	r24, 0x0119
    6dcc:	84 35       	cpi	r24, 0x54	; 84
    6dce:	51 f4       	brne	.+20     	; 0x6de4 <__vector_30+0x6e>
			g_uart_buffer[1] == 'E' &&
			g_uart_buffer[2] == 'S' &&
			g_uart_buffer[3] == 'E' &&
			g_uart_buffer[4] == 'T')
		{
			wdt_enable(WDTO_120MS);
    6dd0:	88 e1       	ldi	r24, 0x18	; 24
    6dd2:	90 e0       	ldi	r25, 0x00	; 0
    6dd4:	2b e0       	ldi	r18, 0x0B	; 11
    6dd6:	0f b6       	in	r0, 0x3f	; 63
    6dd8:	f8 94       	cli
    6dda:	a8 95       	wdr
    6ddc:	81 bd       	out	0x21, r24	; 33
    6dde:	0f be       	out	0x3f, r0	; 63
    6de0:	21 bd       	out	0x21, r18	; 33
			while(1);
    6de2:	ff cf       	rjmp	.-2      	; 0x6de2 <__vector_30+0x6c>
    6de4:	ff 91       	pop	r31
    6de6:	ef 91       	pop	r30
    6de8:	9f 91       	pop	r25
    6dea:	8f 91       	pop	r24
    6dec:	2f 91       	pop	r18
    6dee:	0f 90       	pop	r0
    6df0:	0f be       	out	0x3f, r0	; 63
    6df2:	0f 90       	pop	r0
    6df4:	1f 90       	pop	r1
    6df6:	18 95       	reti

00006df8 <__vector_25>:
		}
	}
}
 

//################# TIMER3 input capture interrupt routine #######################
//when the slit in the disc comes next to the detector this interrupt is called
ISR(TIMER3_CAPT_vect)
{
    6df8:	1f 92       	push	r1
    6dfa:	0f 92       	push	r0
    6dfc:	0f b6       	in	r0, 0x3f	; 63
    6dfe:	0f 92       	push	r0
    6e00:	11 24       	eor	r1, r1
    6e02:	2f 93       	push	r18
    6e04:	5f 93       	push	r21
    6e06:	6f 93       	push	r22
    6e08:	7f 93       	push	r23
    6e0a:	8f 93       	push	r24
    6e0c:	9f 93       	push	r25
    6e0e:	af 93       	push	r26
    6e10:	bf 93       	push	r27
	TCNT3 = 0;	//clear timer
    6e12:	10 92 89 00 	sts	0x0089, r1
    6e16:	10 92 88 00 	sts	0x0088, r1
	
	if(((ICR3 > 34000) || (ETIFR & _BV(TOV3))) || !g_power_on) //if the disc spins to slow 
    6e1a:	80 91 80 00 	lds	r24, 0x0080
    6e1e:	90 91 81 00 	lds	r25, 0x0081
    6e22:	81 5d       	subi	r24, 0xD1	; 209
    6e24:	94 48       	sbci	r25, 0x84	; 132
    6e26:	40 f4       	brcc	.+16     	; 0x6e38 <__vector_25+0x40>
    6e28:	80 91 7c 00 	lds	r24, 0x007C
    6e2c:	82 fd       	sbrc	r24, 2
    6e2e:	04 c0       	rjmp	.+8      	; 0x6e38 <__vector_25+0x40>
    6e30:	80 91 20 01 	lds	r24, 0x0120
    6e34:	88 23       	and	r24, r24
    6e36:	81 f4       	brne	.+32     	; 0x6e58 <__vector_25+0x60>
	{
		ETIFR |= _BV(TOV3);						//clear overflow flag
    6e38:	80 91 7c 00 	lds	r24, 0x007C
    6e3c:	84 60       	ori	r24, 0x04	; 4
    6e3e:	80 93 7c 00 	sts	0x007C, r24
		
		PWM_RED = PWM_TOP;						//}
    6e42:	87 e2       	ldi	r24, 0x27	; 39
    6e44:	90 e0       	ldi	r25, 0x00	; 0
    6e46:	9b bd       	out	0x2b, r25	; 43
    6e48:	8a bd       	out	0x2a, r24	; 42
		PWM_GREEN = PWM_TOP;					//}	and turn off all of the diodes
    6e4a:	99 bd       	out	0x29, r25	; 41
    6e4c:	88 bd       	out	0x28, r24	; 40
		PWM_BLUE = PWM_TOP;						//}
    6e4e:	90 93 79 00 	sts	0x0079, r25
    6e52:	80 93 78 00 	sts	0x0078, r24
		return;								//leave this routine
    6e56:	1f c0       	rjmp	.+62     	; 0x6e96 <__vector_25+0x9e>
	}
	
	OCR0 = ICR3/RESOLUTION;						//compute time for one step
    6e58:	80 91 80 00 	lds	r24, 0x0080
    6e5c:	90 91 81 00 	lds	r25, 0x0081
    6e60:	60 ef       	ldi	r22, 0xF0	; 240
    6e62:	70 e0       	ldi	r23, 0x00	; 0
    6e64:	0e 94 e7 4a 	call	0x95ce <__udivmodhi4>
    6e68:	61 bf       	out	0x31, r22	; 49
	g_reminder = ICR3 - (OCR0*RESOLUTION);		//compute reminder
    6e6a:	80 91 80 00 	lds	r24, 0x0080
    6e6e:	90 91 81 00 	lds	r25, 0x0081
    6e72:	28 2f       	mov	r18, r24
    6e74:	91 b7       	in	r25, 0x31	; 49
    6e76:	80 ef       	ldi	r24, 0xF0	; 240
    6e78:	98 9f       	mul	r25, r24
    6e7a:	c0 01       	movw	r24, r0
    6e7c:	11 24       	eor	r1, r1
    6e7e:	28 1b       	sub	r18, r24
    6e80:	20 93 24 01 	sts	0x0124, r18
	//g_position = 3*RESOLUTION/4;						//set proper position (12 o'clock=0, 6 o'clock = RESOLUTION/2)
	g_position = RESOLUTION/4;						//set proper position (12 o'clock=0, 6 o'clock = RESOLUTION/2)
    6e84:	8c e3       	ldi	r24, 0x3C	; 60
    6e86:	80 93 40 01 	sts	0x0140, r24
	TCNT0 = OCR0 - 2;							//timer0 compare interrupt must be called as soon as possible
    6e8a:	81 b7       	in	r24, 0x31	; 49
    6e8c:	82 50       	subi	r24, 0x02	; 2
    6e8e:	82 bf       	out	0x32, r24	; 50
	TIMSK |= _BV(OCIE0);						//enable timer0 compare interrupt
    6e90:	87 b7       	in	r24, 0x37	; 55
    6e92:	82 60       	ori	r24, 0x02	; 2
    6e94:	87 bf       	out	0x37, r24	; 55
    6e96:	bf 91       	pop	r27
    6e98:	af 91       	pop	r26
    6e9a:	9f 91       	pop	r25
    6e9c:	8f 91       	pop	r24
    6e9e:	7f 91       	pop	r23
    6ea0:	6f 91       	pop	r22
    6ea2:	5f 91       	pop	r21
    6ea4:	2f 91       	pop	r18
    6ea6:	0f 90       	pop	r0
    6ea8:	0f be       	out	0x3f, r0	; 63
    6eaa:	0f 90       	pop	r0
    6eac:	1f 90       	pop	r1
    6eae:	18 95       	reti

00006eb0 <__vector_15>:
}

//################# TIMER0 compare interupt routine #######################
//this routine is used to display all of the patterns you see
ISR(TIMER0_COMP_vect)
{
    6eb0:	1f 92       	push	r1
    6eb2:	0f 92       	push	r0
    6eb4:	0f b6       	in	r0, 0x3f	; 63
    6eb6:	0f 92       	push	r0
    6eb8:	11 24       	eor	r1, r1
    6eba:	2f 93       	push	r18
    6ebc:	3f 93       	push	r19
    6ebe:	4f 93       	push	r20
    6ec0:	5f 93       	push	r21
    6ec2:	6f 93       	push	r22
    6ec4:	7f 93       	push	r23
    6ec6:	8f 93       	push	r24
    6ec8:	9f 93       	push	r25
    6eca:	af 93       	push	r26
    6ecc:	bf 93       	push	r27
    6ece:	cf 93       	push	r28
    6ed0:	ef 93       	push	r30
    6ed2:	ff 93       	push	r31
	uint8_t tmp_red = PWM_TOP + 1,
			tmp_green = PWM_TOP + 1,
			tmp_blue = PWM_TOP + 1;		//temporary color registers
			
	//if(g_position == 3*RESOLUTION/4 - 1)	  	//if it's last interrupt in the cycle
	if(g_position == RESOLUTION/4 - 1)	  	//if it's last interrupt in the cycle
    6ed4:	90 91 40 01 	lds	r25, 0x0140
    6ed8:	9b 33       	cpi	r25, 0x3B	; 59
    6eda:	19 f4       	brne	.+6      	; 0x6ee2 <__vector_15+0x32>
		TIMSK &= ~_BV(OCIE0);			//disable this interrupt
    6edc:	87 b7       	in	r24, 0x37	; 55
    6ede:	8d 7f       	andi	r24, 0xFD	; 253
    6ee0:	87 bf       	out	0x37, r24	; 55
	
	if(g_reminder == 0)	//if reminder becomes zero, decrease output compare register
    6ee2:	c0 91 24 01 	lds	r28, 0x0124
    6ee6:	cc 23       	and	r28, r28
    6ee8:	19 f4       	brne	.+6      	; 0x6ef0 <__vector_15+0x40>
		OCR0--;				//with this trick image becomes more solid, no jitter can be seen
    6eea:	81 b7       	in	r24, 0x31	; 49
    6eec:	81 50       	subi	r24, 0x01	; 1
    6eee:	81 bf       	out	0x31, r24	; 49
		
	if(g_position == RESOLUTION) //clear if overflow	
    6ef0:	90 3f       	cpi	r25, 0xF0	; 240
    6ef2:	11 f4       	brne	.+4      	; 0x6ef8 <__vector_15+0x48>
		g_position = 0;
    6ef4:	10 92 40 01 	sts	0x0140, r1
		
	//if temporary registers are not updated
	
		if ((g_rc_state == STATE_NORMAL) && (seconds_hand) && !((g_mode==25) && radioactivity) && !((pgm_read_byte(&gm_background[1][GREEN][g_speed6rev+g_position]) == 0x00) && ((g_mode == 27) || (g_mode == 28)))) //do not display second hand if time is being set
    6ef8:	60 91 02 01 	lds	r22, 0x0102
    6efc:	66 23       	and	r22, r22
    6efe:	09 f0       	breq	.+2      	; 0x6f02 <__vector_15+0x52>
    6f00:	2f c1       	rjmp	.+606    	; 0x7160 <__vector_15+0x2b0>
    6f02:	80 91 25 01 	lds	r24, 0x0125
    6f06:	88 23       	and	r24, r24
    6f08:	09 f4       	brne	.+2      	; 0x6f0c <__vector_15+0x5c>
    6f0a:	2a c1       	rjmp	.+596    	; 0x7160 <__vector_15+0x2b0>
    6f0c:	20 91 1f 01 	lds	r18, 0x011F
    6f10:	29 31       	cpi	r18, 0x19	; 25
    6f12:	29 f4       	brne	.+10     	; 0x6f1e <__vector_15+0x6e>
    6f14:	80 91 41 01 	lds	r24, 0x0141
    6f18:	88 23       	and	r24, r24
    6f1a:	09 f0       	breq	.+2      	; 0x6f1e <__vector_15+0x6e>
    6f1c:	21 c1       	rjmp	.+578    	; 0x7160 <__vector_15+0x2b0>
    6f1e:	90 91 27 01 	lds	r25, 0x0127
    6f22:	80 91 40 01 	lds	r24, 0x0140
    6f26:	48 2f       	mov	r20, r24
    6f28:	55 27       	eor	r21, r21
    6f2a:	fa 01       	movw	r30, r20
    6f2c:	e9 0f       	add	r30, r25
    6f2e:	f1 1d       	adc	r31, r1
    6f30:	e9 51       	subi	r30, 0x19	; 25
    6f32:	f6 4f       	sbci	r31, 0xF6	; 246
    6f34:	84 91       	lpm	r24, Z
    6f36:	88 23       	and	r24, r24
    6f38:	21 f4       	brne	.+8      	; 0x6f42 <__vector_15+0x92>
    6f3a:	2b 51       	subi	r18, 0x1B	; 27
    6f3c:	22 30       	cpi	r18, 0x02	; 2
    6f3e:	08 f4       	brcc	.+2      	; 0x6f42 <__vector_15+0x92>
    6f40:	0f c1       	rjmp	.+542    	; 0x7160 <__vector_15+0x2b0>
			{ 
				switch(g_position - g_seconds) 	//compute which part of second hand should be now displayed
    6f42:	80 91 42 01 	lds	r24, 0x0142
    6f46:	48 1b       	sub	r20, r24
    6f48:	51 09       	sbc	r21, r1
    6f4a:	ca 01       	movw	r24, r20
    6f4c:	41 15       	cp	r20, r1
    6f4e:	51 05       	cpc	r21, r1
    6f50:	09 f4       	brne	.+2      	; 0x6f54 <__vector_15+0xa4>
    6f52:	9f c0       	rjmp	.+318    	; 0x7092 <__vector_15+0x1e2>
    6f54:	14 16       	cp	r1, r20
    6f56:	15 06       	cpc	r1, r21
    6f58:	74 f1       	brlt	.+92     	; 0x6fb6 <__vector_15+0x106>
    6f5a:	2f ef       	ldi	r18, 0xFF	; 255
    6f5c:	44 31       	cpi	r20, 0x14	; 20
    6f5e:	52 07       	cpc	r21, r18
    6f60:	09 f4       	brne	.+2      	; 0x6f64 <__vector_15+0xb4>
    6f62:	e3 c0       	rjmp	.+454    	; 0x712a <__vector_15+0x27a>
    6f64:	3f ef       	ldi	r19, 0xFF	; 255
    6f66:	45 31       	cpi	r20, 0x15	; 21
    6f68:	53 07       	cpc	r21, r19
    6f6a:	7c f4       	brge	.+30     	; 0x6f8a <__vector_15+0xda>
    6f6c:	4f ef       	ldi	r20, 0xFF	; 255
    6f6e:	82 31       	cpi	r24, 0x12	; 18
    6f70:	94 07       	cpc	r25, r20
    6f72:	09 f4       	brne	.+2      	; 0x6f76 <__vector_15+0xc6>
    6f74:	b4 c0       	rjmp	.+360    	; 0x70de <__vector_15+0x22e>
    6f76:	5f ef       	ldi	r21, 0xFF	; 255
    6f78:	83 31       	cpi	r24, 0x13	; 19
    6f7a:	95 07       	cpc	r25, r21
    6f7c:	0c f0       	brlt	.+2      	; 0x6f80 <__vector_15+0xd0>
    6f7e:	c2 c0       	rjmp	.+388    	; 0x7104 <__vector_15+0x254>
    6f80:	81 51       	subi	r24, 0x11	; 17
    6f82:	9f 4f       	sbci	r25, 0xFF	; 255
    6f84:	09 f4       	brne	.+2      	; 0x6f88 <__vector_15+0xd8>
    6f86:	98 c0       	rjmp	.+304    	; 0x70b8 <__vector_15+0x208>
    6f88:	eb c0       	rjmp	.+470    	; 0x7160 <__vector_15+0x2b0>
    6f8a:	ef ef       	ldi	r30, 0xFF	; 255
    6f8c:	4d 3f       	cpi	r20, 0xFD	; 253
    6f8e:	5e 07       	cpc	r21, r30
    6f90:	09 f4       	brne	.+2      	; 0x6f94 <__vector_15+0xe4>
    6f92:	46 c0       	rjmp	.+140    	; 0x7020 <__vector_15+0x170>
    6f94:	ff ef       	ldi	r31, 0xFF	; 255
    6f96:	4e 3f       	cpi	r20, 0xFE	; 254
    6f98:	5f 07       	cpc	r21, r31
    6f9a:	24 f4       	brge	.+8      	; 0x6fa4 <__vector_15+0xf4>
    6f9c:	4c 5f       	subi	r20, 0xFC	; 252
    6f9e:	5f 4f       	sbci	r21, 0xFF	; 255
    6fa0:	61 f1       	breq	.+88     	; 0x6ffa <__vector_15+0x14a>
    6fa2:	de c0       	rjmp	.+444    	; 0x7160 <__vector_15+0x2b0>
    6fa4:	4e 5f       	subi	r20, 0xFE	; 254
    6fa6:	5f 4f       	sbci	r21, 0xFF	; 255
    6fa8:	09 f4       	brne	.+2      	; 0x6fac <__vector_15+0xfc>
    6faa:	4d c0       	rjmp	.+154    	; 0x7046 <__vector_15+0x196>
    6fac:	8f 5f       	subi	r24, 0xFF	; 255
    6fae:	9f 4f       	sbci	r25, 0xFF	; 255
    6fb0:	09 f4       	brne	.+2      	; 0x6fb4 <__vector_15+0x104>
    6fb2:	5c c0       	rjmp	.+184    	; 0x706c <__vector_15+0x1bc>
    6fb4:	d5 c0       	rjmp	.+426    	; 0x7160 <__vector_15+0x2b0>
    6fb6:	44 30       	cpi	r20, 0x04	; 4
    6fb8:	51 05       	cpc	r21, r1
    6fba:	09 f4       	brne	.+2      	; 0x6fbe <__vector_15+0x10e>
    6fbc:	b6 c0       	rjmp	.+364    	; 0x712a <__vector_15+0x27a>
    6fbe:	45 30       	cpi	r20, 0x05	; 5
    6fc0:	51 05       	cpc	r21, r1
    6fc2:	4c f4       	brge	.+18     	; 0x6fd6 <__vector_15+0x126>
    6fc4:	42 30       	cpi	r20, 0x02	; 2
    6fc6:	51 05       	cpc	r21, r1
    6fc8:	09 f4       	brne	.+2      	; 0x6fcc <__vector_15+0x11c>
    6fca:	89 c0       	rjmp	.+274    	; 0x70de <__vector_15+0x22e>
    6fcc:	43 30       	cpi	r20, 0x03	; 3
    6fce:	51 05       	cpc	r21, r1
    6fd0:	0c f0       	brlt	.+2      	; 0x6fd4 <__vector_15+0x124>
    6fd2:	98 c0       	rjmp	.+304    	; 0x7104 <__vector_15+0x254>
    6fd4:	71 c0       	rjmp	.+226    	; 0x70b8 <__vector_15+0x208>
    6fd6:	4d 3e       	cpi	r20, 0xED	; 237
    6fd8:	51 05       	cpc	r21, r1
    6fda:	11 f1       	breq	.+68     	; 0x7020 <__vector_15+0x170>
    6fdc:	4e 3e       	cpi	r20, 0xEE	; 238
    6fde:	51 05       	cpc	r21, r1
    6fe0:	24 f4       	brge	.+8      	; 0x6fea <__vector_15+0x13a>
    6fe2:	4c 3e       	cpi	r20, 0xEC	; 236
    6fe4:	51 05       	cpc	r21, r1
    6fe6:	49 f0       	breq	.+18     	; 0x6ffa <__vector_15+0x14a>
    6fe8:	bb c0       	rjmp	.+374    	; 0x7160 <__vector_15+0x2b0>
    6fea:	4e 3e       	cpi	r20, 0xEE	; 238
    6fec:	51 05       	cpc	r21, r1
    6fee:	59 f1       	breq	.+86     	; 0x7046 <__vector_15+0x196>
    6ff0:	4f 3e       	cpi	r20, 0xEF	; 239
    6ff2:	51 05       	cpc	r21, r1
    6ff4:	09 f4       	brne	.+2      	; 0x6ff8 <__vector_15+0x148>
    6ff6:	3a c0       	rjmp	.+116    	; 0x706c <__vector_15+0x1bc>
    6ff8:	b3 c0       	rjmp	.+358    	; 0x7160 <__vector_15+0x2b0>
				{							//and read color value from flash memory
				case -4:
					case RESOLUTION - 4:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_mh_mode][RED][0]);
    6ffa:	90 91 0c 01 	lds	r25, 0x010C
    6ffe:	8b e1       	ldi	r24, 0x1B	; 27
    7000:	98 9f       	mul	r25, r24
    7002:	c0 01       	movw	r24, r0
    7004:	11 24       	eor	r1, r1
    7006:	fc 01       	movw	r30, r24
    7008:	e2 5e       	subi	r30, 0xE2	; 226
    700a:	fc 4f       	sbci	r31, 0xFC	; 252
    700c:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_mh_mode][GREEN][0]);
    700e:	fc 01       	movw	r30, r24
    7010:	e9 5d       	subi	r30, 0xD9	; 217
    7012:	fc 4f       	sbci	r31, 0xFC	; 252
    7014:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_mh_mode][BLUE][0]);
    7016:	fc 01       	movw	r30, r24
    7018:	e0 5d       	subi	r30, 0xD0	; 208
    701a:	fc 4f       	sbci	r31, 0xFC	; 252
    701c:	24 91       	lpm	r18, Z
					break;
    701e:	97 c0       	rjmp	.+302    	; 0x714e <__vector_15+0x29e>
				case -3:
					case RESOLUTION - 3:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_mh_mode][RED][1]);
    7020:	90 91 0c 01 	lds	r25, 0x010C
    7024:	8b e1       	ldi	r24, 0x1B	; 27
    7026:	98 9f       	mul	r25, r24
    7028:	c0 01       	movw	r24, r0
    702a:	11 24       	eor	r1, r1
    702c:	fc 01       	movw	r30, r24
    702e:	e1 5e       	subi	r30, 0xE1	; 225
    7030:	fc 4f       	sbci	r31, 0xFC	; 252
    7032:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_mh_mode][GREEN][1]);
    7034:	fc 01       	movw	r30, r24
    7036:	e8 5d       	subi	r30, 0xD8	; 216
    7038:	fc 4f       	sbci	r31, 0xFC	; 252
    703a:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_mh_mode][BLUE][1]);
    703c:	fc 01       	movw	r30, r24
    703e:	ef 5c       	subi	r30, 0xCF	; 207
    7040:	fc 4f       	sbci	r31, 0xFC	; 252
    7042:	24 91       	lpm	r18, Z
					break;
    7044:	84 c0       	rjmp	.+264    	; 0x714e <__vector_15+0x29e>
				case -2:
					case RESOLUTION - 2:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_mh_mode][RED][2]);
    7046:	90 91 0c 01 	lds	r25, 0x010C
    704a:	8b e1       	ldi	r24, 0x1B	; 27
    704c:	98 9f       	mul	r25, r24
    704e:	c0 01       	movw	r24, r0
    7050:	11 24       	eor	r1, r1
    7052:	fc 01       	movw	r30, r24
    7054:	e0 5e       	subi	r30, 0xE0	; 224
    7056:	fc 4f       	sbci	r31, 0xFC	; 252
    7058:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_mh_mode][GREEN][2]);
    705a:	fc 01       	movw	r30, r24
    705c:	e7 5d       	subi	r30, 0xD7	; 215
    705e:	fc 4f       	sbci	r31, 0xFC	; 252
    7060:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_mh_mode][BLUE][2]);
    7062:	fc 01       	movw	r30, r24
    7064:	ee 5c       	subi	r30, 0xCE	; 206
    7066:	fc 4f       	sbci	r31, 0xFC	; 252
    7068:	24 91       	lpm	r18, Z
					break;
    706a:	71 c0       	rjmp	.+226    	; 0x714e <__vector_15+0x29e>
				case -1:
					case RESOLUTION - 1:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_mh_mode][RED][3]);
    706c:	90 91 0c 01 	lds	r25, 0x010C
    7070:	8b e1       	ldi	r24, 0x1B	; 27
    7072:	98 9f       	mul	r25, r24
    7074:	c0 01       	movw	r24, r0
    7076:	11 24       	eor	r1, r1
    7078:	fc 01       	movw	r30, r24
    707a:	ef 5d       	subi	r30, 0xDF	; 223
    707c:	fc 4f       	sbci	r31, 0xFC	; 252
    707e:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_mh_mode][GREEN][3]);
    7080:	fc 01       	movw	r30, r24
    7082:	e6 5d       	subi	r30, 0xD6	; 214
    7084:	fc 4f       	sbci	r31, 0xFC	; 252
    7086:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_mh_mode][BLUE][3]);
    7088:	fc 01       	movw	r30, r24
    708a:	ed 5c       	subi	r30, 0xCD	; 205
    708c:	fc 4f       	sbci	r31, 0xFC	; 252
    708e:	24 91       	lpm	r18, Z
					break;
    7090:	5e c0       	rjmp	.+188    	; 0x714e <__vector_15+0x29e>
				case 0:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_mh_mode][RED][4]);
    7092:	90 91 0c 01 	lds	r25, 0x010C
    7096:	8b e1       	ldi	r24, 0x1B	; 27
    7098:	98 9f       	mul	r25, r24
    709a:	c0 01       	movw	r24, r0
    709c:	11 24       	eor	r1, r1
    709e:	fc 01       	movw	r30, r24
    70a0:	ee 5d       	subi	r30, 0xDE	; 222
    70a2:	fc 4f       	sbci	r31, 0xFC	; 252
    70a4:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_mh_mode][GREEN][4]);
    70a6:	fc 01       	movw	r30, r24
    70a8:	e5 5d       	subi	r30, 0xD5	; 213
    70aa:	fc 4f       	sbci	r31, 0xFC	; 252
    70ac:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_mh_mode][BLUE][4]);
    70ae:	fc 01       	movw	r30, r24
    70b0:	ec 5c       	subi	r30, 0xCC	; 204
    70b2:	fc 4f       	sbci	r31, 0xFC	; 252
    70b4:	24 91       	lpm	r18, Z
					break;
    70b6:	4b c0       	rjmp	.+150    	; 0x714e <__vector_15+0x29e>
				case 1:
					case -RESOLUTION + 1:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_mh_mode][RED][5]);
    70b8:	90 91 0c 01 	lds	r25, 0x010C
    70bc:	8b e1       	ldi	r24, 0x1B	; 27
    70be:	98 9f       	mul	r25, r24
    70c0:	c0 01       	movw	r24, r0
    70c2:	11 24       	eor	r1, r1
    70c4:	fc 01       	movw	r30, r24
    70c6:	ed 5d       	subi	r30, 0xDD	; 221
    70c8:	fc 4f       	sbci	r31, 0xFC	; 252
    70ca:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_mh_mode][GREEN][5]);
    70cc:	fc 01       	movw	r30, r24
    70ce:	e4 5d       	subi	r30, 0xD4	; 212
    70d0:	fc 4f       	sbci	r31, 0xFC	; 252
    70d2:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_mh_mode][BLUE][5]);	
    70d4:	fc 01       	movw	r30, r24
    70d6:	eb 5c       	subi	r30, 0xCB	; 203
    70d8:	fc 4f       	sbci	r31, 0xFC	; 252
    70da:	24 91       	lpm	r18, Z
					break;
    70dc:	38 c0       	rjmp	.+112    	; 0x714e <__vector_15+0x29e>
				case 2:
					case -RESOLUTION + 2:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_mh_mode][RED][6]);
    70de:	90 91 0c 01 	lds	r25, 0x010C
    70e2:	8b e1       	ldi	r24, 0x1B	; 27
    70e4:	98 9f       	mul	r25, r24
    70e6:	c0 01       	movw	r24, r0
    70e8:	11 24       	eor	r1, r1
    70ea:	fc 01       	movw	r30, r24
    70ec:	ec 5d       	subi	r30, 0xDC	; 220
    70ee:	fc 4f       	sbci	r31, 0xFC	; 252
    70f0:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_mh_mode][GREEN][6]);
    70f2:	fc 01       	movw	r30, r24
    70f4:	e3 5d       	subi	r30, 0xD3	; 211
    70f6:	fc 4f       	sbci	r31, 0xFC	; 252
    70f8:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_mh_mode][BLUE][6]);	
    70fa:	fc 01       	movw	r30, r24
    70fc:	ea 5c       	subi	r30, 0xCA	; 202
    70fe:	fc 4f       	sbci	r31, 0xFC	; 252
    7100:	24 91       	lpm	r18, Z
					break;
    7102:	25 c0       	rjmp	.+74     	; 0x714e <__vector_15+0x29e>
				case 3:
					case -RESOLUTION + 3:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_mh_mode][RED][7]);
    7104:	90 91 0c 01 	lds	r25, 0x010C
    7108:	8b e1       	ldi	r24, 0x1B	; 27
    710a:	98 9f       	mul	r25, r24
    710c:	c0 01       	movw	r24, r0
    710e:	11 24       	eor	r1, r1
    7110:	fc 01       	movw	r30, r24
    7112:	eb 5d       	subi	r30, 0xDB	; 219
    7114:	fc 4f       	sbci	r31, 0xFC	; 252
    7116:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_mh_mode][GREEN][7]);
    7118:	fc 01       	movw	r30, r24
    711a:	e2 5d       	subi	r30, 0xD2	; 210
    711c:	fc 4f       	sbci	r31, 0xFC	; 252
    711e:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_mh_mode][BLUE][7]);	
    7120:	fc 01       	movw	r30, r24
    7122:	e9 5c       	subi	r30, 0xC9	; 201
    7124:	fc 4f       	sbci	r31, 0xFC	; 252
    7126:	24 91       	lpm	r18, Z
					break;		
    7128:	12 c0       	rjmp	.+36     	; 0x714e <__vector_15+0x29e>
				case 4:
					case -RESOLUTION + 4:
					tmp_red 	= pgm_read_byte(&g_second_hand[g_mh_mode][RED][8]);
    712a:	90 91 0c 01 	lds	r25, 0x010C
    712e:	8b e1       	ldi	r24, 0x1B	; 27
    7130:	98 9f       	mul	r25, r24
    7132:	c0 01       	movw	r24, r0
    7134:	11 24       	eor	r1, r1
    7136:	fc 01       	movw	r30, r24
    7138:	ea 5d       	subi	r30, 0xDA	; 218
    713a:	fc 4f       	sbci	r31, 0xFC	; 252
    713c:	44 91       	lpm	r20, Z
					tmp_green 	= pgm_read_byte(&g_second_hand[g_mh_mode][GREEN][8]);
    713e:	fc 01       	movw	r30, r24
    7140:	e1 5d       	subi	r30, 0xD1	; 209
    7142:	fc 4f       	sbci	r31, 0xFC	; 252
    7144:	34 91       	lpm	r19, Z
					tmp_blue 	= pgm_read_byte(&g_second_hand[g_mh_mode][BLUE][8]);	
    7146:	fc 01       	movw	r30, r24
    7148:	e8 5c       	subi	r30, 0xC8	; 200
    714a:	fc 4f       	sbci	r31, 0xFC	; 252
    714c:	24 91       	lpm	r18, Z
					break;	
				}
			}



	//if temporary registers are not updated
	if((tmp_red == PWM_TOP + 1) && (tmp_green == PWM_TOP + 1) && (tmp_blue == PWM_TOP + 1) && !((g_mode==25) && radioactivity) && !((pgm_read_byte(&gm_background[1][GREEN][g_speed6rev+g_position]) == 0x00) && ((g_mode == 27) || (g_mode == 28))))
    714e:	48 32       	cpi	r20, 0x28	; 40
    7150:	09 f0       	breq	.+2      	; 0x7154 <__vector_15+0x2a4>
    7152:	28 c1       	rjmp	.+592    	; 0x73a4 <__vector_15+0x4f4>
    7154:	38 32       	cpi	r19, 0x28	; 40
    7156:	09 f0       	breq	.+2      	; 0x715a <__vector_15+0x2aa>
    7158:	28 c1       	rjmp	.+592    	; 0x73aa <__vector_15+0x4fa>
    715a:	28 32       	cpi	r18, 0x28	; 40
    715c:	09 f0       	breq	.+2      	; 0x7160 <__vector_15+0x2b0>
    715e:	28 c1       	rjmp	.+592    	; 0x73b0 <__vector_15+0x500>
    7160:	20 91 1f 01 	lds	r18, 0x011F
    7164:	29 31       	cpi	r18, 0x19	; 25
    7166:	29 f4       	brne	.+10     	; 0x7172 <__vector_15+0x2c2>
    7168:	80 91 41 01 	lds	r24, 0x0141
    716c:	88 23       	and	r24, r24
    716e:	09 f0       	breq	.+2      	; 0x7172 <__vector_15+0x2c2>
    7170:	22 c1       	rjmp	.+580    	; 0x73b6 <__vector_15+0x506>
    7172:	90 91 27 01 	lds	r25, 0x0127
    7176:	80 91 40 01 	lds	r24, 0x0140
    717a:	48 2f       	mov	r20, r24
    717c:	55 27       	eor	r21, r21
    717e:	fa 01       	movw	r30, r20
    7180:	e9 0f       	add	r30, r25
    7182:	f1 1d       	adc	r31, r1
    7184:	e9 51       	subi	r30, 0x19	; 25
    7186:	f6 4f       	sbci	r31, 0xF6	; 246
    7188:	84 91       	lpm	r24, Z
    718a:	88 23       	and	r24, r24
    718c:	21 f4       	brne	.+8      	; 0x7196 <__vector_15+0x2e6>
    718e:	2b 51       	subi	r18, 0x1B	; 27
    7190:	22 30       	cpi	r18, 0x02	; 2
    7192:	08 f4       	brcc	.+2      	; 0x7196 <__vector_15+0x2e6>
    7194:	10 c1       	rjmp	.+544    	; 0x73b6 <__vector_15+0x506>
	{
		switch(g_position - g_minutes) 	//compute which part of minute hand should be now displayed
    7196:	80 91 22 01 	lds	r24, 0x0122
    719a:	48 1b       	sub	r20, r24
    719c:	51 09       	sbc	r21, r1
    719e:	ca 01       	movw	r24, r20
    71a0:	41 15       	cp	r20, r1
    71a2:	51 05       	cpc	r21, r1
    71a4:	09 f4       	brne	.+2      	; 0x71a8 <__vector_15+0x2f8>
    71a6:	a0 c0       	rjmp	.+320    	; 0x72e8 <__vector_15+0x438>
    71a8:	14 16       	cp	r1, r20
    71aa:	15 06       	cpc	r1, r21
    71ac:	7c f1       	brlt	.+94     	; 0x720c <__vector_15+0x35c>
    71ae:	5f ef       	ldi	r21, 0xFF	; 255
    71b0:	84 31       	cpi	r24, 0x14	; 20
    71b2:	95 07       	cpc	r25, r21
    71b4:	09 f4       	brne	.+2      	; 0x71b8 <__vector_15+0x308>
    71b6:	e4 c0       	rjmp	.+456    	; 0x7380 <__vector_15+0x4d0>
    71b8:	7f ef       	ldi	r23, 0xFF	; 255
    71ba:	85 31       	cpi	r24, 0x15	; 21
    71bc:	97 07       	cpc	r25, r23
    71be:	7c f4       	brge	.+30     	; 0x71de <__vector_15+0x32e>
    71c0:	ef ef       	ldi	r30, 0xFF	; 255
    71c2:	82 31       	cpi	r24, 0x12	; 18
    71c4:	9e 07       	cpc	r25, r30
    71c6:	09 f4       	brne	.+2      	; 0x71ca <__vector_15+0x31a>
    71c8:	b5 c0       	rjmp	.+362    	; 0x7334 <__vector_15+0x484>
    71ca:	ff ef       	ldi	r31, 0xFF	; 255
    71cc:	83 31       	cpi	r24, 0x13	; 19
    71ce:	9f 07       	cpc	r25, r31
    71d0:	0c f0       	brlt	.+2      	; 0x71d4 <__vector_15+0x324>
    71d2:	c3 c0       	rjmp	.+390    	; 0x735a <__vector_15+0x4aa>
    71d4:	81 51       	subi	r24, 0x11	; 17
    71d6:	9f 4f       	sbci	r25, 0xFF	; 255
    71d8:	09 f4       	brne	.+2      	; 0x71dc <__vector_15+0x32c>
    71da:	99 c0       	rjmp	.+306    	; 0x730e <__vector_15+0x45e>
    71dc:	ec c0       	rjmp	.+472    	; 0x73b6 <__vector_15+0x506>
    71de:	3f ef       	ldi	r19, 0xFF	; 255
    71e0:	8d 3f       	cpi	r24, 0xFD	; 253
    71e2:	93 07       	cpc	r25, r19
    71e4:	09 f4       	brne	.+2      	; 0x71e8 <__vector_15+0x338>
    71e6:	47 c0       	rjmp	.+142    	; 0x7276 <__vector_15+0x3c6>
    71e8:	4f ef       	ldi	r20, 0xFF	; 255
    71ea:	8e 3f       	cpi	r24, 0xFE	; 254
    71ec:	94 07       	cpc	r25, r20
    71ee:	24 f4       	brge	.+8      	; 0x71f8 <__vector_15+0x348>
    71f0:	8c 5f       	subi	r24, 0xFC	; 252
    71f2:	9f 4f       	sbci	r25, 0xFF	; 255
    71f4:	69 f1       	breq	.+90     	; 0x7250 <__vector_15+0x3a0>
    71f6:	df c0       	rjmp	.+446    	; 0x73b6 <__vector_15+0x506>
    71f8:	7f ef       	ldi	r23, 0xFF	; 255
    71fa:	8e 3f       	cpi	r24, 0xFE	; 254
    71fc:	97 07       	cpc	r25, r23
    71fe:	09 f4       	brne	.+2      	; 0x7202 <__vector_15+0x352>
    7200:	4d c0       	rjmp	.+154    	; 0x729c <__vector_15+0x3ec>
    7202:	8f 5f       	subi	r24, 0xFF	; 255
    7204:	9f 4f       	sbci	r25, 0xFF	; 255
    7206:	09 f4       	brne	.+2      	; 0x720a <__vector_15+0x35a>
    7208:	5c c0       	rjmp	.+184    	; 0x72c2 <__vector_15+0x412>
    720a:	d5 c0       	rjmp	.+426    	; 0x73b6 <__vector_15+0x506>
    720c:	44 30       	cpi	r20, 0x04	; 4
    720e:	51 05       	cpc	r21, r1
    7210:	09 f4       	brne	.+2      	; 0x7214 <__vector_15+0x364>
    7212:	b6 c0       	rjmp	.+364    	; 0x7380 <__vector_15+0x4d0>
    7214:	45 30       	cpi	r20, 0x05	; 5
    7216:	51 05       	cpc	r21, r1
    7218:	4c f4       	brge	.+18     	; 0x722c <__vector_15+0x37c>
    721a:	42 30       	cpi	r20, 0x02	; 2
    721c:	51 05       	cpc	r21, r1
    721e:	09 f4       	brne	.+2      	; 0x7222 <__vector_15+0x372>
    7220:	89 c0       	rjmp	.+274    	; 0x7334 <__vector_15+0x484>
    7222:	43 30       	cpi	r20, 0x03	; 3
    7224:	51 05       	cpc	r21, r1
    7226:	0c f0       	brlt	.+2      	; 0x722a <__vector_15+0x37a>
    7228:	98 c0       	rjmp	.+304    	; 0x735a <__vector_15+0x4aa>
    722a:	71 c0       	rjmp	.+226    	; 0x730e <__vector_15+0x45e>
    722c:	4d 3e       	cpi	r20, 0xED	; 237
    722e:	51 05       	cpc	r21, r1
    7230:	11 f1       	breq	.+68     	; 0x7276 <__vector_15+0x3c6>
    7232:	4e 3e       	cpi	r20, 0xEE	; 238
    7234:	51 05       	cpc	r21, r1
    7236:	24 f4       	brge	.+8      	; 0x7240 <__vector_15+0x390>
    7238:	4c 3e       	cpi	r20, 0xEC	; 236
    723a:	51 05       	cpc	r21, r1
    723c:	49 f0       	breq	.+18     	; 0x7250 <__vector_15+0x3a0>
    723e:	bb c0       	rjmp	.+374    	; 0x73b6 <__vector_15+0x506>
    7240:	4e 3e       	cpi	r20, 0xEE	; 238
    7242:	51 05       	cpc	r21, r1
    7244:	59 f1       	breq	.+86     	; 0x729c <__vector_15+0x3ec>
    7246:	4f 3e       	cpi	r20, 0xEF	; 239
    7248:	51 05       	cpc	r21, r1
    724a:	09 f4       	brne	.+2      	; 0x724e <__vector_15+0x39e>
    724c:	3a c0       	rjmp	.+116    	; 0x72c2 <__vector_15+0x412>
    724e:	b3 c0       	rjmp	.+358    	; 0x73b6 <__vector_15+0x506>
		{							//and read color value from flash memory
			case -4:
			case RESOLUTION - 4:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_mh_mode][RED][0]);
    7250:	90 91 0c 01 	lds	r25, 0x010C
    7254:	8b e1       	ldi	r24, 0x1B	; 27
    7256:	98 9f       	mul	r25, r24
    7258:	c0 01       	movw	r24, r0
    725a:	11 24       	eor	r1, r1
    725c:	fc 01       	movw	r30, r24
    725e:	eb 50       	subi	r30, 0x0B	; 11
    7260:	fe 4f       	sbci	r31, 0xFE	; 254
    7262:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_mh_mode][GREEN][0]);
    7264:	fc 01       	movw	r30, r24
    7266:	e2 50       	subi	r30, 0x02	; 2
    7268:	fe 4f       	sbci	r31, 0xFE	; 254
    726a:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_mh_mode][BLUE][0]);
    726c:	fc 01       	movw	r30, r24
    726e:	e9 5f       	subi	r30, 0xF9	; 249
    7270:	fd 4f       	sbci	r31, 0xFD	; 253
    7272:	24 91       	lpm	r18, Z
				break;
    7274:	97 c0       	rjmp	.+302    	; 0x73a4 <__vector_15+0x4f4>
			case -3:
			case RESOLUTION - 3:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_mh_mode][RED][1]);
    7276:	90 91 0c 01 	lds	r25, 0x010C
    727a:	8b e1       	ldi	r24, 0x1B	; 27
    727c:	98 9f       	mul	r25, r24
    727e:	c0 01       	movw	r24, r0
    7280:	11 24       	eor	r1, r1
    7282:	fc 01       	movw	r30, r24
    7284:	ea 50       	subi	r30, 0x0A	; 10
    7286:	fe 4f       	sbci	r31, 0xFE	; 254
    7288:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_mh_mode][GREEN][1]);
    728a:	fc 01       	movw	r30, r24
    728c:	e1 50       	subi	r30, 0x01	; 1
    728e:	fe 4f       	sbci	r31, 0xFE	; 254
    7290:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_mh_mode][BLUE][1]);
    7292:	fc 01       	movw	r30, r24
    7294:	e8 5f       	subi	r30, 0xF8	; 248
    7296:	fd 4f       	sbci	r31, 0xFD	; 253
    7298:	24 91       	lpm	r18, Z
				break;
    729a:	84 c0       	rjmp	.+264    	; 0x73a4 <__vector_15+0x4f4>
			case -2:
			case RESOLUTION - 2:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_mh_mode][RED][2]);
    729c:	90 91 0c 01 	lds	r25, 0x010C
    72a0:	8b e1       	ldi	r24, 0x1B	; 27
    72a2:	98 9f       	mul	r25, r24
    72a4:	c0 01       	movw	r24, r0
    72a6:	11 24       	eor	r1, r1
    72a8:	fc 01       	movw	r30, r24
    72aa:	e9 50       	subi	r30, 0x09	; 9
    72ac:	fe 4f       	sbci	r31, 0xFE	; 254
    72ae:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_mh_mode][GREEN][2]);
    72b0:	fc 01       	movw	r30, r24
    72b2:	e0 50       	subi	r30, 0x00	; 0
    72b4:	fe 4f       	sbci	r31, 0xFE	; 254
    72b6:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_mh_mode][BLUE][2]);
    72b8:	fc 01       	movw	r30, r24
    72ba:	e7 5f       	subi	r30, 0xF7	; 247
    72bc:	fd 4f       	sbci	r31, 0xFD	; 253
    72be:	24 91       	lpm	r18, Z
				break;
    72c0:	71 c0       	rjmp	.+226    	; 0x73a4 <__vector_15+0x4f4>
			case -1:
			case RESOLUTION - 1:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_mh_mode][RED][3]);
    72c2:	90 91 0c 01 	lds	r25, 0x010C
    72c6:	8b e1       	ldi	r24, 0x1B	; 27
    72c8:	98 9f       	mul	r25, r24
    72ca:	c0 01       	movw	r24, r0
    72cc:	11 24       	eor	r1, r1
    72ce:	fc 01       	movw	r30, r24
    72d0:	e8 50       	subi	r30, 0x08	; 8
    72d2:	fe 4f       	sbci	r31, 0xFE	; 254
    72d4:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_mh_mode][GREEN][3]);
    72d6:	fc 01       	movw	r30, r24
    72d8:	ef 5f       	subi	r30, 0xFF	; 255
    72da:	fd 4f       	sbci	r31, 0xFD	; 253
    72dc:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_mh_mode][BLUE][3]);
    72de:	fc 01       	movw	r30, r24
    72e0:	e6 5f       	subi	r30, 0xF6	; 246
    72e2:	fd 4f       	sbci	r31, 0xFD	; 253
    72e4:	24 91       	lpm	r18, Z
				break;
    72e6:	5e c0       	rjmp	.+188    	; 0x73a4 <__vector_15+0x4f4>
			case 0:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_mh_mode][RED][4]);
    72e8:	90 91 0c 01 	lds	r25, 0x010C
    72ec:	8b e1       	ldi	r24, 0x1B	; 27
    72ee:	98 9f       	mul	r25, r24
    72f0:	c0 01       	movw	r24, r0
    72f2:	11 24       	eor	r1, r1
    72f4:	fc 01       	movw	r30, r24
    72f6:	e7 50       	subi	r30, 0x07	; 7
    72f8:	fe 4f       	sbci	r31, 0xFE	; 254
    72fa:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_mh_mode][GREEN][4]);
    72fc:	fc 01       	movw	r30, r24
    72fe:	ee 5f       	subi	r30, 0xFE	; 254
    7300:	fd 4f       	sbci	r31, 0xFD	; 253
    7302:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_mh_mode][BLUE][4]);
    7304:	fc 01       	movw	r30, r24
    7306:	e5 5f       	subi	r30, 0xF5	; 245
    7308:	fd 4f       	sbci	r31, 0xFD	; 253
    730a:	24 91       	lpm	r18, Z
				break;
    730c:	4b c0       	rjmp	.+150    	; 0x73a4 <__vector_15+0x4f4>
			case 1:
			case -RESOLUTION + 1:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_mh_mode][RED][5]);
    730e:	90 91 0c 01 	lds	r25, 0x010C
    7312:	8b e1       	ldi	r24, 0x1B	; 27
    7314:	98 9f       	mul	r25, r24
    7316:	c0 01       	movw	r24, r0
    7318:	11 24       	eor	r1, r1
    731a:	fc 01       	movw	r30, r24
    731c:	e6 50       	subi	r30, 0x06	; 6
    731e:	fe 4f       	sbci	r31, 0xFE	; 254
    7320:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_mh_mode][GREEN][5]);
    7322:	fc 01       	movw	r30, r24
    7324:	ed 5f       	subi	r30, 0xFD	; 253
    7326:	fd 4f       	sbci	r31, 0xFD	; 253
    7328:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_mh_mode][BLUE][5]);	
    732a:	fc 01       	movw	r30, r24
    732c:	e4 5f       	subi	r30, 0xF4	; 244
    732e:	fd 4f       	sbci	r31, 0xFD	; 253
    7330:	24 91       	lpm	r18, Z
				break;
    7332:	38 c0       	rjmp	.+112    	; 0x73a4 <__vector_15+0x4f4>
			case 2:
			case -RESOLUTION + 2:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_mh_mode][RED][6]);
    7334:	90 91 0c 01 	lds	r25, 0x010C
    7338:	8b e1       	ldi	r24, 0x1B	; 27
    733a:	98 9f       	mul	r25, r24
    733c:	c0 01       	movw	r24, r0
    733e:	11 24       	eor	r1, r1
    7340:	fc 01       	movw	r30, r24
    7342:	e5 50       	subi	r30, 0x05	; 5
    7344:	fe 4f       	sbci	r31, 0xFE	; 254
    7346:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_mh_mode][GREEN][6]);
    7348:	fc 01       	movw	r30, r24
    734a:	ec 5f       	subi	r30, 0xFC	; 252
    734c:	fd 4f       	sbci	r31, 0xFD	; 253
    734e:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_mh_mode][BLUE][6]);	
    7350:	fc 01       	movw	r30, r24
    7352:	e3 5f       	subi	r30, 0xF3	; 243
    7354:	fd 4f       	sbci	r31, 0xFD	; 253
    7356:	24 91       	lpm	r18, Z
				break;
    7358:	25 c0       	rjmp	.+74     	; 0x73a4 <__vector_15+0x4f4>
			case 3:
			case -RESOLUTION + 3:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_mh_mode][RED][7]);
    735a:	90 91 0c 01 	lds	r25, 0x010C
    735e:	8b e1       	ldi	r24, 0x1B	; 27
    7360:	98 9f       	mul	r25, r24
    7362:	c0 01       	movw	r24, r0
    7364:	11 24       	eor	r1, r1
    7366:	fc 01       	movw	r30, r24
    7368:	e4 50       	subi	r30, 0x04	; 4
    736a:	fe 4f       	sbci	r31, 0xFE	; 254
    736c:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_mh_mode][GREEN][7]);
    736e:	fc 01       	movw	r30, r24
    7370:	eb 5f       	subi	r30, 0xFB	; 251
    7372:	fd 4f       	sbci	r31, 0xFD	; 253
    7374:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_mh_mode][BLUE][7]);	
    7376:	fc 01       	movw	r30, r24
    7378:	e2 5f       	subi	r30, 0xF2	; 242
    737a:	fd 4f       	sbci	r31, 0xFD	; 253
    737c:	24 91       	lpm	r18, Z
				break;		
    737e:	12 c0       	rjmp	.+36     	; 0x73a4 <__vector_15+0x4f4>
			case 4:
			case -RESOLUTION + 4:
				tmp_red 	= pgm_read_byte(&g_minute_hand[g_mh_mode][RED][8]);
    7380:	90 91 0c 01 	lds	r25, 0x010C
    7384:	8b e1       	ldi	r24, 0x1B	; 27
    7386:	98 9f       	mul	r25, r24
    7388:	c0 01       	movw	r24, r0
    738a:	11 24       	eor	r1, r1
    738c:	fc 01       	movw	r30, r24
    738e:	e3 50       	subi	r30, 0x03	; 3
    7390:	fe 4f       	sbci	r31, 0xFE	; 254
    7392:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_minute_hand[g_mh_mode][GREEN][8]);
    7394:	fc 01       	movw	r30, r24
    7396:	ea 5f       	subi	r30, 0xFA	; 250
    7398:	fd 4f       	sbci	r31, 0xFD	; 253
    739a:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_minute_hand[g_mh_mode][BLUE][8]);	
    739c:	fc 01       	movw	r30, r24
    739e:	e1 5f       	subi	r30, 0xF1	; 241
    73a0:	fd 4f       	sbci	r31, 0xFD	; 253
    73a2:	24 91       	lpm	r18, Z
				break;	
		}
	}
	//if temporary registers are not updated
	if((tmp_red == PWM_TOP + 1) && (tmp_green == PWM_TOP + 1) && (tmp_blue == PWM_TOP + 1) && !((g_mode==25) && radioactivity) && !((pgm_read_byte(&gm_background[1][GREEN][g_speed6rev+g_position]) == 0x00) && ((g_mode == 27) || (g_mode == 28))))	
    73a4:	48 32       	cpi	r20, 0x28	; 40
    73a6:	09 f0       	breq	.+2      	; 0x73aa <__vector_15+0x4fa>
    73a8:	27 c1       	rjmp	.+590    	; 0x75f8 <__vector_15+0x748>
    73aa:	38 32       	cpi	r19, 0x28	; 40
    73ac:	09 f0       	breq	.+2      	; 0x73b0 <__vector_15+0x500>
    73ae:	26 c1       	rjmp	.+588    	; 0x75fc <__vector_15+0x74c>
    73b0:	28 32       	cpi	r18, 0x28	; 40
    73b2:	09 f0       	breq	.+2      	; 0x73b6 <__vector_15+0x506>
    73b4:	25 c1       	rjmp	.+586    	; 0x7600 <__vector_15+0x750>
    73b6:	20 91 1f 01 	lds	r18, 0x011F
    73ba:	29 31       	cpi	r18, 0x19	; 25
    73bc:	29 f4       	brne	.+10     	; 0x73c8 <__vector_15+0x518>
    73be:	80 91 41 01 	lds	r24, 0x0141
    73c2:	88 23       	and	r24, r24
    73c4:	09 f0       	breq	.+2      	; 0x73c8 <__vector_15+0x518>
    73c6:	5b c1       	rjmp	.+694    	; 0x767e <__vector_15+0x7ce>
    73c8:	90 91 27 01 	lds	r25, 0x0127
    73cc:	80 91 40 01 	lds	r24, 0x0140
    73d0:	48 2f       	mov	r20, r24
    73d2:	55 27       	eor	r21, r21
    73d4:	fa 01       	movw	r30, r20
    73d6:	e9 0f       	add	r30, r25
    73d8:	f1 1d       	adc	r31, r1
    73da:	e9 51       	subi	r30, 0x19	; 25
    73dc:	f6 4f       	sbci	r31, 0xF6	; 246
    73de:	84 91       	lpm	r24, Z
    73e0:	88 23       	and	r24, r24
    73e2:	21 f4       	brne	.+8      	; 0x73ec <__vector_15+0x53c>
    73e4:	2b 51       	subi	r18, 0x1B	; 27
    73e6:	22 30       	cpi	r18, 0x02	; 2
    73e8:	08 f4       	brcc	.+2      	; 0x73ec <__vector_15+0x53c>
    73ea:	49 c1       	rjmp	.+658    	; 0x767e <__vector_15+0x7ce>
	{
		switch(g_position - g_hours)
    73ec:	80 91 4d 01 	lds	r24, 0x014D
    73f0:	48 1b       	sub	r20, r24
    73f2:	51 09       	sbc	r21, r1
    73f4:	ca 01       	movw	r24, r20
    73f6:	41 15       	cp	r20, r1
    73f8:	51 05       	cpc	r21, r1
    73fa:	09 f4       	brne	.+2      	; 0x73fe <__vector_15+0x54e>
    73fc:	9f c0       	rjmp	.+318    	; 0x753c <__vector_15+0x68c>
    73fe:	14 16       	cp	r1, r20
    7400:	15 06       	cpc	r1, r21
    7402:	74 f1       	brlt	.+92     	; 0x7460 <__vector_15+0x5b0>
    7404:	ff ef       	ldi	r31, 0xFF	; 255
    7406:	44 31       	cpi	r20, 0x14	; 20
    7408:	5f 07       	cpc	r21, r31
    740a:	09 f4       	brne	.+2      	; 0x740e <__vector_15+0x55e>
    740c:	e3 c0       	rjmp	.+454    	; 0x75d4 <__vector_15+0x724>
    740e:	2f ef       	ldi	r18, 0xFF	; 255
    7410:	45 31       	cpi	r20, 0x15	; 21
    7412:	52 07       	cpc	r21, r18
    7414:	74 f4       	brge	.+28     	; 0x7432 <__vector_15+0x582>
    7416:	42 51       	subi	r20, 0x12	; 18
    7418:	5f 4f       	sbci	r21, 0xFF	; 255
    741a:	09 f4       	brne	.+2      	; 0x741e <__vector_15+0x56e>
    741c:	b5 c0       	rjmp	.+362    	; 0x7588 <__vector_15+0x6d8>
    741e:	4f ef       	ldi	r20, 0xFF	; 255
    7420:	83 31       	cpi	r24, 0x13	; 19
    7422:	94 07       	cpc	r25, r20
    7424:	0c f0       	brlt	.+2      	; 0x7428 <__vector_15+0x578>
    7426:	c3 c0       	rjmp	.+390    	; 0x75ae <__vector_15+0x6fe>
    7428:	81 51       	subi	r24, 0x11	; 17
    742a:	9f 4f       	sbci	r25, 0xFF	; 255
    742c:	09 f4       	brne	.+2      	; 0x7430 <__vector_15+0x580>
    742e:	99 c0       	rjmp	.+306    	; 0x7562 <__vector_15+0x6b2>
    7430:	26 c1       	rjmp	.+588    	; 0x767e <__vector_15+0x7ce>
    7432:	7f ef       	ldi	r23, 0xFF	; 255
    7434:	4d 3f       	cpi	r20, 0xFD	; 253
    7436:	57 07       	cpc	r21, r23
    7438:	09 f4       	brne	.+2      	; 0x743c <__vector_15+0x58c>
    743a:	47 c0       	rjmp	.+142    	; 0x74ca <__vector_15+0x61a>
    743c:	ef ef       	ldi	r30, 0xFF	; 255
    743e:	4e 3f       	cpi	r20, 0xFE	; 254
    7440:	5e 07       	cpc	r21, r30
    7442:	24 f4       	brge	.+8      	; 0x744c <__vector_15+0x59c>
    7444:	4c 5f       	subi	r20, 0xFC	; 252
    7446:	5f 4f       	sbci	r21, 0xFF	; 255
    7448:	69 f1       	breq	.+90     	; 0x74a4 <__vector_15+0x5f4>
    744a:	19 c1       	rjmp	.+562    	; 0x767e <__vector_15+0x7ce>
    744c:	2f ef       	ldi	r18, 0xFF	; 255
    744e:	4e 3f       	cpi	r20, 0xFE	; 254
    7450:	52 07       	cpc	r21, r18
    7452:	09 f4       	brne	.+2      	; 0x7456 <__vector_15+0x5a6>
    7454:	4d c0       	rjmp	.+154    	; 0x74f0 <__vector_15+0x640>
    7456:	4f 5f       	subi	r20, 0xFF	; 255
    7458:	5f 4f       	sbci	r21, 0xFF	; 255
    745a:	09 f4       	brne	.+2      	; 0x745e <__vector_15+0x5ae>
    745c:	5c c0       	rjmp	.+184    	; 0x7516 <__vector_15+0x666>
    745e:	0f c1       	rjmp	.+542    	; 0x767e <__vector_15+0x7ce>
    7460:	44 30       	cpi	r20, 0x04	; 4
    7462:	51 05       	cpc	r21, r1
    7464:	09 f4       	brne	.+2      	; 0x7468 <__vector_15+0x5b8>
    7466:	b6 c0       	rjmp	.+364    	; 0x75d4 <__vector_15+0x724>
    7468:	45 30       	cpi	r20, 0x05	; 5
    746a:	51 05       	cpc	r21, r1
    746c:	4c f4       	brge	.+18     	; 0x7480 <__vector_15+0x5d0>
    746e:	42 30       	cpi	r20, 0x02	; 2
    7470:	51 05       	cpc	r21, r1
    7472:	09 f4       	brne	.+2      	; 0x7476 <__vector_15+0x5c6>
    7474:	89 c0       	rjmp	.+274    	; 0x7588 <__vector_15+0x6d8>
    7476:	43 30       	cpi	r20, 0x03	; 3
    7478:	51 05       	cpc	r21, r1
    747a:	0c f0       	brlt	.+2      	; 0x747e <__vector_15+0x5ce>
    747c:	98 c0       	rjmp	.+304    	; 0x75ae <__vector_15+0x6fe>
    747e:	71 c0       	rjmp	.+226    	; 0x7562 <__vector_15+0x6b2>
    7480:	4d 3e       	cpi	r20, 0xED	; 237
    7482:	51 05       	cpc	r21, r1
    7484:	11 f1       	breq	.+68     	; 0x74ca <__vector_15+0x61a>
    7486:	4e 3e       	cpi	r20, 0xEE	; 238
    7488:	51 05       	cpc	r21, r1
    748a:	24 f4       	brge	.+8      	; 0x7494 <__vector_15+0x5e4>
    748c:	4c 3e       	cpi	r20, 0xEC	; 236
    748e:	51 05       	cpc	r21, r1
    7490:	49 f0       	breq	.+18     	; 0x74a4 <__vector_15+0x5f4>
    7492:	f5 c0       	rjmp	.+490    	; 0x767e <__vector_15+0x7ce>
    7494:	4e 3e       	cpi	r20, 0xEE	; 238
    7496:	51 05       	cpc	r21, r1
    7498:	59 f1       	breq	.+86     	; 0x74f0 <__vector_15+0x640>
    749a:	4f 3e       	cpi	r20, 0xEF	; 239
    749c:	51 05       	cpc	r21, r1
    749e:	09 f4       	brne	.+2      	; 0x74a2 <__vector_15+0x5f2>
    74a0:	3a c0       	rjmp	.+116    	; 0x7516 <__vector_15+0x666>
    74a2:	ed c0       	rjmp	.+474    	; 0x767e <__vector_15+0x7ce>
		{
			case -4:
			case RESOLUTION - 4:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_hh_mode][RED][0]);
    74a4:	90 91 35 01 	lds	r25, 0x0135
    74a8:	8b e1       	ldi	r24, 0x1B	; 27
    74aa:	98 9f       	mul	r25, r24
    74ac:	c0 01       	movw	r24, r0
    74ae:	11 24       	eor	r1, r1
    74b0:	fc 01       	movw	r30, r24
    74b2:	e4 53       	subi	r30, 0x34	; 52
    74b4:	ff 4f       	sbci	r31, 0xFF	; 255
    74b6:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_hh_mode][GREEN][0]);
    74b8:	fc 01       	movw	r30, r24
    74ba:	eb 52       	subi	r30, 0x2B	; 43
    74bc:	ff 4f       	sbci	r31, 0xFF	; 255
    74be:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_hh_mode][BLUE][0]);
    74c0:	fc 01       	movw	r30, r24
    74c2:	e2 52       	subi	r30, 0x22	; 34
    74c4:	ff 4f       	sbci	r31, 0xFF	; 255
    74c6:	24 91       	lpm	r18, Z
				break;
    74c8:	97 c0       	rjmp	.+302    	; 0x75f8 <__vector_15+0x748>
			case -3:
			case RESOLUTION - 3:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_hh_mode][RED][1]);
    74ca:	90 91 35 01 	lds	r25, 0x0135
    74ce:	8b e1       	ldi	r24, 0x1B	; 27
    74d0:	98 9f       	mul	r25, r24
    74d2:	c0 01       	movw	r24, r0
    74d4:	11 24       	eor	r1, r1
    74d6:	fc 01       	movw	r30, r24
    74d8:	e3 53       	subi	r30, 0x33	; 51
    74da:	ff 4f       	sbci	r31, 0xFF	; 255
    74dc:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_hh_mode][GREEN][1]);
    74de:	fc 01       	movw	r30, r24
    74e0:	ea 52       	subi	r30, 0x2A	; 42
    74e2:	ff 4f       	sbci	r31, 0xFF	; 255
    74e4:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_hh_mode][BLUE][1]);
    74e6:	fc 01       	movw	r30, r24
    74e8:	e1 52       	subi	r30, 0x21	; 33
    74ea:	ff 4f       	sbci	r31, 0xFF	; 255
    74ec:	24 91       	lpm	r18, Z
				break;
    74ee:	84 c0       	rjmp	.+264    	; 0x75f8 <__vector_15+0x748>
			case -2:
			case RESOLUTION - 2:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_hh_mode][RED][2]);
    74f0:	90 91 35 01 	lds	r25, 0x0135
    74f4:	8b e1       	ldi	r24, 0x1B	; 27
    74f6:	98 9f       	mul	r25, r24
    74f8:	c0 01       	movw	r24, r0
    74fa:	11 24       	eor	r1, r1
    74fc:	fc 01       	movw	r30, r24
    74fe:	e2 53       	subi	r30, 0x32	; 50
    7500:	ff 4f       	sbci	r31, 0xFF	; 255
    7502:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_hh_mode][GREEN][2]);
    7504:	fc 01       	movw	r30, r24
    7506:	e9 52       	subi	r30, 0x29	; 41
    7508:	ff 4f       	sbci	r31, 0xFF	; 255
    750a:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_hh_mode][BLUE][2]);
    750c:	fc 01       	movw	r30, r24
    750e:	e0 52       	subi	r30, 0x20	; 32
    7510:	ff 4f       	sbci	r31, 0xFF	; 255
    7512:	24 91       	lpm	r18, Z
				break;
    7514:	71 c0       	rjmp	.+226    	; 0x75f8 <__vector_15+0x748>
			case -1:
			case RESOLUTION - 1:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_hh_mode][RED][3]);
    7516:	90 91 35 01 	lds	r25, 0x0135
    751a:	8b e1       	ldi	r24, 0x1B	; 27
    751c:	98 9f       	mul	r25, r24
    751e:	c0 01       	movw	r24, r0
    7520:	11 24       	eor	r1, r1
    7522:	fc 01       	movw	r30, r24
    7524:	e1 53       	subi	r30, 0x31	; 49
    7526:	ff 4f       	sbci	r31, 0xFF	; 255
    7528:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_hh_mode][GREEN][3]);
    752a:	fc 01       	movw	r30, r24
    752c:	e8 52       	subi	r30, 0x28	; 40
    752e:	ff 4f       	sbci	r31, 0xFF	; 255
    7530:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_hh_mode][BLUE][3]);
    7532:	fc 01       	movw	r30, r24
    7534:	ef 51       	subi	r30, 0x1F	; 31
    7536:	ff 4f       	sbci	r31, 0xFF	; 255
    7538:	24 91       	lpm	r18, Z
				break;
    753a:	5e c0       	rjmp	.+188    	; 0x75f8 <__vector_15+0x748>
			case 0:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_hh_mode][RED][4]);
    753c:	90 91 35 01 	lds	r25, 0x0135
    7540:	8b e1       	ldi	r24, 0x1B	; 27
    7542:	98 9f       	mul	r25, r24
    7544:	c0 01       	movw	r24, r0
    7546:	11 24       	eor	r1, r1
    7548:	fc 01       	movw	r30, r24
    754a:	e0 53       	subi	r30, 0x30	; 48
    754c:	ff 4f       	sbci	r31, 0xFF	; 255
    754e:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_hh_mode][GREEN][4]);
    7550:	fc 01       	movw	r30, r24
    7552:	e7 52       	subi	r30, 0x27	; 39
    7554:	ff 4f       	sbci	r31, 0xFF	; 255
    7556:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_hh_mode][BLUE][4]);
    7558:	fc 01       	movw	r30, r24
    755a:	ee 51       	subi	r30, 0x1E	; 30
    755c:	ff 4f       	sbci	r31, 0xFF	; 255
    755e:	24 91       	lpm	r18, Z
				break;
    7560:	4b c0       	rjmp	.+150    	; 0x75f8 <__vector_15+0x748>
			case 1:
			case -RESOLUTION + 1:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_hh_mode][RED][5]);
    7562:	90 91 35 01 	lds	r25, 0x0135
    7566:	8b e1       	ldi	r24, 0x1B	; 27
    7568:	98 9f       	mul	r25, r24
    756a:	c0 01       	movw	r24, r0
    756c:	11 24       	eor	r1, r1
    756e:	fc 01       	movw	r30, r24
    7570:	ef 52       	subi	r30, 0x2F	; 47
    7572:	ff 4f       	sbci	r31, 0xFF	; 255
    7574:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_hh_mode][GREEN][5]);
    7576:	fc 01       	movw	r30, r24
    7578:	e6 52       	subi	r30, 0x26	; 38
    757a:	ff 4f       	sbci	r31, 0xFF	; 255
    757c:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_hh_mode][BLUE][5]);	
    757e:	fc 01       	movw	r30, r24
    7580:	ed 51       	subi	r30, 0x1D	; 29
    7582:	ff 4f       	sbci	r31, 0xFF	; 255
    7584:	24 91       	lpm	r18, Z
				break;
    7586:	38 c0       	rjmp	.+112    	; 0x75f8 <__vector_15+0x748>
			case 2:
			case -RESOLUTION + 2:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_hh_mode][RED][6]);
    7588:	90 91 35 01 	lds	r25, 0x0135
    758c:	8b e1       	ldi	r24, 0x1B	; 27
    758e:	98 9f       	mul	r25, r24
    7590:	c0 01       	movw	r24, r0
    7592:	11 24       	eor	r1, r1
    7594:	fc 01       	movw	r30, r24
    7596:	ee 52       	subi	r30, 0x2E	; 46
    7598:	ff 4f       	sbci	r31, 0xFF	; 255
    759a:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_hh_mode][GREEN][6]);
    759c:	fc 01       	movw	r30, r24
    759e:	e5 52       	subi	r30, 0x25	; 37
    75a0:	ff 4f       	sbci	r31, 0xFF	; 255
    75a2:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_hh_mode][BLUE][6]);	
    75a4:	fc 01       	movw	r30, r24
    75a6:	ec 51       	subi	r30, 0x1C	; 28
    75a8:	ff 4f       	sbci	r31, 0xFF	; 255
    75aa:	24 91       	lpm	r18, Z
				break;
    75ac:	25 c0       	rjmp	.+74     	; 0x75f8 <__vector_15+0x748>
			case 3:
			case -RESOLUTION + 3:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_hh_mode][RED][7]);
    75ae:	90 91 35 01 	lds	r25, 0x0135
    75b2:	8b e1       	ldi	r24, 0x1B	; 27
    75b4:	98 9f       	mul	r25, r24
    75b6:	c0 01       	movw	r24, r0
    75b8:	11 24       	eor	r1, r1
    75ba:	fc 01       	movw	r30, r24
    75bc:	ed 52       	subi	r30, 0x2D	; 45
    75be:	ff 4f       	sbci	r31, 0xFF	; 255
    75c0:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_hh_mode][GREEN][7]);
    75c2:	fc 01       	movw	r30, r24
    75c4:	e4 52       	subi	r30, 0x24	; 36
    75c6:	ff 4f       	sbci	r31, 0xFF	; 255
    75c8:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_hh_mode][BLUE][7]);	
    75ca:	fc 01       	movw	r30, r24
    75cc:	eb 51       	subi	r30, 0x1B	; 27
    75ce:	ff 4f       	sbci	r31, 0xFF	; 255
    75d0:	24 91       	lpm	r18, Z
				break;		
    75d2:	12 c0       	rjmp	.+36     	; 0x75f8 <__vector_15+0x748>
			case 4:
			case -RESOLUTION + 4:
				tmp_red 	= pgm_read_byte(&g_hour_hand[g_hh_mode][RED][8]);
    75d4:	90 91 35 01 	lds	r25, 0x0135
    75d8:	8b e1       	ldi	r24, 0x1B	; 27
    75da:	98 9f       	mul	r25, r24
    75dc:	c0 01       	movw	r24, r0
    75de:	11 24       	eor	r1, r1
    75e0:	fc 01       	movw	r30, r24
    75e2:	ec 52       	subi	r30, 0x2C	; 44
    75e4:	ff 4f       	sbci	r31, 0xFF	; 255
    75e6:	44 91       	lpm	r20, Z
				tmp_green 	= pgm_read_byte(&g_hour_hand[g_hh_mode][GREEN][8]);
    75e8:	fc 01       	movw	r30, r24
    75ea:	e3 52       	subi	r30, 0x23	; 35
    75ec:	ff 4f       	sbci	r31, 0xFF	; 255
    75ee:	34 91       	lpm	r19, Z
				tmp_blue 	= pgm_read_byte(&g_hour_hand[g_hh_mode][BLUE][8]);	
    75f0:	fc 01       	movw	r30, r24
    75f2:	ea 51       	subi	r30, 0x1A	; 26
    75f4:	ff 4f       	sbci	r31, 0xFF	; 255
    75f6:	24 91       	lpm	r18, Z
				break;		
		}
	}

		
	//if temporary registers aren't updated that means the hands aren't being displayed now
	if((tmp_red != PWM_TOP + 1) || (tmp_green != PWM_TOP + 1) || (tmp_blue != PWM_TOP + 1))
    75f8:	48 32       	cpi	r20, 0x28	; 40
    75fa:	29 f4       	brne	.+10     	; 0x7606 <__vector_15+0x756>
    75fc:	38 32       	cpi	r19, 0x28	; 40
    75fe:	19 f4       	brne	.+6      	; 0x7606 <__vector_15+0x756>
    7600:	28 32       	cpi	r18, 0x28	; 40
    7602:	09 f4       	brne	.+2      	; 0x7606 <__vector_15+0x756>
    7604:	3c c0       	rjmp	.+120    	; 0x767e <__vector_15+0x7ce>
	{
		if(g_rc_state == STATE_SETTING)  //if time is being set 
    7606:	61 30       	cpi	r22, 0x01	; 1
    7608:	89 f4       	brne	.+34     	; 0x762c <__vector_15+0x77c>
		{
			if(g_timer2_ovf & 0x02) 	//minute and second hand should blink
    760a:	80 91 29 01 	lds	r24, 0x0129
    760e:	81 fd       	sbrc	r24, 1
    7610:	06 c0       	rjmp	.+12     	; 0x761e <__vector_15+0x76e>
			{
				PWM_RED = tmp_red;
				PWM_GREEN = tmp_green;
				PWM_BLUE = tmp_blue;	
			}
			else
			{
				if(g_rc_hold_counter != 0) //don't blink if any button is held
    7612:	80 91 0d 01 	lds	r24, 0x010D
    7616:	88 23       	and	r24, r24
    7618:	11 f4       	brne	.+4      	; 0x761e <__vector_15+0x76e>
    761a:	0c 94 21 46 	jmp	0x8c42 <__vector_15+0x1d92>
				{
					PWM_RED = tmp_red;
    761e:	84 2f       	mov	r24, r20
    7620:	99 27       	eor	r25, r25
    7622:	9b bd       	out	0x2b, r25	; 43
    7624:	8a bd       	out	0x2a, r24	; 42
					PWM_GREEN = tmp_green;
    7626:	83 2f       	mov	r24, r19
    7628:	99 27       	eor	r25, r25
    762a:	1e c0       	rjmp	.+60     	; 0x7668 <__vector_15+0x7b8>
					PWM_BLUE = tmp_blue;
				}
			}
		}
		
		else
		{
			if (g_mode==27 || g_mode==28)
    762c:	80 91 1f 01 	lds	r24, 0x011F
    7630:	8b 51       	subi	r24, 0x1B	; 27
    7632:	64 2f       	mov	r22, r20
    7634:	77 27       	eor	r23, r23
    7636:	43 2f       	mov	r20, r19
    7638:	55 27       	eor	r21, r21
    763a:	82 30       	cpi	r24, 0x02	; 2
    763c:	c0 f4       	brcc	.+48     	; 0x766e <__vector_15+0x7be>
			{
			PWM_RED = tmp_red; //- pgm_read_byte(&gm_background[1][RED][g_speed6rev+g_position]) ;
    763e:	7b bd       	out	0x2b, r23	; 43
    7640:	6a bd       	out	0x2a, r22	; 42
			
			if ((tmp_green - pgm_read_byte(&gm_background[1][GREEN][g_speed6rev+g_position])) < 0x01)
    7642:	90 91 27 01 	lds	r25, 0x0127
    7646:	80 91 40 01 	lds	r24, 0x0140
    764a:	69 2f       	mov	r22, r25
    764c:	68 0f       	add	r22, r24
    764e:	71 2d       	mov	r23, r1
    7650:	71 1d       	adc	r23, r1
    7652:	fb 01       	movw	r30, r22
    7654:	e9 51       	subi	r30, 0x19	; 25
    7656:	f6 4f       	sbci	r31, 0xF6	; 246
    7658:	84 91       	lpm	r24, Z
    765a:	fa 01       	movw	r30, r20
    765c:	e8 1b       	sub	r30, r24
    765e:	f1 09       	sbc	r31, r1
    7660:	cf 01       	movw	r24, r30
    7662:	1e 16       	cp	r1, r30
    7664:	1f 06       	cpc	r1, r31
    7666:	2c f4       	brge	.+10     	; 0x7672 <__vector_15+0x7c2>
			PWM_GREEN = tmp_green;
			else
			PWM_GREEN = tmp_green - pgm_read_byte(&gm_background[1][GREEN][g_speed6rev+g_position]);
    7668:	99 bd       	out	0x29, r25	; 41
    766a:	88 bd       	out	0x28, r24	; 40
    766c:	04 c0       	rjmp	.+8      	; 0x7676 <__vector_15+0x7c6>
			
			PWM_BLUE = tmp_blue; //- pgm_read_byte(&gm_background[1][BLUE][g_speed6rev+g_position]);
			}
	
			else
			{
			PWM_RED = tmp_red;
    766e:	7b bd       	out	0x2b, r23	; 43
    7670:	6a bd       	out	0x2a, r22	; 42
			PWM_GREEN = tmp_green;
    7672:	59 bd       	out	0x29, r21	; 41
    7674:	48 bd       	out	0x28, r20	; 40
			PWM_BLUE = tmp_blue;
    7676:	82 2f       	mov	r24, r18
    7678:	99 27       	eor	r25, r25
    767a:	0c 94 1d 46 	jmp	0x8c3a <__vector_15+0x1d8a>
			}		
		}
	}
	else  //display background, also stored in flash memomy
	{
		switch(g_mode)
    767e:	20 91 1f 01 	lds	r18, 0x011F
    7682:	82 2f       	mov	r24, r18
    7684:	99 27       	eor	r25, r25
    7686:	aa 27       	eor	r26, r26
    7688:	bb 27       	eor	r27, r27
    768a:	fc 01       	movw	r30, r24
    768c:	33 97       	sbiw	r30, 0x03	; 3
    768e:	e0 32       	cpi	r30, 0x20	; 32
    7690:	f1 05       	cpc	r31, r1
    7692:	10 f0       	brcs	.+4      	; 0x7698 <__vector_15+0x7e8>
    7694:	0c 94 f8 45 	jmp	0x8bf0 <__vector_15+0x1d40>
    7698:	ea 5b       	subi	r30, 0xBA	; 186
    769a:	ff 4f       	sbci	r31, 0xFF	; 255
    769c:	a0 91 40 01 	lds	r26, 0x0140
    76a0:	ee 0f       	add	r30, r30
    76a2:	ff 1f       	adc	r31, r31
    76a4:	05 90       	lpm	r0, Z+
    76a6:	f4 91       	lpm	r31, Z
    76a8:	e0 2d       	mov	r30, r0
    76aa:	09 94       	ijmp
		{

		case 34:				// background is changing 11 synthesis rainbow
			seconds_hand=0;
    76ac:	10 92 25 01 	sts	0x0125, r1

			if ((pgm_read_byte(&gm_background[10][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[10][RED][g_speed6+g_position])) > PWM_TOP)
    76b0:	50 91 2c 01 	lds	r21, 0x012C
    76b4:	2a 2f       	mov	r18, r26
    76b6:	33 27       	eor	r19, r19
    76b8:	f9 01       	movw	r30, r18
    76ba:	e5 0f       	add	r30, r21
    76bc:	f1 1d       	adc	r31, r1
    76be:	e9 55       	subi	r30, 0x59	; 89
    76c0:	f4 4d       	sbci	r31, 0xD4	; 212
    76c2:	94 91       	lpm	r25, Z
    76c4:	40 91 43 01 	lds	r20, 0x0143
    76c8:	f9 01       	movw	r30, r18
    76ca:	e4 0f       	add	r30, r20
    76cc:	f1 1d       	adc	r31, r1
    76ce:	e9 53       	subi	r30, 0x39	; 57
    76d0:	f6 4d       	sbci	r31, 0xD6	; 214
    76d2:	84 91       	lpm	r24, Z
    76d4:	89 0f       	add	r24, r25
    76d6:	91 2d       	mov	r25, r1
    76d8:	91 1d       	adc	r25, r1
    76da:	88 97       	sbiw	r24, 0x28	; 40
    76dc:	1c f0       	brlt	.+6      	; 0x76e4 <__vector_15+0x834>
			PWM_RED = PWM_TOP ;
    76de:	87 e2       	ldi	r24, 0x27	; 39
    76e0:	90 e0       	ldi	r25, 0x00	; 0
    76e2:	09 c0       	rjmp	.+18     	; 0x76f6 <__vector_15+0x846>
			else
			PWM_RED =  pgm_read_byte(&gc_background[0][RED][g_speed6rev+g_position]);
    76e4:	80 91 27 01 	lds	r24, 0x0127
    76e8:	28 0f       	add	r18, r24
    76ea:	31 1d       	adc	r19, r1
    76ec:	29 5b       	subi	r18, 0xB9	; 185
    76ee:	3e 4c       	sbci	r19, 0xCE	; 206
    76f0:	f9 01       	movw	r30, r18
    76f2:	84 91       	lpm	r24, Z
    76f4:	99 27       	eor	r25, r25
    76f6:	9b bd       	out	0x2b, r25	; 43
    76f8:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[10][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[10][RED][g_speed6+g_position])) > PWM_TOP)
    76fa:	2a 2f       	mov	r18, r26
    76fc:	33 27       	eor	r19, r19
    76fe:	f9 01       	movw	r30, r18
    7700:	e5 0f       	add	r30, r21
    7702:	f1 1d       	adc	r31, r1
    7704:	e9 55       	subi	r30, 0x59	; 89
    7706:	f4 4d       	sbci	r31, 0xD4	; 212
    7708:	94 91       	lpm	r25, Z
    770a:	f9 01       	movw	r30, r18
    770c:	e4 0f       	add	r30, r20
    770e:	f1 1d       	adc	r31, r1
    7710:	e9 53       	subi	r30, 0x39	; 57
    7712:	f6 4d       	sbci	r31, 0xD6	; 214
    7714:	84 91       	lpm	r24, Z
    7716:	89 0f       	add	r24, r25
    7718:	91 2d       	mov	r25, r1
    771a:	91 1d       	adc	r25, r1
    771c:	88 97       	sbiw	r24, 0x28	; 40
    771e:	1c f0       	brlt	.+6      	; 0x7726 <__vector_15+0x876>
			PWM_GREEN = PWM_TOP ;
    7720:	87 e2       	ldi	r24, 0x27	; 39
    7722:	90 e0       	ldi	r25, 0x00	; 0
    7724:	09 c0       	rjmp	.+18     	; 0x7738 <__vector_15+0x888>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[0][GREEN][g_speed6rev+g_position]);
    7726:	80 91 27 01 	lds	r24, 0x0127
    772a:	28 0f       	add	r18, r24
    772c:	31 1d       	adc	r19, r1
    772e:	29 5d       	subi	r18, 0xD9	; 217
    7730:	3c 4c       	sbci	r19, 0xCC	; 204
    7732:	f9 01       	movw	r30, r18
    7734:	84 91       	lpm	r24, Z
    7736:	99 27       	eor	r25, r25
    7738:	99 bd       	out	0x29, r25	; 41
    773a:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[10][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[10][RED][g_speed6+g_position])) > PWM_TOP)
    773c:	2a 2f       	mov	r18, r26
    773e:	33 27       	eor	r19, r19
    7740:	f9 01       	movw	r30, r18
    7742:	e5 0f       	add	r30, r21
    7744:	f1 1d       	adc	r31, r1
    7746:	e9 55       	subi	r30, 0x59	; 89
    7748:	f4 4d       	sbci	r31, 0xD4	; 212
    774a:	94 91       	lpm	r25, Z
    774c:	f9 01       	movw	r30, r18
    774e:	e4 0f       	add	r30, r20
    7750:	f1 1d       	adc	r31, r1
    7752:	e9 53       	subi	r30, 0x39	; 57
    7754:	f6 4d       	sbci	r31, 0xD6	; 214
    7756:	84 91       	lpm	r24, Z
    7758:	89 0f       	add	r24, r25
    775a:	91 2d       	mov	r25, r1
    775c:	91 1d       	adc	r25, r1
    775e:	88 97       	sbiw	r24, 0x28	; 40
    7760:	0c f0       	brlt	.+2      	; 0x7764 <__vector_15+0x8b4>
    7762:	27 c2       	rjmp	.+1102   	; 0x7bb2 <__vector_15+0xd02>
			PWM_BLUE  = PWM_TOP ;
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[0][BLUE][g_speed6rev+g_position]);
    7764:	80 91 27 01 	lds	r24, 0x0127
    7768:	28 0f       	add	r18, r24
    776a:	31 1d       	adc	r19, r1
    776c:	29 5f       	subi	r18, 0xF9	; 249
    776e:	3a 4c       	sbci	r19, 0xCA	; 202
    7770:	f9 01       	movw	r30, r18
    7772:	84 91       	lpm	r24, Z
    7774:	0c 94 1c 46 	jmp	0x8c38 <__vector_15+0x1d88>
		break;	
		
		//case 60:				// background is changing 11 synthesis windows
		//	seconds_hand=0;
			
		//	if ((pgm_read_byte(&gm_background[10][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[10][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_RED = PWM_TOP ;
		//	else
		//	PWM_RED =  pgm_read_byte(&gc_background[7][RED][g_speed6rev+g_position]);
				
		//	if ((pgm_read_byte(&gm_background[10][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[10][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_GREEN = PWM_TOP ;
		//	else
		//	PWM_GREEN =  pgm_read_byte(&gc_background[7][GREEN][g_speed6rev+g_position]);
				
		//	if ((pgm_read_byte(&gm_background[10][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[10][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_BLUE  = PWM_TOP ;
		//	else
		//	PWM_BLUE =  pgm_read_byte(&gc_background[7][BLUE][g_speed6rev+g_position]);
		//break;	
	
		case 33:				// background is changing 11 synthesis africa
			seconds_hand=0;
    7778:	10 92 25 01 	sts	0x0125, r1
			
			if ((pgm_read_byte(&gm_background[10][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[10][RED][g_speed6+g_position])) > PWM_TOP)
    777c:	50 91 2c 01 	lds	r21, 0x012C
    7780:	2a 2f       	mov	r18, r26
    7782:	33 27       	eor	r19, r19
    7784:	f9 01       	movw	r30, r18
    7786:	e5 0f       	add	r30, r21
    7788:	f1 1d       	adc	r31, r1
    778a:	e9 55       	subi	r30, 0x59	; 89
    778c:	f4 4d       	sbci	r31, 0xD4	; 212
    778e:	94 91       	lpm	r25, Z
    7790:	40 91 43 01 	lds	r20, 0x0143
    7794:	f9 01       	movw	r30, r18
    7796:	e4 0f       	add	r30, r20
    7798:	f1 1d       	adc	r31, r1
    779a:	e9 53       	subi	r30, 0x39	; 57
    779c:	f6 4d       	sbci	r31, 0xD6	; 214
    779e:	84 91       	lpm	r24, Z
    77a0:	89 0f       	add	r24, r25
    77a2:	91 2d       	mov	r25, r1
    77a4:	91 1d       	adc	r25, r1
    77a6:	88 97       	sbiw	r24, 0x28	; 40
    77a8:	1c f0       	brlt	.+6      	; 0x77b0 <__vector_15+0x900>
			PWM_RED = PWM_TOP ;
    77aa:	87 e2       	ldi	r24, 0x27	; 39
    77ac:	90 e0       	ldi	r25, 0x00	; 0
    77ae:	09 c0       	rjmp	.+18     	; 0x77c2 <__vector_15+0x912>
			else
			PWM_RED =  pgm_read_byte(&gc_background[6][RED][g_speed6rev+g_position]);
    77b0:	80 91 27 01 	lds	r24, 0x0127
    77b4:	28 0f       	add	r18, r24
    77b6:	31 1d       	adc	r19, r1
    77b8:	29 5f       	subi	r18, 0xF9	; 249
    77ba:	3c 4a       	sbci	r19, 0xAC	; 172
    77bc:	f9 01       	movw	r30, r18
    77be:	84 91       	lpm	r24, Z
    77c0:	99 27       	eor	r25, r25
    77c2:	9b bd       	out	0x2b, r25	; 43
    77c4:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[10][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[10][RED][g_speed6+g_position])) > PWM_TOP)
    77c6:	2a 2f       	mov	r18, r26
    77c8:	33 27       	eor	r19, r19
    77ca:	f9 01       	movw	r30, r18
    77cc:	e5 0f       	add	r30, r21
    77ce:	f1 1d       	adc	r31, r1
    77d0:	e9 55       	subi	r30, 0x59	; 89
    77d2:	f4 4d       	sbci	r31, 0xD4	; 212
    77d4:	94 91       	lpm	r25, Z
    77d6:	f9 01       	movw	r30, r18
    77d8:	e4 0f       	add	r30, r20
    77da:	f1 1d       	adc	r31, r1
    77dc:	e9 53       	subi	r30, 0x39	; 57
    77de:	f6 4d       	sbci	r31, 0xD6	; 214
    77e0:	84 91       	lpm	r24, Z
    77e2:	89 0f       	add	r24, r25
    77e4:	91 2d       	mov	r25, r1
    77e6:	91 1d       	adc	r25, r1
    77e8:	88 97       	sbiw	r24, 0x28	; 40
    77ea:	1c f0       	brlt	.+6      	; 0x77f2 <__vector_15+0x942>
			PWM_GREEN = PWM_TOP ;
    77ec:	87 e2       	ldi	r24, 0x27	; 39
    77ee:	90 e0       	ldi	r25, 0x00	; 0
    77f0:	09 c0       	rjmp	.+18     	; 0x7804 <__vector_15+0x954>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[6][GREEN][g_speed6rev+g_position]);
    77f2:	80 91 27 01 	lds	r24, 0x0127
    77f6:	28 0f       	add	r18, r24
    77f8:	31 1d       	adc	r19, r1
    77fa:	29 51       	subi	r18, 0x19	; 25
    77fc:	3b 4a       	sbci	r19, 0xAB	; 171
    77fe:	f9 01       	movw	r30, r18
    7800:	84 91       	lpm	r24, Z
    7802:	99 27       	eor	r25, r25
    7804:	99 bd       	out	0x29, r25	; 41
    7806:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[10][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[10][RED][g_speed6+g_position])) > PWM_TOP)
    7808:	2a 2f       	mov	r18, r26
    780a:	33 27       	eor	r19, r19
    780c:	f9 01       	movw	r30, r18
    780e:	e5 0f       	add	r30, r21
    7810:	f1 1d       	adc	r31, r1
    7812:	e9 55       	subi	r30, 0x59	; 89
    7814:	f4 4d       	sbci	r31, 0xD4	; 212
    7816:	94 91       	lpm	r25, Z
    7818:	f9 01       	movw	r30, r18
    781a:	e4 0f       	add	r30, r20
    781c:	f1 1d       	adc	r31, r1
    781e:	e9 53       	subi	r30, 0x39	; 57
    7820:	f6 4d       	sbci	r31, 0xD6	; 214
    7822:	84 91       	lpm	r24, Z
    7824:	89 0f       	add	r24, r25
    7826:	91 2d       	mov	r25, r1
    7828:	91 1d       	adc	r25, r1
    782a:	88 97       	sbiw	r24, 0x28	; 40
    782c:	0c f0       	brlt	.+2      	; 0x7830 <__vector_15+0x980>
    782e:	c1 c1       	rjmp	.+898    	; 0x7bb2 <__vector_15+0xd02>
			PWM_BLUE  = PWM_TOP ;
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[6][BLUE][g_speed6rev+g_position]);
    7830:	80 91 27 01 	lds	r24, 0x0127
    7834:	28 0f       	add	r18, r24
    7836:	31 1d       	adc	r19, r1
    7838:	29 53       	subi	r18, 0x39	; 57
    783a:	39 4a       	sbci	r19, 0xA9	; 169
    783c:	f9 01       	movw	r30, r18
    783e:	84 91       	lpm	r24, Z
    7840:	0c 94 1c 46 	jmp	0x8c38 <__vector_15+0x1d88>
		break;

		case 32:				// background is changing 7 synthesis rainbow
			seconds_hand=0;
    7844:	10 92 25 01 	sts	0x0125, r1

			if ((pgm_read_byte(&gm_background[9][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[9][RED][g_speed6+g_position])) > PWM_TOP)
    7848:	50 91 2c 01 	lds	r21, 0x012C
    784c:	2a 2f       	mov	r18, r26
    784e:	33 27       	eor	r19, r19
    7850:	f9 01       	movw	r30, r18
    7852:	e5 0f       	add	r30, r21
    7854:	f1 1d       	adc	r31, r1
    7856:	e9 51       	subi	r30, 0x19	; 25
    7858:	f8 4d       	sbci	r31, 0xD8	; 216
    785a:	94 91       	lpm	r25, Z
    785c:	40 91 43 01 	lds	r20, 0x0143
    7860:	f9 01       	movw	r30, r18
    7862:	e4 0f       	add	r30, r20
    7864:	f1 1d       	adc	r31, r1
    7866:	e9 5f       	subi	r30, 0xF9	; 249
    7868:	f9 4d       	sbci	r31, 0xD9	; 217
    786a:	84 91       	lpm	r24, Z
    786c:	89 0f       	add	r24, r25
    786e:	91 2d       	mov	r25, r1
    7870:	91 1d       	adc	r25, r1
    7872:	88 97       	sbiw	r24, 0x28	; 40
    7874:	1c f0       	brlt	.+6      	; 0x787c <__vector_15+0x9cc>
			PWM_RED = PWM_TOP ;
    7876:	87 e2       	ldi	r24, 0x27	; 39
    7878:	90 e0       	ldi	r25, 0x00	; 0
    787a:	09 c0       	rjmp	.+18     	; 0x788e <__vector_15+0x9de>
			else
			PWM_RED =  pgm_read_byte(&gc_background[0][RED][g_speed6rev+g_position]);
    787c:	80 91 27 01 	lds	r24, 0x0127
    7880:	28 0f       	add	r18, r24
    7882:	31 1d       	adc	r19, r1
    7884:	29 5b       	subi	r18, 0xB9	; 185
    7886:	3e 4c       	sbci	r19, 0xCE	; 206
    7888:	f9 01       	movw	r30, r18
    788a:	84 91       	lpm	r24, Z
    788c:	99 27       	eor	r25, r25
    788e:	9b bd       	out	0x2b, r25	; 43
    7890:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[9][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[9][RED][g_speed6+g_position])) > PWM_TOP)
    7892:	2a 2f       	mov	r18, r26
    7894:	33 27       	eor	r19, r19
    7896:	f9 01       	movw	r30, r18
    7898:	e5 0f       	add	r30, r21
    789a:	f1 1d       	adc	r31, r1
    789c:	e9 51       	subi	r30, 0x19	; 25
    789e:	f8 4d       	sbci	r31, 0xD8	; 216
    78a0:	94 91       	lpm	r25, Z
    78a2:	f9 01       	movw	r30, r18
    78a4:	e4 0f       	add	r30, r20
    78a6:	f1 1d       	adc	r31, r1
    78a8:	e9 5f       	subi	r30, 0xF9	; 249
    78aa:	f9 4d       	sbci	r31, 0xD9	; 217
    78ac:	84 91       	lpm	r24, Z
    78ae:	89 0f       	add	r24, r25
    78b0:	91 2d       	mov	r25, r1
    78b2:	91 1d       	adc	r25, r1
    78b4:	88 97       	sbiw	r24, 0x28	; 40
    78b6:	1c f0       	brlt	.+6      	; 0x78be <__vector_15+0xa0e>
			PWM_GREEN = PWM_TOP ;
    78b8:	87 e2       	ldi	r24, 0x27	; 39
    78ba:	90 e0       	ldi	r25, 0x00	; 0
    78bc:	09 c0       	rjmp	.+18     	; 0x78d0 <__vector_15+0xa20>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[0][GREEN][g_speed6rev+g_position]);
    78be:	80 91 27 01 	lds	r24, 0x0127
    78c2:	28 0f       	add	r18, r24
    78c4:	31 1d       	adc	r19, r1
    78c6:	29 5d       	subi	r18, 0xD9	; 217
    78c8:	3c 4c       	sbci	r19, 0xCC	; 204
    78ca:	f9 01       	movw	r30, r18
    78cc:	84 91       	lpm	r24, Z
    78ce:	99 27       	eor	r25, r25
    78d0:	99 bd       	out	0x29, r25	; 41
    78d2:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[9][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[9][RED][g_speed6+g_position])) > PWM_TOP)
    78d4:	2a 2f       	mov	r18, r26
    78d6:	33 27       	eor	r19, r19
    78d8:	f9 01       	movw	r30, r18
    78da:	e5 0f       	add	r30, r21
    78dc:	f1 1d       	adc	r31, r1
    78de:	e9 51       	subi	r30, 0x19	; 25
    78e0:	f8 4d       	sbci	r31, 0xD8	; 216
    78e2:	94 91       	lpm	r25, Z
    78e4:	f9 01       	movw	r30, r18
    78e6:	e4 0f       	add	r30, r20
    78e8:	f1 1d       	adc	r31, r1
    78ea:	e9 5f       	subi	r30, 0xF9	; 249
    78ec:	f9 4d       	sbci	r31, 0xD9	; 217
    78ee:	84 91       	lpm	r24, Z
    78f0:	89 0f       	add	r24, r25
    78f2:	91 2d       	mov	r25, r1
    78f4:	91 1d       	adc	r25, r1
    78f6:	88 97       	sbiw	r24, 0x28	; 40
    78f8:	0c f0       	brlt	.+2      	; 0x78fc <__vector_15+0xa4c>
    78fa:	5b c1       	rjmp	.+694    	; 0x7bb2 <__vector_15+0xd02>
			PWM_BLUE  = PWM_TOP ;
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[0][BLUE][g_speed6rev+g_position]);
    78fc:	80 91 27 01 	lds	r24, 0x0127
    7900:	28 0f       	add	r18, r24
    7902:	31 1d       	adc	r19, r1
    7904:	29 5f       	subi	r18, 0xF9	; 249
    7906:	3a 4c       	sbci	r19, 0xCA	; 202
    7908:	f9 01       	movw	r30, r18
    790a:	84 91       	lpm	r24, Z
    790c:	0c 94 1c 46 	jmp	0x8c38 <__vector_15+0x1d88>
		break;	
		
		//case 57:				// background is changing 7 synthesis windows
		//	seconds_hand=0;
		//	
		//	if ((pgm_read_byte(&gm_background[9][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[9][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_RED = PWM_TOP ;
		//	else
		//	PWM_RED =  pgm_read_byte(&gc_background[7][RED][g_speed6rev+g_position]);
		//		
		//	if ((pgm_read_byte(&gm_background[9][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[9][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_GREEN = PWM_TOP ;
		//	else
		//	PWM_GREEN =  pgm_read_byte(&gc_background[7][GREEN][g_speed6rev+g_position]);
		//		
		//	if ((pgm_read_byte(&gm_background[9][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[9][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_BLUE  = PWM_TOP ;
		//	else
		//	PWM_BLUE =  pgm_read_byte(&gc_background[7][BLUE][g_speed6rev+g_position]);
		//break;	
	
		case 31:				// background is changing 7 synthesis africa
			seconds_hand=0;
    7910:	10 92 25 01 	sts	0x0125, r1
			
			if ((pgm_read_byte(&gm_background[9][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[9][RED][g_speed6+g_position])) > PWM_TOP)
    7914:	50 91 2c 01 	lds	r21, 0x012C
    7918:	2a 2f       	mov	r18, r26
    791a:	33 27       	eor	r19, r19
    791c:	f9 01       	movw	r30, r18
    791e:	e5 0f       	add	r30, r21
    7920:	f1 1d       	adc	r31, r1
    7922:	e9 51       	subi	r30, 0x19	; 25
    7924:	f8 4d       	sbci	r31, 0xD8	; 216
    7926:	94 91       	lpm	r25, Z
    7928:	40 91 43 01 	lds	r20, 0x0143
    792c:	f9 01       	movw	r30, r18
    792e:	e4 0f       	add	r30, r20
    7930:	f1 1d       	adc	r31, r1
    7932:	e9 5f       	subi	r30, 0xF9	; 249
    7934:	f9 4d       	sbci	r31, 0xD9	; 217
    7936:	84 91       	lpm	r24, Z
    7938:	89 0f       	add	r24, r25
    793a:	91 2d       	mov	r25, r1
    793c:	91 1d       	adc	r25, r1
    793e:	88 97       	sbiw	r24, 0x28	; 40
    7940:	1c f0       	brlt	.+6      	; 0x7948 <__vector_15+0xa98>
			PWM_RED = PWM_TOP ;
    7942:	87 e2       	ldi	r24, 0x27	; 39
    7944:	90 e0       	ldi	r25, 0x00	; 0
    7946:	09 c0       	rjmp	.+18     	; 0x795a <__vector_15+0xaaa>
			else
			PWM_RED =  pgm_read_byte(&gc_background[6][RED][g_speed6rev+g_position]);
    7948:	80 91 27 01 	lds	r24, 0x0127
    794c:	28 0f       	add	r18, r24
    794e:	31 1d       	adc	r19, r1
    7950:	29 5f       	subi	r18, 0xF9	; 249
    7952:	3c 4a       	sbci	r19, 0xAC	; 172
    7954:	f9 01       	movw	r30, r18
    7956:	84 91       	lpm	r24, Z
    7958:	99 27       	eor	r25, r25
    795a:	9b bd       	out	0x2b, r25	; 43
    795c:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[9][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[9][RED][g_speed6+g_position])) > PWM_TOP)
    795e:	2a 2f       	mov	r18, r26
    7960:	33 27       	eor	r19, r19
    7962:	f9 01       	movw	r30, r18
    7964:	e5 0f       	add	r30, r21
    7966:	f1 1d       	adc	r31, r1
    7968:	e9 51       	subi	r30, 0x19	; 25
    796a:	f8 4d       	sbci	r31, 0xD8	; 216
    796c:	94 91       	lpm	r25, Z
    796e:	f9 01       	movw	r30, r18
    7970:	e4 0f       	add	r30, r20
    7972:	f1 1d       	adc	r31, r1
    7974:	e9 5f       	subi	r30, 0xF9	; 249
    7976:	f9 4d       	sbci	r31, 0xD9	; 217
    7978:	84 91       	lpm	r24, Z
    797a:	89 0f       	add	r24, r25
    797c:	91 2d       	mov	r25, r1
    797e:	91 1d       	adc	r25, r1
    7980:	88 97       	sbiw	r24, 0x28	; 40
    7982:	1c f0       	brlt	.+6      	; 0x798a <__vector_15+0xada>
			PWM_GREEN = PWM_TOP ;
    7984:	87 e2       	ldi	r24, 0x27	; 39
    7986:	90 e0       	ldi	r25, 0x00	; 0
    7988:	09 c0       	rjmp	.+18     	; 0x799c <__vector_15+0xaec>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[6][GREEN][g_speed6rev+g_position]);
    798a:	80 91 27 01 	lds	r24, 0x0127
    798e:	28 0f       	add	r18, r24
    7990:	31 1d       	adc	r19, r1
    7992:	29 51       	subi	r18, 0x19	; 25
    7994:	3b 4a       	sbci	r19, 0xAB	; 171
    7996:	f9 01       	movw	r30, r18
    7998:	84 91       	lpm	r24, Z
    799a:	99 27       	eor	r25, r25
    799c:	99 bd       	out	0x29, r25	; 41
    799e:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[9][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[9][RED][g_speed6+g_position])) > PWM_TOP)
    79a0:	2a 2f       	mov	r18, r26
    79a2:	33 27       	eor	r19, r19
    79a4:	f9 01       	movw	r30, r18
    79a6:	e5 0f       	add	r30, r21
    79a8:	f1 1d       	adc	r31, r1
    79aa:	e9 51       	subi	r30, 0x19	; 25
    79ac:	f8 4d       	sbci	r31, 0xD8	; 216
    79ae:	94 91       	lpm	r25, Z
    79b0:	f9 01       	movw	r30, r18
    79b2:	e4 0f       	add	r30, r20
    79b4:	f1 1d       	adc	r31, r1
    79b6:	e9 5f       	subi	r30, 0xF9	; 249
    79b8:	f9 4d       	sbci	r31, 0xD9	; 217
    79ba:	84 91       	lpm	r24, Z
    79bc:	89 0f       	add	r24, r25
    79be:	91 2d       	mov	r25, r1
    79c0:	91 1d       	adc	r25, r1
    79c2:	88 97       	sbiw	r24, 0x28	; 40
    79c4:	0c f0       	brlt	.+2      	; 0x79c8 <__vector_15+0xb18>
    79c6:	f5 c0       	rjmp	.+490    	; 0x7bb2 <__vector_15+0xd02>
			PWM_BLUE  = PWM_TOP ;
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[6][BLUE][g_speed6rev+g_position]);
    79c8:	80 91 27 01 	lds	r24, 0x0127
    79cc:	28 0f       	add	r18, r24
    79ce:	31 1d       	adc	r19, r1
    79d0:	29 53       	subi	r18, 0x39	; 57
    79d2:	39 4a       	sbci	r19, 0xA9	; 169
    79d4:	f9 01       	movw	r30, r18
    79d6:	84 91       	lpm	r24, Z
    79d8:	0c 94 1c 46 	jmp	0x8c38 <__vector_15+0x1d88>
		break;	
		
	
		case 30:				// background is changing 5 synthesis rainbow
			seconds_hand=0;
    79dc:	10 92 25 01 	sts	0x0125, r1
			
			if ((pgm_read_byte(&gm_background[8][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[8][RED][g_speed6+g_position])) > PWM_TOP)
    79e0:	50 91 2c 01 	lds	r21, 0x012C
    79e4:	2a 2f       	mov	r18, r26
    79e6:	33 27       	eor	r19, r19
    79e8:	f9 01       	movw	r30, r18
    79ea:	e5 0f       	add	r30, r21
    79ec:	f1 1d       	adc	r31, r1
    79ee:	e9 5d       	subi	r30, 0xD9	; 217
    79f0:	fb 4d       	sbci	r31, 0xDB	; 219
    79f2:	94 91       	lpm	r25, Z
    79f4:	40 91 43 01 	lds	r20, 0x0143
    79f8:	f9 01       	movw	r30, r18
    79fa:	e4 0f       	add	r30, r20
    79fc:	f1 1d       	adc	r31, r1
    79fe:	e9 5b       	subi	r30, 0xB9	; 185
    7a00:	fd 4d       	sbci	r31, 0xDD	; 221
    7a02:	84 91       	lpm	r24, Z
    7a04:	89 0f       	add	r24, r25
    7a06:	91 2d       	mov	r25, r1
    7a08:	91 1d       	adc	r25, r1
    7a0a:	88 97       	sbiw	r24, 0x28	; 40
    7a0c:	1c f0       	brlt	.+6      	; 0x7a14 <__vector_15+0xb64>
			PWM_RED = PWM_TOP ;
    7a0e:	87 e2       	ldi	r24, 0x27	; 39
    7a10:	90 e0       	ldi	r25, 0x00	; 0
    7a12:	09 c0       	rjmp	.+18     	; 0x7a26 <__vector_15+0xb76>
			else
			PWM_RED =  pgm_read_byte(&gc_background[0][RED][g_speed6rev+g_position]);
    7a14:	80 91 27 01 	lds	r24, 0x0127
    7a18:	28 0f       	add	r18, r24
    7a1a:	31 1d       	adc	r19, r1
    7a1c:	29 5b       	subi	r18, 0xB9	; 185
    7a1e:	3e 4c       	sbci	r19, 0xCE	; 206
    7a20:	f9 01       	movw	r30, r18
    7a22:	84 91       	lpm	r24, Z
    7a24:	99 27       	eor	r25, r25
    7a26:	9b bd       	out	0x2b, r25	; 43
    7a28:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[8][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[8][RED][g_speed6+g_position])) > PWM_TOP)
    7a2a:	2a 2f       	mov	r18, r26
    7a2c:	33 27       	eor	r19, r19
    7a2e:	f9 01       	movw	r30, r18
    7a30:	e5 0f       	add	r30, r21
    7a32:	f1 1d       	adc	r31, r1
    7a34:	e9 5d       	subi	r30, 0xD9	; 217
    7a36:	fb 4d       	sbci	r31, 0xDB	; 219
    7a38:	94 91       	lpm	r25, Z
    7a3a:	f9 01       	movw	r30, r18
    7a3c:	e4 0f       	add	r30, r20
    7a3e:	f1 1d       	adc	r31, r1
    7a40:	e9 5b       	subi	r30, 0xB9	; 185
    7a42:	fd 4d       	sbci	r31, 0xDD	; 221
    7a44:	84 91       	lpm	r24, Z
    7a46:	89 0f       	add	r24, r25
    7a48:	91 2d       	mov	r25, r1
    7a4a:	91 1d       	adc	r25, r1
    7a4c:	88 97       	sbiw	r24, 0x28	; 40
    7a4e:	1c f0       	brlt	.+6      	; 0x7a56 <__vector_15+0xba6>
			PWM_GREEN = PWM_TOP ;
    7a50:	87 e2       	ldi	r24, 0x27	; 39
    7a52:	90 e0       	ldi	r25, 0x00	; 0
    7a54:	09 c0       	rjmp	.+18     	; 0x7a68 <__vector_15+0xbb8>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[0][GREEN][g_speed6rev+g_position]);
    7a56:	80 91 27 01 	lds	r24, 0x0127
    7a5a:	28 0f       	add	r18, r24
    7a5c:	31 1d       	adc	r19, r1
    7a5e:	29 5d       	subi	r18, 0xD9	; 217
    7a60:	3c 4c       	sbci	r19, 0xCC	; 204
    7a62:	f9 01       	movw	r30, r18
    7a64:	84 91       	lpm	r24, Z
    7a66:	99 27       	eor	r25, r25
    7a68:	99 bd       	out	0x29, r25	; 41
    7a6a:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[8][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[8][RED][g_speed6+g_position])) > PWM_TOP)
    7a6c:	2a 2f       	mov	r18, r26
    7a6e:	33 27       	eor	r19, r19
    7a70:	f9 01       	movw	r30, r18
    7a72:	e5 0f       	add	r30, r21
    7a74:	f1 1d       	adc	r31, r1
    7a76:	e9 5d       	subi	r30, 0xD9	; 217
    7a78:	fb 4d       	sbci	r31, 0xDB	; 219
    7a7a:	94 91       	lpm	r25, Z
    7a7c:	f9 01       	movw	r30, r18
    7a7e:	e4 0f       	add	r30, r20
    7a80:	f1 1d       	adc	r31, r1
    7a82:	e9 5b       	subi	r30, 0xB9	; 185
    7a84:	fd 4d       	sbci	r31, 0xDD	; 221
    7a86:	84 91       	lpm	r24, Z
    7a88:	89 0f       	add	r24, r25
    7a8a:	91 2d       	mov	r25, r1
    7a8c:	91 1d       	adc	r25, r1
    7a8e:	88 97       	sbiw	r24, 0x28	; 40
    7a90:	0c f0       	brlt	.+2      	; 0x7a94 <__vector_15+0xbe4>
    7a92:	8f c0       	rjmp	.+286    	; 0x7bb2 <__vector_15+0xd02>
			PWM_BLUE  = PWM_TOP ;
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[0][BLUE][g_speed6rev+g_position]);	
    7a94:	80 91 27 01 	lds	r24, 0x0127
    7a98:	28 0f       	add	r18, r24
    7a9a:	31 1d       	adc	r19, r1
    7a9c:	29 5f       	subi	r18, 0xF9	; 249
    7a9e:	3a 4c       	sbci	r19, 0xCA	; 202
    7aa0:	f9 01       	movw	r30, r18
    7aa2:	84 91       	lpm	r24, Z
    7aa4:	0c 94 1c 46 	jmp	0x8c38 <__vector_15+0x1d88>
		break;	
				
		//case 54:				// background is changing 5 synthesis windows
		//	seconds_hand=0;
		//	
		//	if ((pgm_read_byte(&gm_background[8][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[8][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_RED = PWM_TOP ;
		//	else
		//	PWM_RED =  pgm_read_byte(&gc_background[7][RED][g_speed6rev+g_position]);
				
		//	if ((pgm_read_byte(&gm_background[8][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[8][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_GREEN = PWM_TOP ;
		//	else
		//	PWM_GREEN =  pgm_read_byte(&gc_background[7][GREEN][g_speed6rev+g_position]);
				
		//	if ((pgm_read_byte(&gm_background[8][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[8][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_BLUE  = PWM_TOP ;
		//	else
		//	PWM_BLUE =  pgm_read_byte(&gc_background[7][BLUE][g_speed6rev+g_position]);	
		//break;	
			
		case 29:				// background is changing 5 synthesis africa
			seconds_hand=0;
    7aa8:	10 92 25 01 	sts	0x0125, r1
			
			if ((pgm_read_byte(&gm_background[8][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[8][RED][g_speed6+g_position])) > PWM_TOP)
    7aac:	50 91 2c 01 	lds	r21, 0x012C
    7ab0:	2a 2f       	mov	r18, r26
    7ab2:	33 27       	eor	r19, r19
    7ab4:	f9 01       	movw	r30, r18
    7ab6:	e5 0f       	add	r30, r21
    7ab8:	f1 1d       	adc	r31, r1
    7aba:	e9 5d       	subi	r30, 0xD9	; 217
    7abc:	fb 4d       	sbci	r31, 0xDB	; 219
    7abe:	94 91       	lpm	r25, Z
    7ac0:	40 91 43 01 	lds	r20, 0x0143
    7ac4:	f9 01       	movw	r30, r18
    7ac6:	e4 0f       	add	r30, r20
    7ac8:	f1 1d       	adc	r31, r1
    7aca:	e9 5b       	subi	r30, 0xB9	; 185
    7acc:	fd 4d       	sbci	r31, 0xDD	; 221
    7ace:	84 91       	lpm	r24, Z
    7ad0:	89 0f       	add	r24, r25
    7ad2:	91 2d       	mov	r25, r1
    7ad4:	91 1d       	adc	r25, r1
    7ad6:	88 97       	sbiw	r24, 0x28	; 40
    7ad8:	1c f0       	brlt	.+6      	; 0x7ae0 <__vector_15+0xc30>
			PWM_RED = PWM_TOP ;
    7ada:	87 e2       	ldi	r24, 0x27	; 39
    7adc:	90 e0       	ldi	r25, 0x00	; 0
    7ade:	09 c0       	rjmp	.+18     	; 0x7af2 <__vector_15+0xc42>
			else
			PWM_RED =  pgm_read_byte(&gc_background[6][RED][g_speed6rev+g_position]);
    7ae0:	80 91 27 01 	lds	r24, 0x0127
    7ae4:	28 0f       	add	r18, r24
    7ae6:	31 1d       	adc	r19, r1
    7ae8:	29 5f       	subi	r18, 0xF9	; 249
    7aea:	3c 4a       	sbci	r19, 0xAC	; 172
    7aec:	f9 01       	movw	r30, r18
    7aee:	84 91       	lpm	r24, Z
    7af0:	99 27       	eor	r25, r25
    7af2:	9b bd       	out	0x2b, r25	; 43
    7af4:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[8][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[8][RED][g_speed6+g_position])) > PWM_TOP)
    7af6:	2a 2f       	mov	r18, r26
    7af8:	33 27       	eor	r19, r19
    7afa:	f9 01       	movw	r30, r18
    7afc:	e5 0f       	add	r30, r21
    7afe:	f1 1d       	adc	r31, r1
    7b00:	e9 5d       	subi	r30, 0xD9	; 217
    7b02:	fb 4d       	sbci	r31, 0xDB	; 219
    7b04:	94 91       	lpm	r25, Z
    7b06:	f9 01       	movw	r30, r18
    7b08:	e4 0f       	add	r30, r20
    7b0a:	f1 1d       	adc	r31, r1
    7b0c:	e9 5b       	subi	r30, 0xB9	; 185
    7b0e:	fd 4d       	sbci	r31, 0xDD	; 221
    7b10:	84 91       	lpm	r24, Z
    7b12:	89 0f       	add	r24, r25
    7b14:	91 2d       	mov	r25, r1
    7b16:	91 1d       	adc	r25, r1
    7b18:	88 97       	sbiw	r24, 0x28	; 40
    7b1a:	1c f0       	brlt	.+6      	; 0x7b22 <__vector_15+0xc72>
			PWM_GREEN = PWM_TOP ;
    7b1c:	87 e2       	ldi	r24, 0x27	; 39
    7b1e:	90 e0       	ldi	r25, 0x00	; 0
    7b20:	09 c0       	rjmp	.+18     	; 0x7b34 <__vector_15+0xc84>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[6][GREEN][g_speed6rev+g_position]);
    7b22:	80 91 27 01 	lds	r24, 0x0127
    7b26:	28 0f       	add	r18, r24
    7b28:	31 1d       	adc	r19, r1
    7b2a:	29 51       	subi	r18, 0x19	; 25
    7b2c:	3b 4a       	sbci	r19, 0xAB	; 171
    7b2e:	f9 01       	movw	r30, r18
    7b30:	84 91       	lpm	r24, Z
    7b32:	99 27       	eor	r25, r25
    7b34:	99 bd       	out	0x29, r25	; 41
    7b36:	88 bd       	out	0x28, r24	; 40
				
			if ((pgm_read_byte(&gm_background[8][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[8][RED][g_speed6+g_position])) > PWM_TOP)
    7b38:	2a 2f       	mov	r18, r26
    7b3a:	33 27       	eor	r19, r19
    7b3c:	f9 01       	movw	r30, r18
    7b3e:	e5 0f       	add	r30, r21
    7b40:	f1 1d       	adc	r31, r1
    7b42:	e9 5d       	subi	r30, 0xD9	; 217
    7b44:	fb 4d       	sbci	r31, 0xDB	; 219
    7b46:	94 91       	lpm	r25, Z
    7b48:	f9 01       	movw	r30, r18
    7b4a:	e4 0f       	add	r30, r20
    7b4c:	f1 1d       	adc	r31, r1
    7b4e:	e9 5b       	subi	r30, 0xB9	; 185
    7b50:	fd 4d       	sbci	r31, 0xDD	; 221
    7b52:	84 91       	lpm	r24, Z
    7b54:	89 0f       	add	r24, r25
    7b56:	91 2d       	mov	r25, r1
    7b58:	91 1d       	adc	r25, r1
    7b5a:	88 97       	sbiw	r24, 0x28	; 40
    7b5c:	54 f5       	brge	.+84     	; 0x7bb2 <__vector_15+0xd02>
			PWM_BLUE  = PWM_TOP ;
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[6][BLUE][g_speed6rev+g_position]);	
    7b5e:	80 91 27 01 	lds	r24, 0x0127
    7b62:	28 0f       	add	r18, r24
    7b64:	31 1d       	adc	r19, r1
    7b66:	29 53       	subi	r18, 0x39	; 57
    7b68:	39 4a       	sbci	r19, 0xA9	; 169
    7b6a:	f9 01       	movw	r30, r18
    7b6c:	84 91       	lpm	r24, Z
    7b6e:	0c 94 1c 46 	jmp	0x8c38 <__vector_15+0x1d88>
		break;	
						
				
		//case 52:				// background is changing 4 synthesis rainbow
		//	seconds_hand=0;
		//	
		//	if ((pgm_read_byte(&gm_background[7][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[7][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_RED = PWM_TOP ;
		//	else
		//	PWM_RED =  pgm_read_byte(&gc_background[0][RED][g_speed6rev+g_position]);
		//		
		//	if ((pgm_read_byte(&gm_background[7][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[7][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_GREEN = PWM_TOP ;
		//	else
		//	PWM_GREEN =  pgm_read_byte(&gc_background[0][GREEN][g_speed6rev+g_position]);
		//		
		//	if ((pgm_read_byte(&gm_background[7][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[7][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_BLUE  = PWM_TOP ;
		//	else
		//	PWM_BLUE =  pgm_read_byte(&gc_background[0][BLUE][g_speed6rev+g_position]);	
		//break;		
			
		//case 51:				// background is changing 4 synthesis windows
		//	seconds_hand=0;
		//	
		//	if ((pgm_read_byte(&gm_background[7][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[7][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_RED = PWM_TOP ;
		//	else
		//	PWM_RED =  pgm_read_byte(&gc_background[7][RED][g_speed6rev+g_position]);
		//		
		//	if ((pgm_read_byte(&gm_background[7][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[7][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_GREEN = PWM_TOP ;
		//	else
		//	PWM_GREEN =  pgm_read_byte(&gc_background[7][GREEN][g_speed6rev+g_position]);
		//		
		//	if ((pgm_read_byte(&gm_background[7][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[7][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_BLUE  = PWM_TOP ;
		//	else
		//	PWM_BLUE =  pgm_read_byte(&gc_background[7][BLUE][g_speed6rev+g_position]);	
		//break;		

	
	
		
		//case 50:				// background is changing 4 synthesis africa
		//	seconds_hand=0;
			
		//	if ((pgm_read_byte(&gm_background[7][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[7][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_RED = PWM_TOP ;
		//	else
		//	PWM_RED =  pgm_read_byte(&gc_background[6][RED][g_speed6rev+g_position]);
				
		//	if ((pgm_read_byte(&gm_background[7][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[7][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_GREEN = PWM_TOP ;
		//	else
		//	PWM_GREEN =  pgm_read_byte(&gc_background[6][GREEN][g_speed6rev+g_position]);
				
		//	if ((pgm_read_byte(&gm_background[7][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[7][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_BLUE  = PWM_TOP ;
		//	else
		//	PWM_BLUE =  pgm_read_byte(&gc_background[6][BLUE][g_speed6rev+g_position]);	
		//break;	

		//case 49:				// background is changing 7 rainbow mask black
		//	seconds_hand=0;	
		//	
		//	if ((pgm_read_byte(&gm_background[6][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[6][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_RED =  pgm_read_byte(&gc_background[0][RED][g_speed6rev+g_position]);
		//	else
		//	PWM_RED = PWM_TOP ;
		//		
		//	if ((pgm_read_byte(&gm_background[6][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[6][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_GREEN =  pgm_read_byte(&gc_background[0][GREEN][g_speed6rev+g_position]);
		//	else
		//	PWM_GREEN = PWM_TOP ;
		//		
		//	if ((pgm_read_byte(&gm_background[6][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[6][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_BLUE =  pgm_read_byte(&gc_background[0][BLUE][g_speed6rev+g_position]);
		//	else
		//	PWM_BLUE  = PWM_TOP ;
		//break;
		
		//case 48:				// background is changing africa 7 windows mask black
		//	seconds_hand=0;
		//		
		//	if ((pgm_read_byte(&gm_background[6][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[6][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_RED =  pgm_read_byte(&gc_background[7][RED][g_speed6rev+g_position]);
		//	else
		//	PWM_RED = PWM_TOP ;
		//		
		//	if ((pgm_read_byte(&gm_background[6][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[6][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_GREEN =  pgm_read_byte(&gc_background[7][GREEN][g_speed6rev+g_position]);
		//	else
		//	PWM_GREEN = PWM_TOP ;
		//		
		//	if ((pgm_read_byte(&gm_background[6][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[6][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_BLUE =  pgm_read_byte(&gc_background[7][BLUE][g_speed6rev+g_position]);
		//	else
		//	PWM_BLUE  = PWM_TOP ;
		//break;
		
		//case 47:				// background is changing africa 7 mask black
		//	seconds_hand=0;
		//		
		//	if ((pgm_read_byte(&gm_background[6][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[6][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_RED =  pgm_read_byte(&gc_background[6][RED][g_speed6rev+g_position]);
		//	else
		//	PWM_RED = PWM_TOP ;
		//		
		//	if ((pgm_read_byte(&gm_background[6][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[6][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_GREEN =  pgm_read_byte(&gc_background[6][GREEN][g_speed6rev+g_position]);
		//	else
		//	PWM_GREEN = PWM_TOP ;
		//		
		//	if ((pgm_read_byte(&gm_background[6][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[6][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_BLUE =  pgm_read_byte(&gc_background[6][BLUE][g_speed6rev+g_position]);
		//	else
		//	PWM_BLUE  = PWM_TOP ;
		//break;
		
		//case 46:				// background is changing rainbow 5 mask black
		//	seconds_hand=0;
		//		
		//	if ((pgm_read_byte(&gm_background[5][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[5][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_RED =  pgm_read_byte(&gc_background[0][RED][g_speed6rev+g_position]);
		//	else
		//	PWM_RED = PWM_TOP ;
		//		
		//	if ((pgm_read_byte(&gm_background[5][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[5][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_GREEN =  pgm_read_byte(&gc_background[0][GREEN][g_speed6rev+g_position]);
		//	else
		//	PWM_GREEN = PWM_TOP ;
		//		
		//	if ((pgm_read_byte(&gm_background[5][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[5][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_BLUE =  pgm_read_byte(&gc_background[0][BLUE][g_speed6rev+g_position]);
		//	else
		//	PWM_BLUE  = PWM_TOP ;
		//break;

		
		
		//case 45:				// background is changing windows 5 mask black
		//	seconds_hand=0;
		//		
		//	if ((pgm_read_byte(&gm_background[5][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[5][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_RED =  pgm_read_byte(&gc_background[7][RED][g_speed6rev+g_position]);
		//	else
		//	PWM_RED = PWM_TOP ;
		//		
		//	if ((pgm_read_byte(&gm_background[5][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[5][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_GREEN =  pgm_read_byte(&gc_background[7][GREEN][g_speed6rev+g_position]);
		//	else
		//	PWM_GREEN = PWM_TOP ;
		//		
		//	if ((pgm_read_byte(&gm_background[5][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[5][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_BLUE =  pgm_read_byte(&gc_background[7][BLUE][g_speed6rev+g_position]);
		//	else
		//	PWM_BLUE  = PWM_TOP ;
		//break;
	
		
		
		//case 44:				// background is changing africa 5 mask black
		//	seconds_hand=0;
		//		
		//	if ((pgm_read_byte(&gm_background[5][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[5][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_RED =  pgm_read_byte(&gc_background[6][RED][g_speed6rev+g_position]);
		//	else
		//	PWM_RED = PWM_TOP ;
		//		
		//	if ((pgm_read_byte(&gm_background[5][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[5][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_GREEN =  pgm_read_byte(&gc_background[6][GREEN][g_speed6rev+g_position]);
		//	else
		//	PWM_GREEN = PWM_TOP ;
		//		
		//	if ((pgm_read_byte(&gm_background[5][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[5][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_BLUE =  pgm_read_byte(&gc_background[6][BLUE][g_speed6rev+g_position]);
		//	else
		//	PWM_BLUE  = PWM_TOP ;
		//break;
			
			
		case 28:				// background is changing sonar green with black lines
			seconds_hand=1;	
    7b72:	81 e0       	ldi	r24, 0x01	; 1
    7b74:	80 93 25 01 	sts	0x0125, r24
			
			if (g_position % 20 == 0)
    7b78:	8a 2f       	mov	r24, r26
    7b7a:	64 e1       	ldi	r22, 0x14	; 20
    7b7c:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    7b80:	99 23       	and	r25, r25
    7b82:	11 f4       	brne	.+4      	; 0x7b88 <__vector_15+0xcd8>
    7b84:	0c 94 db 45 	jmp	0x8bb6 <__vector_15+0x1d06>
			{
				PWM_RED = PWM_TOP;
				PWM_GREEN = PWM_TOP;
				PWM_BLUE = PWM_TOP;
			}	
			else
			{	
			PWM_RED = PWM_TOP;
    7b88:	87 e2       	ldi	r24, 0x27	; 39
    7b8a:	90 e0       	ldi	r25, 0x00	; 0
    7b8c:	9b bd       	out	0x2b, r25	; 43
    7b8e:	8a bd       	out	0x2a, r24	; 42
			if (pgm_read_byte(&gm_background[1][GREEN][g_speed6rev+g_position]) == 0x01)
    7b90:	80 91 27 01 	lds	r24, 0x0127
    7b94:	28 2f       	mov	r18, r24
    7b96:	2a 0f       	add	r18, r26
    7b98:	31 2d       	mov	r19, r1
    7b9a:	31 1d       	adc	r19, r1
    7b9c:	f9 01       	movw	r30, r18
    7b9e:	e9 51       	subi	r30, 0x19	; 25
    7ba0:	f6 4f       	sbci	r31, 0xF6	; 246
    7ba2:	24 91       	lpm	r18, Z
    7ba4:	1b c0       	rjmp	.+54     	; 0x7bdc <__vector_15+0xd2c>
			PWM_GREEN = 0x22;
			else
			PWM_GREEN = 0x22 - pgm_read_byte(&gm_background[1][GREEN][g_speed6rev+g_position]);
    7ba6:	82 e2       	ldi	r24, 0x22	; 34
    7ba8:	90 e0       	ldi	r25, 0x00	; 0
    7baa:	82 1b       	sub	r24, r18
    7bac:	91 09       	sbc	r25, r1
    7bae:	99 bd       	out	0x29, r25	; 41
    7bb0:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = PWM_TOP;
    7bb2:	87 e2       	ldi	r24, 0x27	; 39
    7bb4:	90 e0       	ldi	r25, 0x00	; 0
    7bb6:	0c 94 1d 46 	jmp	0x8c3a <__vector_15+0x1d8a>
			}
			
		break;

		case 27:				// background is changing sonar green
			seconds_hand=1;	
    7bba:	81 e0       	ldi	r24, 0x01	; 1
    7bbc:	80 93 25 01 	sts	0x0125, r24
			
			PWM_RED = PWM_TOP;
    7bc0:	87 e2       	ldi	r24, 0x27	; 39
    7bc2:	90 e0       	ldi	r25, 0x00	; 0
    7bc4:	9b bd       	out	0x2b, r25	; 43
    7bc6:	8a bd       	out	0x2a, r24	; 42
			if (pgm_read_byte(&gm_background[1][GREEN][g_speed6rev+g_position]) == 0x01)
    7bc8:	80 91 27 01 	lds	r24, 0x0127
    7bcc:	48 2f       	mov	r20, r24
    7bce:	4a 0f       	add	r20, r26
    7bd0:	51 2d       	mov	r21, r1
    7bd2:	51 1d       	adc	r21, r1
    7bd4:	fa 01       	movw	r30, r20
    7bd6:	e9 51       	subi	r30, 0x19	; 25
    7bd8:	f6 4f       	sbci	r31, 0xF6	; 246
    7bda:	24 91       	lpm	r18, Z
    7bdc:	21 30       	cpi	r18, 0x01	; 1
    7bde:	19 f7       	brne	.-58     	; 0x7ba6 <__vector_15+0xcf6>
			PWM_GREEN = 0x22;
    7be0:	82 e2       	ldi	r24, 0x22	; 34
    7be2:	90 e0       	ldi	r25, 0x00	; 0
    7be4:	e4 cf       	rjmp	.-56     	; 0x7bae <__vector_15+0xcfe>
			else
			PWM_GREEN = 0x22 - pgm_read_byte(&gm_background[1][GREEN][g_speed6rev+g_position]);
			PWM_BLUE = PWM_TOP;
		break;		
			
		case 26:				// background is changing radioactive synthesis
			seconds_hand=1;	
    7be6:	81 e0       	ldi	r24, 0x01	; 1
    7be8:	80 93 25 01 	sts	0x0125, r24
			
			if ((pgm_read_byte(&gm_background[4][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[4][RED][g_speed6+g_position])) > PWM_TOP)
    7bec:	40 91 2c 01 	lds	r20, 0x012C
    7bf0:	8a 2f       	mov	r24, r26
    7bf2:	99 27       	eor	r25, r25
    7bf4:	fc 01       	movw	r30, r24
    7bf6:	e4 0f       	add	r30, r20
    7bf8:	f1 1d       	adc	r31, r1
    7bfa:	e9 5d       	subi	r30, 0xD9	; 217
    7bfc:	fa 4e       	sbci	r31, 0xEA	; 234
    7bfe:	24 91       	lpm	r18, Z
    7c00:	30 91 43 01 	lds	r19, 0x0143
    7c04:	83 0f       	add	r24, r19
    7c06:	91 1d       	adc	r25, r1
    7c08:	89 5b       	subi	r24, 0xB9	; 185
    7c0a:	9c 4e       	sbci	r25, 0xEC	; 236
    7c0c:	fc 01       	movw	r30, r24
    7c0e:	84 91       	lpm	r24, Z
    7c10:	82 0f       	add	r24, r18
    7c12:	91 2d       	mov	r25, r1
    7c14:	91 1d       	adc	r25, r1
    7c16:	88 97       	sbiw	r24, 0x28	; 40
    7c18:	1c f0       	brlt	.+6      	; 0x7c20 <__vector_15+0xd70>
			PWM_RED =  0x00; 
    7c1a:	1b bc       	out	0x2b, r1	; 43
    7c1c:	1a bc       	out	0x2a, r1	; 42
    7c1e:	04 c0       	rjmp	.+8      	; 0x7c28 <__vector_15+0xd78>
			else
			PWM_RED = PWM_TOP ;
    7c20:	87 e2       	ldi	r24, 0x27	; 39
    7c22:	90 e0       	ldi	r25, 0x00	; 0
    7c24:	9b bd       	out	0x2b, r25	; 43
    7c26:	8a bd       	out	0x2a, r24	; 42
				
			if ((pgm_read_byte(&gm_background[4][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[4][RED][g_speed6+g_position])) > PWM_TOP)
    7c28:	8a 2f       	mov	r24, r26
    7c2a:	99 27       	eor	r25, r25
    7c2c:	fc 01       	movw	r30, r24
    7c2e:	e4 0f       	add	r30, r20
    7c30:	f1 1d       	adc	r31, r1
    7c32:	e9 5d       	subi	r30, 0xD9	; 217
    7c34:	fa 4e       	sbci	r31, 0xEA	; 234
    7c36:	24 91       	lpm	r18, Z
    7c38:	83 0f       	add	r24, r19
    7c3a:	91 1d       	adc	r25, r1
    7c3c:	89 5b       	subi	r24, 0xB9	; 185
    7c3e:	9c 4e       	sbci	r25, 0xEC	; 236
    7c40:	fc 01       	movw	r30, r24
    7c42:	84 91       	lpm	r24, Z
    7c44:	82 0f       	add	r24, r18
    7c46:	91 2d       	mov	r25, r1
    7c48:	91 1d       	adc	r25, r1
    7c4a:	88 97       	sbiw	r24, 0x28	; 40
    7c4c:	0c f4       	brge	.+2      	; 0x7c50 <__vector_15+0xda0>
    7c4e:	bc c0       	rjmp	.+376    	; 0x7dc8 <__vector_15+0xf18>
			PWM_GREEN =  0x00; 
    7c50:	19 bc       	out	0x29, r1	; 41
    7c52:	18 bc       	out	0x28, r1	; 40
    7c54:	ae cf       	rjmp	.-164    	; 0x7bb2 <__vector_15+0xd02>
			else
			PWM_GREEN = PWM_TOP ;
				
			PWM_BLUE  = PWM_TOP ;
		break;
			
		case 25:				// background is changing, radioactivity semi random
			seconds_hand=1;		
    7c56:	81 e0       	ldi	r24, 0x01	; 1
    7c58:	80 93 25 01 	sts	0x0125, r24
				//red radioactivity or black
			if ((g_speedrandom < 37) && (g_speedrandom>7) && (g_minutes%7==0))
    7c5c:	20 91 2a 01 	lds	r18, 0x012A
    7c60:	82 2f       	mov	r24, r18
    7c62:	88 50       	subi	r24, 0x08	; 8
    7c64:	8d 31       	cpi	r24, 0x1D	; 29
    7c66:	40 f5       	brcc	.+80     	; 0x7cb8 <__vector_15+0xe08>
    7c68:	80 91 22 01 	lds	r24, 0x0122
    7c6c:	67 e0       	ldi	r22, 0x07	; 7
    7c6e:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    7c72:	99 23       	and	r25, r25
    7c74:	09 f5       	brne	.+66     	; 0x7cb8 <__vector_15+0xe08>
			{
			if (pgm_read_byte(&gc_background[1][RED][g_position+100])==0x00)
    7c76:	20 91 40 01 	lds	r18, 0x0140
    7c7a:	e2 2f       	mov	r30, r18
    7c7c:	ff 27       	eor	r31, r31
    7c7e:	e5 5b       	subi	r30, 0xB5	; 181
    7c80:	f8 4c       	sbci	r31, 0xC8	; 200
    7c82:	84 91       	lpm	r24, Z
    7c84:	88 23       	and	r24, r24
    7c86:	19 f4       	brne	.+6      	; 0x7c8e <__vector_15+0xdde>
			PWM_RED = 0x17;
    7c88:	87 e1       	ldi	r24, 0x17	; 23
    7c8a:	90 e0       	ldi	r25, 0x00	; 0
    7c8c:	02 c0       	rjmp	.+4      	; 0x7c92 <__vector_15+0xde2>
			else
			PWM_RED = PWM_TOP ;
    7c8e:	87 e2       	ldi	r24, 0x27	; 39
    7c90:	90 e0       	ldi	r25, 0x00	; 0
    7c92:	9b bd       	out	0x2b, r25	; 43
    7c94:	8a bd       	out	0x2a, r24	; 42
			//PWM_GREEN = PWM_TOP ;
			//PWM_BLUE  = PWM_TOP ;
			PWM_GREEN = pgm_read_byte(&gc_background[1][BLUE][g_position+20]);
    7c96:	e2 2f       	mov	r30, r18
    7c98:	ff 27       	eor	r31, r31
    7c9a:	e5 54       	subi	r30, 0x45	; 69
    7c9c:	f5 4c       	sbci	r31, 0xC5	; 197
    7c9e:	84 91       	lpm	r24, Z
    7ca0:	99 27       	eor	r25, r25
    7ca2:	99 bd       	out	0x29, r25	; 41
    7ca4:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[1][BLUE][g_position+20]);
    7ca6:	90 93 79 00 	sts	0x0079, r25
    7caa:	80 93 78 00 	sts	0x0078, r24
			radioactivity=1;
    7cae:	81 e0       	ldi	r24, 0x01	; 1
    7cb0:	80 93 41 01 	sts	0x0141, r24
    7cb4:	0c 94 21 46 	jmp	0x8c42 <__vector_15+0x1d92>
			}
			else
			{
			PWM_RED = pgm_read_byte(&gc_background[1][RED][g_speedrandom+g_position]);
    7cb8:	80 91 40 01 	lds	r24, 0x0140
    7cbc:	28 0f       	add	r18, r24
    7cbe:	31 2d       	mov	r19, r1
    7cc0:	31 1d       	adc	r19, r1
    7cc2:	f9 01       	movw	r30, r18
    7cc4:	e9 51       	subi	r30, 0x19	; 25
    7cc6:	f9 4c       	sbci	r31, 0xC9	; 201
    7cc8:	84 91       	lpm	r24, Z
    7cca:	99 27       	eor	r25, r25
    7ccc:	9b bd       	out	0x2b, r25	; 43
    7cce:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[1][GREEN][g_speedrandom+g_position]);
    7cd0:	f9 01       	movw	r30, r18
    7cd2:	e9 53       	subi	r30, 0x39	; 57
    7cd4:	f7 4c       	sbci	r31, 0xC7	; 199
    7cd6:	84 91       	lpm	r24, Z
    7cd8:	99 27       	eor	r25, r25
    7cda:	99 bd       	out	0x29, r25	; 41
    7cdc:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[1][BLUE][g_speedrandom+g_position]);
    7cde:	29 55       	subi	r18, 0x59	; 89
    7ce0:	35 4c       	sbci	r19, 0xC5	; 197
    7ce2:	f9 01       	movw	r30, r18
    7ce4:	84 91       	lpm	r24, Z
    7ce6:	99 27       	eor	r25, r25
    7ce8:	90 93 79 00 	sts	0x0079, r25
    7cec:	80 93 78 00 	sts	0x0078, r24
			radioactivity=0;
    7cf0:	10 92 41 01 	sts	0x0141, r1
			}
			
		break;
    7cf4:	0c 94 21 46 	jmp	0x8c42 <__vector_15+0x1d92>
				
		case 24:				// background is changing pacman
			seconds_hand=0;		
    7cf8:	10 92 25 01 	sts	0x0125, r1
			//pacman open and shuts horizontally or vertically
			
			if (g_minutes%5 == 0)
    7cfc:	80 91 22 01 	lds	r24, 0x0122
    7d00:	65 e0       	ldi	r22, 0x05	; 5
    7d02:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    7d06:	a0 91 40 01 	lds	r26, 0x0140
    7d0a:	30 91 37 01 	lds	r19, 0x0137
    7d0e:	40 91 3b 01 	lds	r20, 0x013B
    7d12:	99 23       	and	r25, r25
    7d14:	51 f5       	brne	.+84     	; 0x7d6a <__vector_15+0xeba>
			{
			
			//black mouth
				if ((pgm_read_byte(&gm_background[2][RED][g_speed3rev+g_position]) + pgm_read_byte(&gm_background[2][RED][g_speed3+g_position])) == 2*PWM_TOP)
    7d16:	8a 2f       	mov	r24, r26
    7d18:	99 27       	eor	r25, r25
    7d1a:	fc 01       	movw	r30, r24
    7d1c:	e3 0f       	add	r30, r19
    7d1e:	f1 1d       	adc	r31, r1
    7d20:	e9 53       	subi	r30, 0x39	; 57
    7d22:	f4 4f       	sbci	r31, 0xF4	; 244
    7d24:	24 91       	lpm	r18, Z
    7d26:	84 0f       	add	r24, r20
    7d28:	91 1d       	adc	r25, r1
    7d2a:	89 53       	subi	r24, 0x39	; 57
    7d2c:	94 4f       	sbci	r25, 0xF4	; 244
    7d2e:	fc 01       	movw	r30, r24
    7d30:	84 91       	lpm	r24, Z
    7d32:	82 0f       	add	r24, r18
    7d34:	91 2d       	mov	r25, r1
    7d36:	91 1d       	adc	r25, r1
    7d38:	8e 34       	cpi	r24, 0x4E	; 78
    7d3a:	91 05       	cpc	r25, r1
    7d3c:	19 f4       	brne	.+6      	; 0x7d44 <__vector_15+0xe94>
				PWM_RED = PWM_TOP;
    7d3e:	87 e2       	ldi	r24, 0x27	; 39
    7d40:	90 e0       	ldi	r25, 0x00	; 0
    7d42:	02 c0       	rjmp	.+4      	; 0x7d48 <__vector_15+0xe98>
				//red lips
				//else if (( pgm_read_byte(&gm_background[2][GREEN][g_speed3rev+g_position+pacmandir]) + pgm_read_byte(&gm_background[2][RED][g_speed3+g_position+pacmandir])) == 0x4d)
				//PWM_RED = 0x00 ;
				else
				PWM_RED = 0x10 ;
    7d44:	80 e1       	ldi	r24, 0x10	; 16
    7d46:	90 e0       	ldi	r25, 0x00	; 0
    7d48:	9b bd       	out	0x2b, r25	; 43
    7d4a:	8a bd       	out	0x2a, r24	; 42
				//black mouth
				if ((pgm_read_byte(&gm_background[2][RED][g_speed3rev+g_position]) + pgm_read_byte(&gm_background[2][RED][g_speed3+g_position])) == 2*PWM_TOP)
    7d4c:	8a 2f       	mov	r24, r26
    7d4e:	99 27       	eor	r25, r25
    7d50:	fc 01       	movw	r30, r24
    7d52:	e3 0f       	add	r30, r19
    7d54:	f1 1d       	adc	r31, r1
    7d56:	e9 53       	subi	r30, 0x39	; 57
    7d58:	f4 4f       	sbci	r31, 0xF4	; 244
    7d5a:	24 91       	lpm	r18, Z
    7d5c:	84 0f       	add	r24, r20
    7d5e:	91 1d       	adc	r25, r1
    7d60:	89 53       	subi	r24, 0x39	; 57
    7d62:	94 4f       	sbci	r25, 0xF4	; 244
    7d64:	fc 01       	movw	r30, r24
    7d66:	84 91       	lpm	r24, Z
    7d68:	29 c0       	rjmp	.+82     	; 0x7dbc <__vector_15+0xf0c>
				PWM_GREEN = PWM_TOP;
				//red lips
				//else if (( pgm_read_byte(&gm_background[2][GREEN][g_speed3rev+g_position+pacmandir]) + pgm_read_byte(&gm_background[2][RED][g_speed3+g_position+pacmandir])) == 0x4d)
				//PWM_GREEN = PWM_TOP ;
				else
				PWM_GREEN = 0x10 ;
				
				PWM_BLUE = PWM_TOP;
			}
			else
			{
				//black mouth
				if ((pgm_read_byte(&gm_background[2][GREEN][g_speed3rev+g_position]) + pgm_read_byte(&gm_background[2][RED][g_speed3+g_position])) == 2*PWM_TOP)
    7d6a:	8a 2f       	mov	r24, r26
    7d6c:	99 27       	eor	r25, r25
    7d6e:	fc 01       	movw	r30, r24
    7d70:	e3 0f       	add	r30, r19
    7d72:	f1 1d       	adc	r31, r1
    7d74:	e9 55       	subi	r30, 0x59	; 89
    7d76:	f2 4f       	sbci	r31, 0xF2	; 242
    7d78:	24 91       	lpm	r18, Z
    7d7a:	84 0f       	add	r24, r20
    7d7c:	91 1d       	adc	r25, r1
    7d7e:	89 53       	subi	r24, 0x39	; 57
    7d80:	94 4f       	sbci	r25, 0xF4	; 244
    7d82:	fc 01       	movw	r30, r24
    7d84:	84 91       	lpm	r24, Z
    7d86:	82 0f       	add	r24, r18
    7d88:	91 2d       	mov	r25, r1
    7d8a:	91 1d       	adc	r25, r1
    7d8c:	8e 34       	cpi	r24, 0x4E	; 78
    7d8e:	91 05       	cpc	r25, r1
    7d90:	19 f4       	brne	.+6      	; 0x7d98 <__vector_15+0xee8>
				PWM_RED = PWM_TOP;
    7d92:	87 e2       	ldi	r24, 0x27	; 39
    7d94:	90 e0       	ldi	r25, 0x00	; 0
    7d96:	02 c0       	rjmp	.+4      	; 0x7d9c <__vector_15+0xeec>
				//red lips
				//else if (( pgm_read_byte(&gm_background[2][GREEN][g_speed3rev+g_position+pacmandir]) + pgm_read_byte(&gm_background[2][RED][g_speed3+g_position+pacmandir])) == 0x4d)
				//PWM_RED = 0x00 ;
				else
				PWM_RED = 0x10 ;
    7d98:	80 e1       	ldi	r24, 0x10	; 16
    7d9a:	90 e0       	ldi	r25, 0x00	; 0
    7d9c:	9b bd       	out	0x2b, r25	; 43
    7d9e:	8a bd       	out	0x2a, r24	; 42
				//black mouth
				if ((pgm_read_byte(&gm_background[2][GREEN][g_speed3rev+g_position]) + pgm_read_byte(&gm_background[2][RED][g_speed3+g_position])) == 2*PWM_TOP)
    7da0:	8a 2f       	mov	r24, r26
    7da2:	99 27       	eor	r25, r25
    7da4:	fc 01       	movw	r30, r24
    7da6:	e3 0f       	add	r30, r19
    7da8:	f1 1d       	adc	r31, r1
    7daa:	e9 55       	subi	r30, 0x59	; 89
    7dac:	f2 4f       	sbci	r31, 0xF2	; 242
    7dae:	24 91       	lpm	r18, Z
    7db0:	84 0f       	add	r24, r20
    7db2:	91 1d       	adc	r25, r1
    7db4:	89 53       	subi	r24, 0x39	; 57
    7db6:	94 4f       	sbci	r25, 0xF4	; 244
    7db8:	fc 01       	movw	r30, r24
    7dba:	84 91       	lpm	r24, Z
    7dbc:	82 0f       	add	r24, r18
    7dbe:	91 2d       	mov	r25, r1
    7dc0:	91 1d       	adc	r25, r1
    7dc2:	8e 34       	cpi	r24, 0x4E	; 78
    7dc4:	91 05       	cpc	r25, r1
    7dc6:	19 f4       	brne	.+6      	; 0x7dce <__vector_15+0xf1e>
				PWM_GREEN = PWM_TOP;
    7dc8:	87 e2       	ldi	r24, 0x27	; 39
    7dca:	90 e0       	ldi	r25, 0x00	; 0
    7dcc:	f0 ce       	rjmp	.-544    	; 0x7bae <__vector_15+0xcfe>
				//red lips
				//else if (( pgm_read_byte(&gm_background[2][GREEN][g_speed3rev+g_position+pacmandir]) + pgm_read_byte(&gm_background[2][RED][g_speed3+g_position+pacmandir])) == 0x4d)
				//PWM_GREEN = PWM_TOP ;
				else
				PWM_GREEN = 0x10 ;
    7dce:	80 e1       	ldi	r24, 0x10	; 16
    7dd0:	90 e0       	ldi	r25, 0x00	; 0
    7dd2:	ed ce       	rjmp	.-550    	; 0x7bae <__vector_15+0xcfe>
				
				PWM_BLUE = PWM_TOP;
			}
			
		break;
				
		case 23:				// background is changing, umbrella corp.
			seconds_hand=1;				
    7dd4:	81 e0       	ldi	r24, 0x01	; 1
    7dd6:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&gc_background[5][RED][g_speedrandom+g_position]);
    7dda:	80 91 2a 01 	lds	r24, 0x012A
    7dde:	48 2f       	mov	r20, r24
    7de0:	4a 0f       	add	r20, r26
    7de2:	51 2d       	mov	r21, r1
    7de4:	51 1d       	adc	r21, r1
    7de6:	9a 01       	movw	r18, r20
    7de8:	fa 01       	movw	r30, r20
    7dea:	e9 59       	subi	r30, 0x99	; 153
    7dec:	f2 4b       	sbci	r31, 0xB2	; 178
    7dee:	84 91       	lpm	r24, Z
    7df0:	99 27       	eor	r25, r25
    7df2:	9b bd       	out	0x2b, r25	; 43
    7df4:	8a bd       	out	0x2a, r24	; 42
			PWM_GREEN = pgm_read_byte(&gc_background[5][GREEN][g_speedrandom+g_position]);
    7df6:	fa 01       	movw	r30, r20
    7df8:	e9 5b       	subi	r30, 0xB9	; 185
    7dfa:	f0 4b       	sbci	r31, 0xB0	; 176
    7dfc:	84 91       	lpm	r24, Z
    7dfe:	99 27       	eor	r25, r25
    7e00:	99 bd       	out	0x29, r25	; 41
    7e02:	88 bd       	out	0x28, r24	; 40
			PWM_BLUE = pgm_read_byte(&gc_background[5][BLUE][g_speedrandom+g_position]);
    7e04:	29 5d       	subi	r18, 0xD9	; 217
    7e06:	3e 4a       	sbci	r19, 0xAE	; 174
    7e08:	f9 01       	movw	r30, r18
    7e0a:	84 91       	lpm	r24, Z
    7e0c:	0c 94 1c 46 	jmp	0x8c38 <__vector_15+0x1d88>
		break;
		
		case 22:				// background is changing LSD, or kaleidoscope mode with pacyfic
			seconds_hand=0;
    7e10:	10 92 25 01 	sts	0x0125, r1
			if (pgm_read_byte(&gc_background[0][RED][g_speed3+g_position]) + pgm_read_byte(&gc_background[4][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[1][RED][g_speed7+g_position]) < PWM_TOP)
    7e14:	b0 91 3b 01 	lds	r27, 0x013B
    7e18:	4a 2f       	mov	r20, r26
    7e1a:	55 27       	eor	r21, r21
    7e1c:	fa 01       	movw	r30, r20
    7e1e:	eb 0f       	add	r30, r27
    7e20:	f1 1d       	adc	r31, r1
    7e22:	e9 5b       	subi	r30, 0xB9	; 185
    7e24:	fe 4c       	sbci	r31, 0xCE	; 206
    7e26:	34 91       	lpm	r19, Z
    7e28:	70 91 2c 01 	lds	r23, 0x012C
    7e2c:	ca 01       	movw	r24, r20
    7e2e:	87 0f       	add	r24, r23
    7e30:	91 1d       	adc	r25, r1
    7e32:	fc 01       	movw	r30, r24
    7e34:	e9 55       	subi	r30, 0x59	; 89
    7e36:	f6 4b       	sbci	r31, 0xB6	; 182
    7e38:	24 91       	lpm	r18, Z
    7e3a:	23 0f       	add	r18, r19
    7e3c:	31 2d       	mov	r19, r1
    7e3e:	31 1d       	adc	r19, r1
    7e40:	89 5f       	subi	r24, 0xF9	; 249
    7e42:	97 4f       	sbci	r25, 0xF7	; 247
    7e44:	fc 01       	movw	r30, r24
    7e46:	64 91       	lpm	r22, Z
    7e48:	c9 01       	movw	r24, r18
    7e4a:	86 0f       	add	r24, r22
    7e4c:	91 1d       	adc	r25, r1
    7e4e:	87 97       	sbiw	r24, 0x27	; 39
    7e50:	1c f4       	brge	.+6      	; 0x7e58 <__vector_15+0xfa8>
			PWM_RED = pgm_read_byte(&gc_background[0][RED][g_speed3+g_position]) + pgm_read_byte(&gc_background[4][GREEN][g_speed7+g_position]);
    7e52:	3b bd       	out	0x2b, r19	; 43
    7e54:	2a bd       	out	0x2a, r18	; 42
    7e56:	13 c0       	rjmp	.+38     	; 0x7e7e <__vector_15+0xfce>
			//pacific sign
			else if (pgm_read_byte(&gm_background[1][RED][g_speed7+g_position]) == 0x26)
    7e58:	66 32       	cpi	r22, 0x26	; 38
    7e5a:	19 f4       	brne	.+6      	; 0x7e62 <__vector_15+0xfb2>
			PWM_RED = 0x22;
    7e5c:	82 e2       	ldi	r24, 0x22	; 34
    7e5e:	90 e0       	ldi	r25, 0x00	; 0
    7e60:	0c c0       	rjmp	.+24     	; 0x7e7a <__vector_15+0xfca>
			else
			PWM_RED = PWM_TOP - pgm_read_byte(&gc_background[0][RED][g_speed7rev+g_position]);
    7e62:	80 91 4c 01 	lds	r24, 0x014C
    7e66:	48 0f       	add	r20, r24
    7e68:	51 1d       	adc	r21, r1
    7e6a:	49 5b       	subi	r20, 0xB9	; 185
    7e6c:	5e 4c       	sbci	r21, 0xCE	; 206
    7e6e:	fa 01       	movw	r30, r20
    7e70:	24 91       	lpm	r18, Z
    7e72:	87 e2       	ldi	r24, 0x27	; 39
    7e74:	90 e0       	ldi	r25, 0x00	; 0
    7e76:	82 1b       	sub	r24, r18
    7e78:	91 09       	sbc	r25, r1
    7e7a:	9b bd       	out	0x2b, r25	; 43
    7e7c:	8a bd       	out	0x2a, r24	; 42
				
			if (pgm_read_byte(&gc_background[0][GREEN][g_speed3+g_position]) + pgm_read_byte(&gc_background[4][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[1][RED][g_speed7+g_position]) < PWM_TOP)
    7e7e:	4a 2f       	mov	r20, r26
    7e80:	55 27       	eor	r21, r21
    7e82:	fa 01       	movw	r30, r20
    7e84:	eb 0f       	add	r30, r27
    7e86:	f1 1d       	adc	r31, r1
    7e88:	e9 5d       	subi	r30, 0xD9	; 217
    7e8a:	fc 4c       	sbci	r31, 0xCC	; 204
    7e8c:	34 91       	lpm	r19, Z
    7e8e:	ca 01       	movw	r24, r20
    7e90:	87 0f       	add	r24, r23
    7e92:	91 1d       	adc	r25, r1
    7e94:	fc 01       	movw	r30, r24
    7e96:	e9 55       	subi	r30, 0x59	; 89
    7e98:	f6 4b       	sbci	r31, 0xB6	; 182
    7e9a:	24 91       	lpm	r18, Z
    7e9c:	23 0f       	add	r18, r19
    7e9e:	31 2d       	mov	r19, r1
    7ea0:	31 1d       	adc	r19, r1
    7ea2:	89 5f       	subi	r24, 0xF9	; 249
    7ea4:	97 4f       	sbci	r25, 0xF7	; 247
    7ea6:	fc 01       	movw	r30, r24
    7ea8:	64 91       	lpm	r22, Z
    7eaa:	c9 01       	movw	r24, r18
    7eac:	86 0f       	add	r24, r22
    7eae:	91 1d       	adc	r25, r1
    7eb0:	87 97       	sbiw	r24, 0x27	; 39
    7eb2:	1c f4       	brge	.+6      	; 0x7eba <__vector_15+0x100a>
			PWM_GREEN = pgm_read_byte(&gc_background[0][GREEN][g_speed3+g_position]) + pgm_read_byte(&gc_background[4][GREEN][g_speed7+g_position]);
    7eb4:	39 bd       	out	0x29, r19	; 41
    7eb6:	28 bd       	out	0x28, r18	; 40
    7eb8:	13 c0       	rjmp	.+38     	; 0x7ee0 <__vector_15+0x1030>
			//pacific sign
			else if (pgm_read_byte(&gm_background[1][RED][g_speed7+g_position]) == 0x26)
    7eba:	66 32       	cpi	r22, 0x26	; 38
    7ebc:	19 f4       	brne	.+6      	; 0x7ec4 <__vector_15+0x1014>
			PWM_GREEN = 0x22;
    7ebe:	82 e2       	ldi	r24, 0x22	; 34
    7ec0:	90 e0       	ldi	r25, 0x00	; 0
    7ec2:	0c c0       	rjmp	.+24     	; 0x7edc <__vector_15+0x102c>
			else
			PWM_GREEN = PWM_TOP - pgm_read_byte(&gc_background[0][GREEN][g_speed7rev+g_position]);
    7ec4:	80 91 4c 01 	lds	r24, 0x014C
    7ec8:	48 0f       	add	r20, r24
    7eca:	51 1d       	adc	r21, r1
    7ecc:	49 5d       	subi	r20, 0xD9	; 217
    7ece:	5c 4c       	sbci	r21, 0xCC	; 204
    7ed0:	fa 01       	movw	r30, r20
    7ed2:	24 91       	lpm	r18, Z
    7ed4:	87 e2       	ldi	r24, 0x27	; 39
    7ed6:	90 e0       	ldi	r25, 0x00	; 0
    7ed8:	82 1b       	sub	r24, r18
    7eda:	91 09       	sbc	r25, r1
    7edc:	99 bd       	out	0x29, r25	; 41
    7ede:	88 bd       	out	0x28, r24	; 40
				
			if (pgm_read_byte(&gc_background[0][BLUE][g_speed3+g_position]) + pgm_read_byte(&gc_background[4][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[1][RED][g_speed7+g_position]) < PWM_TOP)
    7ee0:	4a 2f       	mov	r20, r26
    7ee2:	55 27       	eor	r21, r21
    7ee4:	fa 01       	movw	r30, r20
    7ee6:	eb 0f       	add	r30, r27
    7ee8:	f1 1d       	adc	r31, r1
    7eea:	e9 5f       	subi	r30, 0xF9	; 249
    7eec:	fa 4c       	sbci	r31, 0xCA	; 202
    7eee:	34 91       	lpm	r19, Z
    7ef0:	ca 01       	movw	r24, r20
    7ef2:	87 0f       	add	r24, r23
    7ef4:	91 1d       	adc	r25, r1
    7ef6:	fc 01       	movw	r30, r24
    7ef8:	e9 55       	subi	r30, 0x59	; 89
    7efa:	f6 4b       	sbci	r31, 0xB6	; 182
    7efc:	24 91       	lpm	r18, Z
    7efe:	23 0f       	add	r18, r19
    7f00:	31 2d       	mov	r19, r1
    7f02:	31 1d       	adc	r19, r1
    7f04:	89 5f       	subi	r24, 0xF9	; 249
    7f06:	97 4f       	sbci	r25, 0xF7	; 247
    7f08:	fc 01       	movw	r30, r24
    7f0a:	64 91       	lpm	r22, Z
    7f0c:	c9 01       	movw	r24, r18
    7f0e:	86 0f       	add	r24, r22
    7f10:	91 1d       	adc	r25, r1
    7f12:	87 97       	sbiw	r24, 0x27	; 39
    7f14:	34 f4       	brge	.+12     	; 0x7f22 <__vector_15+0x1072>
			PWM_BLUE = pgm_read_byte(&gc_background[0][BLUE][g_speed3+g_position]) + pgm_read_byte(&gc_background[4][GREEN][g_speed7+g_position]);
    7f16:	30 93 79 00 	sts	0x0079, r19
    7f1a:	20 93 78 00 	sts	0x0078, r18
    7f1e:	0c 94 21 46 	jmp	0x8c42 <__vector_15+0x1d92>
			//pacific sign
			else if (pgm_read_byte(&gm_background[1][RED][g_speed7+g_position]) == 0x26)
    7f22:	66 32       	cpi	r22, 0x26	; 38
    7f24:	19 f4       	brne	.+6      	; 0x7f2c <__vector_15+0x107c>
			PWM_BLUE = 0x22;
    7f26:	82 e2       	ldi	r24, 0x22	; 34
    7f28:	90 e0       	ldi	r25, 0x00	; 0
    7f2a:	87 c6       	rjmp	.+3342   	; 0x8c3a <__vector_15+0x1d8a>
			else
			PWM_BLUE = PWM_TOP - pgm_read_byte(&gc_background[0][BLUE][g_speed7rev+g_position]);
    7f2c:	80 91 4c 01 	lds	r24, 0x014C
    7f30:	48 0f       	add	r20, r24
    7f32:	51 1d       	adc	r21, r1
    7f34:	49 5f       	subi	r20, 0xF9	; 249
    7f36:	5a 4c       	sbci	r21, 0xCA	; 202
    7f38:	fa 01       	movw	r30, r20
    7f3a:	24 91       	lpm	r18, Z
    7f3c:	87 e2       	ldi	r24, 0x27	; 39
    7f3e:	90 e0       	ldi	r25, 0x00	; 0
    7f40:	82 1b       	sub	r24, r18
    7f42:	91 09       	sbc	r25, r1
    7f44:	7a c6       	rjmp	.+3316   	; 0x8c3a <__vector_15+0x1d8a>
			break;
		
		
				
		//case 37:				// background is changing android boot jb
		//	seconds_hand=0;
		//	if ((pgm_read_byte(&gm_background[3][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[3][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_RED =  pgm_read_byte(&gc_background[0][RED][g_speed6rev+g_position]);
		//	else
		//	PWM_RED = PWM_TOP ;
		//		
		//	if ((pgm_read_byte(&gm_background[3][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[3][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_GREEN =  pgm_read_byte(&gc_background[0][GREEN][g_speed6rev+g_position]);
		//	else
		//	PWM_GREEN = PWM_TOP ;
				
		//	if ((pgm_read_byte(&gm_background[3][GREEN][g_speed7+g_position]) + pgm_read_byte(&gm_background[3][RED][g_speed6+g_position])) > PWM_TOP)
		//	PWM_BLUE =  pgm_read_byte(&gc_background[0][BLUE][g_speed6rev+g_position]);
		//	else
		//	PWM_BLUE  = PWM_TOP ;
		//break;

		case 21:				// background is changing android loader 2 rainbow
			seconds_hand=0;		
    7f46:	10 92 25 01 	sts	0x0125, r1
			if ((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) == 0x27) && (pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position]) == 0x27) && ( abs(g_speed3rev-g_speed7rev)  <=1 ))
    7f4a:	b0 91 4c 01 	lds	r27, 0x014C
    7f4e:	6b 2f       	mov	r22, r27
    7f50:	77 27       	eor	r23, r23
    7f52:	4a 2f       	mov	r20, r26
    7f54:	55 27       	eor	r21, r21
    7f56:	fb 01       	movw	r30, r22
    7f58:	e4 0f       	add	r30, r20
    7f5a:	f5 1f       	adc	r31, r21
    7f5c:	e9 59       	subi	r30, 0x99	; 153
    7f5e:	f0 4d       	sbci	r31, 0xD0	; 208
    7f60:	84 91       	lpm	r24, Z
    7f62:	87 32       	cpi	r24, 0x27	; 39
    7f64:	61 f5       	brne	.+88     	; 0x7fbe <__vector_15+0x110e>
    7f66:	80 91 37 01 	lds	r24, 0x0137
    7f6a:	28 2f       	mov	r18, r24
    7f6c:	33 27       	eor	r19, r19
    7f6e:	f9 01       	movw	r30, r18
    7f70:	e4 0f       	add	r30, r20
    7f72:	f5 1f       	adc	r31, r21
    7f74:	e9 57       	subi	r30, 0x79	; 121
    7f76:	f2 4d       	sbci	r31, 0xD2	; 210
    7f78:	84 91       	lpm	r24, Z
    7f7a:	87 32       	cpi	r24, 0x27	; 39
    7f7c:	01 f5       	brne	.+64     	; 0x7fbe <__vector_15+0x110e>
    7f7e:	26 1b       	sub	r18, r22
    7f80:	37 0b       	sbc	r19, r23
    7f82:	2f 5f       	subi	r18, 0xFF	; 255
    7f84:	3f 4f       	sbci	r19, 0xFF	; 255
    7f86:	23 30       	cpi	r18, 0x03	; 3
    7f88:	31 05       	cpc	r19, r1
    7f8a:	c8 f4       	brcc	.+50     	; 0x7fbe <__vector_15+0x110e>
			{	
				if (abs(g_mark1-g_position)>6) 
    7f8c:	80 91 2b 01 	lds	r24, 0x012B
    7f90:	99 27       	eor	r25, r25
    7f92:	84 1b       	sub	r24, r20
    7f94:	95 0b       	sbc	r25, r21
    7f96:	97 ff       	sbrs	r25, 7
    7f98:	03 c0       	rjmp	.+6      	; 0x7fa0 <__vector_15+0x10f0>
    7f9a:	90 95       	com	r25
    7f9c:	81 95       	neg	r24
    7f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    7fa0:	07 97       	sbiw	r24, 0x07	; 7
    7fa2:	2c f0       	brlt	.+10     	; 0x7fae <__vector_15+0x10fe>
				g_mark++;
    7fa4:	80 91 0e 01 	lds	r24, 0x010E
    7fa8:	8f 5f       	subi	r24, 0xFF	; 255
    7faa:	80 93 0e 01 	sts	0x010E, r24
				if(g_mark >= 2)
    7fae:	80 91 0e 01 	lds	r24, 0x010E
    7fb2:	82 30       	cpi	r24, 0x02	; 2
    7fb4:	10 f0       	brcs	.+4      	; 0x7fba <__vector_15+0x110a>
				g_mark =0;
    7fb6:	10 92 0e 01 	sts	0x010E, r1
				g_mark1=g_position;
    7fba:	a0 93 2b 01 	sts	0x012B, r26
			}
		
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    7fbe:	2a 2f       	mov	r18, r26
    7fc0:	33 27       	eor	r19, r19
    7fc2:	f9 01       	movw	r30, r18
    7fc4:	eb 0f       	add	r30, r27
    7fc6:	f1 1d       	adc	r31, r1
    7fc8:	e9 59       	subi	r30, 0x99	; 153
    7fca:	f0 4d       	sbci	r31, 0xD0	; 208
    7fcc:	94 91       	lpm	r25, Z
    7fce:	40 91 37 01 	lds	r20, 0x0137
    7fd2:	f9 01       	movw	r30, r18
    7fd4:	e4 0f       	add	r30, r20
    7fd6:	f1 1d       	adc	r31, r1
    7fd8:	e9 57       	subi	r30, 0x79	; 121
    7fda:	f2 4d       	sbci	r31, 0xD2	; 210
    7fdc:	84 91       	lpm	r24, Z
    7fde:	89 0f       	add	r24, r25
    7fe0:	91 2d       	mov	r25, r1
    7fe2:	91 1d       	adc	r25, r1
    7fe4:	0a 97       	sbiw	r24, 0x0a	; 10
    7fe6:	69 f4       	brne	.+26     	; 0x8002 <__vector_15+0x1152>
    7fe8:	80 91 0e 01 	lds	r24, 0x010E
    7fec:	88 23       	and	r24, r24
    7fee:	49 f4       	brne	.+18     	; 0x8002 <__vector_15+0x1152>
			PWM_RED =  pgm_read_byte(&gc_background[0][RED][g_speed7+g_position]);
    7ff0:	80 91 2c 01 	lds	r24, 0x012C
    7ff4:	28 0f       	add	r18, r24
    7ff6:	31 1d       	adc	r19, r1
    7ff8:	29 5b       	subi	r18, 0xB9	; 185
    7ffa:	3e 4c       	sbci	r19, 0xCE	; 206
    7ffc:	f9 01       	movw	r30, r18
    7ffe:	84 91       	lpm	r24, Z
    8000:	1f c0       	rjmp	.+62     	; 0x8040 <__vector_15+0x1190>
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    8002:	2a 2f       	mov	r18, r26
    8004:	33 27       	eor	r19, r19
    8006:	f9 01       	movw	r30, r18
    8008:	eb 0f       	add	r30, r27
    800a:	f1 1d       	adc	r31, r1
    800c:	e9 59       	subi	r30, 0x99	; 153
    800e:	f0 4d       	sbci	r31, 0xD0	; 208
    8010:	94 91       	lpm	r25, Z
    8012:	f9 01       	movw	r30, r18
    8014:	e4 0f       	add	r30, r20
    8016:	f1 1d       	adc	r31, r1
    8018:	e9 57       	subi	r30, 0x79	; 121
    801a:	f2 4d       	sbci	r31, 0xD2	; 210
    801c:	84 91       	lpm	r24, Z
    801e:	89 0f       	add	r24, r25
    8020:	91 2d       	mov	r25, r1
    8022:	91 1d       	adc	r25, r1
    8024:	0c 97       	sbiw	r24, 0x0c	; 12
    8026:	71 f4       	brne	.+28     	; 0x8044 <__vector_15+0x1194>
    8028:	80 91 0e 01 	lds	r24, 0x010E
    802c:	88 23       	and	r24, r24
    802e:	51 f0       	breq	.+20     	; 0x8044 <__vector_15+0x1194>
			PWM_RED =  pgm_read_byte(&gc_background[0][RED][g_speed7+g_position]);
    8030:	80 91 2c 01 	lds	r24, 0x012C
    8034:	28 0f       	add	r18, r24
    8036:	31 1d       	adc	r19, r1
    8038:	29 5b       	subi	r18, 0xB9	; 185
    803a:	3e 4c       	sbci	r19, 0xCE	; 206
    803c:	f9 01       	movw	r30, r18
    803e:	84 91       	lpm	r24, Z
    8040:	99 27       	eor	r25, r25
    8042:	02 c0       	rjmp	.+4      	; 0x8048 <__vector_15+0x1198>
			else
			PWM_RED = PWM_TOP ;
    8044:	87 e2       	ldi	r24, 0x27	; 39
    8046:	90 e0       	ldi	r25, 0x00	; 0
    8048:	9b bd       	out	0x2b, r25	; 43
    804a:	8a bd       	out	0x2a, r24	; 42
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    804c:	60 91 4c 01 	lds	r22, 0x014C
    8050:	50 91 40 01 	lds	r21, 0x0140
    8054:	25 2f       	mov	r18, r21
    8056:	33 27       	eor	r19, r19
    8058:	f9 01       	movw	r30, r18
    805a:	e6 0f       	add	r30, r22
    805c:	f1 1d       	adc	r31, r1
    805e:	e9 59       	subi	r30, 0x99	; 153
    8060:	f0 4d       	sbci	r31, 0xD0	; 208
    8062:	94 91       	lpm	r25, Z
    8064:	40 91 37 01 	lds	r20, 0x0137
    8068:	f9 01       	movw	r30, r18
    806a:	e4 0f       	add	r30, r20
    806c:	f1 1d       	adc	r31, r1
    806e:	e9 57       	subi	r30, 0x79	; 121
    8070:	f2 4d       	sbci	r31, 0xD2	; 210
    8072:	84 91       	lpm	r24, Z
    8074:	89 0f       	add	r24, r25
    8076:	91 2d       	mov	r25, r1
    8078:	91 1d       	adc	r25, r1
    807a:	0a 97       	sbiw	r24, 0x0a	; 10
    807c:	69 f4       	brne	.+26     	; 0x8098 <__vector_15+0x11e8>
    807e:	80 91 0e 01 	lds	r24, 0x010E
    8082:	88 23       	and	r24, r24
    8084:	49 f4       	brne	.+18     	; 0x8098 <__vector_15+0x11e8>
			PWM_GREEN =  pgm_read_byte(&gc_background[0][GREEN][g_speed7+g_position]);
    8086:	80 91 2c 01 	lds	r24, 0x012C
    808a:	28 0f       	add	r18, r24
    808c:	31 1d       	adc	r19, r1
    808e:	29 5d       	subi	r18, 0xD9	; 217
    8090:	3c 4c       	sbci	r19, 0xCC	; 204
    8092:	f9 01       	movw	r30, r18
    8094:	84 91       	lpm	r24, Z
    8096:	1f c0       	rjmp	.+62     	; 0x80d6 <__vector_15+0x1226>
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    8098:	25 2f       	mov	r18, r21
    809a:	33 27       	eor	r19, r19
    809c:	f9 01       	movw	r30, r18
    809e:	e6 0f       	add	r30, r22
    80a0:	f1 1d       	adc	r31, r1
    80a2:	e9 59       	subi	r30, 0x99	; 153
    80a4:	f0 4d       	sbci	r31, 0xD0	; 208
    80a6:	94 91       	lpm	r25, Z
    80a8:	f9 01       	movw	r30, r18
    80aa:	e4 0f       	add	r30, r20
    80ac:	f1 1d       	adc	r31, r1
    80ae:	e9 57       	subi	r30, 0x79	; 121
    80b0:	f2 4d       	sbci	r31, 0xD2	; 210
    80b2:	84 91       	lpm	r24, Z
    80b4:	89 0f       	add	r24, r25
    80b6:	91 2d       	mov	r25, r1
    80b8:	91 1d       	adc	r25, r1
    80ba:	0c 97       	sbiw	r24, 0x0c	; 12
    80bc:	71 f4       	brne	.+28     	; 0x80da <__vector_15+0x122a>
    80be:	80 91 0e 01 	lds	r24, 0x010E
    80c2:	88 23       	and	r24, r24
    80c4:	51 f0       	breq	.+20     	; 0x80da <__vector_15+0x122a>
			PWM_GREEN =  pgm_read_byte(&gc_background[0][GREEN][g_speed7+g_position]);
    80c6:	80 91 2c 01 	lds	r24, 0x012C
    80ca:	28 0f       	add	r18, r24
    80cc:	31 1d       	adc	r19, r1
    80ce:	29 5d       	subi	r18, 0xD9	; 217
    80d0:	3c 4c       	sbci	r19, 0xCC	; 204
    80d2:	f9 01       	movw	r30, r18
    80d4:	84 91       	lpm	r24, Z
    80d6:	99 27       	eor	r25, r25
    80d8:	02 c0       	rjmp	.+4      	; 0x80de <__vector_15+0x122e>
			else
			PWM_GREEN = PWM_TOP ;
    80da:	87 e2       	ldi	r24, 0x27	; 39
    80dc:	90 e0       	ldi	r25, 0x00	; 0
    80de:	99 bd       	out	0x29, r25	; 41
    80e0:	88 bd       	out	0x28, r24	; 40
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    80e2:	60 91 4c 01 	lds	r22, 0x014C
    80e6:	50 91 40 01 	lds	r21, 0x0140
    80ea:	25 2f       	mov	r18, r21
    80ec:	33 27       	eor	r19, r19
    80ee:	f9 01       	movw	r30, r18
    80f0:	e6 0f       	add	r30, r22
    80f2:	f1 1d       	adc	r31, r1
    80f4:	e9 59       	subi	r30, 0x99	; 153
    80f6:	f0 4d       	sbci	r31, 0xD0	; 208
    80f8:	94 91       	lpm	r25, Z
    80fa:	40 91 37 01 	lds	r20, 0x0137
    80fe:	f9 01       	movw	r30, r18
    8100:	e4 0f       	add	r30, r20
    8102:	f1 1d       	adc	r31, r1
    8104:	e9 57       	subi	r30, 0x79	; 121
    8106:	f2 4d       	sbci	r31, 0xD2	; 210
    8108:	84 91       	lpm	r24, Z
    810a:	89 0f       	add	r24, r25
    810c:	91 2d       	mov	r25, r1
    810e:	91 1d       	adc	r25, r1
    8110:	0a 97       	sbiw	r24, 0x0a	; 10
    8112:	69 f4       	brne	.+26     	; 0x812e <__vector_15+0x127e>
    8114:	80 91 0e 01 	lds	r24, 0x010E
    8118:	88 23       	and	r24, r24
    811a:	49 f4       	brne	.+18     	; 0x812e <__vector_15+0x127e>
			PWM_BLUE =  pgm_read_byte(&gc_background[0][BLUE][g_speed7+g_position]);
    811c:	80 91 2c 01 	lds	r24, 0x012C
    8120:	28 0f       	add	r18, r24
    8122:	31 1d       	adc	r19, r1
    8124:	29 5f       	subi	r18, 0xF9	; 249
    8126:	3a 4c       	sbci	r19, 0xCA	; 202
    8128:	f9 01       	movw	r30, r18
    812a:	84 91       	lpm	r24, Z
    812c:	85 c5       	rjmp	.+2826   	; 0x8c38 <__vector_15+0x1d88>
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    812e:	25 2f       	mov	r18, r21
    8130:	33 27       	eor	r19, r19
    8132:	f9 01       	movw	r30, r18
    8134:	e6 0f       	add	r30, r22
    8136:	f1 1d       	adc	r31, r1
    8138:	e9 59       	subi	r30, 0x99	; 153
    813a:	f0 4d       	sbci	r31, 0xD0	; 208
    813c:	94 91       	lpm	r25, Z
    813e:	f9 01       	movw	r30, r18
    8140:	e4 0f       	add	r30, r20
    8142:	f1 1d       	adc	r31, r1
    8144:	e9 57       	subi	r30, 0x79	; 121
    8146:	f2 4d       	sbci	r31, 0xD2	; 210
    8148:	84 91       	lpm	r24, Z
    814a:	89 0f       	add	r24, r25
    814c:	91 2d       	mov	r25, r1
    814e:	91 1d       	adc	r25, r1
    8150:	0c 97       	sbiw	r24, 0x0c	; 12
    8152:	09 f0       	breq	.+2      	; 0x8156 <__vector_15+0x12a6>
    8154:	2e cd       	rjmp	.-1444   	; 0x7bb2 <__vector_15+0xd02>
    8156:	80 91 0e 01 	lds	r24, 0x010E
    815a:	88 23       	and	r24, r24
    815c:	09 f4       	brne	.+2      	; 0x8160 <__vector_15+0x12b0>
    815e:	29 cd       	rjmp	.-1454   	; 0x7bb2 <__vector_15+0xd02>
			PWM_BLUE =  pgm_read_byte(&gc_background[0][BLUE][g_speed7+g_position]);
    8160:	80 91 2c 01 	lds	r24, 0x012C
    8164:	28 0f       	add	r18, r24
    8166:	31 1d       	adc	r19, r1
    8168:	29 5f       	subi	r18, 0xF9	; 249
    816a:	3a 4c       	sbci	r19, 0xCA	; 202
    816c:	f9 01       	movw	r30, r18
    816e:	84 91       	lpm	r24, Z
    8170:	63 c5       	rjmp	.+2758   	; 0x8c38 <__vector_15+0x1d88>
			else
			PWM_BLUE  = PWM_TOP ;
			
			
			
			
		break;	
		
		//case 35:				// background is changing android loader 2 WINDOWS
		//	seconds_hand=0;		
		//	if ((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) == 0x27) && (pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position]) == 0x27) && ( abs(g_speed3rev-g_speed7rev) <=1 ))
		//	{
		//		if (abs(g_mark1-g_position)>6) 
		//		g_mark++;
		//		if(g_mark >= 2)
		//		g_mark =0;
		//		g_mark1=g_position;
		//	}
		
		//	if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
		//	PWM_RED =  pgm_read_byte(&gc_background[7][RED][g_speed7+g_position]);
		//	else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
		//	PWM_RED =  pgm_read_byte(&gc_background[7][RED][g_speed7+g_position]);
		//	else
		//	PWM_RED = PWM_TOP ;
				
		//	if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
		//	PWM_GREEN =  pgm_read_byte(&gc_background[7][GREEN][g_speed7+g_position]);
		//	else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
		//	PWM_GREEN =  pgm_read_byte(&gc_background[7][GREEN][g_speed7+g_position]);
		//	else
		//	PWM_GREEN = PWM_TOP ;
				
		//	if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
		//	PWM_BLUE =  pgm_read_byte(&gc_background[7][BLUE][g_speed7+g_position]);
		//	else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
		//	PWM_BLUE =  pgm_read_byte(&gc_background[7][BLUE][g_speed7+g_position]);
		//	else
		//	PWM_BLUE  = PWM_TOP ;
			
			
			
		//break;	
		

		case 20:				// background is changing android loader 2 africa
			seconds_hand=0;		
    8172:	10 92 25 01 	sts	0x0125, r1
			if ((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) == 0x27) && (pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position]) == 0x27) && (abs(g_speed3rev-g_speed7rev) <=1 ))
    8176:	b0 91 4c 01 	lds	r27, 0x014C
    817a:	6b 2f       	mov	r22, r27
    817c:	77 27       	eor	r23, r23
    817e:	4a 2f       	mov	r20, r26
    8180:	55 27       	eor	r21, r21
    8182:	fb 01       	movw	r30, r22
    8184:	e4 0f       	add	r30, r20
    8186:	f5 1f       	adc	r31, r21
    8188:	e9 59       	subi	r30, 0x99	; 153
    818a:	f0 4d       	sbci	r31, 0xD0	; 208
    818c:	84 91       	lpm	r24, Z
    818e:	87 32       	cpi	r24, 0x27	; 39
    8190:	61 f5       	brne	.+88     	; 0x81ea <__vector_15+0x133a>
    8192:	80 91 37 01 	lds	r24, 0x0137
    8196:	28 2f       	mov	r18, r24
    8198:	33 27       	eor	r19, r19
    819a:	f9 01       	movw	r30, r18
    819c:	e4 0f       	add	r30, r20
    819e:	f5 1f       	adc	r31, r21
    81a0:	e9 57       	subi	r30, 0x79	; 121
    81a2:	f2 4d       	sbci	r31, 0xD2	; 210
    81a4:	84 91       	lpm	r24, Z
    81a6:	87 32       	cpi	r24, 0x27	; 39
    81a8:	01 f5       	brne	.+64     	; 0x81ea <__vector_15+0x133a>
    81aa:	26 1b       	sub	r18, r22
    81ac:	37 0b       	sbc	r19, r23
    81ae:	2f 5f       	subi	r18, 0xFF	; 255
    81b0:	3f 4f       	sbci	r19, 0xFF	; 255
    81b2:	23 30       	cpi	r18, 0x03	; 3
    81b4:	31 05       	cpc	r19, r1
    81b6:	c8 f4       	brcc	.+50     	; 0x81ea <__vector_15+0x133a>
			{
				if (abs(g_mark1-g_position)>6) 
    81b8:	80 91 2b 01 	lds	r24, 0x012B
    81bc:	99 27       	eor	r25, r25
    81be:	84 1b       	sub	r24, r20
    81c0:	95 0b       	sbc	r25, r21
    81c2:	97 ff       	sbrs	r25, 7
    81c4:	03 c0       	rjmp	.+6      	; 0x81cc <__vector_15+0x131c>
    81c6:	90 95       	com	r25
    81c8:	81 95       	neg	r24
    81ca:	9f 4f       	sbci	r25, 0xFF	; 255
    81cc:	07 97       	sbiw	r24, 0x07	; 7
    81ce:	2c f0       	brlt	.+10     	; 0x81da <__vector_15+0x132a>
				g_mark++;
    81d0:	80 91 0e 01 	lds	r24, 0x010E
    81d4:	8f 5f       	subi	r24, 0xFF	; 255
    81d6:	80 93 0e 01 	sts	0x010E, r24
				if(g_mark == 2)
    81da:	80 91 0e 01 	lds	r24, 0x010E
    81de:	82 30       	cpi	r24, 0x02	; 2
    81e0:	11 f4       	brne	.+4      	; 0x81e6 <__vector_15+0x1336>
				g_mark =0;
    81e2:	10 92 0e 01 	sts	0x010E, r1
				g_mark1=g_position;
    81e6:	a0 93 2b 01 	sts	0x012B, r26
			}
		
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    81ea:	2a 2f       	mov	r18, r26
    81ec:	33 27       	eor	r19, r19
    81ee:	f9 01       	movw	r30, r18
    81f0:	eb 0f       	add	r30, r27
    81f2:	f1 1d       	adc	r31, r1
    81f4:	e9 59       	subi	r30, 0x99	; 153
    81f6:	f0 4d       	sbci	r31, 0xD0	; 208
    81f8:	94 91       	lpm	r25, Z
    81fa:	40 91 37 01 	lds	r20, 0x0137
    81fe:	f9 01       	movw	r30, r18
    8200:	e4 0f       	add	r30, r20
    8202:	f1 1d       	adc	r31, r1
    8204:	e9 57       	subi	r30, 0x79	; 121
    8206:	f2 4d       	sbci	r31, 0xD2	; 210
    8208:	84 91       	lpm	r24, Z
    820a:	89 0f       	add	r24, r25
    820c:	91 2d       	mov	r25, r1
    820e:	91 1d       	adc	r25, r1
    8210:	0a 97       	sbiw	r24, 0x0a	; 10
    8212:	69 f4       	brne	.+26     	; 0x822e <__vector_15+0x137e>
    8214:	80 91 0e 01 	lds	r24, 0x010E
    8218:	88 23       	and	r24, r24
    821a:	49 f4       	brne	.+18     	; 0x822e <__vector_15+0x137e>
			PWM_RED =  pgm_read_byte(&gc_background[6][RED][g_speed7+g_position]);
    821c:	80 91 2c 01 	lds	r24, 0x012C
    8220:	28 0f       	add	r18, r24
    8222:	31 1d       	adc	r19, r1
    8224:	29 5f       	subi	r18, 0xF9	; 249
    8226:	3c 4a       	sbci	r19, 0xAC	; 172
    8228:	f9 01       	movw	r30, r18
    822a:	84 91       	lpm	r24, Z
    822c:	1f c0       	rjmp	.+62     	; 0x826c <__vector_15+0x13bc>
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    822e:	2a 2f       	mov	r18, r26
    8230:	33 27       	eor	r19, r19
    8232:	f9 01       	movw	r30, r18
    8234:	eb 0f       	add	r30, r27
    8236:	f1 1d       	adc	r31, r1
    8238:	e9 59       	subi	r30, 0x99	; 153
    823a:	f0 4d       	sbci	r31, 0xD0	; 208
    823c:	94 91       	lpm	r25, Z
    823e:	f9 01       	movw	r30, r18
    8240:	e4 0f       	add	r30, r20
    8242:	f1 1d       	adc	r31, r1
    8244:	e9 57       	subi	r30, 0x79	; 121
    8246:	f2 4d       	sbci	r31, 0xD2	; 210
    8248:	84 91       	lpm	r24, Z
    824a:	89 0f       	add	r24, r25
    824c:	91 2d       	mov	r25, r1
    824e:	91 1d       	adc	r25, r1
    8250:	0c 97       	sbiw	r24, 0x0c	; 12
    8252:	71 f4       	brne	.+28     	; 0x8270 <__vector_15+0x13c0>
    8254:	80 91 0e 01 	lds	r24, 0x010E
    8258:	88 23       	and	r24, r24
    825a:	51 f0       	breq	.+20     	; 0x8270 <__vector_15+0x13c0>
			PWM_RED =  pgm_read_byte(&gc_background[6][RED][g_speed7+g_position]);
    825c:	80 91 2c 01 	lds	r24, 0x012C
    8260:	28 0f       	add	r18, r24
    8262:	31 1d       	adc	r19, r1
    8264:	29 5f       	subi	r18, 0xF9	; 249
    8266:	3c 4a       	sbci	r19, 0xAC	; 172
    8268:	f9 01       	movw	r30, r18
    826a:	84 91       	lpm	r24, Z
    826c:	99 27       	eor	r25, r25
    826e:	02 c0       	rjmp	.+4      	; 0x8274 <__vector_15+0x13c4>
			else
			PWM_RED = PWM_TOP ;
    8270:	87 e2       	ldi	r24, 0x27	; 39
    8272:	90 e0       	ldi	r25, 0x00	; 0
    8274:	9b bd       	out	0x2b, r25	; 43
    8276:	8a bd       	out	0x2a, r24	; 42
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    8278:	60 91 4c 01 	lds	r22, 0x014C
    827c:	50 91 40 01 	lds	r21, 0x0140
    8280:	25 2f       	mov	r18, r21
    8282:	33 27       	eor	r19, r19
    8284:	f9 01       	movw	r30, r18
    8286:	e6 0f       	add	r30, r22
    8288:	f1 1d       	adc	r31, r1
    828a:	e9 59       	subi	r30, 0x99	; 153
    828c:	f0 4d       	sbci	r31, 0xD0	; 208
    828e:	94 91       	lpm	r25, Z
    8290:	40 91 37 01 	lds	r20, 0x0137
    8294:	f9 01       	movw	r30, r18
    8296:	e4 0f       	add	r30, r20
    8298:	f1 1d       	adc	r31, r1
    829a:	e9 57       	subi	r30, 0x79	; 121
    829c:	f2 4d       	sbci	r31, 0xD2	; 210
    829e:	84 91       	lpm	r24, Z
    82a0:	89 0f       	add	r24, r25
    82a2:	91 2d       	mov	r25, r1
    82a4:	91 1d       	adc	r25, r1
    82a6:	0a 97       	sbiw	r24, 0x0a	; 10
    82a8:	69 f4       	brne	.+26     	; 0x82c4 <__vector_15+0x1414>
    82aa:	80 91 0e 01 	lds	r24, 0x010E
    82ae:	88 23       	and	r24, r24
    82b0:	49 f4       	brne	.+18     	; 0x82c4 <__vector_15+0x1414>
			PWM_GREEN =  pgm_read_byte(&gc_background[6][GREEN][g_speed7+g_position]);
    82b2:	80 91 2c 01 	lds	r24, 0x012C
    82b6:	28 0f       	add	r18, r24
    82b8:	31 1d       	adc	r19, r1
    82ba:	29 51       	subi	r18, 0x19	; 25
    82bc:	3b 4a       	sbci	r19, 0xAB	; 171
    82be:	f9 01       	movw	r30, r18
    82c0:	84 91       	lpm	r24, Z
    82c2:	1f c0       	rjmp	.+62     	; 0x8302 <__vector_15+0x1452>
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    82c4:	25 2f       	mov	r18, r21
    82c6:	33 27       	eor	r19, r19
    82c8:	f9 01       	movw	r30, r18
    82ca:	e6 0f       	add	r30, r22
    82cc:	f1 1d       	adc	r31, r1
    82ce:	e9 59       	subi	r30, 0x99	; 153
    82d0:	f0 4d       	sbci	r31, 0xD0	; 208
    82d2:	94 91       	lpm	r25, Z
    82d4:	f9 01       	movw	r30, r18
    82d6:	e4 0f       	add	r30, r20
    82d8:	f1 1d       	adc	r31, r1
    82da:	e9 57       	subi	r30, 0x79	; 121
    82dc:	f2 4d       	sbci	r31, 0xD2	; 210
    82de:	84 91       	lpm	r24, Z
    82e0:	89 0f       	add	r24, r25
    82e2:	91 2d       	mov	r25, r1
    82e4:	91 1d       	adc	r25, r1
    82e6:	0c 97       	sbiw	r24, 0x0c	; 12
    82e8:	71 f4       	brne	.+28     	; 0x8306 <__vector_15+0x1456>
    82ea:	80 91 0e 01 	lds	r24, 0x010E
    82ee:	88 23       	and	r24, r24
    82f0:	51 f0       	breq	.+20     	; 0x8306 <__vector_15+0x1456>
			PWM_GREEN =  pgm_read_byte(&gc_background[6][GREEN][g_speed7+g_position]);
    82f2:	80 91 2c 01 	lds	r24, 0x012C
    82f6:	28 0f       	add	r18, r24
    82f8:	31 1d       	adc	r19, r1
    82fa:	29 51       	subi	r18, 0x19	; 25
    82fc:	3b 4a       	sbci	r19, 0xAB	; 171
    82fe:	f9 01       	movw	r30, r18
    8300:	84 91       	lpm	r24, Z
    8302:	99 27       	eor	r25, r25
    8304:	02 c0       	rjmp	.+4      	; 0x830a <__vector_15+0x145a>
			else
			PWM_GREEN = PWM_TOP ;
    8306:	87 e2       	ldi	r24, 0x27	; 39
    8308:	90 e0       	ldi	r25, 0x00	; 0
    830a:	99 bd       	out	0x29, r25	; 41
    830c:	88 bd       	out	0x28, r24	; 40
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    830e:	60 91 4c 01 	lds	r22, 0x014C
    8312:	50 91 40 01 	lds	r21, 0x0140
    8316:	25 2f       	mov	r18, r21
    8318:	33 27       	eor	r19, r19
    831a:	f9 01       	movw	r30, r18
    831c:	e6 0f       	add	r30, r22
    831e:	f1 1d       	adc	r31, r1
    8320:	e9 59       	subi	r30, 0x99	; 153
    8322:	f0 4d       	sbci	r31, 0xD0	; 208
    8324:	94 91       	lpm	r25, Z
    8326:	40 91 37 01 	lds	r20, 0x0137
    832a:	f9 01       	movw	r30, r18
    832c:	e4 0f       	add	r30, r20
    832e:	f1 1d       	adc	r31, r1
    8330:	e9 57       	subi	r30, 0x79	; 121
    8332:	f2 4d       	sbci	r31, 0xD2	; 210
    8334:	84 91       	lpm	r24, Z
    8336:	89 0f       	add	r24, r25
    8338:	91 2d       	mov	r25, r1
    833a:	91 1d       	adc	r25, r1
    833c:	0a 97       	sbiw	r24, 0x0a	; 10
    833e:	69 f4       	brne	.+26     	; 0x835a <__vector_15+0x14aa>
    8340:	80 91 0e 01 	lds	r24, 0x010E
    8344:	88 23       	and	r24, r24
    8346:	49 f4       	brne	.+18     	; 0x835a <__vector_15+0x14aa>
			PWM_BLUE =  pgm_read_byte(&gc_background[6][BLUE][g_speed7+g_position]);
    8348:	80 91 2c 01 	lds	r24, 0x012C
    834c:	28 0f       	add	r18, r24
    834e:	31 1d       	adc	r19, r1
    8350:	29 53       	subi	r18, 0x39	; 57
    8352:	39 4a       	sbci	r19, 0xA9	; 169
    8354:	f9 01       	movw	r30, r18
    8356:	84 91       	lpm	r24, Z
    8358:	6f c4       	rjmp	.+2270   	; 0x8c38 <__vector_15+0x1d88>
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    835a:	25 2f       	mov	r18, r21
    835c:	33 27       	eor	r19, r19
    835e:	f9 01       	movw	r30, r18
    8360:	e6 0f       	add	r30, r22
    8362:	f1 1d       	adc	r31, r1
    8364:	e9 59       	subi	r30, 0x99	; 153
    8366:	f0 4d       	sbci	r31, 0xD0	; 208
    8368:	94 91       	lpm	r25, Z
    836a:	f9 01       	movw	r30, r18
    836c:	e4 0f       	add	r30, r20
    836e:	f1 1d       	adc	r31, r1
    8370:	e9 57       	subi	r30, 0x79	; 121
    8372:	f2 4d       	sbci	r31, 0xD2	; 210
    8374:	84 91       	lpm	r24, Z
    8376:	89 0f       	add	r24, r25
    8378:	91 2d       	mov	r25, r1
    837a:	91 1d       	adc	r25, r1
    837c:	0c 97       	sbiw	r24, 0x0c	; 12
    837e:	09 f0       	breq	.+2      	; 0x8382 <__vector_15+0x14d2>
    8380:	18 cc       	rjmp	.-2000   	; 0x7bb2 <__vector_15+0xd02>
    8382:	80 91 0e 01 	lds	r24, 0x010E
    8386:	88 23       	and	r24, r24
    8388:	09 f4       	brne	.+2      	; 0x838c <__vector_15+0x14dc>
    838a:	13 cc       	rjmp	.-2010   	; 0x7bb2 <__vector_15+0xd02>
			PWM_BLUE =  pgm_read_byte(&gc_background[6][BLUE][g_speed7+g_position]);
    838c:	80 91 2c 01 	lds	r24, 0x012C
    8390:	28 0f       	add	r18, r24
    8392:	31 1d       	adc	r19, r1
    8394:	29 53       	subi	r18, 0x39	; 57
    8396:	39 4a       	sbci	r19, 0xA9	; 169
    8398:	f9 01       	movw	r30, r18
    839a:	84 91       	lpm	r24, Z
    839c:	4d c4       	rjmp	.+2202   	; 0x8c38 <__vector_15+0x1d88>
			else
			PWM_BLUE  = PWM_TOP ;
			
			
			
		break;	
	
		case 19:				// background is changing android loader 2 rainbow neg
			seconds_hand=0;		
    839e:	10 92 25 01 	sts	0x0125, r1
			if ((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) == 0x27) && (pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position]) == 0x27) && ( abs(g_speed3rev-g_speed7rev) <=1 ))
    83a2:	b0 91 4c 01 	lds	r27, 0x014C
    83a6:	6b 2f       	mov	r22, r27
    83a8:	77 27       	eor	r23, r23
    83aa:	4a 2f       	mov	r20, r26
    83ac:	55 27       	eor	r21, r21
    83ae:	fb 01       	movw	r30, r22
    83b0:	e4 0f       	add	r30, r20
    83b2:	f5 1f       	adc	r31, r21
    83b4:	e9 59       	subi	r30, 0x99	; 153
    83b6:	f0 4d       	sbci	r31, 0xD0	; 208
    83b8:	84 91       	lpm	r24, Z
    83ba:	87 32       	cpi	r24, 0x27	; 39
    83bc:	61 f5       	brne	.+88     	; 0x8416 <__vector_15+0x1566>
    83be:	80 91 37 01 	lds	r24, 0x0137
    83c2:	28 2f       	mov	r18, r24
    83c4:	33 27       	eor	r19, r19
    83c6:	f9 01       	movw	r30, r18
    83c8:	e4 0f       	add	r30, r20
    83ca:	f5 1f       	adc	r31, r21
    83cc:	e9 57       	subi	r30, 0x79	; 121
    83ce:	f2 4d       	sbci	r31, 0xD2	; 210
    83d0:	84 91       	lpm	r24, Z
    83d2:	87 32       	cpi	r24, 0x27	; 39
    83d4:	01 f5       	brne	.+64     	; 0x8416 <__vector_15+0x1566>
    83d6:	26 1b       	sub	r18, r22
    83d8:	37 0b       	sbc	r19, r23
    83da:	2f 5f       	subi	r18, 0xFF	; 255
    83dc:	3f 4f       	sbci	r19, 0xFF	; 255
    83de:	23 30       	cpi	r18, 0x03	; 3
    83e0:	31 05       	cpc	r19, r1
    83e2:	c8 f4       	brcc	.+50     	; 0x8416 <__vector_15+0x1566>
			{
				if (abs(g_mark1-g_position)>6) 
    83e4:	80 91 2b 01 	lds	r24, 0x012B
    83e8:	99 27       	eor	r25, r25
    83ea:	84 1b       	sub	r24, r20
    83ec:	95 0b       	sbc	r25, r21
    83ee:	97 ff       	sbrs	r25, 7
    83f0:	03 c0       	rjmp	.+6      	; 0x83f8 <__vector_15+0x1548>
    83f2:	90 95       	com	r25
    83f4:	81 95       	neg	r24
    83f6:	9f 4f       	sbci	r25, 0xFF	; 255
    83f8:	07 97       	sbiw	r24, 0x07	; 7
    83fa:	2c f0       	brlt	.+10     	; 0x8406 <__vector_15+0x1556>
				g_mark++;
    83fc:	80 91 0e 01 	lds	r24, 0x010E
    8400:	8f 5f       	subi	r24, 0xFF	; 255
    8402:	80 93 0e 01 	sts	0x010E, r24
				if(g_mark == 2)
    8406:	80 91 0e 01 	lds	r24, 0x010E
    840a:	82 30       	cpi	r24, 0x02	; 2
    840c:	11 f4       	brne	.+4      	; 0x8412 <__vector_15+0x1562>
				g_mark =0;
    840e:	10 92 0e 01 	sts	0x010E, r1
				g_mark1=g_position;
    8412:	a0 93 2b 01 	sts	0x012B, r26
			}
		
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    8416:	8a 2f       	mov	r24, r26
    8418:	99 27       	eor	r25, r25
    841a:	fc 01       	movw	r30, r24
    841c:	eb 0f       	add	r30, r27
    841e:	f1 1d       	adc	r31, r1
    8420:	e9 59       	subi	r30, 0x99	; 153
    8422:	f0 4d       	sbci	r31, 0xD0	; 208
    8424:	24 91       	lpm	r18, Z
    8426:	30 91 37 01 	lds	r19, 0x0137
    842a:	83 0f       	add	r24, r19
    842c:	91 1d       	adc	r25, r1
    842e:	89 57       	subi	r24, 0x79	; 121
    8430:	92 4d       	sbci	r25, 0xD2	; 210
    8432:	fc 01       	movw	r30, r24
    8434:	84 91       	lpm	r24, Z
    8436:	82 0f       	add	r24, r18
    8438:	91 2d       	mov	r25, r1
    843a:	91 1d       	adc	r25, r1
    843c:	0a 97       	sbiw	r24, 0x0a	; 10
    843e:	21 f4       	brne	.+8      	; 0x8448 <__vector_15+0x1598>
    8440:	80 91 0e 01 	lds	r24, 0x010E
    8444:	88 23       	and	r24, r24
    8446:	b9 f0       	breq	.+46     	; 0x8476 <__vector_15+0x15c6>
			PWM_RED = PWM_TOP ;
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    8448:	8a 2f       	mov	r24, r26
    844a:	99 27       	eor	r25, r25
    844c:	fc 01       	movw	r30, r24
    844e:	eb 0f       	add	r30, r27
    8450:	f1 1d       	adc	r31, r1
    8452:	e9 59       	subi	r30, 0x99	; 153
    8454:	f0 4d       	sbci	r31, 0xD0	; 208
    8456:	24 91       	lpm	r18, Z
    8458:	83 0f       	add	r24, r19
    845a:	91 1d       	adc	r25, r1
    845c:	89 57       	subi	r24, 0x79	; 121
    845e:	92 4d       	sbci	r25, 0xD2	; 210
    8460:	fc 01       	movw	r30, r24
    8462:	84 91       	lpm	r24, Z
    8464:	82 0f       	add	r24, r18
    8466:	91 2d       	mov	r25, r1
    8468:	91 1d       	adc	r25, r1
    846a:	0c 97       	sbiw	r24, 0x0c	; 12
    846c:	39 f4       	brne	.+14     	; 0x847c <__vector_15+0x15cc>
    846e:	80 91 0e 01 	lds	r24, 0x010E
    8472:	88 23       	and	r24, r24
    8474:	19 f0       	breq	.+6      	; 0x847c <__vector_15+0x15cc>
			PWM_RED = PWM_TOP ;
    8476:	87 e2       	ldi	r24, 0x27	; 39
    8478:	90 e0       	ldi	r25, 0x00	; 0
    847a:	0b c0       	rjmp	.+22     	; 0x8492 <__vector_15+0x15e2>
			else
			PWM_RED =  pgm_read_byte(&gc_background[0][RED][g_speed7+g_position]);
    847c:	80 91 2c 01 	lds	r24, 0x012C
    8480:	28 2f       	mov	r18, r24
    8482:	2a 0f       	add	r18, r26
    8484:	31 2d       	mov	r19, r1
    8486:	31 1d       	adc	r19, r1
    8488:	f9 01       	movw	r30, r18
    848a:	e9 5b       	subi	r30, 0xB9	; 185
    848c:	fe 4c       	sbci	r31, 0xCE	; 206
    848e:	84 91       	lpm	r24, Z
    8490:	99 27       	eor	r25, r25
    8492:	9b bd       	out	0x2b, r25	; 43
    8494:	8a bd       	out	0x2a, r24	; 42
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    8496:	50 91 4c 01 	lds	r21, 0x014C
    849a:	30 91 40 01 	lds	r19, 0x0140
    849e:	83 2f       	mov	r24, r19
    84a0:	99 27       	eor	r25, r25
    84a2:	fc 01       	movw	r30, r24
    84a4:	e5 0f       	add	r30, r21
    84a6:	f1 1d       	adc	r31, r1
    84a8:	e9 59       	subi	r30, 0x99	; 153
    84aa:	f0 4d       	sbci	r31, 0xD0	; 208
    84ac:	24 91       	lpm	r18, Z
    84ae:	40 91 37 01 	lds	r20, 0x0137
    84b2:	84 0f       	add	r24, r20
    84b4:	91 1d       	adc	r25, r1
    84b6:	89 57       	subi	r24, 0x79	; 121
    84b8:	92 4d       	sbci	r25, 0xD2	; 210
    84ba:	fc 01       	movw	r30, r24
    84bc:	84 91       	lpm	r24, Z
    84be:	82 0f       	add	r24, r18
    84c0:	91 2d       	mov	r25, r1
    84c2:	91 1d       	adc	r25, r1
    84c4:	0a 97       	sbiw	r24, 0x0a	; 10
    84c6:	21 f4       	brne	.+8      	; 0x84d0 <__vector_15+0x1620>
    84c8:	80 91 0e 01 	lds	r24, 0x010E
    84cc:	88 23       	and	r24, r24
    84ce:	b9 f0       	breq	.+46     	; 0x84fe <__vector_15+0x164e>
			PWM_GREEN = PWM_TOP ;
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    84d0:	83 2f       	mov	r24, r19
    84d2:	99 27       	eor	r25, r25
    84d4:	fc 01       	movw	r30, r24
    84d6:	e5 0f       	add	r30, r21
    84d8:	f1 1d       	adc	r31, r1
    84da:	e9 59       	subi	r30, 0x99	; 153
    84dc:	f0 4d       	sbci	r31, 0xD0	; 208
    84de:	24 91       	lpm	r18, Z
    84e0:	84 0f       	add	r24, r20
    84e2:	91 1d       	adc	r25, r1
    84e4:	89 57       	subi	r24, 0x79	; 121
    84e6:	92 4d       	sbci	r25, 0xD2	; 210
    84e8:	fc 01       	movw	r30, r24
    84ea:	84 91       	lpm	r24, Z
    84ec:	82 0f       	add	r24, r18
    84ee:	91 2d       	mov	r25, r1
    84f0:	91 1d       	adc	r25, r1
    84f2:	0c 97       	sbiw	r24, 0x0c	; 12
    84f4:	39 f4       	brne	.+14     	; 0x8504 <__vector_15+0x1654>
    84f6:	80 91 0e 01 	lds	r24, 0x010E
    84fa:	88 23       	and	r24, r24
    84fc:	19 f0       	breq	.+6      	; 0x8504 <__vector_15+0x1654>
			PWM_GREEN = PWM_TOP ;
    84fe:	87 e2       	ldi	r24, 0x27	; 39
    8500:	90 e0       	ldi	r25, 0x00	; 0
    8502:	0b c0       	rjmp	.+22     	; 0x851a <__vector_15+0x166a>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[0][GREEN][g_speed7+g_position]);
    8504:	80 91 2c 01 	lds	r24, 0x012C
    8508:	48 2f       	mov	r20, r24
    850a:	43 0f       	add	r20, r19
    850c:	51 2d       	mov	r21, r1
    850e:	51 1d       	adc	r21, r1
    8510:	fa 01       	movw	r30, r20
    8512:	e9 5d       	subi	r30, 0xD9	; 217
    8514:	fc 4c       	sbci	r31, 0xCC	; 204
    8516:	84 91       	lpm	r24, Z
    8518:	99 27       	eor	r25, r25
    851a:	99 bd       	out	0x29, r25	; 41
    851c:	88 bd       	out	0x28, r24	; 40
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    851e:	50 91 4c 01 	lds	r21, 0x014C
    8522:	30 91 40 01 	lds	r19, 0x0140
    8526:	83 2f       	mov	r24, r19
    8528:	99 27       	eor	r25, r25
    852a:	fc 01       	movw	r30, r24
    852c:	e5 0f       	add	r30, r21
    852e:	f1 1d       	adc	r31, r1
    8530:	e9 59       	subi	r30, 0x99	; 153
    8532:	f0 4d       	sbci	r31, 0xD0	; 208
    8534:	24 91       	lpm	r18, Z
    8536:	40 91 37 01 	lds	r20, 0x0137
    853a:	84 0f       	add	r24, r20
    853c:	91 1d       	adc	r25, r1
    853e:	89 57       	subi	r24, 0x79	; 121
    8540:	92 4d       	sbci	r25, 0xD2	; 210
    8542:	fc 01       	movw	r30, r24
    8544:	84 91       	lpm	r24, Z
    8546:	82 0f       	add	r24, r18
    8548:	91 2d       	mov	r25, r1
    854a:	91 1d       	adc	r25, r1
    854c:	0a 97       	sbiw	r24, 0x0a	; 10
    854e:	29 f4       	brne	.+10     	; 0x855a <__vector_15+0x16aa>
    8550:	80 91 0e 01 	lds	r24, 0x010E
    8554:	88 23       	and	r24, r24
    8556:	09 f4       	brne	.+2      	; 0x855a <__vector_15+0x16aa>
    8558:	2c cb       	rjmp	.-2472   	; 0x7bb2 <__vector_15+0xd02>
			PWM_BLUE  = PWM_TOP ;
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    855a:	83 2f       	mov	r24, r19
    855c:	99 27       	eor	r25, r25
    855e:	fc 01       	movw	r30, r24
    8560:	e5 0f       	add	r30, r21
    8562:	f1 1d       	adc	r31, r1
    8564:	e9 59       	subi	r30, 0x99	; 153
    8566:	f0 4d       	sbci	r31, 0xD0	; 208
    8568:	24 91       	lpm	r18, Z
    856a:	84 0f       	add	r24, r20
    856c:	91 1d       	adc	r25, r1
    856e:	89 57       	subi	r24, 0x79	; 121
    8570:	92 4d       	sbci	r25, 0xD2	; 210
    8572:	fc 01       	movw	r30, r24
    8574:	84 91       	lpm	r24, Z
    8576:	82 0f       	add	r24, r18
    8578:	91 2d       	mov	r25, r1
    857a:	91 1d       	adc	r25, r1
    857c:	0c 97       	sbiw	r24, 0x0c	; 12
    857e:	29 f4       	brne	.+10     	; 0x858a <__vector_15+0x16da>
    8580:	80 91 0e 01 	lds	r24, 0x010E
    8584:	88 23       	and	r24, r24
    8586:	09 f0       	breq	.+2      	; 0x858a <__vector_15+0x16da>
    8588:	14 cb       	rjmp	.-2520   	; 0x7bb2 <__vector_15+0xd02>
			PWM_BLUE  = PWM_TOP ;
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[0][BLUE][g_speed7+g_position]);
    858a:	80 91 2c 01 	lds	r24, 0x012C
    858e:	48 2f       	mov	r20, r24
    8590:	43 0f       	add	r20, r19
    8592:	51 2d       	mov	r21, r1
    8594:	51 1d       	adc	r21, r1
    8596:	fa 01       	movw	r30, r20
    8598:	e9 5f       	subi	r30, 0xF9	; 249
    859a:	fa 4c       	sbci	r31, 0xCA	; 202
    859c:	84 91       	lpm	r24, Z
    859e:	4c c3       	rjmp	.+1688   	; 0x8c38 <__vector_15+0x1d88>
			
		break;	
		
		//case 32:				// background is changing android loader 2 WINDOWS neg
		//	seconds_hand=0;		
		//	if ((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) == 0x27) && (pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position]) == 0x27) && ( abs(g_speed3rev-g_speed7rev) <=1 ))
		//	{
		//		if (abs(g_mark1-g_position)>6) 
		//		g_mark++;
		//		if(g_mark == 2)
		//		g_mark =0;
		//		g_mark1=g_position;
		//	}
		
		//	if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
		//	PWM_RED = PWM_TOP ;
		//	else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
		//	PWM_RED = PWM_TOP ;
		//	else
		//	PWM_RED =  pgm_read_byte(&gc_background[7][RED][g_speed7+g_position]);
				
		//	if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
		//	PWM_GREEN = PWM_TOP ;
		//	else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
		//	PWM_GREEN = PWM_TOP ;
		//	else
		//	PWM_GREEN =  pgm_read_byte(&gc_background[7][GREEN][g_speed7+g_position]);
				
		//	if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
		//	PWM_BLUE  = PWM_TOP ;
		//	else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
		//	PWM_BLUE  = PWM_TOP ;
		//	else
		//	PWM_BLUE =  pgm_read_byte(&gc_background[7][BLUE][g_speed7+g_position]);
		
				
		//break;	
		
		
		case 18:				// background is changing android loader 2 africa neg
			seconds_hand=0;		
    85a0:	10 92 25 01 	sts	0x0125, r1
			if ((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) == 0x27) && (pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position]) == 0x27) && ( abs(g_speed3rev-g_speed7rev) <=1 ))
    85a4:	b0 91 4c 01 	lds	r27, 0x014C
    85a8:	6b 2f       	mov	r22, r27
    85aa:	77 27       	eor	r23, r23
    85ac:	4a 2f       	mov	r20, r26
    85ae:	55 27       	eor	r21, r21
    85b0:	fb 01       	movw	r30, r22
    85b2:	e4 0f       	add	r30, r20
    85b4:	f5 1f       	adc	r31, r21
    85b6:	e9 59       	subi	r30, 0x99	; 153
    85b8:	f0 4d       	sbci	r31, 0xD0	; 208
    85ba:	84 91       	lpm	r24, Z
    85bc:	87 32       	cpi	r24, 0x27	; 39
    85be:	61 f5       	brne	.+88     	; 0x8618 <__vector_15+0x1768>
    85c0:	80 91 37 01 	lds	r24, 0x0137
    85c4:	28 2f       	mov	r18, r24
    85c6:	33 27       	eor	r19, r19
    85c8:	f9 01       	movw	r30, r18
    85ca:	e4 0f       	add	r30, r20
    85cc:	f5 1f       	adc	r31, r21
    85ce:	e9 57       	subi	r30, 0x79	; 121
    85d0:	f2 4d       	sbci	r31, 0xD2	; 210
    85d2:	84 91       	lpm	r24, Z
    85d4:	87 32       	cpi	r24, 0x27	; 39
    85d6:	01 f5       	brne	.+64     	; 0x8618 <__vector_15+0x1768>
    85d8:	26 1b       	sub	r18, r22
    85da:	37 0b       	sbc	r19, r23
    85dc:	2f 5f       	subi	r18, 0xFF	; 255
    85de:	3f 4f       	sbci	r19, 0xFF	; 255
    85e0:	23 30       	cpi	r18, 0x03	; 3
    85e2:	31 05       	cpc	r19, r1
    85e4:	c8 f4       	brcc	.+50     	; 0x8618 <__vector_15+0x1768>
			{
				if (abs(g_mark1-g_position)>6) 
    85e6:	80 91 2b 01 	lds	r24, 0x012B
    85ea:	99 27       	eor	r25, r25
    85ec:	84 1b       	sub	r24, r20
    85ee:	95 0b       	sbc	r25, r21
    85f0:	97 ff       	sbrs	r25, 7
    85f2:	03 c0       	rjmp	.+6      	; 0x85fa <__vector_15+0x174a>
    85f4:	90 95       	com	r25
    85f6:	81 95       	neg	r24
    85f8:	9f 4f       	sbci	r25, 0xFF	; 255
    85fa:	07 97       	sbiw	r24, 0x07	; 7
    85fc:	2c f0       	brlt	.+10     	; 0x8608 <__vector_15+0x1758>
				g_mark++;
    85fe:	80 91 0e 01 	lds	r24, 0x010E
    8602:	8f 5f       	subi	r24, 0xFF	; 255
    8604:	80 93 0e 01 	sts	0x010E, r24
				if(g_mark == 2)
    8608:	80 91 0e 01 	lds	r24, 0x010E
    860c:	82 30       	cpi	r24, 0x02	; 2
    860e:	11 f4       	brne	.+4      	; 0x8614 <__vector_15+0x1764>
				g_mark =0;
    8610:	10 92 0e 01 	sts	0x010E, r1
				g_mark1=g_position;
    8614:	a0 93 2b 01 	sts	0x012B, r26
			}
		
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    8618:	8a 2f       	mov	r24, r26
    861a:	99 27       	eor	r25, r25
    861c:	fc 01       	movw	r30, r24
    861e:	eb 0f       	add	r30, r27
    8620:	f1 1d       	adc	r31, r1
    8622:	e9 59       	subi	r30, 0x99	; 153
    8624:	f0 4d       	sbci	r31, 0xD0	; 208
    8626:	24 91       	lpm	r18, Z
    8628:	30 91 37 01 	lds	r19, 0x0137
    862c:	83 0f       	add	r24, r19
    862e:	91 1d       	adc	r25, r1
    8630:	89 57       	subi	r24, 0x79	; 121
    8632:	92 4d       	sbci	r25, 0xD2	; 210
    8634:	fc 01       	movw	r30, r24
    8636:	84 91       	lpm	r24, Z
    8638:	82 0f       	add	r24, r18
    863a:	91 2d       	mov	r25, r1
    863c:	91 1d       	adc	r25, r1
    863e:	0a 97       	sbiw	r24, 0x0a	; 10
    8640:	21 f4       	brne	.+8      	; 0x864a <__vector_15+0x179a>
    8642:	80 91 0e 01 	lds	r24, 0x010E
    8646:	88 23       	and	r24, r24
    8648:	b9 f0       	breq	.+46     	; 0x8678 <__vector_15+0x17c8>
			PWM_RED = PWM_TOP ;
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    864a:	8a 2f       	mov	r24, r26
    864c:	99 27       	eor	r25, r25
    864e:	fc 01       	movw	r30, r24
    8650:	eb 0f       	add	r30, r27
    8652:	f1 1d       	adc	r31, r1
    8654:	e9 59       	subi	r30, 0x99	; 153
    8656:	f0 4d       	sbci	r31, 0xD0	; 208
    8658:	24 91       	lpm	r18, Z
    865a:	83 0f       	add	r24, r19
    865c:	91 1d       	adc	r25, r1
    865e:	89 57       	subi	r24, 0x79	; 121
    8660:	92 4d       	sbci	r25, 0xD2	; 210
    8662:	fc 01       	movw	r30, r24
    8664:	84 91       	lpm	r24, Z
    8666:	82 0f       	add	r24, r18
    8668:	91 2d       	mov	r25, r1
    866a:	91 1d       	adc	r25, r1
    866c:	0c 97       	sbiw	r24, 0x0c	; 12
    866e:	39 f4       	brne	.+14     	; 0x867e <__vector_15+0x17ce>
    8670:	80 91 0e 01 	lds	r24, 0x010E
    8674:	88 23       	and	r24, r24
    8676:	19 f0       	breq	.+6      	; 0x867e <__vector_15+0x17ce>
			PWM_RED = PWM_TOP ;
    8678:	87 e2       	ldi	r24, 0x27	; 39
    867a:	90 e0       	ldi	r25, 0x00	; 0
    867c:	0b c0       	rjmp	.+22     	; 0x8694 <__vector_15+0x17e4>
			else
			PWM_RED =  pgm_read_byte(&gc_background[6][RED][g_speed7+g_position]);
    867e:	80 91 2c 01 	lds	r24, 0x012C
    8682:	28 2f       	mov	r18, r24
    8684:	2a 0f       	add	r18, r26
    8686:	31 2d       	mov	r19, r1
    8688:	31 1d       	adc	r19, r1
    868a:	f9 01       	movw	r30, r18
    868c:	e9 5f       	subi	r30, 0xF9	; 249
    868e:	fc 4a       	sbci	r31, 0xAC	; 172
    8690:	84 91       	lpm	r24, Z
    8692:	99 27       	eor	r25, r25
    8694:	9b bd       	out	0x2b, r25	; 43
    8696:	8a bd       	out	0x2a, r24	; 42
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    8698:	50 91 4c 01 	lds	r21, 0x014C
    869c:	30 91 40 01 	lds	r19, 0x0140
    86a0:	83 2f       	mov	r24, r19
    86a2:	99 27       	eor	r25, r25
    86a4:	fc 01       	movw	r30, r24
    86a6:	e5 0f       	add	r30, r21
    86a8:	f1 1d       	adc	r31, r1
    86aa:	e9 59       	subi	r30, 0x99	; 153
    86ac:	f0 4d       	sbci	r31, 0xD0	; 208
    86ae:	24 91       	lpm	r18, Z
    86b0:	40 91 37 01 	lds	r20, 0x0137
    86b4:	84 0f       	add	r24, r20
    86b6:	91 1d       	adc	r25, r1
    86b8:	89 57       	subi	r24, 0x79	; 121
    86ba:	92 4d       	sbci	r25, 0xD2	; 210
    86bc:	fc 01       	movw	r30, r24
    86be:	84 91       	lpm	r24, Z
    86c0:	82 0f       	add	r24, r18
    86c2:	91 2d       	mov	r25, r1
    86c4:	91 1d       	adc	r25, r1
    86c6:	0a 97       	sbiw	r24, 0x0a	; 10
    86c8:	21 f4       	brne	.+8      	; 0x86d2 <__vector_15+0x1822>
    86ca:	80 91 0e 01 	lds	r24, 0x010E
    86ce:	88 23       	and	r24, r24
    86d0:	b9 f0       	breq	.+46     	; 0x8700 <__vector_15+0x1850>
			PWM_GREEN = PWM_TOP ;
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    86d2:	83 2f       	mov	r24, r19
    86d4:	99 27       	eor	r25, r25
    86d6:	fc 01       	movw	r30, r24
    86d8:	e5 0f       	add	r30, r21
    86da:	f1 1d       	adc	r31, r1
    86dc:	e9 59       	subi	r30, 0x99	; 153
    86de:	f0 4d       	sbci	r31, 0xD0	; 208
    86e0:	24 91       	lpm	r18, Z
    86e2:	84 0f       	add	r24, r20
    86e4:	91 1d       	adc	r25, r1
    86e6:	89 57       	subi	r24, 0x79	; 121
    86e8:	92 4d       	sbci	r25, 0xD2	; 210
    86ea:	fc 01       	movw	r30, r24
    86ec:	84 91       	lpm	r24, Z
    86ee:	82 0f       	add	r24, r18
    86f0:	91 2d       	mov	r25, r1
    86f2:	91 1d       	adc	r25, r1
    86f4:	0c 97       	sbiw	r24, 0x0c	; 12
    86f6:	39 f4       	brne	.+14     	; 0x8706 <__vector_15+0x1856>
    86f8:	80 91 0e 01 	lds	r24, 0x010E
    86fc:	88 23       	and	r24, r24
    86fe:	19 f0       	breq	.+6      	; 0x8706 <__vector_15+0x1856>
			PWM_GREEN = PWM_TOP ;
    8700:	87 e2       	ldi	r24, 0x27	; 39
    8702:	90 e0       	ldi	r25, 0x00	; 0
    8704:	0b c0       	rjmp	.+22     	; 0x871c <__vector_15+0x186c>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[6][GREEN][g_speed7+g_position]);
    8706:	80 91 2c 01 	lds	r24, 0x012C
    870a:	48 2f       	mov	r20, r24
    870c:	43 0f       	add	r20, r19
    870e:	51 2d       	mov	r21, r1
    8710:	51 1d       	adc	r21, r1
    8712:	fa 01       	movw	r30, r20
    8714:	e9 51       	subi	r30, 0x19	; 25
    8716:	fb 4a       	sbci	r31, 0xAB	; 171
    8718:	84 91       	lpm	r24, Z
    871a:	99 27       	eor	r25, r25
    871c:	99 bd       	out	0x29, r25	; 41
    871e:	88 bd       	out	0x28, r24	; 40
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    8720:	50 91 4c 01 	lds	r21, 0x014C
    8724:	30 91 40 01 	lds	r19, 0x0140
    8728:	83 2f       	mov	r24, r19
    872a:	99 27       	eor	r25, r25
    872c:	fc 01       	movw	r30, r24
    872e:	e5 0f       	add	r30, r21
    8730:	f1 1d       	adc	r31, r1
    8732:	e9 59       	subi	r30, 0x99	; 153
    8734:	f0 4d       	sbci	r31, 0xD0	; 208
    8736:	24 91       	lpm	r18, Z
    8738:	40 91 37 01 	lds	r20, 0x0137
    873c:	84 0f       	add	r24, r20
    873e:	91 1d       	adc	r25, r1
    8740:	89 57       	subi	r24, 0x79	; 121
    8742:	92 4d       	sbci	r25, 0xD2	; 210
    8744:	fc 01       	movw	r30, r24
    8746:	84 91       	lpm	r24, Z
    8748:	82 0f       	add	r24, r18
    874a:	91 2d       	mov	r25, r1
    874c:	91 1d       	adc	r25, r1
    874e:	0a 97       	sbiw	r24, 0x0a	; 10
    8750:	29 f4       	brne	.+10     	; 0x875c <__vector_15+0x18ac>
    8752:	80 91 0e 01 	lds	r24, 0x010E
    8756:	88 23       	and	r24, r24
    8758:	09 f4       	brne	.+2      	; 0x875c <__vector_15+0x18ac>
    875a:	2b ca       	rjmp	.-2986   	; 0x7bb2 <__vector_15+0xd02>
			PWM_BLUE  = PWM_TOP ;
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    875c:	83 2f       	mov	r24, r19
    875e:	99 27       	eor	r25, r25
    8760:	fc 01       	movw	r30, r24
    8762:	e5 0f       	add	r30, r21
    8764:	f1 1d       	adc	r31, r1
    8766:	e9 59       	subi	r30, 0x99	; 153
    8768:	f0 4d       	sbci	r31, 0xD0	; 208
    876a:	24 91       	lpm	r18, Z
    876c:	84 0f       	add	r24, r20
    876e:	91 1d       	adc	r25, r1
    8770:	89 57       	subi	r24, 0x79	; 121
    8772:	92 4d       	sbci	r25, 0xD2	; 210
    8774:	fc 01       	movw	r30, r24
    8776:	84 91       	lpm	r24, Z
    8778:	82 0f       	add	r24, r18
    877a:	91 2d       	mov	r25, r1
    877c:	91 1d       	adc	r25, r1
    877e:	0c 97       	sbiw	r24, 0x0c	; 12
    8780:	29 f4       	brne	.+10     	; 0x878c <__vector_15+0x18dc>
    8782:	80 91 0e 01 	lds	r24, 0x010E
    8786:	88 23       	and	r24, r24
    8788:	09 f0       	breq	.+2      	; 0x878c <__vector_15+0x18dc>
    878a:	13 ca       	rjmp	.-3034   	; 0x7bb2 <__vector_15+0xd02>
			PWM_BLUE  = PWM_TOP ;
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[6][BLUE][g_speed7+g_position]);
    878c:	80 91 2c 01 	lds	r24, 0x012C
    8790:	48 2f       	mov	r20, r24
    8792:	43 0f       	add	r20, r19
    8794:	51 2d       	mov	r21, r1
    8796:	51 1d       	adc	r21, r1
    8798:	fa 01       	movw	r30, r20
    879a:	e9 53       	subi	r30, 0x39	; 57
    879c:	f9 4a       	sbci	r31, 0xA9	; 169
    879e:	84 91       	lpm	r24, Z
    87a0:	4b c2       	rjmp	.+1174   	; 0x8c38 <__vector_15+0x1d88>
		
		break;	
			
		case 17:				// background is changing android loader 2 neg grey
			seconds_hand=0;		
    87a2:	10 92 25 01 	sts	0x0125, r1
			if ((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) == 0x27) && (pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position]) == 0x27) && ( abs(g_speed3rev-g_speed7rev) <=1 ))
    87a6:	b0 91 4c 01 	lds	r27, 0x014C
    87aa:	6b 2f       	mov	r22, r27
    87ac:	77 27       	eor	r23, r23
    87ae:	4a 2f       	mov	r20, r26
    87b0:	55 27       	eor	r21, r21
    87b2:	fb 01       	movw	r30, r22
    87b4:	e4 0f       	add	r30, r20
    87b6:	f5 1f       	adc	r31, r21
    87b8:	e9 59       	subi	r30, 0x99	; 153
    87ba:	f0 4d       	sbci	r31, 0xD0	; 208
    87bc:	84 91       	lpm	r24, Z
    87be:	87 32       	cpi	r24, 0x27	; 39
    87c0:	61 f5       	brne	.+88     	; 0x881a <__vector_15+0x196a>
    87c2:	80 91 37 01 	lds	r24, 0x0137
    87c6:	28 2f       	mov	r18, r24
    87c8:	33 27       	eor	r19, r19
    87ca:	f9 01       	movw	r30, r18
    87cc:	e4 0f       	add	r30, r20
    87ce:	f5 1f       	adc	r31, r21
    87d0:	e9 57       	subi	r30, 0x79	; 121
    87d2:	f2 4d       	sbci	r31, 0xD2	; 210
    87d4:	84 91       	lpm	r24, Z
    87d6:	87 32       	cpi	r24, 0x27	; 39
    87d8:	01 f5       	brne	.+64     	; 0x881a <__vector_15+0x196a>
    87da:	26 1b       	sub	r18, r22
    87dc:	37 0b       	sbc	r19, r23
    87de:	2f 5f       	subi	r18, 0xFF	; 255
    87e0:	3f 4f       	sbci	r19, 0xFF	; 255
    87e2:	23 30       	cpi	r18, 0x03	; 3
    87e4:	31 05       	cpc	r19, r1
    87e6:	c8 f4       	brcc	.+50     	; 0x881a <__vector_15+0x196a>
			{
				if (abs(g_mark1-g_position)>6) 
    87e8:	80 91 2b 01 	lds	r24, 0x012B
    87ec:	99 27       	eor	r25, r25
    87ee:	84 1b       	sub	r24, r20
    87f0:	95 0b       	sbc	r25, r21
    87f2:	97 ff       	sbrs	r25, 7
    87f4:	03 c0       	rjmp	.+6      	; 0x87fc <__vector_15+0x194c>
    87f6:	90 95       	com	r25
    87f8:	81 95       	neg	r24
    87fa:	9f 4f       	sbci	r25, 0xFF	; 255
    87fc:	07 97       	sbiw	r24, 0x07	; 7
    87fe:	2c f0       	brlt	.+10     	; 0x880a <__vector_15+0x195a>
				g_mark++;
    8800:	80 91 0e 01 	lds	r24, 0x010E
    8804:	8f 5f       	subi	r24, 0xFF	; 255
    8806:	80 93 0e 01 	sts	0x010E, r24
				if(g_mark == 2)
    880a:	80 91 0e 01 	lds	r24, 0x010E
    880e:	82 30       	cpi	r24, 0x02	; 2
    8810:	11 f4       	brne	.+4      	; 0x8816 <__vector_15+0x1966>
				g_mark =0;
    8812:	10 92 0e 01 	sts	0x010E, r1
				g_mark1=g_position;
    8816:	a0 93 2b 01 	sts	0x012B, r26
			}
		
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    881a:	8a 2f       	mov	r24, r26
    881c:	99 27       	eor	r25, r25
    881e:	fc 01       	movw	r30, r24
    8820:	eb 0f       	add	r30, r27
    8822:	f1 1d       	adc	r31, r1
    8824:	e9 59       	subi	r30, 0x99	; 153
    8826:	f0 4d       	sbci	r31, 0xD0	; 208
    8828:	24 91       	lpm	r18, Z
    882a:	30 91 37 01 	lds	r19, 0x0137
    882e:	83 0f       	add	r24, r19
    8830:	91 1d       	adc	r25, r1
    8832:	89 57       	subi	r24, 0x79	; 121
    8834:	92 4d       	sbci	r25, 0xD2	; 210
    8836:	fc 01       	movw	r30, r24
    8838:	84 91       	lpm	r24, Z
    883a:	82 0f       	add	r24, r18
    883c:	91 2d       	mov	r25, r1
    883e:	91 1d       	adc	r25, r1
    8840:	0a 97       	sbiw	r24, 0x0a	; 10
    8842:	21 f4       	brne	.+8      	; 0x884c <__vector_15+0x199c>
    8844:	80 91 0e 01 	lds	r24, 0x010E
    8848:	88 23       	and	r24, r24
    884a:	b9 f0       	breq	.+46     	; 0x887a <__vector_15+0x19ca>
			PWM_RED = PWM_TOP ;
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    884c:	8a 2f       	mov	r24, r26
    884e:	99 27       	eor	r25, r25
    8850:	fc 01       	movw	r30, r24
    8852:	eb 0f       	add	r30, r27
    8854:	f1 1d       	adc	r31, r1
    8856:	e9 59       	subi	r30, 0x99	; 153
    8858:	f0 4d       	sbci	r31, 0xD0	; 208
    885a:	24 91       	lpm	r18, Z
    885c:	83 0f       	add	r24, r19
    885e:	91 1d       	adc	r25, r1
    8860:	89 57       	subi	r24, 0x79	; 121
    8862:	92 4d       	sbci	r25, 0xD2	; 210
    8864:	fc 01       	movw	r30, r24
    8866:	84 91       	lpm	r24, Z
    8868:	82 0f       	add	r24, r18
    886a:	91 2d       	mov	r25, r1
    886c:	91 1d       	adc	r25, r1
    886e:	0c 97       	sbiw	r24, 0x0c	; 12
    8870:	39 f4       	brne	.+14     	; 0x8880 <__vector_15+0x19d0>
    8872:	80 91 0e 01 	lds	r24, 0x010E
    8876:	88 23       	and	r24, r24
    8878:	19 f0       	breq	.+6      	; 0x8880 <__vector_15+0x19d0>
			PWM_RED = PWM_TOP ;//PWM_RED =  pgm_read_byte(&gc_background[2][RED][g_speed3rev+g_position]);
    887a:	87 e2       	ldi	r24, 0x27	; 39
    887c:	90 e0       	ldi	r25, 0x00	; 0
    887e:	0b c0       	rjmp	.+22     	; 0x8896 <__vector_15+0x19e6>
			else
			PWM_RED =  pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
    8880:	80 91 28 01 	lds	r24, 0x0128
    8884:	28 2f       	mov	r18, r24
    8886:	2a 0f       	add	r18, r26
    8888:	31 2d       	mov	r19, r1
    888a:	31 1d       	adc	r19, r1
    888c:	f9 01       	movw	r30, r18
    888e:	e9 5b       	subi	r30, 0xB9	; 185
    8890:	ff 4b       	sbci	r31, 0xBF	; 191
    8892:	84 91       	lpm	r24, Z
    8894:	99 27       	eor	r25, r25
    8896:	9b bd       	out	0x2b, r25	; 43
    8898:	8a bd       	out	0x2a, r24	; 42
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    889a:	50 91 4c 01 	lds	r21, 0x014C
    889e:	30 91 40 01 	lds	r19, 0x0140
    88a2:	83 2f       	mov	r24, r19
    88a4:	99 27       	eor	r25, r25
    88a6:	fc 01       	movw	r30, r24
    88a8:	e5 0f       	add	r30, r21
    88aa:	f1 1d       	adc	r31, r1
    88ac:	e9 59       	subi	r30, 0x99	; 153
    88ae:	f0 4d       	sbci	r31, 0xD0	; 208
    88b0:	24 91       	lpm	r18, Z
    88b2:	40 91 37 01 	lds	r20, 0x0137
    88b6:	84 0f       	add	r24, r20
    88b8:	91 1d       	adc	r25, r1
    88ba:	89 57       	subi	r24, 0x79	; 121
    88bc:	92 4d       	sbci	r25, 0xD2	; 210
    88be:	fc 01       	movw	r30, r24
    88c0:	84 91       	lpm	r24, Z
    88c2:	82 0f       	add	r24, r18
    88c4:	91 2d       	mov	r25, r1
    88c6:	91 1d       	adc	r25, r1
    88c8:	0a 97       	sbiw	r24, 0x0a	; 10
    88ca:	21 f4       	brne	.+8      	; 0x88d4 <__vector_15+0x1a24>
    88cc:	80 91 0e 01 	lds	r24, 0x010E
    88d0:	88 23       	and	r24, r24
    88d2:	b9 f0       	breq	.+46     	; 0x8902 <__vector_15+0x1a52>
			PWM_GREEN = PWM_TOP ;
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    88d4:	83 2f       	mov	r24, r19
    88d6:	99 27       	eor	r25, r25
    88d8:	fc 01       	movw	r30, r24
    88da:	e5 0f       	add	r30, r21
    88dc:	f1 1d       	adc	r31, r1
    88de:	e9 59       	subi	r30, 0x99	; 153
    88e0:	f0 4d       	sbci	r31, 0xD0	; 208
    88e2:	24 91       	lpm	r18, Z
    88e4:	84 0f       	add	r24, r20
    88e6:	91 1d       	adc	r25, r1
    88e8:	89 57       	subi	r24, 0x79	; 121
    88ea:	92 4d       	sbci	r25, 0xD2	; 210
    88ec:	fc 01       	movw	r30, r24
    88ee:	84 91       	lpm	r24, Z
    88f0:	82 0f       	add	r24, r18
    88f2:	91 2d       	mov	r25, r1
    88f4:	91 1d       	adc	r25, r1
    88f6:	0c 97       	sbiw	r24, 0x0c	; 12
    88f8:	39 f4       	brne	.+14     	; 0x8908 <__vector_15+0x1a58>
    88fa:	80 91 0e 01 	lds	r24, 0x010E
    88fe:	88 23       	and	r24, r24
    8900:	19 f0       	breq	.+6      	; 0x8908 <__vector_15+0x1a58>
			PWM_GREEN = PWM_TOP ;//PWM_GREEN =  pgm_read_byte(&gc_background[2][RED][g_speed3rev+g_position]);
    8902:	87 e2       	ldi	r24, 0x27	; 39
    8904:	90 e0       	ldi	r25, 0x00	; 0
    8906:	0b c0       	rjmp	.+22     	; 0x891e <__vector_15+0x1a6e>
			else
			PWM_GREEN =  pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
    8908:	80 91 28 01 	lds	r24, 0x0128
    890c:	48 2f       	mov	r20, r24
    890e:	43 0f       	add	r20, r19
    8910:	51 2d       	mov	r21, r1
    8912:	51 1d       	adc	r21, r1
    8914:	fa 01       	movw	r30, r20
    8916:	e9 5b       	subi	r30, 0xB9	; 185
    8918:	ff 4b       	sbci	r31, 0xBF	; 191
    891a:	84 91       	lpm	r24, Z
    891c:	99 27       	eor	r25, r25
    891e:	99 bd       	out	0x29, r25	; 41
    8920:	88 bd       	out	0x28, r24	; 40
				
			if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
    8922:	50 91 4c 01 	lds	r21, 0x014C
    8926:	30 91 40 01 	lds	r19, 0x0140
    892a:	83 2f       	mov	r24, r19
    892c:	99 27       	eor	r25, r25
    892e:	fc 01       	movw	r30, r24
    8930:	e5 0f       	add	r30, r21
    8932:	f1 1d       	adc	r31, r1
    8934:	e9 59       	subi	r30, 0x99	; 153
    8936:	f0 4d       	sbci	r31, 0xD0	; 208
    8938:	24 91       	lpm	r18, Z
    893a:	40 91 37 01 	lds	r20, 0x0137
    893e:	84 0f       	add	r24, r20
    8940:	91 1d       	adc	r25, r1
    8942:	89 57       	subi	r24, 0x79	; 121
    8944:	92 4d       	sbci	r25, 0xD2	; 210
    8946:	fc 01       	movw	r30, r24
    8948:	84 91       	lpm	r24, Z
    894a:	82 0f       	add	r24, r18
    894c:	91 2d       	mov	r25, r1
    894e:	91 1d       	adc	r25, r1
    8950:	0a 97       	sbiw	r24, 0x0a	; 10
    8952:	31 f4       	brne	.+12     	; 0x8960 <__vector_15+0x1ab0>
    8954:	80 91 0e 01 	lds	r24, 0x010E
    8958:	88 23       	and	r24, r24
    895a:	11 f4       	brne	.+4      	; 0x8960 <__vector_15+0x1ab0>
    895c:	0c 94 d9 3d 	jmp	0x7bb2 <__vector_15+0xd02>
			PWM_BLUE  = PWM_TOP ;
			else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
    8960:	83 2f       	mov	r24, r19
    8962:	99 27       	eor	r25, r25
    8964:	fc 01       	movw	r30, r24
    8966:	e5 0f       	add	r30, r21
    8968:	f1 1d       	adc	r31, r1
    896a:	e9 59       	subi	r30, 0x99	; 153
    896c:	f0 4d       	sbci	r31, 0xD0	; 208
    896e:	24 91       	lpm	r18, Z
    8970:	84 0f       	add	r24, r20
    8972:	91 1d       	adc	r25, r1
    8974:	89 57       	subi	r24, 0x79	; 121
    8976:	92 4d       	sbci	r25, 0xD2	; 210
    8978:	fc 01       	movw	r30, r24
    897a:	84 91       	lpm	r24, Z
    897c:	82 0f       	add	r24, r18
    897e:	91 2d       	mov	r25, r1
    8980:	91 1d       	adc	r25, r1
    8982:	0c 97       	sbiw	r24, 0x0c	; 12
    8984:	31 f4       	brne	.+12     	; 0x8992 <__vector_15+0x1ae2>
    8986:	80 91 0e 01 	lds	r24, 0x010E
    898a:	88 23       	and	r24, r24
    898c:	11 f0       	breq	.+4      	; 0x8992 <__vector_15+0x1ae2>
    898e:	0c 94 d9 3d 	jmp	0x7bb2 <__vector_15+0xd02>
			PWM_BLUE  = PWM_TOP ;//PWM_BLUE =  pgm_read_byte(&gc_background[2][RED][g_speed3rev+g_position]);
			else
			PWM_BLUE =  pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
    8992:	80 91 28 01 	lds	r24, 0x0128
    8996:	48 2f       	mov	r20, r24
    8998:	43 0f       	add	r20, r19
    899a:	51 2d       	mov	r21, r1
    899c:	51 1d       	adc	r21, r1
    899e:	fa 01       	movw	r30, r20
    89a0:	e9 5b       	subi	r30, 0xB9	; 185
    89a2:	ff 4b       	sbci	r31, 0xBF	; 191
    89a4:	84 91       	lpm	r24, Z
    89a6:	48 c1       	rjmp	.+656    	; 0x8c38 <__vector_15+0x1d88>
		
			
		break;	
		
	
		
		
		case 16:				// background is changing grey, android loader 1 with black lines
			seconds_hand=0;				
    89a8:	10 92 25 01 	sts	0x0125, r1
			if (g_position % 20 == 0)
    89ac:	8a 2f       	mov	r24, r26
    89ae:	64 e1       	ldi	r22, 0x14	; 20
    89b0:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    89b4:	99 23       	and	r25, r25
    89b6:	09 f4       	brne	.+2      	; 0x89ba <__vector_15+0x1b0a>
    89b8:	fe c0       	rjmp	.+508    	; 0x8bb6 <__vector_15+0x1d06>
			{
				PWM_RED = PWM_TOP;
				PWM_GREEN = PWM_TOP;
				PWM_BLUE = PWM_TOP;
			}
			
			else	
			{	
				if ( (pgm_read_byte(&gm_background[0][RED][g_speed2rev+g_position]) == PWM_TOP ) || ( pgm_read_byte(&gm_background[0][GREEN][g_speed3+g_position]) == PWM_TOP)) 
    89ba:	80 91 21 01 	lds	r24, 0x0121
    89be:	2a 2f       	mov	r18, r26
    89c0:	33 27       	eor	r19, r19
    89c2:	f9 01       	movw	r30, r18
    89c4:	e8 0f       	add	r30, r24
    89c6:	f1 1d       	adc	r31, r1
    89c8:	e9 5b       	subi	r30, 0xB9	; 185
    89ca:	fb 4f       	sbci	r31, 0xFB	; 251
    89cc:	84 91       	lpm	r24, Z
    89ce:	87 32       	cpi	r24, 0x27	; 39
    89d0:	51 f0       	breq	.+20     	; 0x89e6 <__vector_15+0x1b36>
    89d2:	80 91 3b 01 	lds	r24, 0x013B
    89d6:	f9 01       	movw	r30, r18
    89d8:	e8 0f       	add	r30, r24
    89da:	f1 1d       	adc	r31, r1
    89dc:	e9 5d       	subi	r30, 0xD9	; 217
    89de:	f9 4f       	sbci	r31, 0xF9	; 249
    89e0:	84 91       	lpm	r24, Z
    89e2:	87 32       	cpi	r24, 0x27	; 39
    89e4:	39 f4       	brne	.+14     	; 0x89f4 <__vector_15+0x1b44>
				{
					PWM_RED = 0x25 ;
    89e6:	85 e2       	ldi	r24, 0x25	; 37
    89e8:	90 e0       	ldi	r25, 0x00	; 0
    89ea:	9b bd       	out	0x2b, r25	; 43
    89ec:	8a bd       	out	0x2a, r24	; 42
					PWM_GREEN = 0x25 ;
    89ee:	99 bd       	out	0x29, r25	; 41
    89f0:	88 bd       	out	0x28, r24	; 40
    89f2:	23 c1       	rjmp	.+582    	; 0x8c3a <__vector_15+0x1d8a>
					PWM_BLUE = 0x25 ;
				}
				else
				{
					PWM_RED = pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]) ;
    89f4:	80 91 28 01 	lds	r24, 0x0128
    89f8:	28 0f       	add	r18, r24
    89fa:	31 1d       	adc	r19, r1
    89fc:	29 5b       	subi	r18, 0xB9	; 185
    89fe:	3f 4b       	sbci	r19, 0xBF	; 191
    8a00:	f9 01       	movw	r30, r18
    8a02:	84 91       	lpm	r24, Z
    8a04:	f3 c0       	rjmp	.+486    	; 0x8bec <__vector_15+0x1d3c>
					PWM_GREEN =  pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]); 
					PWM_BLUE = pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]) ;
				}

			}
			
		break;
			
		case 15:				// background is changing grey, android loader 1
			seconds_hand=0;				
    8a06:	10 92 25 01 	sts	0x0125, r1
			if ( (pgm_read_byte(&gm_background[0][RED][g_speed2rev+g_position]) == PWM_TOP ) || (pgm_read_byte(&gm_background[0][GREEN][g_speed3+g_position]) == PWM_TOP)) 
    8a0a:	80 91 21 01 	lds	r24, 0x0121
    8a0e:	2a 2f       	mov	r18, r26
    8a10:	33 27       	eor	r19, r19
    8a12:	f9 01       	movw	r30, r18
    8a14:	e8 0f       	add	r30, r24
    8a16:	f1 1d       	adc	r31, r1
    8a18:	e9 5b       	subi	r30, 0xB9	; 185
    8a1a:	fb 4f       	sbci	r31, 0xFB	; 251
    8a1c:	84 91       	lpm	r24, Z
    8a1e:	87 32       	cpi	r24, 0x27	; 39
    8a20:	11 f3       	breq	.-60     	; 0x89e6 <__vector_15+0x1b36>
    8a22:	80 91 3b 01 	lds	r24, 0x013B
    8a26:	f9 01       	movw	r30, r18
    8a28:	e8 0f       	add	r30, r24
    8a2a:	f1 1d       	adc	r31, r1
    8a2c:	e9 5d       	subi	r30, 0xD9	; 217
    8a2e:	f9 4f       	sbci	r31, 0xF9	; 249
    8a30:	84 91       	lpm	r24, Z
    8a32:	87 32       	cpi	r24, 0x27	; 39
    8a34:	c1 f2       	breq	.-80     	; 0x89e6 <__vector_15+0x1b36>
			{
				PWM_RED = 0x25 ;
				PWM_GREEN = 0x25 ;
				PWM_BLUE = 0x25 ;
			}
			else
			{
				PWM_RED = pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]) ;
    8a36:	80 91 28 01 	lds	r24, 0x0128
    8a3a:	28 0f       	add	r18, r24
    8a3c:	31 1d       	adc	r19, r1
    8a3e:	29 5b       	subi	r18, 0xB9	; 185
    8a40:	3f 4b       	sbci	r19, 0xBF	; 191
    8a42:	f9 01       	movw	r30, r18
    8a44:	84 91       	lpm	r24, Z
    8a46:	d2 c0       	rjmp	.+420    	; 0x8bec <__vector_15+0x1d3c>
				PWM_GREEN =  pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]); 
				PWM_BLUE = pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]) ;
			}
			
		break;
		
		
			
		case 14:				// background is changing fast, with black lines grey 7x2 light
			seconds_hand=1;			
    8a48:	81 e0       	ldi	r24, 0x01	; 1
    8a4a:	80 93 25 01 	sts	0x0125, r24
			if (g_position % 20 == 0)
    8a4e:	8a 2f       	mov	r24, r26
    8a50:	64 e1       	ldi	r22, 0x14	; 20
    8a52:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    8a56:	99 23       	and	r25, r25
    8a58:	09 f4       	brne	.+2      	; 0x8a5c <__vector_15+0x1bac>
    8a5a:	ad c0       	rjmp	.+346    	; 0x8bb6 <__vector_15+0x1d06>
			{
				PWM_RED = PWM_TOP;
				PWM_GREEN = PWM_TOP;
				PWM_BLUE = PWM_TOP;
			}
			else
			{
			PWM_RED = pgm_read_byte(&gc_background[4][RED][g_speed2+g_position]);
    8a5c:	80 91 13 01 	lds	r24, 0x0113
    8a60:	28 2f       	mov	r18, r24
    8a62:	2a 0f       	add	r18, r26
    8a64:	31 2d       	mov	r19, r1
    8a66:	31 1d       	adc	r19, r1
    8a68:	f9 01       	movw	r30, r18
    8a6a:	e9 53       	subi	r30, 0x39	; 57
    8a6c:	f8 4b       	sbci	r31, 0xB8	; 184
    8a6e:	84 91       	lpm	r24, Z
    8a70:	bd c0       	rjmp	.+378    	; 0x8bec <__vector_15+0x1d3c>
			PWM_GREEN = pgm_read_byte(&gc_background[4][RED][g_speed2+g_position]);
			PWM_BLUE = pgm_read_byte(&gc_background[4][RED][g_speed2+g_position]);
			}	
			
		break;
				
		case 13:				// background is changing fast, grey 7x2 light
			seconds_hand=1;				
    8a72:	81 e0       	ldi	r24, 0x01	; 1
    8a74:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&gc_background[4][RED][g_speed2+g_position]);
    8a78:	80 91 13 01 	lds	r24, 0x0113
    8a7c:	48 2f       	mov	r20, r24
    8a7e:	4a 0f       	add	r20, r26
    8a80:	51 2d       	mov	r21, r1
    8a82:	51 1d       	adc	r21, r1
    8a84:	fa 01       	movw	r30, r20
    8a86:	e9 53       	subi	r30, 0x39	; 57
    8a88:	f8 4b       	sbci	r31, 0xB8	; 184
    8a8a:	84 91       	lpm	r24, Z
    8a8c:	af c0       	rjmp	.+350    	; 0x8bec <__vector_15+0x1d3c>
			PWM_GREEN = pgm_read_byte(&gc_background[4][RED][g_speed2+g_position]);
			PWM_BLUE = pgm_read_byte(&gc_background[4][RED][g_speed2+g_position]);
		break;
		
		case 12:				// background is changing fast, with black lines grey 5x2 light
			seconds_hand=1;			
    8a8e:	81 e0       	ldi	r24, 0x01	; 1
    8a90:	80 93 25 01 	sts	0x0125, r24
			if (g_position % 20 == 0)
    8a94:	8a 2f       	mov	r24, r26
    8a96:	64 e1       	ldi	r22, 0x14	; 20
    8a98:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    8a9c:	99 23       	and	r25, r25
    8a9e:	09 f4       	brne	.+2      	; 0x8aa2 <__vector_15+0x1bf2>
    8aa0:	8a c0       	rjmp	.+276    	; 0x8bb6 <__vector_15+0x1d06>
			{
				PWM_RED = PWM_TOP;
				PWM_GREEN = PWM_TOP;
				PWM_BLUE = PWM_TOP;
			}
			else
			{
			PWM_RED = pgm_read_byte(&gc_background[3][RED][g_speed2+g_position]);
    8aa2:	80 91 13 01 	lds	r24, 0x0113
    8aa6:	68 2f       	mov	r22, r24
    8aa8:	6a 0f       	add	r22, r26
    8aaa:	71 2d       	mov	r23, r1
    8aac:	71 1d       	adc	r23, r1
    8aae:	fb 01       	movw	r30, r22
    8ab0:	e9 5d       	subi	r30, 0xD9	; 217
    8ab2:	fd 4b       	sbci	r31, 0xBD	; 189
    8ab4:	84 91       	lpm	r24, Z
    8ab6:	9a c0       	rjmp	.+308    	; 0x8bec <__vector_15+0x1d3c>
			PWM_GREEN = pgm_read_byte(&gc_background[3][RED][g_speed2+g_position]);
			PWM_BLUE = pgm_read_byte(&gc_background[3][RED][g_speed2+g_position]);
			}
				
		break;
				
		case 11:				// background is changing fast, grey 5x2 light
			seconds_hand=1;				
    8ab8:	81 e0       	ldi	r24, 0x01	; 1
    8aba:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&gc_background[3][RED][g_speed2+g_position]);
    8abe:	80 91 13 01 	lds	r24, 0x0113
    8ac2:	28 2f       	mov	r18, r24
    8ac4:	2a 0f       	add	r18, r26
    8ac6:	31 2d       	mov	r19, r1
    8ac8:	31 1d       	adc	r19, r1
    8aca:	f9 01       	movw	r30, r18
    8acc:	e9 5d       	subi	r30, 0xD9	; 217
    8ace:	fd 4b       	sbci	r31, 0xBD	; 189
    8ad0:	84 91       	lpm	r24, Z
    8ad2:	8c c0       	rjmp	.+280    	; 0x8bec <__vector_15+0x1d3c>
			PWM_GREEN = pgm_read_byte(&gc_background[3][RED][g_speed2+g_position]);
			PWM_BLUE = pgm_read_byte(&gc_background[3][RED][g_speed2+g_position]);
		break;
	
		case 10:				// background is changing fast, with black lines grey x2 light
			seconds_hand=1;			
    8ad4:	81 e0       	ldi	r24, 0x01	; 1
    8ad6:	80 93 25 01 	sts	0x0125, r24
			if (g_position % 20 == 0)
    8ada:	8a 2f       	mov	r24, r26
    8adc:	64 e1       	ldi	r22, 0x14	; 20
    8ade:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    8ae2:	99 23       	and	r25, r25
    8ae4:	09 f4       	brne	.+2      	; 0x8ae8 <__vector_15+0x1c38>
    8ae6:	67 c0       	rjmp	.+206    	; 0x8bb6 <__vector_15+0x1d06>
			{
				PWM_RED = PWM_TOP;
				PWM_GREEN = PWM_TOP;
				PWM_BLUE = PWM_TOP;
			}
			else
			{
			PWM_RED = pgm_read_byte(&gc_background[2][BLUE][g_speed2+g_position]);
    8ae8:	80 91 13 01 	lds	r24, 0x0113
    8aec:	48 2f       	mov	r20, r24
    8aee:	4a 0f       	add	r20, r26
    8af0:	51 2d       	mov	r21, r1
    8af2:	51 1d       	adc	r21, r1
    8af4:	fa 01       	movw	r30, r20
    8af6:	e9 5b       	subi	r30, 0xB9	; 185
    8af8:	ff 4b       	sbci	r31, 0xBF	; 191
    8afa:	84 91       	lpm	r24, Z
    8afc:	77 c0       	rjmp	.+238    	; 0x8bec <__vector_15+0x1d3c>
			PWM_GREEN = pgm_read_byte(&gc_background[2][BLUE][g_speed2+g_position]);
			PWM_BLUE = pgm_read_byte(&gc_background[2][BLUE][g_speed2+g_position]);
			}	
			
		break;
				
		case 9:				// background is changing fast, grey x2 light
			seconds_hand=1;				
    8afe:	81 e0       	ldi	r24, 0x01	; 1
    8b00:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&gc_background[2][BLUE][g_speed2+g_position]);
    8b04:	80 91 13 01 	lds	r24, 0x0113
    8b08:	68 2f       	mov	r22, r24
    8b0a:	6a 0f       	add	r22, r26
    8b0c:	71 2d       	mov	r23, r1
    8b0e:	71 1d       	adc	r23, r1
    8b10:	fb 01       	movw	r30, r22
    8b12:	e9 5b       	subi	r30, 0xB9	; 185
    8b14:	ff 4b       	sbci	r31, 0xBF	; 191
    8b16:	84 91       	lpm	r24, Z
    8b18:	69 c0       	rjmp	.+210    	; 0x8bec <__vector_15+0x1d3c>
			PWM_GREEN = pgm_read_byte(&gc_background[2][BLUE][g_speed2+g_position]);
			PWM_BLUE = pgm_read_byte(&gc_background[2][BLUE][g_speed2+g_position]);
		break;
			
		case 8:				// background is changing slow, with black lines grey 7x2 light
			seconds_hand=1;				
    8b1a:	81 e0       	ldi	r24, 0x01	; 1
    8b1c:	80 93 25 01 	sts	0x0125, r24
			if (g_position % 20 == 0)
    8b20:	8a 2f       	mov	r24, r26
    8b22:	64 e1       	ldi	r22, 0x14	; 20
    8b24:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    8b28:	99 23       	and	r25, r25
    8b2a:	09 f4       	brne	.+2      	; 0x8b2e <__vector_15+0x1c7e>
    8b2c:	44 c0       	rjmp	.+136    	; 0x8bb6 <__vector_15+0x1d06>
			{
				PWM_RED = PWM_TOP;
				PWM_GREEN = PWM_TOP;
				PWM_BLUE = PWM_TOP;
			}
			else
			{	
			PWM_RED = pgm_read_byte(&gc_background[4][RED][g_speed12+g_position]);
    8b2e:	80 91 28 01 	lds	r24, 0x0128
    8b32:	28 2f       	mov	r18, r24
    8b34:	2a 0f       	add	r18, r26
    8b36:	31 2d       	mov	r19, r1
    8b38:	31 1d       	adc	r19, r1
    8b3a:	f9 01       	movw	r30, r18
    8b3c:	e9 53       	subi	r30, 0x39	; 57
    8b3e:	f8 4b       	sbci	r31, 0xB8	; 184
    8b40:	84 91       	lpm	r24, Z
    8b42:	54 c0       	rjmp	.+168    	; 0x8bec <__vector_15+0x1d3c>
			PWM_GREEN = pgm_read_byte(&gc_background[4][RED][g_speed12+g_position]);
			PWM_BLUE = pgm_read_byte(&gc_background[4][RED][g_speed12+g_position]);
			}	
			
		break;
			
		case 7:				// background is changing slow, grey 7 x2 lihgt
			seconds_hand=1;				
    8b44:	81 e0       	ldi	r24, 0x01	; 1
    8b46:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&gc_background[4][RED][g_speed12+g_position]);
    8b4a:	80 91 28 01 	lds	r24, 0x0128
    8b4e:	48 2f       	mov	r20, r24
    8b50:	4a 0f       	add	r20, r26
    8b52:	51 2d       	mov	r21, r1
    8b54:	51 1d       	adc	r21, r1
    8b56:	fa 01       	movw	r30, r20
    8b58:	e9 53       	subi	r30, 0x39	; 57
    8b5a:	f8 4b       	sbci	r31, 0xB8	; 184
    8b5c:	84 91       	lpm	r24, Z
    8b5e:	46 c0       	rjmp	.+140    	; 0x8bec <__vector_15+0x1d3c>
			PWM_GREEN = pgm_read_byte(&gc_background[4][RED][g_speed12+g_position]);
			PWM_BLUE = pgm_read_byte(&gc_background[4][RED][g_speed12+g_position]);
		break;
				
	
			
		case 6:				// background is changing slow, with black lines grey 5x2 light
			seconds_hand=1;				
    8b60:	81 e0       	ldi	r24, 0x01	; 1
    8b62:	80 93 25 01 	sts	0x0125, r24
			if (g_position % 20 == 0)
    8b66:	8a 2f       	mov	r24, r26
    8b68:	64 e1       	ldi	r22, 0x14	; 20
    8b6a:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    8b6e:	99 23       	and	r25, r25
    8b70:	11 f1       	breq	.+68     	; 0x8bb6 <__vector_15+0x1d06>
			{
				PWM_RED = PWM_TOP;
				PWM_GREEN = PWM_TOP;
				PWM_BLUE = PWM_TOP;
			}
			else
			{
			PWM_RED = pgm_read_byte(&gc_background[3][RED][g_speed12+g_position]);
    8b72:	80 91 28 01 	lds	r24, 0x0128
    8b76:	68 2f       	mov	r22, r24
    8b78:	6a 0f       	add	r22, r26
    8b7a:	71 2d       	mov	r23, r1
    8b7c:	71 1d       	adc	r23, r1
    8b7e:	fb 01       	movw	r30, r22
    8b80:	e9 5d       	subi	r30, 0xD9	; 217
    8b82:	fd 4b       	sbci	r31, 0xBD	; 189
    8b84:	84 91       	lpm	r24, Z
    8b86:	32 c0       	rjmp	.+100    	; 0x8bec <__vector_15+0x1d3c>
			PWM_GREEN = pgm_read_byte(&gc_background[3][RED][g_speed12+g_position]);
			PWM_BLUE = pgm_read_byte(&gc_background[3][RED][g_speed12+g_position]);
			}	
			
		break;
			
		case 5:				// background is changing slow, grey 5 x2 light
			seconds_hand=1;				
    8b88:	81 e0       	ldi	r24, 0x01	; 1
    8b8a:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&gc_background[3][RED][g_speed12+g_position]);
    8b8e:	80 91 28 01 	lds	r24, 0x0128
    8b92:	28 2f       	mov	r18, r24
    8b94:	2a 0f       	add	r18, r26
    8b96:	31 2d       	mov	r19, r1
    8b98:	31 1d       	adc	r19, r1
    8b9a:	f9 01       	movw	r30, r18
    8b9c:	e9 5d       	subi	r30, 0xD9	; 217
    8b9e:	fd 4b       	sbci	r31, 0xBD	; 189
    8ba0:	84 91       	lpm	r24, Z
    8ba2:	24 c0       	rjmp	.+72     	; 0x8bec <__vector_15+0x1d3c>
			PWM_GREEN = pgm_read_byte(&gc_background[3][RED][g_speed12+g_position]);
			PWM_BLUE = pgm_read_byte(&gc_background[3][RED][g_speed12+g_position]);
		break;
				
		case 4:				// background is changing slow, with black lines grey x2 light
			seconds_hand=1;			
    8ba4:	81 e0       	ldi	r24, 0x01	; 1
    8ba6:	80 93 25 01 	sts	0x0125, r24
			if (g_position % 20 == 0)
    8baa:	8a 2f       	mov	r24, r26
    8bac:	64 e1       	ldi	r22, 0x14	; 20
    8bae:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    8bb2:	99 23       	and	r25, r25
    8bb4:	19 f4       	brne	.+6      	; 0x8bbc <__vector_15+0x1d0c>
			{
				PWM_RED = PWM_TOP;
    8bb6:	87 e2       	ldi	r24, 0x27	; 39
    8bb8:	90 e0       	ldi	r25, 0x00	; 0
    8bba:	17 cf       	rjmp	.-466    	; 0x89ea <__vector_15+0x1b3a>
				PWM_GREEN = PWM_TOP;
				PWM_BLUE = PWM_TOP;
			}	
			else
			{
			PWM_RED = pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
    8bbc:	80 91 28 01 	lds	r24, 0x0128
    8bc0:	48 2f       	mov	r20, r24
    8bc2:	4a 0f       	add	r20, r26
    8bc4:	51 2d       	mov	r21, r1
    8bc6:	51 1d       	adc	r21, r1
    8bc8:	fa 01       	movw	r30, r20
    8bca:	e9 5b       	subi	r30, 0xB9	; 185
    8bcc:	ff 4b       	sbci	r31, 0xBF	; 191
    8bce:	84 91       	lpm	r24, Z
    8bd0:	0d c0       	rjmp	.+26     	; 0x8bec <__vector_15+0x1d3c>
			PWM_GREEN = pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
			PWM_BLUE = pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
			}	
			
		break;
			
		case 3:				// background is changing slow, grey x2 light
			seconds_hand=1;				
    8bd2:	81 e0       	ldi	r24, 0x01	; 1
    8bd4:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
    8bd8:	80 91 28 01 	lds	r24, 0x0128
    8bdc:	68 2f       	mov	r22, r24
    8bde:	6a 0f       	add	r22, r26
    8be0:	71 2d       	mov	r23, r1
    8be2:	71 1d       	adc	r23, r1
    8be4:	fb 01       	movw	r30, r22
    8be6:	e9 5b       	subi	r30, 0xB9	; 185
    8be8:	ff 4b       	sbci	r31, 0xBF	; 191
    8bea:	84 91       	lpm	r24, Z
    8bec:	99 27       	eor	r25, r25
    8bee:	fd ce       	rjmp	.-518    	; 0x89ea <__vector_15+0x1b3a>
			PWM_GREEN = pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
			PWM_BLUE = pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
		break;
		
	//	case 10:				// background is changing fast, with black lines africa
	//		seconds_hand=1;				
	//		if (g_position % 20 == 0)
	//		{
	//			PWM_RED = PWM_TOP;
	//			PWM_GREEN = PWM_TOP;
	//			PWM_BLUE = PWM_TOP;
	//		}
	//		else
	//		{	
	//		PWM_RED = pgm_read_byte(&gc_background[6][RED][g_speed3+g_position]);
	//		PWM_GREEN = pgm_read_byte(&gc_background[6][GREEN][g_speed3+g_position]);
	//		PWM_BLUE = pgm_read_byte(&gc_background[6][BLUE][g_speed3+g_position]);
	//		}	
			
	//	break;
				
	//	case 9:				// background is changing fast, africa
	//		seconds_hand=1;				
	//		PWM_RED = pgm_read_byte(&gc_background[6][RED][g_speed3+g_position]);
	//		PWM_GREEN = pgm_read_byte(&gc_background[6][GREEN][g_speed3+g_position]);
	//		PWM_BLUE = pgm_read_byte(&gc_background[6][BLUE][g_speed3+g_position]);
	//	break;
	
		
		
		//case 12:				// background is changing fast, with black lines windows
		//	seconds_hand=1;			
		//	if (g_position % 20 == 0)
		//	{
		//		PWM_RED = PWM_TOP;
		//		PWM_GREEN = PWM_TOP;
		//		PWM_BLUE = PWM_TOP;
		//	}	
		//	else
		//	{
		//	PWM_RED = pgm_read_byte(&gc_background[7][RED][g_speed3+g_position]);
		//	PWM_GREEN = pgm_read_byte(&gc_background[7][GREEN][g_speed3+g_position]);
		//	PWM_BLUE = pgm_read_byte(&gc_background[7][BLUE][g_speed3+g_position]);
		//	}	
			
		//break;
	
		//case 11:				// background is changing fast, windows
		//	seconds_hand=1;			
		//	PWM_RED = pgm_read_byte(&gc_background[7][RED][g_speed3+g_position]);
		//	PWM_GREEN = pgm_read_byte(&gc_background[7][GREEN][g_speed3+g_position]);
		//	PWM_BLUE = pgm_read_byte(&gc_background[7][BLUE][g_speed3+g_position]);
		//	break;
	
	//	case 8:				// background is changing fast, with black lines rainbow
	//		seconds_hand=1;		
	//		if (g_position % 20 == 0)
	//		{
	//			PWM_RED = PWM_TOP;
	//			PWM_GREEN = PWM_TOP;
	//			PWM_BLUE = PWM_TOP;
	//		}
	//		else
	//		{
	//		PWM_RED = pgm_read_byte(&gc_background[0][RED][g_speed3+g_position]);
	//		PWM_GREEN = pgm_read_byte(&gc_background[0][GREEN][g_speed3+g_position]);
	//		PWM_BLUE = pgm_read_byte(&gc_background[0][BLUE][g_speed3+g_position]);
	//		}
			
			
	//	break;
			
	//	case 7:				// background is changing fast, rainbowx2
	//		seconds_hand=1;			
	//		PWM_RED = pgm_read_byte(&gc_background[0][RED][g_speed3+g_position]);
	//		PWM_GREEN = pgm_read_byte(&gc_background[0][GREEN][g_speed3+g_position]);
	//		PWM_BLUE = pgm_read_byte(&gc_background[0][BLUE][g_speed3+g_position]);
	//	break;
	
	//	case 6:				// background is changing slow, with black lines africa
	//		seconds_hand=1;			
	//		if (g_position % 20 == 0)
	//		{
	//			PWM_RED = PWM_TOP;
	//			PWM_GREEN = PWM_TOP;
	//			PWM_BLUE = PWM_TOP;
	//		}
	//		else	
	//		{
	//		PWM_RED = pgm_read_byte(&gc_background[6][RED][g_speed12+g_position]);
	//		PWM_GREEN = pgm_read_byte(&gc_background[6][GREEN][g_speed12+g_position]);
	//		PWM_BLUE = pgm_read_byte(&gc_background[6][BLUE][g_speed12+g_position]);
	//		}	
			
	//	break;
				
	//	case 5:				// background is changing slow, africa
	//		seconds_hand=1;				
	//		PWM_RED = pgm_read_byte(&gc_background[6][RED][g_speed12+g_position]);
	//		PWM_GREEN = pgm_read_byte(&gc_background[6][GREEN][g_speed12+g_position]);
	//		PWM_BLUE = pgm_read_byte(&gc_background[6][BLUE][g_speed12+g_position]);
	//	break;
		
	//	case 6:				// background is changing slow, with black lines windows
	//		seconds_hand=1;			
	//		if (g_position % 20 == 0)
	//		{
	//			PWM_RED = PWM_TOP;
	//			PWM_GREEN = PWM_TOP;
	//			PWM_BLUE = PWM_TOP;
	//		}	
	//		else
	//		{
	//		PWM_RED = pgm_read_byte(&gc_background[7][RED][g_speed12+g_position]);
	//		PWM_GREEN = pgm_read_byte(&gc_background[7][GREEN][g_speed12+g_position]);
	//		PWM_BLUE = pgm_read_byte(&gc_background[7][BLUE][g_speed12+g_position]);
	//		}	
			
	//	break;
		
	//	case 3:				// background is changing slow, windows
	//		seconds_hand=1;			
	//		PWM_RED = pgm_read_byte(&gc_background[7][RED][g_speed12+g_position]);
	//		PWM_GREEN = pgm_read_byte(&gc_background[7][GREEN][g_speed12+g_position]);
	//		PWM_BLUE = pgm_read_byte(&gc_background[7][BLUE][g_speed12+g_position]);
	//		break;



	//	case 4:				// background is changing slow, with black lines rainbowx2
	//		seconds_hand=1;					
	//		if (g_position % 20 == 0)
	//		{
	//			PWM_RED = PWM_TOP;
	//			PWM_GREEN = PWM_TOP;
	//			PWM_BLUE = PWM_TOP;
	//		}
	//		else
	//		{
	//		PWM_RED = pgm_read_byte(&gc_background[0][RED][g_speed12+g_position]);
	//		PWM_GREEN = pgm_read_byte(&gc_background[0][GREEN][g_speed12+g_position]);
	//		PWM_BLUE = pgm_read_byte(&gc_background[0][BLUE][g_speed12+g_position]);
	//		}
			
	//	break;
				
	//	case 3:				// background is changing slow, rainbowx2
	//		seconds_hand=1;				
	//		PWM_RED = pgm_read_byte(&gc_background[0][RED][g_speed12+g_position]);
	//		PWM_GREEN = pgm_read_byte(&gc_background[0][GREEN][g_speed12+g_position]);
	//		PWM_BLUE = pgm_read_byte(&gc_background[0][BLUE][g_speed12+g_position]);
	//	break;
			
		//case 4:				// background is changing, one color with black lines
		//	seconds_hand=1;					
		//	if (g_position % 20 == 0)
		//	{
		//		PWM_RED = PWM_TOP;
		//		PWM_GREEN = PWM_TOP;
		//		PWM_BLUE = PWM_TOP;
		//	}
		//	else
		//	{
		//	PWM_RED = pgm_read_byte(&g_background[3][RED][g_seconds]);
		//	PWM_GREEN = pgm_read_byte(&g_background[3][GREEN][g_seconds]);
		//	PWM_BLUE = pgm_read_byte(&g_background[3][BLUE][g_seconds]);
		//	}
			
		//break;
			
		//case 3:				// background is changing, one color 
		
				// background is changing android loader 2 neg grey
		//	seconds_hand=0;		
		//		if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) == 0x27) && (pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position]) == 0x27)) && (abs(g_speed3rev-g_speed7rev)<=1) )
		//	{
		//		if (((abs(g_mark1-g_position)>=58) && (abs(g_mark1-g_position)<=62)) || ((abs(g_mark1-g_position)>=178) && (abs(g_mark1-g_position)<=182)) || (((abs(g_mark1-g_position)>=238) && (abs(g_mark1-g_position)<=240)) && ((abs(g_mark1-g_position)>=0) && (abs(g_mark1-g_position)<=2))))
				
		//		g_mark++;
			
		//		if(g_mark == 2)
		//		g_mark =0;
		//		g_mark1=g_position;
		//		PWM_RED =0x00;
		//		PWM_GREEN =0x00;
		//		PWM_BLUE  =0x00;
		//	}
		
		//	if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0a) && !(g_mark))
		//	{
		//		PWM_RED = PWM_TOP ;
		//		PWM_GREEN = PWM_TOP ;
		//		PWM_BLUE  = PWM_TOP ;
		//	}
			
		//	else if (((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) + pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position])) == 0x0c) && (g_mark))
		//	{
		//		PWM_RED = PWM_TOP ;
		//		PWM_GREEN = PWM_TOP ;
		//		PWM_BLUE  = PWM_TOP ;
		//	}
			
		//	else
		//	{
		//		PWM_RED =  pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
		//		PWM_GREEN =  pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
		//		PWM_BLUE =  pgm_read_byte(&gc_background[2][BLUE][g_speed12+g_position]);
		//	}
		
			
			//if ((pgm_read_byte(&gm_background[11][GREEN][g_speed7rev+g_position]) == 0x27) && (pgm_read_byte(&gm_background[11][RED][g_speed3rev+g_position]) == 0x27) )
			//{
			////PWM_RED =0x00;
			//PWM_GREEN =0x00;
			//PWM_BLUE  =0x00;
		//	}
			
		//break;	
	
			//seconds_hand=1;				
		//	PWM_RED = pgm_read_byte(&g_background[3][RED][g_seconds]);
		//	PWM_GREEN = pgm_read_byte(&g_background[3][GREEN][g_seconds]);
		//	PWM_BLUE = pgm_read_byte(&g_background[3][BLUE][g_seconds]);
		//break;
			
		default:		// basic modes
			seconds_hand=1;				
    8bf0:	81 e0       	ldi	r24, 0x01	; 1
    8bf2:	80 93 25 01 	sts	0x0125, r24
			PWM_RED = pgm_read_byte(&g_background[g_mode][RED][g_position]);
    8bf6:	33 27       	eor	r19, r19
    8bf8:	80 ed       	ldi	r24, 0xD0	; 208
    8bfa:	92 e0       	ldi	r25, 0x02	; 2
    8bfc:	28 9f       	mul	r18, r24
    8bfe:	f0 01       	movw	r30, r0
    8c00:	29 9f       	mul	r18, r25
    8c02:	f0 0d       	add	r31, r0
    8c04:	38 9f       	mul	r19, r24
    8c06:	f0 0d       	add	r31, r0
    8c08:	11 24       	eor	r1, r1
    8c0a:	cf 01       	movw	r24, r30
    8c0c:	20 91 40 01 	lds	r18, 0x0140
    8c10:	82 0f       	add	r24, r18
    8c12:	91 1d       	adc	r25, r1
    8c14:	fc 01       	movw	r30, r24
    8c16:	e9 5b       	subi	r30, 0xB9	; 185
    8c18:	f1 4a       	sbci	r31, 0xA1	; 161
    8c1a:	24 91       	lpm	r18, Z
    8c1c:	33 27       	eor	r19, r19
    8c1e:	3b bd       	out	0x2b, r19	; 43
    8c20:	2a bd       	out	0x2a, r18	; 42
			PWM_GREEN = pgm_read_byte(&g_background[g_mode][GREEN][g_position]);
    8c22:	fc 01       	movw	r30, r24
    8c24:	e9 5c       	subi	r30, 0xC9	; 201
    8c26:	f0 4a       	sbci	r31, 0xA0	; 160
    8c28:	24 91       	lpm	r18, Z
    8c2a:	33 27       	eor	r19, r19
    8c2c:	39 bd       	out	0x29, r19	; 41
    8c2e:	28 bd       	out	0x28, r18	; 40
			PWM_BLUE = pgm_read_byte(&g_background[g_mode][BLUE][g_position]);
    8c30:	89 5d       	subi	r24, 0xD9	; 217
    8c32:	9f 49       	sbci	r25, 0x9F	; 159
    8c34:	fc 01       	movw	r30, r24
    8c36:	84 91       	lpm	r24, Z
    8c38:	99 27       	eor	r25, r25
    8c3a:	90 93 79 00 	sts	0x0079, r25
    8c3e:	80 93 78 00 	sts	0x0078, r24
		break;			
		}
	}
	
	g_position++;		//increase position
    8c42:	80 91 40 01 	lds	r24, 0x0140
    8c46:	8f 5f       	subi	r24, 0xFF	; 255
    8c48:	80 93 40 01 	sts	0x0140, r24
	g_reminder--;	//decrease reminder
    8c4c:	c1 50       	subi	r28, 0x01	; 1
    8c4e:	c0 93 24 01 	sts	0x0124, r28
	
	
	//demo mode
	if (g_s_rc_state == STATE_DEMO)
    8c52:	30 91 00 01 	lds	r19, 0x0100
    8c56:	32 30       	cpi	r19, 0x02	; 2
    8c58:	29 f4       	brne	.+10     	; 0x8c64 <__vector_15+0x1db4>
		g_mode=g_speeddemo;	
    8c5a:	80 91 01 01 	lds	r24, 0x0101
    8c5e:	80 93 1f 01 	sts	0x011F, r24
    8c62:	04 c0       	rjmp	.+8      	; 0x8c6c <__vector_15+0x1dbc>
	else
		g_speeddemo=g_mode;
    8c64:	80 91 1f 01 	lds	r24, 0x011F
    8c68:	80 93 01 01 	sts	0x0101, r24
	
	//	for various speed, mode background changing
	timer2tmp=TCNT2;
    8c6c:	84 b5       	in	r24, 0x24	; 36
    8c6e:	80 93 39 01 	sts	0x0139, r24
	if (TCNT2 % 85 == 0)	
    8c72:	84 b5       	in	r24, 0x24	; 36
    8c74:	65 e5       	ldi	r22, 0x55	; 85
    8c76:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    8c7a:	99 23       	and	r25, r25
    8c7c:	09 f0       	breq	.+2      	; 0x8c80 <__vector_15+0x1dd0>
    8c7e:	3c c1       	rjmp	.+632    	; 0x8ef8 <__vector_15+0x2048>
	{
		g_timer2_speed2++;
    8c80:	80 91 26 01 	lds	r24, 0x0126
    8c84:	8f 5f       	subi	r24, 0xFF	; 255
    8c86:	80 93 26 01 	sts	0x0126, r24
		g_timer2_speed3++;
    8c8a:	80 91 3f 01 	lds	r24, 0x013F
    8c8e:	8f 5f       	subi	r24, 0xFF	; 255
    8c90:	80 93 3f 01 	sts	0x013F, r24
		g_timer2_speed6++;
    8c94:	80 91 2f 01 	lds	r24, 0x012F
    8c98:	8f 5f       	subi	r24, 0xFF	; 255
    8c9a:	80 93 2f 01 	sts	0x012F, r24
		g_timer2_speed7++;
    8c9e:	80 91 32 01 	lds	r24, 0x0132
    8ca2:	8f 5f       	subi	r24, 0xFF	; 255
    8ca4:	80 93 32 01 	sts	0x0132, r24
		g_timer2_speed8++;
    8ca8:	80 91 3a 01 	lds	r24, 0x013A
    8cac:	8f 5f       	subi	r24, 0xFF	; 255
    8cae:	80 93 3a 01 	sts	0x013A, r24
		g_timer2_speed9++;
    8cb2:	80 91 23 01 	lds	r24, 0x0123
    8cb6:	8f 5f       	subi	r24, 0xFF	; 255
    8cb8:	80 93 23 01 	sts	0x0123, r24
		g_timer2_speed12++;
    8cbc:	80 91 31 01 	lds	r24, 0x0131
    8cc0:	8f 5f       	subi	r24, 0xFF	; 255
    8cc2:	80 93 31 01 	sts	0x0131, r24
		g_timer2_speeddemo1++;
    8cc6:	20 91 36 01 	lds	r18, 0x0136
    8cca:	2f 5f       	subi	r18, 0xFF	; 255
    8ccc:	20 93 36 01 	sts	0x0136, r18
		g_timer2_speedrandom1++;
    8cd0:	80 91 11 01 	lds	r24, 0x0111
    8cd4:	8f 5f       	subi	r24, 0xFF	; 255
    8cd6:	80 93 11 01 	sts	0x0111, r24
		if (g_s_rc_state == STATE_DEMO)
    8cda:	32 30       	cpi	r19, 0x02	; 2
    8cdc:	b1 f4       	brne	.+44     	; 0x8d0a <__vector_15+0x1e5a>
		{
			
			//g_temp_mode=0;
			if (g_timer2_speeddemo1 == 248)	//&&	(g_s_rc_state == STATE_DEMO))// very slow, every 15s, demo mode
    8cde:	28 3f       	cpi	r18, 0xF8	; 248
    8ce0:	a1 f4       	brne	.+40     	; 0x8d0a <__vector_15+0x1e5a>
			{	
				g_timer2_speeddemo2++;
    8ce2:	80 91 12 01 	lds	r24, 0x0112
    8ce6:	8f 5f       	subi	r24, 0xFF	; 255
    8ce8:	80 93 12 01 	sts	0x0112, r24
			
				if(g_timer2_speeddemo2 == 14)
    8cec:	8e 30       	cpi	r24, 0x0E	; 14
    8cee:	59 f4       	brne	.+22     	; 0x8d06 <__vector_15+0x1e56>
				{
					g_speeddemo++;
    8cf0:	80 91 01 01 	lds	r24, 0x0101
    8cf4:	8f 5f       	subi	r24, 0xFF	; 255
    8cf6:	80 93 01 01 	sts	0x0101, r24
					if(g_speeddemo == NUMBER_OF_MODES)
    8cfa:	83 32       	cpi	r24, 0x23	; 35
    8cfc:	11 f4       	brne	.+4      	; 0x8d02 <__vector_15+0x1e52>
				
					g_speeddemo =2;
    8cfe:	30 93 01 01 	sts	0x0101, r19
				
				
					g_timer2_speeddemo2=0;
    8d02:	90 93 12 01 	sts	0x0112, r25
				
				}
			
				g_timer2_speeddemo1=0;	
    8d06:	10 92 36 01 	sts	0x0136, r1
			}
		}
		//else
		//g_speeddemo =0;

		if (g_timer2_speed12 == 12)		// slow background change
    8d0a:	80 91 31 01 	lds	r24, 0x0131
    8d0e:	8c 30       	cpi	r24, 0x0C	; 12
    8d10:	b9 f4       	brne	.+46     	; 0x8d40 <__vector_15+0x1e90>
		{
			if(g_speed12rev == 0)
    8d12:	80 91 3e 01 	lds	r24, 0x013E
    8d16:	88 23       	and	r24, r24
    8d18:	19 f4       	brne	.+6      	; 0x8d20 <__vector_15+0x1e70>
			g_speed12rev  =RESOLUTION;
    8d1a:	80 ef       	ldi	r24, 0xF0	; 240
    8d1c:	80 93 3e 01 	sts	0x013E, r24
			g_speed12rev --;
    8d20:	80 91 3e 01 	lds	r24, 0x013E
    8d24:	81 50       	subi	r24, 0x01	; 1
    8d26:	80 93 3e 01 	sts	0x013E, r24
			
			g_speed12++;
    8d2a:	80 91 28 01 	lds	r24, 0x0128
    8d2e:	8f 5f       	subi	r24, 0xFF	; 255
    8d30:	80 93 28 01 	sts	0x0128, r24
			if(g_speed12 == RESOLUTION)
    8d34:	80 3f       	cpi	r24, 0xF0	; 240
    8d36:	11 f4       	brne	.+4      	; 0x8d3c <__vector_15+0x1e8c>
			g_speed12 =0;
    8d38:	10 92 28 01 	sts	0x0128, r1

			g_timer2_speed12=0;
    8d3c:	10 92 31 01 	sts	0x0131, r1
		}
	
		if (g_timer2_speed9 == 9)		// slow background change
    8d40:	80 91 23 01 	lds	r24, 0x0123
    8d44:	89 30       	cpi	r24, 0x09	; 9
    8d46:	b9 f4       	brne	.+46     	; 0x8d76 <__vector_15+0x1ec6>
		{
			if(g_speed9rev == 0)
    8d48:	80 91 2d 01 	lds	r24, 0x012D
    8d4c:	88 23       	and	r24, r24
    8d4e:	19 f4       	brne	.+6      	; 0x8d56 <__vector_15+0x1ea6>
			g_speed9rev  =RESOLUTION;
    8d50:	80 ef       	ldi	r24, 0xF0	; 240
    8d52:	80 93 2d 01 	sts	0x012D, r24
			g_speed9rev --;
    8d56:	80 91 2d 01 	lds	r24, 0x012D
    8d5a:	81 50       	subi	r24, 0x01	; 1
    8d5c:	80 93 2d 01 	sts	0x012D, r24
			
			g_speed9++;
    8d60:	80 91 3c 01 	lds	r24, 0x013C
    8d64:	8f 5f       	subi	r24, 0xFF	; 255
    8d66:	80 93 3c 01 	sts	0x013C, r24
			if(g_speed9 == RESOLUTION)
    8d6a:	80 3f       	cpi	r24, 0xF0	; 240
    8d6c:	11 f4       	brne	.+4      	; 0x8d72 <__vector_15+0x1ec2>
			g_speed9 =0;
    8d6e:	10 92 3c 01 	sts	0x013C, r1

			g_timer2_speed9=0;
    8d72:	10 92 23 01 	sts	0x0123, r1
		}
	
		if (g_timer2_speed8 == 8)		// slow background change
    8d76:	80 91 3a 01 	lds	r24, 0x013A
    8d7a:	88 30       	cpi	r24, 0x08	; 8
    8d7c:	b9 f4       	brne	.+46     	; 0x8dac <__vector_15+0x1efc>
		{
			if(g_speed8rev == 0)
    8d7e:	80 91 33 01 	lds	r24, 0x0133
    8d82:	88 23       	and	r24, r24
    8d84:	19 f4       	brne	.+6      	; 0x8d8c <__vector_15+0x1edc>
			g_speed8rev  =RESOLUTION;
    8d86:	80 ef       	ldi	r24, 0xF0	; 240
    8d88:	80 93 33 01 	sts	0x0133, r24
			g_speed8rev --;
    8d8c:	80 91 33 01 	lds	r24, 0x0133
    8d90:	81 50       	subi	r24, 0x01	; 1
    8d92:	80 93 33 01 	sts	0x0133, r24
			
			g_speed8++;
    8d96:	80 91 14 01 	lds	r24, 0x0114
    8d9a:	8f 5f       	subi	r24, 0xFF	; 255
    8d9c:	80 93 14 01 	sts	0x0114, r24
			if(g_speed8 == RESOLUTION)
    8da0:	80 3f       	cpi	r24, 0xF0	; 240
    8da2:	11 f4       	brne	.+4      	; 0x8da8 <__vector_15+0x1ef8>
			g_speed8 =0;
    8da4:	10 92 14 01 	sts	0x0114, r1

			g_timer2_speed8=0;
    8da8:	10 92 3a 01 	sts	0x013A, r1
		}
	
		if (g_timer2_speed7 == 7)		// slow background change
    8dac:	80 91 32 01 	lds	r24, 0x0132
    8db0:	87 30       	cpi	r24, 0x07	; 7
    8db2:	b9 f4       	brne	.+46     	; 0x8de2 <__vector_15+0x1f32>
		{
			if(g_speed7rev == 0)
    8db4:	80 91 4c 01 	lds	r24, 0x014C
    8db8:	88 23       	and	r24, r24
    8dba:	19 f4       	brne	.+6      	; 0x8dc2 <__vector_15+0x1f12>
			g_speed7rev  =RESOLUTION;
    8dbc:	80 ef       	ldi	r24, 0xF0	; 240
    8dbe:	80 93 4c 01 	sts	0x014C, r24
			g_speed7rev --;
    8dc2:	80 91 4c 01 	lds	r24, 0x014C
    8dc6:	81 50       	subi	r24, 0x01	; 1
    8dc8:	80 93 4c 01 	sts	0x014C, r24
			
			g_speed7++;
    8dcc:	80 91 2c 01 	lds	r24, 0x012C
    8dd0:	8f 5f       	subi	r24, 0xFF	; 255
    8dd2:	80 93 2c 01 	sts	0x012C, r24
			if(g_speed7 == RESOLUTION)
    8dd6:	80 3f       	cpi	r24, 0xF0	; 240
    8dd8:	11 f4       	brne	.+4      	; 0x8dde <__vector_15+0x1f2e>
			g_speed7 =0;
    8dda:	10 92 2c 01 	sts	0x012C, r1

			g_timer2_speed7=0;
    8dde:	10 92 32 01 	sts	0x0132, r1
		}
		
		if (g_timer2_speed6 == 6)		// slow1 background change
    8de2:	80 91 2f 01 	lds	r24, 0x012F
    8de6:	86 30       	cpi	r24, 0x06	; 6
    8de8:	b9 f4       	brne	.+46     	; 0x8e18 <__vector_15+0x1f68>
		{
			if(g_speed6rev == 0)
    8dea:	80 91 27 01 	lds	r24, 0x0127
    8dee:	88 23       	and	r24, r24
    8df0:	19 f4       	brne	.+6      	; 0x8df8 <__vector_15+0x1f48>
			g_speed6rev  =RESOLUTION;
    8df2:	80 ef       	ldi	r24, 0xF0	; 240
    8df4:	80 93 27 01 	sts	0x0127, r24
			g_speed6rev --;
    8df8:	80 91 27 01 	lds	r24, 0x0127
    8dfc:	81 50       	subi	r24, 0x01	; 1
    8dfe:	80 93 27 01 	sts	0x0127, r24
			
			g_speed6++;
    8e02:	80 91 43 01 	lds	r24, 0x0143
    8e06:	8f 5f       	subi	r24, 0xFF	; 255
    8e08:	80 93 43 01 	sts	0x0143, r24
			if(g_speed6 == RESOLUTION)
    8e0c:	80 3f       	cpi	r24, 0xF0	; 240
    8e0e:	11 f4       	brne	.+4      	; 0x8e14 <__vector_15+0x1f64>
			g_speed6 =0;
    8e10:	10 92 43 01 	sts	0x0143, r1

			g_timer2_speed6=0;
    8e14:	10 92 2f 01 	sts	0x012F, r1
		}
		
		if (g_timer2_speed3 == 3)	
    8e18:	80 91 3f 01 	lds	r24, 0x013F
    8e1c:	83 30       	cpi	r24, 0x03	; 3
    8e1e:	b9 f4       	brne	.+46     	; 0x8e4e <__vector_15+0x1f9e>
		{
			g_speed3++;
    8e20:	80 91 3b 01 	lds	r24, 0x013B
    8e24:	8f 5f       	subi	r24, 0xFF	; 255
    8e26:	80 93 3b 01 	sts	0x013B, r24
			if(g_speed3 >= RESOLUTION)		// fast1 background change
    8e2a:	80 3f       	cpi	r24, 0xF0	; 240
    8e2c:	10 f0       	brcs	.+4      	; 0x8e32 <__vector_15+0x1f82>
			g_speed3 =0;
    8e2e:	10 92 3b 01 	sts	0x013B, r1
			
			if(g_speed3rev == 0)
    8e32:	80 91 37 01 	lds	r24, 0x0137
    8e36:	88 23       	and	r24, r24
    8e38:	19 f4       	brne	.+6      	; 0x8e40 <__vector_15+0x1f90>
			g_speed3rev  =RESOLUTION;
    8e3a:	80 ef       	ldi	r24, 0xF0	; 240
    8e3c:	80 93 37 01 	sts	0x0137, r24
			g_speed3rev --;
    8e40:	80 91 37 01 	lds	r24, 0x0137
    8e44:	81 50       	subi	r24, 0x01	; 1
    8e46:	80 93 37 01 	sts	0x0137, r24

			g_timer2_speed3=0;
    8e4a:	10 92 3f 01 	sts	0x013F, r1
		}

		if (g_timer2_speed2 == 2)	
    8e4e:	80 91 26 01 	lds	r24, 0x0126
    8e52:	82 30       	cpi	r24, 0x02	; 2
    8e54:	b9 f4       	brne	.+46     	; 0x8e84 <__vector_15+0x1fd4>
		{
			g_speed2++;
    8e56:	80 91 13 01 	lds	r24, 0x0113
    8e5a:	8f 5f       	subi	r24, 0xFF	; 255
    8e5c:	80 93 13 01 	sts	0x0113, r24
			if(g_speed2 == RESOLUTION)		// fast background change
    8e60:	80 3f       	cpi	r24, 0xF0	; 240
    8e62:	11 f4       	brne	.+4      	; 0x8e68 <__vector_15+0x1fb8>
			g_speed2 =0;
    8e64:	10 92 13 01 	sts	0x0113, r1
			
			if(g_speed2rev == 0)
    8e68:	80 91 21 01 	lds	r24, 0x0121
    8e6c:	88 23       	and	r24, r24
    8e6e:	19 f4       	brne	.+6      	; 0x8e76 <__vector_15+0x1fc6>
			g_speed2rev  =RESOLUTION;
    8e70:	80 ef       	ldi	r24, 0xF0	; 240
    8e72:	80 93 21 01 	sts	0x0121, r24
			g_speed2rev --;
    8e76:	80 91 21 01 	lds	r24, 0x0121
    8e7a:	81 50       	subi	r24, 0x01	; 1
    8e7c:	80 93 21 01 	sts	0x0121, r24

			g_timer2_speed2=0;
    8e80:	10 92 26 01 	sts	0x0126, r1
		}
		
		if(g_timer2_speedrandom1 == 5)		// radioactivity background change - semi random direction
    8e84:	80 91 11 01 	lds	r24, 0x0111
    8e88:	85 30       	cpi	r24, 0x05	; 5
    8e8a:	b1 f5       	brne	.+108    	; 0x8ef8 <__vector_15+0x2048>
		{	
			g_timer2_speedrandom2++;	
    8e8c:	80 91 30 01 	lds	r24, 0x0130
    8e90:	8f 5f       	subi	r24, 0xFF	; 255
    8e92:	80 93 30 01 	sts	0x0130, r24
			if(g_timer2_speedrandom2 == 3)
    8e96:	83 30       	cpi	r24, 0x03	; 3
    8e98:	69 f5       	brne	.+90     	; 0x8ef4 <__vector_15+0x2044>
			{
				if (TCNT2 % 33 == 0) 
    8e9a:	84 b5       	in	r24, 0x24	; 36
    8e9c:	61 e2       	ldi	r22, 0x21	; 33
    8e9e:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    8ea2:	99 23       	and	r25, r25
    8ea4:	51 f4       	brne	.+20     	; 0x8eba <__vector_15+0x200a>
				{
					if (g_speedrandom % 2 == 0)
    8ea6:	80 91 2a 01 	lds	r24, 0x012A
    8eaa:	80 fd       	sbrc	r24, 0
    8eac:	03 c0       	rjmp	.+6      	; 0x8eb4 <__vector_15+0x2004>
					g_speedrandom=g_speed7;
    8eae:	80 91 2c 01 	lds	r24, 0x012C
    8eb2:	1c c0       	rjmp	.+56     	; 0x8eec <__vector_15+0x203c>
					else
					g_speedrandom=g_speed7rev;
    8eb4:	80 91 4c 01 	lds	r24, 0x014C
    8eb8:	19 c0       	rjmp	.+50     	; 0x8eec <__vector_15+0x203c>
				}
				else	
					if (timer2tmp % 2 == 0)
    8eba:	80 91 39 01 	lds	r24, 0x0139
    8ebe:	90 91 2a 01 	lds	r25, 0x012A
    8ec2:	28 2f       	mov	r18, r24
    8ec4:	21 70       	andi	r18, 0x01	; 1
    8ec6:	80 fd       	sbrc	r24, 0
    8ec8:	09 c0       	rjmp	.+18     	; 0x8edc <__vector_15+0x202c>
					{
						g_speedrandom++;
    8eca:	89 2f       	mov	r24, r25
    8ecc:	8f 5f       	subi	r24, 0xFF	; 255
    8ece:	80 93 2a 01 	sts	0x012A, r24
						if(g_speedrandom == RESOLUTION)
    8ed2:	80 3f       	cpi	r24, 0xF0	; 240
    8ed4:	69 f4       	brne	.+26     	; 0x8ef0 <__vector_15+0x2040>
						g_speedrandom = 0;
    8ed6:	20 93 2a 01 	sts	0x012A, r18
    8eda:	0a c0       	rjmp	.+20     	; 0x8ef0 <__vector_15+0x2040>
					}
					else
					{
						if(g_speedrandom == 0)
    8edc:	99 23       	and	r25, r25
    8ede:	19 f4       	brne	.+6      	; 0x8ee6 <__vector_15+0x2036>
						g_speedrandom =RESOLUTION;
    8ee0:	80 ef       	ldi	r24, 0xF0	; 240
    8ee2:	80 93 2a 01 	sts	0x012A, r24
						g_speedrandom--;
    8ee6:	80 91 2a 01 	lds	r24, 0x012A
    8eea:	81 50       	subi	r24, 0x01	; 1
    8eec:	80 93 2a 01 	sts	0x012A, r24
					}
					
				g_timer2_speedrandom2=0;
    8ef0:	10 92 30 01 	sts	0x0130, r1
			}
			
			g_timer2_speedrandom1=0;	
    8ef4:	10 92 11 01 	sts	0x0111, r1
    8ef8:	ff 91       	pop	r31
    8efa:	ef 91       	pop	r30
    8efc:	cf 91       	pop	r28
    8efe:	bf 91       	pop	r27
    8f00:	af 91       	pop	r26
    8f02:	9f 91       	pop	r25
    8f04:	8f 91       	pop	r24
    8f06:	7f 91       	pop	r23
    8f08:	6f 91       	pop	r22
    8f0a:	5f 91       	pop	r21
    8f0c:	4f 91       	pop	r20
    8f0e:	3f 91       	pop	r19
    8f10:	2f 91       	pop	r18
    8f12:	0f 90       	pop	r0
    8f14:	0f be       	out	0x3f, r0	; 63
    8f16:	0f 90       	pop	r0
    8f18:	1f 90       	pop	r1
    8f1a:	18 95       	reti

00008f1c <__vector_10>:
		}
	}
	
	

		//else
	//g_mode=0;
}

//################# TIMER2 overflow interupt routine #######################
//Timer2 is clocked using external 4096Hz generator (square wave from RTC)
//this routine updates internal time registers and clear some general purpose registers
ISR(TIMER2_OVF_vect)
{
    8f1c:	1f 92       	push	r1
    8f1e:	0f 92       	push	r0
    8f20:	0f b6       	in	r0, 0x3f	; 63
    8f22:	0f 92       	push	r0
    8f24:	11 24       	eor	r1, r1
    8f26:	2f 93       	push	r18
    8f28:	6f 93       	push	r22
    8f2a:	7f 93       	push	r23
    8f2c:	8f 93       	push	r24
    8f2e:	9f 93       	push	r25
	g_timer2_ovf++;  		//increase overflows counter
    8f30:	80 91 29 01 	lds	r24, 0x0129
    8f34:	8f 5f       	subi	r24, 0xFF	; 255
    8f36:	80 93 29 01 	sts	0x0129, r24
	
	static uint8_t last_rc_bit_counter = 0;
	
	if(last_rc_bit_counter == g_rc_bit_counter) 	//this indicates error, transmission was stopped
    8f3a:	90 91 04 01 	lds	r25, 0x0104
    8f3e:	80 91 3d 01 	lds	r24, 0x013D
    8f42:	98 17       	cp	r25, r24
    8f44:	11 f4       	brne	.+4      	; 0x8f4a <__vector_10+0x2e>
		g_rc_bit_counter = 0;						//clear remote control bit counter
    8f46:	10 92 3d 01 	sts	0x013D, r1
	
	last_rc_bit_counter = g_rc_bit_counter;
    8f4a:	80 91 3d 01 	lds	r24, 0x013D
    8f4e:	80 93 04 01 	sts	0x0104, r24
	if(g_s_rc_state == STATE_SETTING)
    8f52:	20 91 00 01 	lds	r18, 0x0100
    8f56:	21 30       	cpi	r18, 0x01	; 1
    8f58:	29 f4       	brne	.+10     	; 0x8f64 <__vector_10+0x48>
	{
		c_timer2_ovf=16;
    8f5a:	80 e1       	ldi	r24, 0x10	; 16
    8f5c:	80 93 10 01 	sts	0x0110, r24
		c_rc_idle_counter=4;
    8f60:	84 e0       	ldi	r24, 0x04	; 4
    8f62:	03 c0       	rjmp	.+6      	; 0x8f6a <__vector_10+0x4e>
	}
	else
	{
		c_timer2_ovf=4;
    8f64:	84 e0       	ldi	r24, 0x04	; 4
    8f66:	80 93 10 01 	sts	0x0110, r24
		c_rc_idle_counter=4;
    8f6a:	80 93 38 01 	sts	0x0138, r24
	}

	if(g_timer2_ovf == c_timer2_ovf)	// 4*255*(1/4096Hz) = 0,25s elapsed
    8f6e:	90 91 29 01 	lds	r25, 0x0129
    8f72:	80 91 10 01 	lds	r24, 0x0110
    8f76:	98 17       	cp	r25, r24
    8f78:	09 f0       	breq	.+2      	; 0x8f7c <__vector_10+0x60>
    8f7a:	47 c0       	rjmp	.+142    	; 0x900a <__vector_10+0xee>
	{	
		g_uart_counter = 0;  //clear uart char counter
    8f7c:	10 92 34 01 	sts	0x0134, r1
		g_timer2_ovf = 0;    //clear timer2 overflow counter	
    8f80:	10 92 29 01 	sts	0x0129, r1
		g_rc_idle_counter++; //increase remote control idle counter
    8f84:	80 91 2e 01 	lds	r24, 0x012E
    8f88:	8f 5f       	subi	r24, 0xFF	; 255
    8f8a:	80 93 2e 01 	sts	0x012E, r24
		
		if(g_rc_idle_counter == c_rc_idle_counter)
    8f8e:	90 91 38 01 	lds	r25, 0x0138
    8f92:	89 17       	cp	r24, r25
    8f94:	39 f4       	brne	.+14     	; 0x8fa4 <__vector_10+0x88>
		{	
			g_rc_idle_counter = 0;	
    8f96:	10 92 2e 01 	sts	0x012E, r1
			g_rc_hold_counter = 0;	//clear button hold counter
    8f9a:	10 92 0d 01 	sts	0x010D, r1
			EIMSK |= _BV(RC_IN);
    8f9e:	89 b7       	in	r24, 0x39	; 57
    8fa0:	80 62       	ori	r24, 0x20	; 32
    8fa2:	89 bf       	out	0x39, r24	; 57
		}
	if(g_rc_state != STATE_SETTING) //if time is being set don't update time registers
    8fa4:	80 91 02 01 	lds	r24, 0x0102
    8fa8:	81 30       	cpi	r24, 0x01	; 1
    8faa:	79 f1       	breq	.+94     	; 0x900a <__vector_10+0xee>
    8fac:	80 91 42 01 	lds	r24, 0x0142
		{
			//remember that these valuse are already preprocessed so one full circle = 240 steps
		if(g_s_rc_state == STATE_SETTING)
    8fb0:	21 30       	cpi	r18, 0x01	; 1
    8fb2:	11 f4       	brne	.+4      	; 0x8fb8 <__vector_10+0x9c>
			g_seconds+=4;
    8fb4:	8c 5f       	subi	r24, 0xFC	; 252
    8fb6:	01 c0       	rjmp	.+2      	; 0x8fba <__vector_10+0x9e>
		else
			g_seconds++;
    8fb8:	8f 5f       	subi	r24, 0xFF	; 255
    8fba:	80 93 42 01 	sts	0x0142, r24
			if(g_seconds == RESOLUTION)
    8fbe:	80 91 42 01 	lds	r24, 0x0142
    8fc2:	80 3f       	cpi	r24, 0xF0	; 240
    8fc4:	11 f4       	brne	.+4      	; 0x8fca <__vector_10+0xae>
				g_seconds = 0;
    8fc6:	10 92 42 01 	sts	0x0142, r1
			if(g_seconds % 60 == 0)
    8fca:	80 91 42 01 	lds	r24, 0x0142
    8fce:	6c e3       	ldi	r22, 0x3C	; 60
    8fd0:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    8fd4:	99 23       	and	r25, r25
    8fd6:	c9 f4       	brne	.+50     	; 0x900a <__vector_10+0xee>
			{		
				g_minutes++;
    8fd8:	80 91 22 01 	lds	r24, 0x0122
    8fdc:	8f 5f       	subi	r24, 0xFF	; 255
    8fde:	80 93 22 01 	sts	0x0122, r24
				if(g_minutes == RESOLUTION)
    8fe2:	80 3f       	cpi	r24, 0xF0	; 240
    8fe4:	11 f4       	brne	.+4      	; 0x8fea <__vector_10+0xce>
					g_minutes = 0;
    8fe6:	90 93 22 01 	sts	0x0122, r25
				if(g_minutes % 12 == 0)
    8fea:	80 91 22 01 	lds	r24, 0x0122
    8fee:	6c e0       	ldi	r22, 0x0C	; 12
    8ff0:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    8ff4:	99 23       	and	r25, r25
    8ff6:	49 f4       	brne	.+18     	; 0x900a <__vector_10+0xee>
				{
					g_hours++;
    8ff8:	80 91 4d 01 	lds	r24, 0x014D
    8ffc:	8f 5f       	subi	r24, 0xFF	; 255
    8ffe:	80 93 4d 01 	sts	0x014D, r24
					if(g_hours == RESOLUTION)
    9002:	80 3f       	cpi	r24, 0xF0	; 240
    9004:	11 f4       	brne	.+4      	; 0x900a <__vector_10+0xee>
					g_hours = 0;
    9006:	90 93 4d 01 	sts	0x014D, r25
    900a:	9f 91       	pop	r25
    900c:	8f 91       	pop	r24
    900e:	7f 91       	pop	r23
    9010:	6f 91       	pop	r22
    9012:	2f 91       	pop	r18
    9014:	0f 90       	pop	r0
    9016:	0f be       	out	0x3f, r0	; 63
    9018:	0f 90       	pop	r0
    901a:	1f 90       	pop	r1
    901c:	18 95       	reti

0000901e <__vector_6>:
				}
			}	
		}
	}
}

//################# External interupt5 routine #######################
//Input INT5 is conntected to the IR receiver
//this routine is called either rising or falling edge comes on INT5
//Philips RC5 code is manchester linear code
ISR(INT5_vect)
{
    901e:	1f 92       	push	r1
    9020:	0f 92       	push	r0
    9022:	0f b6       	in	r0, 0x3f	; 63
    9024:	0f 92       	push	r0
    9026:	11 24       	eor	r1, r1
    9028:	2f 93       	push	r18
    902a:	3f 93       	push	r19
    902c:	4f 93       	push	r20
    902e:	5f 93       	push	r21
    9030:	6f 93       	push	r22
    9032:	7f 93       	push	r23
    9034:	8f 93       	push	r24
    9036:	9f 93       	push	r25
    9038:	af 93       	push	r26
    903a:	bf 93       	push	r27
    903c:	ef 93       	push	r30
    903e:	ff 93       	push	r31
	static uint8_t timer2_buf_a = 0;
	static uint8_t timer2_buf_b = 0;		
	static uint8_t timer2_ovf_buf = 0;
	static uint16_t data_buf = 0;			//static buffer regeisters
	static uint8_t edge_position = 0;		//edge position indicator
											//if even the edge is at the begining of a bit
											//if odd the edge is in the of a bit
											//for more details see Manchester code specification
	
	uint8_t tmp_time;	
	uint8_t tmp_command;	//helpful registers

	g_rc_idle_counter = 0; 		//something is being received so clear rc idle register
    9040:	10 92 2e 01 	sts	0x012E, r1
	
	if(g_rc_bit_counter == 0)	//transmission has just begun
    9044:	40 91 3d 01 	lds	r20, 0x013D
    9048:	30 91 29 01 	lds	r19, 0x0129
    904c:	44 23       	and	r20, r20
    904e:	c1 f4       	brne	.+48     	; 0x9080 <__vector_6+0x62>
	{
		timer2_buf_a = TCNT2;			//store timer2 data register
    9050:	84 b5       	in	r24, 0x24	; 36
    9052:	80 93 05 01 	sts	0x0105, r24
		timer2_ovf_buf = g_timer2_ovf;	//and timer2 overflow counter
    9056:	30 93 07 01 	sts	0x0107, r19

		if(PINE & _BV(RC_IN))			//if RC_IN pin is high
    905a:	0d 9b       	sbis	0x01, 5	; 1
    905c:	05 c0       	rjmp	.+10     	; 0x9068 <__vector_6+0x4a>
			data_buf = 0x0000;			//error occured, this situation isn't correct
    905e:	10 92 09 01 	sts	0x0109, r1
    9062:	10 92 08 01 	sts	0x0108, r1
    9066:	70 c0       	rjmp	.+224    	; 0x9148 <__vector_6+0x12a>
		else
		{
			data_buf = 0x8000;			//first start bit received
    9068:	80 e0       	ldi	r24, 0x00	; 0
    906a:	90 e8       	ldi	r25, 0x80	; 128
    906c:	90 93 09 01 	sts	0x0109, r25
    9070:	80 93 08 01 	sts	0x0108, r24
			g_rc_bit_counter++;			//increase bit counder
    9074:	81 e0       	ldi	r24, 0x01	; 1
    9076:	80 93 3d 01 	sts	0x013D, r24
			edge_position = 1;			//first received egde is in the middle of the bit
    907a:	80 93 0a 01 	sts	0x010A, r24
    907e:	64 c0       	rjmp	.+200    	; 0x9148 <__vector_6+0x12a>
		}
	}
	else
	{
		timer2_buf_b = TCNT2;		//store in register 'b'
    9080:	94 b5       	in	r25, 0x24	; 36
    9082:	90 93 06 01 	sts	0x0106, r25
		
		if(timer2_ovf_buf != g_timer2_ovf)	//if timer2 overflowed meanwhile
    9086:	80 91 07 01 	lds	r24, 0x0107
    908a:	20 91 05 01 	lds	r18, 0x0105
    908e:	83 17       	cp	r24, r19
    9090:	21 f0       	breq	.+8      	; 0x909a <__vector_6+0x7c>
		{
			tmp_time =  255 - timer2_buf_a + timer2_buf_b + 1;	//compute time since last edge
    9092:	92 1b       	sub	r25, r18
			timer2_ovf_buf = g_timer2_ovf;
    9094:	30 93 07 01 	sts	0x0107, r19
    9098:	01 c0       	rjmp	.+2      	; 0x909c <__vector_6+0x7e>
		}
		else
			tmp_time =  timer2_buf_b - timer2_buf_a;			//compute time since last edge
    909a:	92 1b       	sub	r25, r18
			
		timer2_buf_a = timer2_buf_b;							//update register 'a'
    909c:	80 91 06 01 	lds	r24, 0x0106
    90a0:	80 93 05 01 	sts	0x0105, r24
		
		//if half of a bit time elapsed
		if((tmp_time >= HALF_BIT - DELTA) && (tmp_time <= HALF_BIT + DELTA)) 
    90a4:	89 2f       	mov	r24, r25
    90a6:	82 50       	subi	r24, 0x02	; 2
    90a8:	83 30       	cpi	r24, 0x03	; 3
    90aa:	20 f4       	brcc	.+8      	; 0x90b4 <__vector_6+0x96>
		{
			edge_position++;			//increase edge position
    90ac:	80 91 0a 01 	lds	r24, 0x010A
    90b0:	8f 5f       	subi	r24, 0xFF	; 255
    90b2:	06 c0       	rjmp	.+12     	; 0x90c0 <__vector_6+0xa2>
			if(edge_position & 0x01)	//decode if it's middle-bit edge
			{
				if(!(PINE & _BV(RC_IN)))
					data_buf |= _BV(15 - g_rc_bit_counter);
					
				g_rc_bit_counter++;	
			}
		}
		//if one bit time elapsed
		else if((tmp_time >= ONE_BIT - DELTA) && (tmp_time <= ONE_BIT + DELTA))
    90b4:	96 50       	subi	r25, 0x06	; 6
    90b6:	93 30       	cpi	r25, 0x03	; 3
    90b8:	20 f5       	brcc	.+72     	; 0x9102 <__vector_6+0xe4>
		{
			edge_position += 2;			//increase edge position with 2
    90ba:	80 91 0a 01 	lds	r24, 0x010A
    90be:	8e 5f       	subi	r24, 0xFE	; 254
    90c0:	80 93 0a 01 	sts	0x010A, r24
			
			if(edge_position & 0x01)	//decode if it's middle-bit edge
    90c4:	80 ff       	sbrs	r24, 0
    90c6:	1f c0       	rjmp	.+62     	; 0x9106 <__vector_6+0xe8>
			{
				if(!(PINE & _BV(RC_IN)))
    90c8:	0d 99       	sbic	0x01, 5	; 1
    90ca:	15 c0       	rjmp	.+42     	; 0x90f6 <__vector_6+0xd8>
					data_buf |= _BV(15 - g_rc_bit_counter);
    90cc:	8f e0       	ldi	r24, 0x0F	; 15
    90ce:	90 e0       	ldi	r25, 0x00	; 0
    90d0:	84 1b       	sub	r24, r20
    90d2:	91 09       	sbc	r25, r1
    90d4:	21 e0       	ldi	r18, 0x01	; 1
    90d6:	30 e0       	ldi	r19, 0x00	; 0
    90d8:	02 c0       	rjmp	.+4      	; 0x90de <__vector_6+0xc0>
    90da:	22 0f       	add	r18, r18
    90dc:	33 1f       	adc	r19, r19
    90de:	8a 95       	dec	r24
    90e0:	e2 f7       	brpl	.-8      	; 0x90da <__vector_6+0xbc>
    90e2:	80 91 08 01 	lds	r24, 0x0108
    90e6:	90 91 09 01 	lds	r25, 0x0109
    90ea:	82 2b       	or	r24, r18
    90ec:	93 2b       	or	r25, r19
    90ee:	90 93 09 01 	sts	0x0109, r25
    90f2:	80 93 08 01 	sts	0x0108, r24
					
				g_rc_bit_counter++;	
    90f6:	80 91 3d 01 	lds	r24, 0x013D
    90fa:	8f 5f       	subi	r24, 0xFF	; 255
    90fc:	80 93 3d 01 	sts	0x013D, r24
    9100:	02 c0       	rjmp	.+4      	; 0x9106 <__vector_6+0xe8>
			}			
		}
		else
			g_rc_bit_counter = 0;		//erroc ocurred, clear bit counter register
    9102:	10 92 3d 01 	sts	0x013D, r1
		
		if(g_rc_bit_counter == 14)		//if 14 bits are received
    9106:	80 91 3d 01 	lds	r24, 0x013D
    910a:	8e 30       	cpi	r24, 0x0E	; 14
    910c:	e9 f4       	brne	.+58     	; 0x9148 <__vector_6+0x12a>
		{
			//validate received data
			if((data_buf & _BV(15)) && (data_buf & _BV(14)))	//start bits are both '1'
    910e:	20 91 08 01 	lds	r18, 0x0108
    9112:	30 91 09 01 	lds	r19, 0x0109
    9116:	37 ff       	sbrs	r19, 7
    9118:	15 c0       	rjmp	.+42     	; 0x9144 <__vector_6+0x126>
    911a:	36 ff       	sbrs	r19, 6
    911c:	13 c0       	rjmp	.+38     	; 0x9144 <__vector_6+0x126>
			{
				if(((data_buf >> 8) & 0b00011111) == DEVICE_ADDRESS)  //the message is addressed to the clock
    911e:	83 2f       	mov	r24, r19
    9120:	99 27       	eor	r25, r25
    9122:	8f 71       	andi	r24, 0x1F	; 31
    9124:	90 70       	andi	r25, 0x00	; 0
    9126:	89 2b       	or	r24, r25
    9128:	69 f4       	brne	.+26     	; 0x9144 <__vector_6+0x126>
    912a:	c9 01       	movw	r24, r18
    912c:	96 95       	lsr	r25
    912e:	87 95       	ror	r24
    9130:	96 95       	lsr	r25
    9132:	87 95       	ror	r24
				{
					if(data_buf & _BV(13)) //toogle bit is '1'
    9134:	35 ff       	sbrs	r19, 5
    9136:	03 c0       	rjmp	.+6      	; 0x913e <__vector_6+0x120>
						tmp_command = 0b10000000 | ((data_buf >> 2) & 0b00111111);
    9138:	8f 73       	andi	r24, 0x3F	; 63
    913a:	80 68       	ori	r24, 0x80	; 128
    913c:	01 c0       	rjmp	.+2      	; 0x9140 <__vector_6+0x122>
					else
						tmp_command = ((data_buf >> 2) & 0b00111111);
    913e:	8f 73       	andi	r24, 0x3F	; 63
					
					rc_process_command(tmp_command); //process received command	
    9140:	0e 94 10 35 	call	0x6a20 <rc_process_command>
				}
			}
			
			g_rc_bit_counter = 0;
    9144:	10 92 3d 01 	sts	0x013D, r1
    9148:	ff 91       	pop	r31
    914a:	ef 91       	pop	r30
    914c:	bf 91       	pop	r27
    914e:	af 91       	pop	r26
    9150:	9f 91       	pop	r25
    9152:	8f 91       	pop	r24
    9154:	7f 91       	pop	r23
    9156:	6f 91       	pop	r22
    9158:	5f 91       	pop	r21
    915a:	4f 91       	pop	r20
    915c:	3f 91       	pop	r19
    915e:	2f 91       	pop	r18
    9160:	0f 90       	pop	r0
    9162:	0f be       	out	0x3f, r0	; 63
    9164:	0f 90       	pop	r0
    9166:	1f 90       	pop	r1
    9168:	18 95       	reti

0000916a <init_timers>:
		}
		
	}
}

void init_timers(void)
{
	TCCR3B |= _BV(CS31);		//}
    916a:	80 91 8a 00 	lds	r24, 0x008A
    916e:	82 60       	ori	r24, 0x02	; 2
    9170:	80 93 8a 00 	sts	0x008A, r24
	ETIMSK |= _BV(TICIE3);		//}enable timer3 input capture interrupt on falling edge
    9174:	80 91 7d 00 	lds	r24, 0x007D
    9178:	80 62       	ori	r24, 0x20	; 32
    917a:	80 93 7d 00 	sts	0x007D, r24
	
	TCCR0 |= _BV(WGM01) | _BV(CS01);	//}
    917e:	83 b7       	in	r24, 0x33	; 51
    9180:	8a 60       	ori	r24, 0x0A	; 10
    9182:	83 bf       	out	0x33, r24	; 51
	OCR0 = 255;							//}enable timer0 output compare feature (LEDs PWM driving)
    9184:	8f ef       	ldi	r24, 0xFF	; 255
    9186:	81 bf       	out	0x31, r24	; 49
	
	TCCR2 |= _BV(CS22) | _BV(CS21); 	//}configure timer2 as a external clocked counter
    9188:	85 b5       	in	r24, 0x25	; 37
    918a:	86 60       	ori	r24, 0x06	; 6
    918c:	85 bd       	out	0x25, r24	; 37
	TIMSK |= _BV(TOIE2);				//}and enable overflow interupt
    918e:	87 b7       	in	r24, 0x37	; 55
    9190:	80 64       	ori	r24, 0x40	; 64
    9192:	87 bf       	out	0x37, r24	; 55
	
	TCCR1A |= (_BV(WGM11) | _BV(COM1A1) | _BV(COM1B1) | _BV(COM1C1)| 	//}enable timer1 
    9194:	8f b5       	in	r24, 0x2f	; 47
    9196:	8e 6f       	ori	r24, 0xFE	; 254
    9198:	8f bd       	out	0x2f, r24	; 47
	_BV(COM1A0) | _BV(COM1B0) | _BV(COM1C0));							//}output compare
																		//}mode
	TCCR1B |= (_BV(WGM13) | _BV(WGM12) |  _BV(CS10));					//}negative polarity
    919a:	8e b5       	in	r24, 0x2e	; 46
    919c:	89 61       	ori	r24, 0x19	; 25
    919e:	8e bd       	out	0x2e, r24	; 46
																		
	ICR1 = PWM_TOP;														//set PWM top value
    91a0:	87 e2       	ldi	r24, 0x27	; 39
    91a2:	90 e0       	ldi	r25, 0x00	; 0
    91a4:	97 bd       	out	0x27, r25	; 39
    91a6:	86 bd       	out	0x26, r24	; 38
	PWM_RED = PWM_TOP;													//}
    91a8:	9b bd       	out	0x2b, r25	; 43
    91aa:	8a bd       	out	0x2a, r24	; 42
	PWM_GREEN = PWM_TOP;												//}turn off all leds
    91ac:	99 bd       	out	0x29, r25	; 41
    91ae:	88 bd       	out	0x28, r24	; 40
	PWM_BLUE = PWM_TOP;													//}
    91b0:	90 93 79 00 	sts	0x0079, r25
    91b4:	80 93 78 00 	sts	0x0078, r24
    91b8:	08 95       	ret

000091ba <main>:
	
}

int main(void)
{
    91ba:	cf ef       	ldi	r28, 0xFF	; 255
    91bc:	d0 e1       	ldi	r29, 0x10	; 16
    91be:	de bf       	out	0x3e, r29	; 62
    91c0:	cd bf       	out	0x3d, r28	; 61
	//initialization
	MOTDDR |= _BV(MOTPIN);
    91c2:	d0 9a       	sbi	0x1a, 0	; 26
	LEDDDR |= _BV(RED_LED) | _BV(GREEN_LED) | _BV(BLUE_LED) ; 
    91c4:	87 b3       	in	r24, 0x17	; 23
    91c6:	80 6e       	ori	r24, 0xE0	; 224
    91c8:	87 bb       	out	0x17, r24	; 23
	MOT_OFF();
    91ca:	d8 98       	cbi	0x1b, 0	; 27
	init_i2c();
    91cc:	0e 94 4e 49 	call	0x929c <init_i2c>
	init_timers();
    91d0:	0e 94 b5 48 	call	0x916a <init_timers>
	USART1_Init ( MYUBRR );
    91d4:	89 e1       	ldi	r24, 0x19	; 25
    91d6:	90 e0       	ldi	r25, 0x00	; 0
    91d8:	0e 94 e3 34 	call	0x69c6 <USART1_Init>
	
	EICRB |= _BV(ISC50);
    91dc:	8a b7       	in	r24, 0x3a	; 58
    91de:	84 60       	ori	r24, 0x04	; 4
    91e0:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= _BV(RC_IN); //enable RC interrupt, both edges
    91e2:	89 b7       	in	r24, 0x39	; 57
    91e4:	80 62       	ori	r24, 0x20	; 32
    91e6:	89 bf       	out	0x39, r24	; 57
	
	//g_mode = 19; 		//radioactivity mode at start 42
	g_mh_mode = 5;		//white hands at start
    91e8:	85 e0       	ldi	r24, 0x05	; 5
    91ea:	80 93 0c 01 	sts	0x010C, r24
	g_hh_mode = 5;		//white hands at start
    91ee:	80 93 35 01 	sts	0x0135, r24
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
    91f2:	80 e0       	ldi	r24, 0x00	; 0
    91f4:	90 e0       	ldi	r25, 0x00	; 0
    91f6:	fc 01       	movw	r30, r24
    91f8:	31 97       	sbiw	r30, 0x01	; 1
    91fa:	f1 f7       	brne	.-4      	; 0x91f8 <main+0x3e>
	
	_delay_ms(200);	
	_delay_ms(200);	//wait for all devices to warm up

	
	SetPointer(0x00);					//set i2c pointer to the begin
    91fc:	01 97       	sbiw	r24, 0x01	; 1
    91fe:	f1 f7       	brne	.-4      	; 0x91fc <main+0x42>
    9200:	80 e0       	ldi	r24, 0x00	; 0
    9202:	0e 94 54 49 	call	0x92a8 <SetPointer>
	ReadBufI2C(g_data_rtc, 8);			//read all data
    9206:	68 e0       	ldi	r22, 0x08	; 8
    9208:	84 e4       	ldi	r24, 0x44	; 68
    920a:	91 e0       	ldi	r25, 0x01	; 1
    920c:	0e 94 63 4a 	call	0x94c6 <ReadBufI2C>

	WriteI2C(SECONDS_ADDR, 0b01111111 & g_data_rtc[SECONDS_ADDR]); //enable oscilator
    9210:	80 91 44 01 	lds	r24, 0x0144
    9214:	8f 77       	andi	r24, 0x7F	; 127
    9216:	68 2f       	mov	r22, r24
    9218:	80 e0       	ldi	r24, 0x00	; 0
    921a:	0e 94 91 49 	call	0x9322 <WriteI2C>
	WriteI2C(CONTROL_ADDR, 0b10010001); 							//enable RTC square wave output,
    921e:	61 e9       	ldi	r22, 0x91	; 145
    9220:	87 e0       	ldi	r24, 0x07	; 7
    9222:	0e 94 91 49 	call	0x9322 <WriteI2C>
																	//without these lines RC will not work
																	//and all hands will stay still
	
	g_data_rtc[HOURS_ADDR] &= 0b00011111; //mask am/pm bit
    9226:	80 91 46 01 	lds	r24, 0x0146
    922a:	8f 71       	andi	r24, 0x1F	; 31
    922c:	80 93 46 01 	sts	0x0146, r24
    9230:	c4 e4       	ldi	r28, 0x44	; 68
    9232:	d1 e0       	ldi	r29, 0x01	; 1
    9234:	17 e0       	ldi	r17, 0x07	; 7
	
	uint8_t i;
	for(i = 0; i < 8; i++)
		g_data_rtc[i] = BCDtoDEC(g_data_rtc[i]); //convert to decimal format
    9236:	88 81       	ld	r24, Y
    9238:	0e 94 b4 4a 	call	0x9568 <BCDtoDEC>
    923c:	89 93       	st	Y+, r24
    923e:	11 50       	subi	r17, 0x01	; 1
    9240:	17 ff       	sbrs	r17, 7
    9242:	f9 cf       	rjmp	.-14     	; 0x9236 <main+0x7c>
	
	//now these values must be preprocessed to RESOLUTIONsteps/cicrle format
	g_seconds = 4*g_data_rtc[SECONDS_ADDR] ;
    9244:	30 91 44 01 	lds	r19, 0x0144
    9248:	83 2f       	mov	r24, r19
    924a:	99 27       	eor	r25, r25
    924c:	88 0f       	add	r24, r24
    924e:	99 1f       	adc	r25, r25
    9250:	88 0f       	add	r24, r24
    9252:	99 1f       	adc	r25, r25
    9254:	80 93 42 01 	sts	0x0142, r24
	g_minutes = 4*g_data_rtc[MINUTES_ADDR] + (g_data_rtc[SECONDS_ADDR] / 15);
    9258:	40 91 45 01 	lds	r20, 0x0145
    925c:	24 2f       	mov	r18, r20
    925e:	22 0f       	add	r18, r18
    9260:	22 0f       	add	r18, r18
    9262:	83 2f       	mov	r24, r19
    9264:	6f e0       	ldi	r22, 0x0F	; 15
    9266:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    926a:	28 0f       	add	r18, r24
    926c:	20 93 22 01 	sts	0x0122, r18
	g_hours   = 20*(g_data_rtc[HOURS_ADDR]%12) + (g_data_rtc[MINUTES_ADDR]/3);
    9270:	80 91 46 01 	lds	r24, 0x0146
    9274:	6c e0       	ldi	r22, 0x0C	; 12
    9276:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    927a:	84 e1       	ldi	r24, 0x14	; 20
    927c:	98 9f       	mul	r25, r24
    927e:	90 01       	movw	r18, r0
    9280:	11 24       	eor	r1, r1
    9282:	84 2f       	mov	r24, r20
    9284:	63 e0       	ldi	r22, 0x03	; 3
    9286:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    928a:	82 0f       	add	r24, r18
    928c:	80 93 4d 01 	sts	0x014D, r24
		
	MOT_ON(); 		//start the motor
    9290:	d8 9a       	sbi	0x1b, 0	; 27
	g_power_on = 1;	//set power indicator
    9292:	81 e0       	ldi	r24, 0x01	; 1
    9294:	80 93 20 01 	sts	0x0120, r24
	sei();			//enable interrupts
    9298:	78 94       	sei
	

	
	while(1);		//and let them do all the job
    929a:	ff cf       	rjmp	.-2      	; 0x929a <main+0xe0>

0000929c <init_i2c>:

//###################################################################
void init_i2c(void)
{
	TWBR = 72;
    929c:	88 e4       	ldi	r24, 0x48	; 72
    929e:	80 93 70 00 	sts	0x0070, r24
	TWSR = 0; 
    92a2:	10 92 71 00 	sts	0x0071, r1
    92a6:	08 95       	ret

000092a8 <SetPointer>:
}
//###################################################################
uint8_t SetPointer(uint8_t Address)
{
    92a8:	48 2f       	mov	r20, r24
	TWCR = TW_MT_SEND_START;
    92aa:	84 ea       	ldi	r24, 0xA4	; 164
    92ac:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    92b0:	80 91 74 00 	lds	r24, 0x0074
    92b4:	88 23       	and	r24, r24
    92b6:	e4 f7       	brge	.-8      	; 0x92b0 <SetPointer+0x8>
	
	if(!(TWSR & TW_START))
    92b8:	80 91 71 00 	lds	r24, 0x0071
    92bc:	99 27       	eor	r25, r25
    92be:	9c 01       	movw	r18, r24
    92c0:	28 70       	andi	r18, 0x08	; 8
    92c2:	30 70       	andi	r19, 0x00	; 0
    92c4:	83 fd       	sbrc	r24, 3
    92c6:	02 c0       	rjmp	.+4      	; 0x92cc <SetPointer+0x24>
		return 0;
    92c8:	c9 01       	movw	r24, r18
    92ca:	08 95       	ret

	TWDR = SLA_W;
    92cc:	80 ed       	ldi	r24, 0xD0	; 208
    92ce:	80 93 73 00 	sts	0x0073, r24
	TWCR = _BV(TWINT) | _BV(TWEN);
    92d2:	84 e8       	ldi	r24, 0x84	; 132
    92d4:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    92d8:	80 91 74 00 	lds	r24, 0x0074
    92dc:	88 23       	and	r24, r24
    92de:	e4 f7       	brge	.-8      	; 0x92d8 <SetPointer+0x30>

	if(!(TWSR & TW_MT_SLA_ACK))
    92e0:	80 91 71 00 	lds	r24, 0x0071
    92e4:	99 27       	eor	r25, r25
    92e6:	88 71       	andi	r24, 0x18	; 24
    92e8:	90 70       	andi	r25, 0x00	; 0
    92ea:	00 97       	sbiw	r24, 0x00	; 0
    92ec:	c9 f0       	breq	.+50     	; 0x9320 <SetPointer+0x78>
		return 0;
		
	TWDR = Address;
    92ee:	40 93 73 00 	sts	0x0073, r20
	TWCR = _BV(TWINT) | _BV(TWEN);	
    92f2:	84 e8       	ldi	r24, 0x84	; 132
    92f4:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    92f8:	80 91 74 00 	lds	r24, 0x0074
    92fc:	88 23       	and	r24, r24
    92fe:	e4 f7       	brge	.-8      	; 0x92f8 <SetPointer+0x50>
			 
	if(!(TWSR & TW_MT_DATA_ACK))
    9300:	80 91 71 00 	lds	r24, 0x0071
    9304:	99 27       	eor	r25, r25
    9306:	88 72       	andi	r24, 0x28	; 40
    9308:	90 70       	andi	r25, 0x00	; 0
    930a:	00 97       	sbiw	r24, 0x00	; 0
    930c:	49 f0       	breq	.+18     	; 0x9320 <SetPointer+0x78>
		return 0;
		
	TWCR = TW_MT_SEND_STOP;
    930e:	84 e9       	ldi	r24, 0x94	; 148
    9310:	80 93 74 00 	sts	0x0074, r24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
    9314:	80 ea       	ldi	r24, 0xA0	; 160
    9316:	9f e0       	ldi	r25, 0x0F	; 15
    9318:	01 97       	sbiw	r24, 0x01	; 1
    931a:	f1 f7       	brne	.-4      	; 0x9318 <SetPointer+0x70>
	_delay_ms(1);
	return 1;
    931c:	81 e0       	ldi	r24, 0x01	; 1
    931e:	90 e0       	ldi	r25, 0x00	; 0
}
    9320:	08 95       	ret

00009322 <WriteI2C>:
//###################################################################
uint8_t WriteI2C(uint8_t Address, uint8_t Data)
{
    9322:	48 2f       	mov	r20, r24
	TWCR = TW_MT_SEND_START;
    9324:	84 ea       	ldi	r24, 0xA4	; 164
    9326:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    932a:	80 91 74 00 	lds	r24, 0x0074
    932e:	88 23       	and	r24, r24
    9330:	e4 f7       	brge	.-8      	; 0x932a <WriteI2C+0x8>
	
	if(!(TWSR & TW_START))
    9332:	80 91 71 00 	lds	r24, 0x0071
    9336:	99 27       	eor	r25, r25
    9338:	9c 01       	movw	r18, r24
    933a:	28 70       	andi	r18, 0x08	; 8
    933c:	30 70       	andi	r19, 0x00	; 0
    933e:	83 fd       	sbrc	r24, 3
    9340:	02 c0       	rjmp	.+4      	; 0x9346 <WriteI2C+0x24>
		return 0;
    9342:	c9 01       	movw	r24, r18
    9344:	08 95       	ret
	

	TWDR = SLA_W;
    9346:	80 ed       	ldi	r24, 0xD0	; 208
    9348:	80 93 73 00 	sts	0x0073, r24
	TWCR = _BV(TWINT) | _BV(TWEN);
    934c:	84 e8       	ldi	r24, 0x84	; 132
    934e:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    9352:	80 91 74 00 	lds	r24, 0x0074
    9356:	88 23       	and	r24, r24
    9358:	e4 f7       	brge	.-8      	; 0x9352 <WriteI2C+0x30>

	if(!(TWSR & TW_MT_SLA_ACK))
    935a:	80 91 71 00 	lds	r24, 0x0071
    935e:	99 27       	eor	r25, r25
    9360:	88 71       	andi	r24, 0x18	; 24
    9362:	90 70       	andi	r25, 0x00	; 0
    9364:	00 97       	sbiw	r24, 0x00	; 0
    9366:	49 f1       	breq	.+82     	; 0x93ba <WriteI2C+0x98>
		return 0;
		
	TWDR = Address;
    9368:	40 93 73 00 	sts	0x0073, r20
	TWCR = _BV(TWINT) | _BV(TWEN);	
    936c:	84 e8       	ldi	r24, 0x84	; 132
    936e:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    9372:	80 91 74 00 	lds	r24, 0x0074
    9376:	88 23       	and	r24, r24
    9378:	e4 f7       	brge	.-8      	; 0x9372 <WriteI2C+0x50>
			
	if(!(TWSR & TW_MT_DATA_ACK))
    937a:	80 91 71 00 	lds	r24, 0x0071
    937e:	99 27       	eor	r25, r25
    9380:	88 72       	andi	r24, 0x28	; 40
    9382:	90 70       	andi	r25, 0x00	; 0
    9384:	00 97       	sbiw	r24, 0x00	; 0
    9386:	c9 f0       	breq	.+50     	; 0x93ba <WriteI2C+0x98>
		return 0;
		
	TWDR = Data;
    9388:	60 93 73 00 	sts	0x0073, r22
	TWCR = _BV(TWINT) | _BV(TWEN);	
    938c:	84 e8       	ldi	r24, 0x84	; 132
    938e:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));	
    9392:	80 91 74 00 	lds	r24, 0x0074
    9396:	88 23       	and	r24, r24
    9398:	e4 f7       	brge	.-8      	; 0x9392 <WriteI2C+0x70>

	if(!(TWSR & TW_MT_DATA_ACK))
    939a:	80 91 71 00 	lds	r24, 0x0071
    939e:	99 27       	eor	r25, r25
    93a0:	88 72       	andi	r24, 0x28	; 40
    93a2:	90 70       	andi	r25, 0x00	; 0
    93a4:	00 97       	sbiw	r24, 0x00	; 0
    93a6:	49 f0       	breq	.+18     	; 0x93ba <WriteI2C+0x98>
		return 0;
	
	TWCR = TW_MT_SEND_STOP;
    93a8:	84 e9       	ldi	r24, 0x94	; 148
    93aa:	80 93 74 00 	sts	0x0074, r24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
    93ae:	80 ea       	ldi	r24, 0xA0	; 160
    93b0:	9f e0       	ldi	r25, 0x0F	; 15
    93b2:	01 97       	sbiw	r24, 0x01	; 1
    93b4:	f1 f7       	brne	.-4      	; 0x93b2 <WriteI2C+0x90>
	_delay_ms(1);
	return 1;
    93b6:	81 e0       	ldi	r24, 0x01	; 1
    93b8:	90 e0       	ldi	r25, 0x00	; 0
}
    93ba:	08 95       	ret

000093bc <WriteBufI2C>:
//###################################################################
uint8_t WriteBufI2C(uint8_t Address, uint8_t *Data, uint8_t Len)
{
    93bc:	58 2f       	mov	r21, r24
	uint8_t Poz;
	TWCR = TW_MT_SEND_START;
    93be:	84 ea       	ldi	r24, 0xA4	; 164
    93c0:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    93c4:	80 91 74 00 	lds	r24, 0x0074
    93c8:	88 23       	and	r24, r24
    93ca:	e4 f7       	brge	.-8      	; 0x93c4 <WriteBufI2C+0x8>
	
	if(!(TWSR & TW_START))
    93cc:	80 91 71 00 	lds	r24, 0x0071
    93d0:	99 27       	eor	r25, r25
    93d2:	9c 01       	movw	r18, r24
    93d4:	28 70       	andi	r18, 0x08	; 8
    93d6:	30 70       	andi	r19, 0x00	; 0
    93d8:	83 fd       	sbrc	r24, 3
    93da:	02 c0       	rjmp	.+4      	; 0x93e0 <WriteBufI2C+0x24>
		return 0;
    93dc:	c9 01       	movw	r24, r18
    93de:	08 95       	ret

	TWDR = SLA_W;
    93e0:	80 ed       	ldi	r24, 0xD0	; 208
    93e2:	80 93 73 00 	sts	0x0073, r24
	TWCR = _BV(TWINT) | _BV(TWEN);
    93e6:	84 e8       	ldi	r24, 0x84	; 132
    93e8:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    93ec:	80 91 74 00 	lds	r24, 0x0074
    93f0:	88 23       	and	r24, r24
    93f2:	e4 f7       	brge	.-8      	; 0x93ec <WriteBufI2C+0x30>

	if(!(TWSR & TW_MT_SLA_ACK))
    93f4:	80 91 71 00 	lds	r24, 0x0071
    93f8:	99 27       	eor	r25, r25
    93fa:	88 71       	andi	r24, 0x18	; 24
    93fc:	90 70       	andi	r25, 0x00	; 0
    93fe:	00 97       	sbiw	r24, 0x00	; 0
    9400:	99 f1       	breq	.+102    	; 0x9468 <WriteBufI2C+0xac>
		return 0;
		
	TWDR = Address;
    9402:	50 93 73 00 	sts	0x0073, r21
	TWCR = _BV(TWINT) | _BV(TWEN);	
    9406:	84 e8       	ldi	r24, 0x84	; 132
    9408:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    940c:	80 91 74 00 	lds	r24, 0x0074
    9410:	88 23       	and	r24, r24
    9412:	e4 f7       	brge	.-8      	; 0x940c <WriteBufI2C+0x50>
			
	if(!(TWSR & TW_MT_DATA_ACK))
    9414:	80 91 71 00 	lds	r24, 0x0071
    9418:	99 27       	eor	r25, r25
    941a:	88 72       	andi	r24, 0x28	; 40
    941c:	90 70       	andi	r25, 0x00	; 0
    941e:	00 97       	sbiw	r24, 0x00	; 0
    9420:	19 f1       	breq	.+70     	; 0x9468 <WriteBufI2C+0xac>
		return 0;
	
	for(Poz = 0; Poz < Len; Poz++)
    9422:	20 e0       	ldi	r18, 0x00	; 0
    9424:	24 17       	cp	r18, r20
    9426:	b8 f4       	brcc	.+46     	; 0x9456 <WriteBufI2C+0x9a>
    9428:	34 e8       	ldi	r19, 0x84	; 132
	{
		TWDR = Data[Poz];
    942a:	fb 01       	movw	r30, r22
    942c:	e2 0f       	add	r30, r18
    942e:	f1 1d       	adc	r31, r1
    9430:	80 81       	ld	r24, Z
    9432:	80 93 73 00 	sts	0x0073, r24
		TWCR = _BV(TWINT) | _BV(TWEN);	
    9436:	30 93 74 00 	sts	0x0074, r19
		while(!(TWCR & _BV(TWINT)));	
    943a:	80 91 74 00 	lds	r24, 0x0074
    943e:	88 23       	and	r24, r24
    9440:	e4 f7       	brge	.-8      	; 0x943a <WriteBufI2C+0x7e>
	
		if(!(TWSR & TW_MT_DATA_ACK))
    9442:	80 91 71 00 	lds	r24, 0x0071
    9446:	99 27       	eor	r25, r25
    9448:	88 72       	andi	r24, 0x28	; 40
    944a:	90 70       	andi	r25, 0x00	; 0
    944c:	00 97       	sbiw	r24, 0x00	; 0
    944e:	61 f0       	breq	.+24     	; 0x9468 <WriteBufI2C+0xac>
    9450:	2f 5f       	subi	r18, 0xFF	; 255
    9452:	24 17       	cp	r18, r20
    9454:	50 f3       	brcs	.-44     	; 0x942a <WriteBufI2C+0x6e>
			return 0;
	}
	
	TWCR = TW_MT_SEND_STOP;
    9456:	84 e9       	ldi	r24, 0x94	; 148
    9458:	80 93 74 00 	sts	0x0074, r24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
    945c:	80 ea       	ldi	r24, 0xA0	; 160
    945e:	9f e0       	ldi	r25, 0x0F	; 15
    9460:	01 97       	sbiw	r24, 0x01	; 1
    9462:	f1 f7       	brne	.-4      	; 0x9460 <WriteBufI2C+0xa4>
	_delay_ms(1);
	return 1;
    9464:	81 e0       	ldi	r24, 0x01	; 1
    9466:	90 e0       	ldi	r25, 0x00	; 0
}
    9468:	08 95       	ret

0000946a <ReadI2C>:
//###################################################################
uint8_t ReadI2C(void)
{
	uint8_t Result = 0x01;
    946a:	21 e0       	ldi	r18, 0x01	; 1
	TWCR = TW_MR_SEND_START;
    946c:	84 ea       	ldi	r24, 0xA4	; 164
    946e:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    9472:	80 91 74 00 	lds	r24, 0x0074
    9476:	88 23       	and	r24, r24
    9478:	e4 f7       	brge	.-8      	; 0x9472 <ReadI2C+0x8>
	
	if(TWSR & TW_START)
    947a:	80 91 71 00 	lds	r24, 0x0071
    947e:	83 ff       	sbrs	r24, 3
    9480:	1b c0       	rjmp	.+54     	; 0x94b8 <ReadI2C+0x4e>
	{
		Result = 0xf0;
    9482:	20 ef       	ldi	r18, 0xF0	; 240
		TWDR = SLA_R;
    9484:	81 ed       	ldi	r24, 0xD1	; 209
    9486:	80 93 73 00 	sts	0x0073, r24
		TWCR = _BV(TWINT) | _BV(TWEN);
    948a:	84 e8       	ldi	r24, 0x84	; 132
    948c:	80 93 74 00 	sts	0x0074, r24
		while(!(TWCR & _BV(TWINT)));	
    9490:	80 91 74 00 	lds	r24, 0x0074
    9494:	88 23       	and	r24, r24
    9496:	e4 f7       	brge	.-8      	; 0x9490 <ReadI2C+0x26>
		
		if(TWSR & TW_MR_SLA_ACK)
    9498:	80 91 71 00 	lds	r24, 0x0071
    949c:	86 ff       	sbrs	r24, 6
    949e:	0c c0       	rjmp	.+24     	; 0x94b8 <ReadI2C+0x4e>
		{
			TWCR = _BV(TWINT) | _BV(TWEN);
    94a0:	84 e8       	ldi	r24, 0x84	; 132
    94a2:	80 93 74 00 	sts	0x0074, r24
			
			while(!(TWCR & _BV(TWINT)));
    94a6:	80 91 74 00 	lds	r24, 0x0074
    94aa:	88 23       	and	r24, r24
    94ac:	e4 f7       	brge	.-8      	; 0x94a6 <ReadI2C+0x3c>
			
			Result = TWDR;
    94ae:	20 91 73 00 	lds	r18, 0x0073
			TWCR = TW_MR_SEND_STOP;
    94b2:	84 e9       	ldi	r24, 0x94	; 148
    94b4:	80 93 74 00 	sts	0x0074, r24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
    94b8:	80 ea       	ldi	r24, 0xA0	; 160
    94ba:	9f e0       	ldi	r25, 0x0F	; 15
    94bc:	01 97       	sbiw	r24, 0x01	; 1
    94be:	f1 f7       	brne	.-4      	; 0x94bc <ReadI2C+0x52>
			
		}
	}
	_delay_ms(1);
	return Result;
}
    94c0:	82 2f       	mov	r24, r18
    94c2:	99 27       	eor	r25, r25
    94c4:	08 95       	ret

000094c6 <ReadBufI2C>:
//###################################################################
void ReadBufI2C(uint8_t *Buf, uint8_t Len)
{
    94c6:	dc 01       	movw	r26, r24
	uint8_t Poz;
	TWCR = TW_MR_SEND_START;
    94c8:	84 ea       	ldi	r24, 0xA4	; 164
    94ca:	80 93 74 00 	sts	0x0074, r24
	while(!(TWCR & _BV(TWINT)));
    94ce:	80 91 74 00 	lds	r24, 0x0074
    94d2:	88 23       	and	r24, r24
    94d4:	e4 f7       	brge	.-8      	; 0x94ce <ReadBufI2C+0x8>
	
	if(TWSR & TW_START)
    94d6:	80 91 71 00 	lds	r24, 0x0071
    94da:	83 ff       	sbrs	r24, 3
    94dc:	37 c0       	rjmp	.+110    	; 0x954c <ReadBufI2C+0x86>
	{
		TWDR = SLA_R;
    94de:	81 ed       	ldi	r24, 0xD1	; 209
    94e0:	80 93 73 00 	sts	0x0073, r24
		TWCR = _BV(TWINT) | _BV(TWEN);
    94e4:	84 e8       	ldi	r24, 0x84	; 132
    94e6:	80 93 74 00 	sts	0x0074, r24
		while(!(TWCR & _BV(TWINT)));	
    94ea:	80 91 74 00 	lds	r24, 0x0074
    94ee:	88 23       	and	r24, r24
    94f0:	e4 f7       	brge	.-8      	; 0x94ea <ReadBufI2C+0x24>
		
		if(TWSR & TW_MR_SLA_ACK)
    94f2:	80 91 71 00 	lds	r24, 0x0071
    94f6:	86 ff       	sbrs	r24, 6
    94f8:	29 c0       	rjmp	.+82     	; 0x954c <ReadBufI2C+0x86>
		{
			
			for(Poz = 0; Poz < Len - 1; Poz++)
    94fa:	20 e0       	ldi	r18, 0x00	; 0
    94fc:	77 27       	eor	r23, r23
    94fe:	61 50       	subi	r22, 0x01	; 1
    9500:	70 40       	sbci	r23, 0x00	; 0
    9502:	16 16       	cp	r1, r22
    9504:	17 06       	cpc	r1, r23
    9506:	9c f4       	brge	.+38     	; 0x952e <ReadBufI2C+0x68>
    9508:	34 ec       	ldi	r19, 0xC4	; 196
			{	
				TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
    950a:	30 93 74 00 	sts	0x0074, r19
				while(!(TWCR & _BV(TWINT)));
    950e:	80 91 74 00 	lds	r24, 0x0074
    9512:	88 23       	and	r24, r24
    9514:	e4 f7       	brge	.-8      	; 0x950e <ReadBufI2C+0x48>
			
				Buf[Poz] = TWDR;
    9516:	fd 01       	movw	r30, r26
    9518:	e2 0f       	add	r30, r18
    951a:	f1 1d       	adc	r31, r1
    951c:	80 91 73 00 	lds	r24, 0x0073
    9520:	80 83       	st	Z, r24
    9522:	2f 5f       	subi	r18, 0xFF	; 255
    9524:	82 2f       	mov	r24, r18
    9526:	99 27       	eor	r25, r25
    9528:	86 17       	cp	r24, r22
    952a:	97 07       	cpc	r25, r23
    952c:	74 f3       	brlt	.-36     	; 0x950a <ReadBufI2C+0x44>
			}
			
			TWCR = _BV(TWINT) | _BV(TWEN);
    952e:	84 e8       	ldi	r24, 0x84	; 132
    9530:	80 93 74 00 	sts	0x0074, r24
			while(!(TWCR & _BV(TWINT)));
    9534:	80 91 74 00 	lds	r24, 0x0074
    9538:	88 23       	and	r24, r24
    953a:	e4 f7       	brge	.-8      	; 0x9534 <ReadBufI2C+0x6e>
			
			Buf[Poz] = TWDR;
    953c:	a2 0f       	add	r26, r18
    953e:	b1 1d       	adc	r27, r1
    9540:	80 91 73 00 	lds	r24, 0x0073
    9544:	8c 93       	st	X, r24
			TWCR = TW_MR_SEND_STOP;
    9546:	84 e9       	ldi	r24, 0x94	; 148
    9548:	80 93 74 00 	sts	0x0074, r24
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
	else
		__ticks = (uint16_t)__tmp;
    954c:	80 ea       	ldi	r24, 0xA0	; 160
    954e:	9f e0       	ldi	r25, 0x0F	; 15
    9550:	01 97       	sbiw	r24, 0x01	; 1
    9552:	f1 f7       	brne	.-4      	; 0x9550 <ReadBufI2C+0x8a>
    9554:	08 95       	ret

00009556 <RTC_SetValue>:

//I2C handling procedures
void RTC_SetValue(uint8_t Address, uint8_t Value)
{
	WriteI2C(Address, Value);
    9556:	0e 94 91 49 	call	0x9322 <WriteI2C>
    955a:	08 95       	ret

0000955c <RTC_ReadValue>:
}

uint8_t RTC_ReadValue(uint8_t Address)
{
	SetPointer(Address);
    955c:	0e 94 54 49 	call	0x92a8 <SetPointer>
	return ReadI2C();
    9560:	0e 94 35 4a 	call	0x946a <ReadI2C>
}
    9564:	99 27       	eor	r25, r25
    9566:	08 95       	ret

00009568 <BCDtoDEC>:

//Binary-coded-decimal to decimal converting procedure
uint8_t BCDtoDEC(uint8_t BCDValue)
{
    9568:	48 2f       	mov	r20, r24
	return ((BCDValue & 0x0f) + (10 * ((BCDValue >> 4) & 0x0f)));
    956a:	82 95       	swap	r24
    956c:	8f 70       	andi	r24, 0x0F	; 15
    956e:	28 2f       	mov	r18, r24
    9570:	33 27       	eor	r19, r19
    9572:	c9 01       	movw	r24, r18
    9574:	53 e0       	ldi	r21, 0x03	; 3
    9576:	88 0f       	add	r24, r24
    9578:	99 1f       	adc	r25, r25
    957a:	5a 95       	dec	r21
    957c:	e1 f7       	brne	.-8      	; 0x9576 <BCDtoDEC+0xe>
    957e:	82 0f       	add	r24, r18
    9580:	93 1f       	adc	r25, r19
    9582:	82 0f       	add	r24, r18
    9584:	93 1f       	adc	r25, r19
    9586:	4f 70       	andi	r20, 0x0F	; 15
    9588:	48 0f       	add	r20, r24
}
    958a:	84 2f       	mov	r24, r20
    958c:	99 27       	eor	r25, r25
    958e:	08 95       	ret

00009590 <DECtoBCD>:
//Decimal to binary-coded-decimal to converting procedure
uint8_t DECtoBCD(uint8_t DecValue)
{
    9590:	38 2f       	mov	r19, r24
	return ((DecValue % 10) | ((DecValue / 10) << 4));
    9592:	4a e0       	ldi	r20, 0x0A	; 10
    9594:	64 2f       	mov	r22, r20
    9596:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    959a:	29 2f       	mov	r18, r25
    959c:	83 2f       	mov	r24, r19
    959e:	0e 94 db 4a 	call	0x95b6 <__udivmodqi4>
    95a2:	99 27       	eor	r25, r25
    95a4:	64 e0       	ldi	r22, 0x04	; 4
    95a6:	88 0f       	add	r24, r24
    95a8:	99 1f       	adc	r25, r25
    95aa:	6a 95       	dec	r22
    95ac:	e1 f7       	brne	.-8      	; 0x95a6 <DECtoBCD+0x16>
    95ae:	28 2b       	or	r18, r24
}
    95b0:	82 2f       	mov	r24, r18
    95b2:	99 27       	eor	r25, r25
    95b4:	08 95       	ret

000095b6 <__udivmodqi4>:
    95b6:	99 1b       	sub	r25, r25
    95b8:	79 e0       	ldi	r23, 0x09	; 9
    95ba:	04 c0       	rjmp	.+8      	; 0x95c4 <__udivmodqi4_ep>

000095bc <__udivmodqi4_loop>:
    95bc:	99 1f       	adc	r25, r25
    95be:	96 17       	cp	r25, r22
    95c0:	08 f0       	brcs	.+2      	; 0x95c4 <__udivmodqi4_ep>
    95c2:	96 1b       	sub	r25, r22

000095c4 <__udivmodqi4_ep>:
    95c4:	88 1f       	adc	r24, r24
    95c6:	7a 95       	dec	r23
    95c8:	c9 f7       	brne	.-14     	; 0x95bc <__udivmodqi4_loop>
    95ca:	80 95       	com	r24
    95cc:	08 95       	ret

000095ce <__udivmodhi4>:
    95ce:	aa 1b       	sub	r26, r26
    95d0:	bb 1b       	sub	r27, r27
    95d2:	51 e1       	ldi	r21, 0x11	; 17
    95d4:	07 c0       	rjmp	.+14     	; 0x95e4 <__udivmodhi4_ep>

000095d6 <__udivmodhi4_loop>:
    95d6:	aa 1f       	adc	r26, r26
    95d8:	bb 1f       	adc	r27, r27
    95da:	a6 17       	cp	r26, r22
    95dc:	b7 07       	cpc	r27, r23
    95de:	10 f0       	brcs	.+4      	; 0x95e4 <__udivmodhi4_ep>
    95e0:	a6 1b       	sub	r26, r22
    95e2:	b7 0b       	sbc	r27, r23

000095e4 <__udivmodhi4_ep>:
    95e4:	88 1f       	adc	r24, r24
    95e6:	99 1f       	adc	r25, r25
    95e8:	5a 95       	dec	r21
    95ea:	a9 f7       	brne	.-22     	; 0x95d6 <__udivmodhi4_loop>
    95ec:	80 95       	com	r24
    95ee:	90 95       	com	r25
    95f0:	bc 01       	movw	r22, r24
    95f2:	cd 01       	movw	r24, r26
    95f4:	08 95       	ret
